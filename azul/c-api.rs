// WARNING: autogenerated code for azul api version 0.1.0

use core::ffi::c_void;
use azul_core::dom::Dom;
use azul_core::callbacks::LayoutInfo;
use azul_css::Css;
use azul_core::window::WindowCreateOptions;
#[cfg(not(target_arch = "wasm32"))]
use azul_desktop::app::{App, AppConfig};
#[cfg(target_arch = "wasm32")]
use azul_web::app::{App, AppConfig};


// --------- TYPEDEFS

/// The data model
pub type AzDataModelPtr = *mut c_void;

pub type AzLayoutCallbackPtr = fn(&AzDataModelPtr, AzLayoutInfoPtr) -> AzDomPtr;


// --------- CLASSES



#[no_mangle]
#[repr(C)]
pub struct AzLayoutInfoPtr { ptr: *mut c_void }

/// Destructor: Takes ownership of the `LayoutInfo` pointer and deletes it.
#[no_mangle]
pub extern "C" fn az_layout_info_delete(ptr: AzLayoutInfoPtr) {
    let _ = unsafe { Box::<LayoutInfo>::from_raw(ptr.ptr  as *mut LayoutInfo) };
}



#[no_mangle]
#[repr(C)]
pub struct AzDomPtr { ptr: *mut c_void }

#[no_mangle]
pub extern "C" fn az_dom_div() -> AzDomPtr {
    AzDomPtr { ptr: Box::into_raw(Box::new(Dom::<AzDataModelPtr>::div())) as *mut c_void }
}

/// (private): Downcasts the `AzDomPtr` to a `Box<Dom<AzDataModelPtr>>`. Note that this takes ownership of the pointer.

fn az_dom_downcast(ptr: AzDomPtr) -> Box<Dom<AzDataModelPtr>> {
    unsafe { Box::<Dom<AzDataModelPtr>>::from_raw(ptr.ptr  as *mut Dom<AzDataModelPtr>) }
}

/// Destructor: Takes ownership of the `Dom` pointer and deletes it.
#[no_mangle]
pub extern "C" fn az_dom_delete(ptr: AzDomPtr) {
    let _ = unsafe { Box::<Dom<AzDataModelPtr>>::from_raw(ptr.ptr  as *mut Dom<AzDataModelPtr>) };
}



#[no_mangle]
#[repr(C)]
pub struct AzAppConfigPtr { ptr: *mut c_void }

#[no_mangle]
pub extern "C" fn az_app_config_new() -> AzAppConfigPtr {
    AzAppConfigPtr { ptr: Box::into_raw(Box::new(AppConfig::default())) as *mut c_void }
}

/// (private): Downcasts the `AzAppConfigPtr` to a `Box<AppConfig>`. Note that this takes ownership of the pointer.

fn az_app_config_downcast(ptr: AzAppConfigPtr) -> Box<AppConfig> {
    unsafe { Box::<AppConfig>::from_raw(ptr.ptr  as *mut AppConfig) }
}

/// Destructor: Takes ownership of the `AppConfig` pointer and deletes it.
#[no_mangle]
pub extern "C" fn az_app_config_delete(ptr: AzAppConfigPtr) {
    let _ = unsafe { Box::<AppConfig>::from_raw(ptr.ptr  as *mut AppConfig) };
}



#[no_mangle]
#[repr(C)]
pub struct AzCssPtr { ptr: *mut c_void }

#[no_mangle]
pub extern "C" fn az_css_native() -> AzCssPtr {
    AzCssPtr { ptr: Box::into_raw(Box::new(azul_native_style::native())) as *mut c_void }
}

/// (private): Downcasts the `AzCssPtr` to a `Box<Css>`. Note that this takes ownership of the pointer.

fn az_css_downcast(ptr: AzCssPtr) -> Box<Css> {
    unsafe { Box::<Css>::from_raw(ptr.ptr  as *mut Css) }
}

/// Destructor: Takes ownership of the `Css` pointer and deletes it.
#[no_mangle]
pub extern "C" fn az_css_delete(ptr: AzCssPtr) {
    let _ = unsafe { Box::<Css>::from_raw(ptr.ptr  as *mut Css) };
}



#[no_mangle]
#[repr(C)]
pub struct AzWindowCreateOptionsPtr { ptr: *mut c_void }

#[no_mangle]
pub extern "C" fn az_window_create_options_new(css: AzCssPtr) -> AzWindowCreateOptionsPtr {
    AzWindowCreateOptionsPtr { ptr: Box::into_raw(Box::new(WindowCreateOptions::<AzDataModelPtr>::new(*az_css_downcast(css)))) as *mut c_void }
}

/// (private): Downcasts the `AzWindowCreateOptionsPtr` to a `Box<WindowCreateOptions<AzDataModelPtr>>`. Note that this takes ownership of the pointer.

fn az_window_create_options_downcast(ptr: AzWindowCreateOptionsPtr) -> Box<WindowCreateOptions<AzDataModelPtr>> {
    unsafe { Box::<WindowCreateOptions<AzDataModelPtr>>::from_raw(ptr.ptr  as *mut WindowCreateOptions<AzDataModelPtr>) }
}

/// Destructor: Takes ownership of the `WindowCreateOptions` pointer and deletes it.
#[no_mangle]
pub extern "C" fn az_window_create_options_delete(ptr: AzWindowCreateOptionsPtr) {
    let _ = unsafe { Box::<WindowCreateOptions<AzDataModelPtr>>::from_raw(ptr.ptr  as *mut WindowCreateOptions<AzDataModelPtr>) };
}



#[no_mangle]
#[repr(C)]
pub struct AzAppPtr { ptr: *mut c_void }

/// Creates a new App instance.
#[no_mangle]
pub extern "C" fn az_app_new(data: AzDataModelPtr, config: AzAppConfigPtr, callback: AzLayoutCallbackPtr) -> AzAppPtr {
    AzAppPtr { ptr: Box::into_raw(Box::new(App::new_from_callback(data, *az_app_config_downcast(config), callback))) as *mut c_void }
}

#[no_mangle]
pub extern "C" fn az_app_run(app: AzAppPtr, window: AzWindowCreateOptionsPtr) {
    az_app_downcast(app).run(*az_window_create_options_downcast(window))
}

/// (private): Downcasts the `AzAppPtr` to a `Box<App<AzDataModelPtr>>`. Note that this takes ownership of the pointer.

fn az_app_downcast(ptr: AzAppPtr) -> Box<App<AzDataModelPtr>> {
    unsafe { Box::<App<AzDataModelPtr>>::from_raw(ptr.ptr  as *mut App<AzDataModelPtr>) }
}

/// Destructor: Takes ownership of the `App` pointer and deletes it.
#[no_mangle]
pub extern "C" fn az_app_delete(ptr: AzAppPtr) {
    let _ = unsafe { Box::<App<AzDataModelPtr>>::from_raw(ptr.ptr  as *mut App<AzDataModelPtr>) };
}


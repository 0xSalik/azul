import json
import re

api_file_path = "./public.api.json"
output_c_api_path = "./c-api.rs"
output_rust_api_path = "./c-api.rs"

prefix = "Az"
fn_prefix = "az_"
postfix = "Ptr"

def read_file(path):
    apiFile=open(path, 'r')
    apiFileContents = apiFile.read()
    u = apiFileContents.decode('utf-8-sig')
    apiFileContents = u.encode('utf-8')
    apiFile.close()
    apiData = json.loads(apiFileContents,'utf-8')
    return apiData

def write_file(string, path):
    text_file = open(path, "w+")
    text_file.write(string)
    text_file.close()

def generate_c_api_code(apiData):
    code = "// WARNING: autogenerated code for azul api version " + str(apiData.keys()[0]) + "\r\n"
    apiData = apiData.values()[0]
    code += "\r\n"
    code += apiData["rust_includes"]
    code += "\r\n\r\n\r\n"

    code += "// --------- TYPEDEFS\r\n\r\n"

    for td in apiData["typedefs"]:
        name = td["name"]
        item_type = td["type"]
        if "doc" in td.keys():
            code += "/// " + td["doc"] + "\r\n"
        code += "pub type " + prefix + name + postfix + " = " + item_type + ";"
        code += "\r\n\r\n"

    code += "\r\n"

    code += "// --------- CLASSES\r\n\r\n"

    for c in apiData["classes"]:
        code += "\r\n\r\n"

        class_name = c["name"]
        rust_class_name = class_name

        if "rust_class_name" in c.keys():
            rust_class_name = c["rust_class_name"]

        class_ptr_name = prefix + class_name + postfix;

        if "doc" in c.keys():
            code += "/// " + c["doc"] + "\r\n"
        code += "#[no_mangle]\r\n#[repr(C)]\r\npub struct " + class_ptr_name + " { ptr: *mut c_void }\r\n\r\n"

        if "constructors" in c.keys():
            for const in c["constructors"]:
                if "doc" in const.keys():
                    code += "/// " + const["doc"] + "\r\n"

                fn_args = ""

                if "args" in const.keys():
                    for arg in const["args"]:
                        fn_args += arg["name"] + ": " + prefix + arg["type"] + postfix + ", "
                    fn_args = fn_args[:-2]

                code += "#[no_mangle]\r\npub extern \"C\" fn " + fn_prefix + to_snake_case(class_name) + "_" + const["fn_name"] + "(" + fn_args + ") -> " + class_ptr_name + " {\r\n"
                code += "    " + class_ptr_name + " { ptr: Box::into_raw(Box::new(" + const["fn_body"] + ")) as *mut c_void }"
                code += "\r\n"
                code += "}\r\n\r\n"

        if "functions" in c.keys():
            for f in c["functions"]:
                if "doc" in f.keys():
                    code += "/// " + f["doc"] + "\r\n"

                fn_args = class_name.lower() + ": " + class_ptr_name + ", "

                if "args" in f.keys():
                    for arg in f["args"]:
                        fn_args += arg["name"] + ": " + prefix + arg["type"] + postfix + ", "
                    fn_args = fn_args[:-2]

                returns = ""
                if "returns" in f.keys():
                    returns = " -> " + f["returns"]

                code += "#[no_mangle]\r\npub extern \"C\" fn " + fn_prefix + to_snake_case(class_name) + "_" + f["fn_name"] + "(" + fn_args + ")" + returns + " {\r\n"
                code += "    " + f["fn_body"]
                code += "\r\n"
                code += "}\r\n\r\n"

        do_downcast = True

        if "downcast" in c.keys():
            do_downcast = c["downcast"]

        if do_downcast:
            code += "/// (private): Downcasts the `" + class_ptr_name + "` to a `Box<" + rust_class_name + ">`. Note that this takes ownership of the pointer.\r\n"
            code += "\r\nfn " + fn_prefix + to_snake_case(class_name) + "_downcast(ptr: " + class_ptr_name + ") -> Box<" + rust_class_name + "> {\r\n"
            code += "    unsafe { Box::<" + rust_class_name + ">::from_raw(ptr.ptr  as *mut " + rust_class_name + ") }"
            code += "\r\n"
            code += "}\r\n\r\n"

        code += "/// Destructor: Takes ownership of the `" + class_name + "` pointer and deletes it.\r\n"
        code += "#[no_mangle]\r\npub extern \"C\" fn " + fn_prefix + to_snake_case(class_name) + "_delete(ptr: " + class_ptr_name + ") {\r\n"
        code += "    let _ = unsafe { Box::<" + rust_class_name + ">::from_raw(ptr.ptr  as *mut " + rust_class_name + ") };"
        code += "\r\n"
        code += "}\r\n\r\n"

    return code

def to_snake_case(name):
    s1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', name)
    return re.sub('([a-z0-9])([A-Z])', r'\1_\2', s1).lower()

def main():
    apiData = read_file(api_file_path)
    cApiCode = generate_c_api_code(apiData["apis"][-1])
    write_file(cApiCode, output_c_api_path)

if __name__ == "__main__":
    main()
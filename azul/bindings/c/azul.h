// WARNING: autogenerated code for azul api version 0.1.0

// Copyright 2017 Maps4Print Einzelunternehmung
// 
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
// 
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


#ifndef AZUL_GUI_H
#define AZUL_GUI_H

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>


// The data model
typedef void *AzDataModelPtr;
//The layout() callback fn
typedef AzDomPtr (*AzLayoutCallbackPtr)(const AzDataModelPtr*, const AzLayoutInfoPtr*);


// Pointer to rust-allocated `LayoutInfo` struct
typedef struct AzLayoutInfoPtr { void *ptr; } AzLayoutInfoPtr
// Destructor: Takes ownership of the `LayoutInfo` pointer and deletes it.
void az_layout_info_delete(AzLayoutInfoPtr ptr);

// Pointer to rust-allocated `Dom` struct
typedef struct AzDomPtr { void *ptr; } AzDomPtr
// Creates a new `Dom` instance whose memory is owned by the rust allocator
// Equivalent to the Rust `Dom::div()` constructor.
AzDomPtr az_dom_div();
// Destructor: Takes ownership of the `Dom` pointer and deletes it.
void az_dom_delete(AzDomPtr ptr);

// Pointer to rust-allocated `AppConfig` struct
typedef struct AzAppConfigPtr { void *ptr; } AzAppConfigPtr
// Creates a new `AppConfig` instance whose memory is owned by the rust allocator
// Equivalent to the Rust `AppConfig::new()` constructor.
AzAppConfigPtr az_app_config_new();
// Destructor: Takes ownership of the `AppConfig` pointer and deletes it.
void az_app_config_delete(AzAppConfigPtr ptr);

// Pointer to rust-allocated `Css` struct
typedef struct AzCssPtr { void *ptr; } AzCssPtr
// Creates a new `Css` instance whose memory is owned by the rust allocator
// Equivalent to the Rust `Css::native()` constructor.
AzCssPtr az_css_native();
// Destructor: Takes ownership of the `Css` pointer and deletes it.
void az_css_delete(AzCssPtr ptr);

// Pointer to rust-allocated `WindowCreateOptions` struct
typedef struct AzWindowCreateOptionsPtr { void *ptr; } AzWindowCreateOptionsPtr
// Creates a new `WindowCreateOptions` instance whose memory is owned by the rust allocator
// Equivalent to the Rust `WindowCreateOptions::new()` constructor.
AzWindowCreateOptionsPtr az_window_create_options_new(AzCssPtrcss );
// Destructor: Takes ownership of the `WindowCreateOptions` pointer and deletes it.
void az_window_create_options_delete(AzWindowCreateOptionsPtr ptr);

// Pointer to rust-allocated `App` struct
typedef struct AzAppPtr { void *ptr; } AzAppPtr
// Creates a new App instance.
AzAppPtr az_app_new(AzDataModelPtrdata , AzAppConfigPtrconfig , AzLayoutCallbackPtrcallback );
// Equivalent to the Rust `App::run()` function.
AzAppPtr az_app_run(AzWindowCreateOptionsPtrwindow );
// Destructor: Takes ownership of the `App` pointer and deletes it.
void az_app_delete(AzAppPtr ptr);


#endif /* AZUL_GUI_H */

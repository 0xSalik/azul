#![crate_type = "cdylib"]
#![deny(improper_ctypes_definitions)]
// WARNING: autogenerated code for azul api version 0.1.0



        extern crate azul_core;

        #[cfg(target_arch = "wasm32")]
        extern crate azul_web as azul_impl;
        #[cfg(not(target_arch = "wasm32"))]
        extern crate azul_desktop as azul_impl;

        use core::ffi::c_void;
        use azul_impl::{
            css::{self, *},
            callbacks::RefAny,
            window::{WindowCreateOptions, WindowState},
            resources::{RawImage, AppConfig, FontId, ImageId},
            app::App,
            task::{Timer, TimerId},
            gl::TextureFlags,
        };
    
/// Main application class
pub type AzAppTT = azul_impl::app::AzAppPtr;
pub use AzAppTT as AzApp;
/// Creates a new App instance from the given `AppConfig`
#[no_mangle] pub extern "C" fn az_app_new(data: AzRefAny, config: AzAppConfig) -> AzApp { azul_impl::app::AzAppPtr::new(App::new(data, config)) }
/// Spawn a new window on the screen when the app is run.
#[no_mangle] pub extern "C" fn az_app_add_window(app: &mut AzApp, window: AzWindowCreateOptions) { app.downcast_modify(|a| a.add_window(window)) }
/// Returns a list of monitors - useful for setting the monitor that a window should spawn on.
#[no_mangle] pub extern "C" fn az_app_get_monitors(app: &AzApp) -> AzMonitorVec { app.get().get_monitors() }
/// Runs the application. Due to platform restrictions (specifically `WinMain` on Windows), this function never returns.
#[no_mangle] pub extern "C" fn az_app_run(app: AzApp, window: AzWindowCreateOptions) { app.get().run(window) }
/// Destructor: Takes ownership of the `App` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_app_delete(object: &mut AzApp) {  unsafe { core::ptr::drop_in_place(object); } }

/// Configuration for optional features, such as whether to enable logging or panic hooks
pub type AzAppConfigTT = azul_impl::resources::AppConfig;
pub use AzAppConfigTT as AzAppConfig;
/// Creates a new AppConfig with default values
#[no_mangle] pub extern "C" fn az_app_config_default() -> AzAppConfig { AppConfig::default() }

/// Configuration to set which messages should be logged.
pub type AzAppLogLevelTT = azul_impl::resources::AppLogLevel;
pub use AzAppLogLevelTT as AzAppLogLevel;

/// Options on how to initially create the window
pub type AzWindowCreateOptionsTT = azul_impl::window::WindowCreateOptions;
pub use AzWindowCreateOptionsTT as AzWindowCreateOptions;
/// Creates a new `WindowCreateOptions` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `WindowCreateOptions::new()` constructor.
#[no_mangle] pub extern "C" fn az_window_create_options_new(layout_callback: AzLayoutCallbackType) -> AzWindowCreateOptions { WindowCreateOptions::new(layout_callback) }
/// Creates a new `WindowCreateOptions` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `WindowCreateOptions::default()` constructor.
#[no_mangle] pub extern "C" fn az_window_create_options_default() -> AzWindowCreateOptions { WindowCreateOptions::default() }

/// Force a specific renderer: note that azul will **crash** on startup if the `RendererOptions` are not satisfied.
pub type AzRendererOptionsTT = azul_impl::window::RendererOptions;
pub use AzRendererOptionsTT as AzRendererOptions;

/// Whether the renderer has VSync enabled
pub type AzVsyncTT = azul_impl::window::Vsync;
pub use AzVsyncTT as AzVsync;

/// Does the renderer render in SRGB color space? By default, azul tries to set it to `Enabled` and falls back to `Disabled` if the OpenGL context can't be initialized properly
pub type AzSrgbTT = azul_impl::window::Srgb;
pub use AzSrgbTT as AzSrgb;

/// Does the renderer render using hardware acceleration? By default, azul tries to set it to `Enabled` and falls back to `Disabled` if the OpenGL context can't be initialized properly
pub type AzHwAccelerationTT = azul_impl::window::HwAcceleration;
pub use AzHwAccelerationTT as AzHwAcceleration;

/// Offset in physical pixels (integer units)
pub type AzLayoutPointTT = azul_impl::css::LayoutPoint;
pub use AzLayoutPointTT as AzLayoutPoint;

/// Size in physical pixels (integer units)
pub type AzLayoutSizeTT = azul_impl::css::LayoutSize;
pub use AzLayoutSizeTT as AzLayoutSize;

/// Represents a rectangle in physical pixels (integer units)
pub type AzLayoutRectTT = azul_impl::css::LayoutRect;
pub use AzLayoutRectTT as AzLayoutRect;

/// Raw platform handle, for integration in / with other toolkits and custom non-azul window extensions
pub type AzRawWindowHandleTT = azul_impl::window::RawWindowHandle;
pub use AzRawWindowHandleTT as AzRawWindowHandle;

/// Re-export of rust-allocated (stack based) `IOSHandle` struct
pub type AzIOSHandleTT = azul_impl::window::IOSHandle;
pub use AzIOSHandleTT as AzIOSHandle;

/// Re-export of rust-allocated (stack based) `MacOSHandle` struct
pub type AzMacOSHandleTT = azul_impl::window::MacOSHandle;
pub use AzMacOSHandleTT as AzMacOSHandle;

/// Re-export of rust-allocated (stack based) `XlibHandle` struct
pub type AzXlibHandleTT = azul_impl::window::XlibHandle;
pub use AzXlibHandleTT as AzXlibHandle;

/// Re-export of rust-allocated (stack based) `XcbHandle` struct
pub type AzXcbHandleTT = azul_impl::window::XcbHandle;
pub use AzXcbHandleTT as AzXcbHandle;

/// Re-export of rust-allocated (stack based) `WaylandHandle` struct
pub type AzWaylandHandleTT = azul_impl::window::WaylandHandle;
pub use AzWaylandHandleTT as AzWaylandHandle;

/// Re-export of rust-allocated (stack based) `WindowsHandle` struct
pub type AzWindowsHandleTT = azul_impl::window::WindowsHandle;
pub use AzWindowsHandleTT as AzWindowsHandle;

/// Re-export of rust-allocated (stack based) `WebHandle` struct
pub type AzWebHandleTT = azul_impl::window::WebHandle;
pub use AzWebHandleTT as AzWebHandle;

/// Re-export of rust-allocated (stack based) `AndroidHandle` struct
pub type AzAndroidHandleTT = azul_impl::window::AndroidHandle;
pub use AzAndroidHandleTT as AzAndroidHandle;

/// Application taskbar icon, 256x256x4 bytes in size
pub type AzTaskBarIconTT = azul_impl::window::TaskBarIcon;
pub use AzTaskBarIconTT as AzTaskBarIcon;

/// Re-export of rust-allocated (stack based) `XWindowType` struct
pub type AzXWindowTypeTT = azul_impl::window::XWindowType;
pub use AzXWindowTypeTT as AzXWindowType;

/// Same as `LayoutPoint`, but uses `i32` instead of `isize`
pub type AzPhysicalPositionI32TT = azul_impl::window::PhysicalPosition<i32>;
pub use AzPhysicalPositionI32TT as AzPhysicalPositionI32;

/// Same as `LayoutPoint`, but uses `u32` instead of `isize`
pub type AzPhysicalSizeU32TT = azul_impl::window::PhysicalSize<u32>;
pub use AzPhysicalSizeU32TT as AzPhysicalSizeU32;

/// Logical rectangle area (can differ based on HiDPI settings). Usually this is what you'd want for hit-testing and positioning elements.
pub type AzLogicalRectTT = azul_impl::window::LogicalRect;
pub use AzLogicalRectTT as AzLogicalRect;

/// Logical position (can differ based on HiDPI settings). Usually this is what you'd want for hit-testing and positioning elements.
pub type AzLogicalPositionTT = azul_impl::window::LogicalPosition;
pub use AzLogicalPositionTT as AzLogicalPosition;

/// Unique hash of a window icon, so that azul does not have to compare the actual bytes to see wether the window icon has changed.
pub type AzIconKeyTT = azul_impl::window::IconKey;
pub use AzIconKeyTT as AzIconKey;

/// Small (16x16x4) window icon, usually shown in the window titlebar
pub type AzSmallWindowIconBytesTT = azul_impl::window::SmallWindowIconBytes;
pub use AzSmallWindowIconBytesTT as AzSmallWindowIconBytes;

/// Large (32x32x4) window icon, usually used on high-resolution displays (instead of `SmallWindowIcon`)
pub type AzLargeWindowIconBytesTT = azul_impl::window::LargeWindowIconBytes;
pub use AzLargeWindowIconBytesTT as AzLargeWindowIconBytes;

/// Window "favicon", usually shown in the top left of the window on Windows
pub type AzWindowIconTT = azul_impl::window::WindowIcon;
pub use AzWindowIconTT as AzWindowIcon;

/// Symbolic name for a keyboard key, does **not** take the keyboard locale into account
pub type AzVirtualKeyCodeTT = azul_impl::window::VirtualKeyCode;
pub use AzVirtualKeyCodeTT as AzVirtualKeyCode;

/// Symbolic accelerator key (ctrl, alt, shift)
pub type AzAcceleratorKeyTT = azul_impl::window::AcceleratorKey;
pub use AzAcceleratorKeyTT as AzAcceleratorKey;

/// Minimum / maximum / current size of the window in logical dimensions
pub type AzWindowSizeTT = azul_impl::window::WindowSize;
pub use AzWindowSizeTT as AzWindowSize;

/// Boolean flags relating to the current window state
pub type AzWindowFlagsTT = azul_impl::window::WindowFlags;
pub use AzWindowFlagsTT as AzWindowFlags;

/// Debugging information, will be rendered as an overlay on top of the UI
pub type AzDebugStateTT = azul_impl::window::DebugState;
pub use AzDebugStateTT as AzDebugState;

/// Current keyboard state, stores what keys / characters have been pressed
pub type AzKeyboardStateTT = azul_impl::window::KeyboardState;
pub use AzKeyboardStateTT as AzKeyboardState;

/// Current icon of the mouse cursor
pub type AzMouseCursorTypeTT = azul_impl::window::MouseCursorType;
pub use AzMouseCursorTypeTT as AzMouseCursorType;

/// Current position of the mouse cursor, relative to the window. Set to `Uninitialized` on startup (gets initialized on the first frame).
pub type AzCursorPositionTT = azul_impl::window::CursorPosition;
pub use AzCursorPositionTT as AzCursorPosition;

/// Current mouse / cursor state
pub type AzMouseStateTT = azul_impl::window::MouseState;
pub use AzMouseStateTT as AzMouseState;

/// Platform-specific window configuration, i.e. WM options that are not cross-platform
pub type AzPlatformSpecificOptionsTT = azul_impl::window::PlatformSpecificOptions;
pub use AzPlatformSpecificOptionsTT as AzPlatformSpecificOptions;

/// Window configuration specific to Win32
pub type AzWindowsWindowOptionsTT = azul_impl::window::WindowsWindowOptions;
pub use AzWindowsWindowOptionsTT as AzWindowsWindowOptions;

/// CSD theme of the window title / button controls
pub type AzWaylandThemeTT = azul_impl::window::WaylandTheme;
pub use AzWaylandThemeTT as AzWaylandTheme;

/// Renderer type of the current windows OpenGL context
pub type AzRendererTypeTT = azul_impl::window::RendererType;
pub use AzRendererTypeTT as AzRendererType;

/// Key-value pair, used for setting WM hints values specific to GNOME
pub type AzStringPairTT = azul_impl::window::AzStringPair;
pub use AzStringPairTT as AzStringPair;

/// Re-export of rust-allocated (stack based) `LinuxWindowOptions` struct
pub type AzLinuxWindowOptionsTT = azul_impl::window::LinuxWindowOptions;
pub use AzLinuxWindowOptionsTT as AzLinuxWindowOptions;

/// Re-export of rust-allocated (stack based) `MacWindowOptions` struct
pub type AzMacWindowOptionsTT = azul_impl::window::MacWindowOptions;
pub use AzMacWindowOptionsTT as AzMacWindowOptions;

/// Re-export of rust-allocated (stack based) `WasmWindowOptions` struct
pub type AzWasmWindowOptionsTT = azul_impl::window::WasmWindowOptions;
pub use AzWasmWindowOptionsTT as AzWasmWindowOptions;

/// Re-export of rust-allocated (stack based) `FullScreenMode` struct
pub type AzFullScreenModeTT = azul_impl::window::FullScreenMode;
pub use AzFullScreenModeTT as AzFullScreenMode;

/// Re-export of rust-allocated (stack based) `WindowTheme` struct
pub type AzWindowThemeTT = azul_impl::window::WindowTheme;
pub use AzWindowThemeTT as AzWindowTheme;

/// Re-export of rust-allocated (stack based) `WindowPosition` struct
pub type AzWindowPositionTT = azul_impl::window::WindowPosition;
pub use AzWindowPositionTT as AzWindowPosition;

/// Re-export of rust-allocated (stack based) `ImePosition` struct
pub type AzImePositionTT = azul_impl::window::ImePosition;
pub use AzImePositionTT as AzImePosition;

/// Re-export of rust-allocated (stack based) `TouchState` struct
pub type AzTouchStateTT = azul_impl::window::TouchState;
pub use AzTouchStateTT as AzTouchState;

/// Re-export of rust-allocated (stack based) `MonitorHandle` struct
pub type AzMonitorHandleTT = azul_impl::window::Monitor;
pub use AzMonitorHandleTT as AzMonitorHandle;
/// Destructor: Takes ownership of the `MonitorHandle` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_monitor_handle_delete(object: &mut AzMonitorHandle) {  unsafe { core::ptr::drop_in_place(object); } }
/// Clones the object
#[no_mangle] pub extern "C" fn az_monitor_handle_deep_copy(object: &AzMonitorHandle) -> AzMonitorHandle { object.clone() }

/// Re-export of rust-allocated (stack based) `Monitor` struct
pub type AzMonitorTT = azul_impl::window::Monitor;
pub use AzMonitorTT as AzMonitor;

/// Re-export of rust-allocated (stack based) `VideoMode` struct
pub type AzVideoModeTT = azul_impl::window::VideoMode;
pub use AzVideoModeTT as AzVideoMode;

/// Re-export of rust-allocated (stack based) `WindowState` struct
pub type AzWindowStateTT = azul_impl::window::WindowState;
pub use AzWindowStateTT as AzWindowState;
/// Creates a new `WindowState` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `WindowState::new()` constructor.
#[no_mangle] pub extern "C" fn az_window_state_new(layout_callback: AzLayoutCallbackType) -> AzWindowState { WindowState::new(layout_callback) }
/// Creates a new `WindowState` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `WindowState::default()` constructor.
#[no_mangle] pub extern "C" fn az_window_state_default() -> AzWindowState { WindowState::default() }

/// Re-export of rust-allocated (stack based) `LogicalSize` struct
pub type AzLogicalSizeTT = azul_impl::window::LogicalSize;
pub use AzLogicalSizeTT as AzLogicalSize;

/// Re-export of rust-allocated (stack based) `LayoutCallback` struct
pub type AzLayoutCallbackTT = azul_impl::callbacks::LayoutCallback;
pub use AzLayoutCallbackTT as AzLayoutCallback;

pub type AzLayoutCallbackType = extern "C" fn(&mut AzRefAny, AzLayoutInfo) -> AzStyledDom;
/// Re-export of rust-allocated (stack based) `Callback` struct
pub type AzCallbackTT = azul_impl::callbacks::Callback;
pub use AzCallbackTT as AzCallback;

/// Re-export of rust-allocated (stack based) `NodeId` struct
pub type AzNodeIdTT = azul_impl::styled_dom::AzNodeId;
pub use AzNodeIdTT as AzNodeId;

/// Re-export of rust-allocated (stack based) `DomId` struct
pub type AzDomIdTT = azul_impl::styled_dom::DomId;
pub use AzDomIdTT as AzDomId;

/// Re-export of rust-allocated (stack based) `DomNodeId` struct
pub type AzDomNodeIdTT = azul_impl::callbacks::DomNodeId;
pub use AzDomNodeIdTT as AzDomNodeId;

/// Re-export of rust-allocated (stack based) `HidpiAdjustedBounds` struct
pub type AzHidpiAdjustedBoundsTT = azul_impl::callbacks::HidpiAdjustedBounds;
pub use AzHidpiAdjustedBoundsTT as AzHidpiAdjustedBounds;
/// Returns the size of the bounds in logical units
#[no_mangle] pub extern "C" fn az_hidpi_adjusted_bounds_get_logical_size(hidpiadjustedbounds: &AzHidpiAdjustedBounds) -> AzLogicalSize { hidpiadjustedbounds.get_logical_size() }
/// Returns the size of the bounds in physical units
#[no_mangle] pub extern "C" fn az_hidpi_adjusted_bounds_get_physical_size(hidpiadjustedbounds: &AzHidpiAdjustedBounds) -> AzPhysicalSizeU32 { hidpiadjustedbounds.get_physical_size() }
/// Returns the hidpi factor of the bounds
#[no_mangle] pub extern "C" fn az_hidpi_adjusted_bounds_get_hidpi_factor(hidpiadjustedbounds: &AzHidpiAdjustedBounds) -> f32 { hidpiadjustedbounds.get_hidpi_factor() }

/// Defines the focus target for the next frame
pub type AzFocusTargetTT = azul_impl::callbacks::FocusTarget;
pub use AzFocusTargetTT as AzFocusTarget;

/// Re-export of rust-allocated (stack based) `FocusTargetPath` struct
pub type AzFocusTargetPathTT = azul_impl::callbacks::FocusTargetPath;
pub use AzFocusTargetPathTT as AzFocusTargetPath;

pub type AzCallbackType = extern "C" fn(&mut AzRefAny, AzCallbackInfo) -> AzUpdateScreen;
/// Re-export of rust-allocated (stack based) `CallbackInfo` struct
pub type AzCallbackInfoTT = azul_impl::callbacks::CallbackInfo;
pub use AzCallbackInfoTT as AzCallbackInfo;
/// Returns the `DomNodeId` of the element that the callback was attached to.
#[no_mangle] pub extern "C" fn az_callback_info_get_hit_node(callbackinfo: &AzCallbackInfo) -> AzDomNodeId { callbackinfo.get_hit_node() }
/// Returns the `LayoutPoint` of the cursor in the viewport (relative to the origin of the `Dom`). Set to `None` if the cursor is not in the current window.
#[no_mangle] pub extern "C" fn az_callback_info_get_cursor_relative_to_viewport(callbackinfo: &AzCallbackInfo) -> AzOptionLayoutPoint { callbackinfo.get_cursor_relative_to_viewport() }
/// Returns the `LayoutPoint` of the cursor in the viewport (relative to the origin of the `Dom`). Set to `None` if the cursor is not hovering over the current node.
#[no_mangle] pub extern "C" fn az_callback_info_get_cursor_relative_to_node(callbackinfo: &AzCallbackInfo) -> AzOptionLayoutPoint { callbackinfo.get_cursor_relative_to_node() }
/// Returns the parent `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid NodeId.
#[no_mangle] pub extern "C" fn az_callback_info_get_parent(callbackinfo: &mut AzCallbackInfo, node_id: AzDomNodeId) -> AzOptionDomNodeId { callbackinfo.get_parent(node_id).into() }
/// Returns the previous siblings `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid NodeId.
#[no_mangle] pub extern "C" fn az_callback_info_get_previous_sibling(callbackinfo: &mut AzCallbackInfo, node_id: AzDomNodeId) -> AzOptionDomNodeId { callbackinfo.get_previous_sibling(node_id).into() }
/// Returns the next siblings `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid NodeId.
#[no_mangle] pub extern "C" fn az_callback_info_get_next_sibling(callbackinfo: &mut AzCallbackInfo, node_id: AzDomNodeId) -> AzOptionDomNodeId { callbackinfo.get_next_sibling(node_id).into() }
/// Returns the next siblings `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid NodeId.
#[no_mangle] pub extern "C" fn az_callback_info_get_first_child(callbackinfo: &mut AzCallbackInfo, node_id: AzDomNodeId) -> AzOptionDomNodeId { callbackinfo.get_first_child(node_id).into() }
/// Returns the next siblings `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid NodeId.
#[no_mangle] pub extern "C" fn az_callback_info_get_last_child(callbackinfo: &mut AzCallbackInfo, node_id: AzDomNodeId) -> AzOptionDomNodeId { callbackinfo.get_last_child(node_id).into() }
/// Returns a copy of the current windows `WindowState`.
#[no_mangle] pub extern "C" fn az_callback_info_get_window_state(callbackinfo: &AzCallbackInfo) -> AzWindowState { callbackinfo.get_window_state() }
/// Returns a copy of the internal `KeyboardState`. Same as `self.get_window_state().keyboard_state`
#[no_mangle] pub extern "C" fn az_callback_info_get_keyboard_state(callbackinfo: &AzCallbackInfo) -> AzKeyboardState { callbackinfo.get_keyboard_state() }
/// Returns a copy of the internal `MouseState`. Same as `self.get_window_state().mouse_state`
#[no_mangle] pub extern "C" fn az_callback_info_get_mouse_state(callbackinfo: &AzCallbackInfo) -> AzMouseState { callbackinfo.get_mouse_state() }
/// Returns a copy of the current windows `RawWindowHandle`.
#[no_mangle] pub extern "C" fn az_callback_info_get_current_window_handle(callbackinfo: &AzCallbackInfo) -> AzRawWindowHandle { callbackinfo.get_current_window_handle() }
/// Returns a **reference-counted copy** of the current windows `GlContextPtr`. You can use this to render OpenGL textures.
#[no_mangle] pub extern "C" fn az_callback_info_get_gl_context(callbackinfo: &AzCallbackInfo) -> AzOptionGlContextPtr { callbackinfo.get_gl_context() }
/// Sets the new `WindowState` for the next frame. The window is updated after all callbacks are run.
#[no_mangle] pub extern "C" fn az_callback_info_set_window_state(callbackinfo: &mut AzCallbackInfo, new_state: AzWindowState) { callbackinfo.set_window_state(new_state); }
/// Sets the new `FocusTarget` for the next frame. Note that this will emit a `On::FocusLost` and `On::FocusReceived` event, if the focused node has changed.
#[no_mangle] pub extern "C" fn az_callback_info_set_focus(callbackinfo: &mut AzCallbackInfo, target: AzFocusTarget) { callbackinfo.set_focus(target); }
/// Sets a `CssProperty` on a given ndoe to its new value. If this property change affects the layout, this will automatically trigger a relayout and redraw of the screen.
#[no_mangle] pub extern "C" fn az_callback_info_set_css_property(callbackinfo: &mut AzCallbackInfo, node_id: AzDomNodeId, new_property: AzCssProperty) { callbackinfo.set_css_property(node_id, new_property);  }
/// Stops the propagation of the current callback event type to the parent. Events are bubbled from the inside out (children first, then parents), this event stops the propagation of the event to the parent.
#[no_mangle] pub extern "C" fn az_callback_info_stop_propagation(callbackinfo: &mut AzCallbackInfo) { callbackinfo.stop_propagation(); }
/// Spawns a new window with the given `WindowCreateOptions`.
#[no_mangle] pub extern "C" fn az_callback_info_create_window(callbackinfo: &mut AzCallbackInfo, new_window: AzWindowCreateOptions) { callbackinfo.create_window(new_window); }
/// Starts a new `Thread` to the runtime. See the documentation for `Thread` for more information.
#[no_mangle] pub extern "C" fn az_callback_info_start_thread(callbackinfo: &mut AzCallbackInfo, id: AzThreadId, thread_initialize_data: AzRefAny, writeback_data: AzRefAny, callback: AzThreadCallbackType) { callbackinfo.start_thread(id, thread_initialize_data, writeback_data, callback); }
/// Adds a new `Timer` to the runtime. See the documentation for `Timer` for more information.
#[no_mangle] pub extern "C" fn az_callback_info_start_timer(callbackinfo: &mut AzCallbackInfo, id: AzTimerId, timer: AzTimer) { callbackinfo.start_timer(id, timer); }

/// Specifies if the screen should be updated after the callback function has returned
pub type AzUpdateScreenTT = azul_impl::callbacks::UpdateScreen;
pub use AzUpdateScreenTT as AzUpdateScreen;

/// Re-export of rust-allocated (stack based) `IFrameCallback` struct
pub type AzIFrameCallbackTT = azul_impl::callbacks::IFrameCallback;
pub use AzIFrameCallbackTT as AzIFrameCallback;

pub type AzIFrameCallbackType = extern "C" fn(&mut AzRefAny, AzIFrameCallbackInfo) -> AzIFrameCallbackReturn;
/// Re-export of rust-allocated (stack based) `IFrameCallbackInfo` struct
pub type AzIFrameCallbackInfoTT = azul_impl::callbacks::IFrameCallbackInfo;
pub use AzIFrameCallbackInfoTT as AzIFrameCallbackInfo;
/// Returns a copy of the internal `HidpiAdjustedBounds`
#[no_mangle] pub extern "C" fn az_i_frame_callback_info_get_bounds(iframecallbackinfo: &AzIFrameCallbackInfo) -> AzHidpiAdjustedBounds { iframecallbackinfo.get_bounds() }

/// Re-export of rust-allocated (stack based) `IFrameCallbackReturn` struct
pub type AzIFrameCallbackReturnTT = azul_impl::callbacks::IFrameCallbackReturn;
pub use AzIFrameCallbackReturnTT as AzIFrameCallbackReturn;

/// Re-export of rust-allocated (stack based) `GlCallback` struct
pub type AzGlCallbackTT = azul_impl::callbacks::GlCallback;
pub use AzGlCallbackTT as AzGlCallback;

pub type AzGlCallbackType = extern "C" fn(&mut AzRefAny, AzGlCallbackInfo) -> AzGlCallbackReturn;
/// Re-export of rust-allocated (stack based) `GlCallbackInfo` struct
pub type AzGlCallbackInfoTT = azul_impl::callbacks::GlCallbackInfo;
pub use AzGlCallbackInfoTT as AzGlCallbackInfo;
/// Returns a copy of the internal `GlContextPtr`
#[no_mangle] pub extern "C" fn az_gl_callback_info_get_gl_context(glcallbackinfo: &AzGlCallbackInfo) -> AzOptionGlContextPtr { glcallbackinfo.get_gl_context().into() }
/// Returns a copy of the internal `HidpiAdjustedBounds`
#[no_mangle] pub extern "C" fn az_gl_callback_info_get_bounds(glcallbackinfo: &AzGlCallbackInfo) -> AzHidpiAdjustedBounds { glcallbackinfo.get_bounds() }

/// Re-export of rust-allocated (stack based) `GlCallbackReturn` struct
pub type AzGlCallbackReturnTT = azul_impl::callbacks::GlCallbackReturn;
pub use AzGlCallbackReturnTT as AzGlCallbackReturn;

/// Re-export of rust-allocated (stack based) `TimerCallback` struct
pub type AzTimerCallbackTT = azul_impl::callbacks::TimerCallback;
pub use AzTimerCallbackTT as AzTimerCallback;

pub type AzTimerCallbackType = extern "C" fn(&mut AzRefAny, &mut AzRefAny, AzTimerCallbackInfo) -> AzTimerCallbackReturn;
/// Re-export of rust-allocated (stack based) `TimerCallbackInfo` struct
pub type AzTimerCallbackInfoTT = azul_impl::callbacks::TimerCallbackInfo;
pub use AzTimerCallbackInfoTT as AzTimerCallbackInfo;

/// Re-export of rust-allocated (stack based) `TimerCallbackReturn` struct
pub type AzTimerCallbackReturnTT = azul_impl::callbacks::TimerCallbackReturn;
pub use AzTimerCallbackReturnTT as AzTimerCallbackReturn;

pub type AzWriteBackCallbackType = extern "C" fn(&mut AzRefAny, AzRefAny, AzCallbackInfo) -> AzUpdateScreen;
/// Re-export of rust-allocated (stack based) `WriteBackCallback` struct
pub type AzWriteBackCallbackTT = azul_impl::callbacks::WriteBackCallback;
pub use AzWriteBackCallbackTT as AzWriteBackCallback;

pub type AzThreadCallbackType = extern "C" fn(AzRefAny, AzThreadSender, AzThreadReceiver);
pub type AzRefAnyDestructorType = extern "C" fn(&mut c_void);
/// Re-export of rust-allocated (stack based) `RefCountInner` struct
pub type AzRefCountInnerTT = azul_impl::callbacks::RefCountInner;
pub use AzRefCountInnerTT as AzRefCountInner;

/// Re-export of rust-allocated (stack based) `RefCount` struct
pub type AzRefCountTT = azul_impl::callbacks::RefCount;
pub use AzRefCountTT as AzRefCount;
/// Equivalent to the Rust `RefCount::can_be_shared()` function.
#[no_mangle] pub extern "C" fn az_ref_count_can_be_shared(refcount: &AzRefCount) -> bool { refcount.can_be_shared() }
/// Equivalent to the Rust `RefCount::can_be_shared_mut()` function.
#[no_mangle] pub extern "C" fn az_ref_count_can_be_shared_mut(refcount: &AzRefCount) -> bool { refcount.can_be_shared_mut() }
/// Equivalent to the Rust `RefCount::increase_ref()` function.
#[no_mangle] pub extern "C" fn az_ref_count_increase_ref(refcount: &mut AzRefCount) { refcount.increase_ref() }
/// Equivalent to the Rust `RefCount::decrease_ref()` function.
#[no_mangle] pub extern "C" fn az_ref_count_decrease_ref(refcount: &mut AzRefCount) { refcount.decrease_ref() }
/// Equivalent to the Rust `RefCount::increase_refmut()` function.
#[no_mangle] pub extern "C" fn az_ref_count_increase_refmut(refcount: &mut AzRefCount) { refcount.increase_refmut() }
/// Equivalent to the Rust `RefCount::decrease_refmut()` function.
#[no_mangle] pub extern "C" fn az_ref_count_decrease_refmut(refcount: &mut AzRefCount) { refcount.decrease_refmut() }
/// Destructor: Takes ownership of the `RefCount` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_ref_count_delete(object: &mut AzRefCount) {  unsafe { core::ptr::drop_in_place(object); } }
/// Clones the object
#[no_mangle] pub extern "C" fn az_ref_count_deep_copy(object: &AzRefCount) -> AzRefCount { object.clone() }

/// RefAny is a reference-counted, type-erased pointer, which stores a reference to a struct. `RefAny` can be up- and downcasted (this usually done via generics and can't be expressed in the Rust API)
pub type AzRefAnyTT = azul_impl::callbacks::RefAny;
pub use AzRefAnyTT as AzRefAny;
/// Creates a new `RefAny` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `RefAny::new_c()` constructor.
#[no_mangle] pub extern "C" fn az_ref_any_new_c(ptr: *const c_void, len: usize, type_id: u64, type_name: AzString, destructor: AzRefAnyDestructorType) -> AzRefAny { RefAny::new_c(ptr, len, type_id, type_name, destructor) }
/// Equivalent to the Rust `RefAny::is_type()` function.
#[no_mangle] pub extern "C" fn az_ref_any_is_type(refany: &AzRefAny, type_id: u64) -> bool { refany.is_type(type_id) }
/// Equivalent to the Rust `RefAny::get_type_name()` function.
#[no_mangle] pub extern "C" fn az_ref_any_get_type_name(refany: &AzRefAny) -> AzString { refany.get_type_name() }
/// Equivalent to the Rust `RefAny::clone()` function.
#[no_mangle] pub extern "C" fn az_ref_any_clone(refany: &mut AzRefAny) -> AzRefAny { refany.clone_into_library_memory() }
/// Destructor: Takes ownership of the `RefAny` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_ref_any_delete(object: &mut AzRefAny) {  unsafe { core::ptr::drop_in_place(object); } }

/// Re-export of rust-allocated (stack based) `LayoutInfo` struct
pub type AzLayoutInfoTT = azul_impl::callbacks::LayoutInfo;
pub use AzLayoutInfoTT as AzLayoutInfo;
/// Equivalent to the Rust `LayoutInfo::window_width_larger_than()` function.
#[no_mangle] pub extern "C" fn az_layout_info_window_width_larger_than(layoutinfo: &mut AzLayoutInfo, width: f32) -> bool { layoutinfo.window_width_larger_than(width) }
/// Equivalent to the Rust `LayoutInfo::window_width_smaller_than()` function.
#[no_mangle] pub extern "C" fn az_layout_info_window_width_smaller_than(layoutinfo: &mut AzLayoutInfo, width: f32) -> bool { layoutinfo.window_width_smaller_than(width) }
/// Equivalent to the Rust `LayoutInfo::window_height_larger_than()` function.
#[no_mangle] pub extern "C" fn az_layout_info_window_height_larger_than(layoutinfo: &mut AzLayoutInfo, width: f32) -> bool { layoutinfo.window_height_larger_than(width) }
/// Equivalent to the Rust `LayoutInfo::window_height_smaller_than()` function.
#[no_mangle] pub extern "C" fn az_layout_info_window_height_smaller_than(layoutinfo: &mut AzLayoutInfo, width: f32) -> bool { layoutinfo.window_height_smaller_than(width) }

/// External system callbacks to get the system time or create / manage threads
pub type AzSystemCallbacksTT = azul_impl::task::ExternalSystemCallbacks;
pub use AzSystemCallbacksTT as AzSystemCallbacks;

/// Re-export of rust-allocated (stack based) `Dom` struct
pub type AzDomTT = azul_impl::dom::Dom;
pub use AzDomTT as AzDom;
/// Returns the number of nodes in the DOM
#[no_mangle] pub extern "C" fn az_dom_node_count(dom: &AzDom) -> usize { dom.node_count() }

/// Re-export of rust-allocated (stack based) `GlTextureNode` struct
pub type AzGlTextureNodeTT = azul_impl::dom::GlTextureNode;
pub use AzGlTextureNodeTT as AzGlTextureNode;

/// Re-export of rust-allocated (stack based) `IFrameNode` struct
pub type AzIFrameNodeTT = azul_impl::dom::IFrameNode;
pub use AzIFrameNodeTT as AzIFrameNode;

/// Re-export of rust-allocated (stack based) `CallbackData` struct
pub type AzCallbackDataTT = azul_impl::dom::CallbackData;
pub use AzCallbackDataTT as AzCallbackData;

/// Represents one single DOM node (node type, classes, ids and callbacks are stored here)
pub type AzNodeDataTT = azul_impl::dom::NodeData;
pub use AzNodeDataTT as AzNodeData;

/// List of core DOM node types built-into by `azul`
pub type AzNodeTypeTT = azul_impl::dom::NodeType;
pub use AzNodeTypeTT as AzNodeType;

/// When to call a callback action - `On::MouseOver`, `On::MouseOut`, etc.
pub type AzOnTT = azul_impl::dom::On;
pub use AzOnTT as AzOn;
/// Converts the `On` shorthand into a `EventFilter`
#[no_mangle] pub extern "C" fn az_on_into_event_filter(on: AzOn) -> AzEventFilter { on.into() }

/// Re-export of rust-allocated (stack based) `EventFilter` struct
pub type AzEventFilterTT = azul_impl::dom::EventFilter;
pub use AzEventFilterTT as AzEventFilter;

/// Re-export of rust-allocated (stack based) `HoverEventFilter` struct
pub type AzHoverEventFilterTT = azul_impl::dom::HoverEventFilter;
pub use AzHoverEventFilterTT as AzHoverEventFilter;

/// Re-export of rust-allocated (stack based) `FocusEventFilter` struct
pub type AzFocusEventFilterTT = azul_impl::dom::FocusEventFilter;
pub use AzFocusEventFilterTT as AzFocusEventFilter;

/// Re-export of rust-allocated (stack based) `NotEventFilter` struct
pub type AzNotEventFilterTT = azul_impl::dom::NotEventFilter;
pub use AzNotEventFilterTT as AzNotEventFilter;

/// Re-export of rust-allocated (stack based) `WindowEventFilter` struct
pub type AzWindowEventFilterTT = azul_impl::dom::WindowEventFilter;
pub use AzWindowEventFilterTT as AzWindowEventFilter;

/// Re-export of rust-allocated (stack based) `ComponentEventFilter` struct
pub type AzComponentEventFilterTT = azul_impl::dom::ComponentEventFilter;
pub use AzComponentEventFilterTT as AzComponentEventFilter;

/// Re-export of rust-allocated (stack based) `ApplicationEventFilter` struct
pub type AzApplicationEventFilterTT = azul_impl::dom::ApplicationEventFilter;
pub use AzApplicationEventFilterTT as AzApplicationEventFilter;

/// Re-export of rust-allocated (stack based) `TabIndex` struct
pub type AzTabIndexTT = azul_impl::dom::TabIndex;
pub use AzTabIndexTT as AzTabIndex;

/// Re-export of rust-allocated (stack based) `IdOrClass` struct
pub type AzIdOrClassTT = azul_impl::dom::IdOrClass;
pub use AzIdOrClassTT as AzIdOrClass;

/// Re-export of rust-allocated (stack based) `NodeDataInlineCssProperty` struct
pub type AzNodeDataInlineCssPropertyTT = azul_impl::dom::NodeDataInlineCssProperty;
pub use AzNodeDataInlineCssPropertyTT as AzNodeDataInlineCssProperty;

/// Re-export of rust-allocated (stack based) `CssRuleBlock` struct
pub type AzCssRuleBlockTT = azul_impl::css::CssRuleBlock;
pub use AzCssRuleBlockTT as AzCssRuleBlock;

/// Re-export of rust-allocated (stack based) `CssDeclaration` struct
pub type AzCssDeclarationTT = azul_impl::css::CssDeclaration;
pub use AzCssDeclarationTT as AzCssDeclaration;

/// Re-export of rust-allocated (stack based) `DynamicCssProperty` struct
pub type AzDynamicCssPropertyTT = azul_impl::css::DynamicCssProperty;
pub use AzDynamicCssPropertyTT as AzDynamicCssProperty;

/// Re-export of rust-allocated (stack based) `CssPath` struct
pub type AzCssPathTT = azul_impl::css::CssPath;
pub use AzCssPathTT as AzCssPath;

/// Re-export of rust-allocated (stack based) `CssPathSelector` struct
pub type AzCssPathSelectorTT = azul_impl::css::CssPathSelector;
pub use AzCssPathSelectorTT as AzCssPathSelector;

/// Re-export of rust-allocated (stack based) `NodeTypePath` struct
pub type AzNodeTypePathTT = azul_impl::css::NodeTypePath;
pub use AzNodeTypePathTT as AzNodeTypePath;

/// Re-export of rust-allocated (stack based) `CssPathPseudoSelector` struct
pub type AzCssPathPseudoSelectorTT = azul_impl::css::CssPathPseudoSelector;
pub use AzCssPathPseudoSelectorTT as AzCssPathPseudoSelector;

/// Re-export of rust-allocated (stack based) `CssNthChildSelector` struct
pub type AzCssNthChildSelectorTT = azul_impl::css::CssNthChildSelector;
pub use AzCssNthChildSelectorTT as AzCssNthChildSelector;

/// Re-export of rust-allocated (stack based) `CssNthChildPattern` struct
pub type AzCssNthChildPatternTT = azul_impl::css::CssNthChildPattern;
pub use AzCssNthChildPatternTT as AzCssNthChildPattern;

/// Re-export of rust-allocated (stack based) `Stylesheet` struct
pub type AzStylesheetTT = azul_impl::css::Stylesheet;
pub use AzStylesheetTT as AzStylesheet;

/// Re-export of rust-allocated (stack based) `Css` struct
pub type AzCssTT = azul_impl::css::Css;
pub use AzCssTT as AzCss;
/// Returns an empty CSS style
#[no_mangle] pub extern "C" fn az_css_empty() -> AzCss { AzCss::empty() }
/// Returns a CSS style parsed from a `String`
#[no_mangle] pub extern "C" fn az_css_from_string(s: AzString) -> AzCss { css::from_str(s.as_str()).unwrap_or_default() }

/// Re-export of rust-allocated (stack based) `CssPropertyType` struct
pub type AzCssPropertyTypeTT = azul_impl::css::CssPropertyType;
pub use AzCssPropertyTypeTT as AzCssPropertyType;

/// Re-export of rust-allocated (stack based) `ColorU` struct
pub type AzColorUTT = azul_impl::css::ColorU;
pub use AzColorUTT as AzColorU;
/// Creates a new `ColorU` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `ColorU::from_str()` constructor.
#[no_mangle] pub extern "C" fn az_color_u_from_str(string: AzString) -> AzColorU { azul_impl::css::css_parser::parse_css_color(string.as_str()).ok().unwrap_or(ColorU::BLACK) }
/// Equivalent to the Rust `ColorU::to_hash()` function.
#[no_mangle] pub extern "C" fn az_color_u_to_hash(coloru: &AzColorU) -> AzString { coloru.to_hash().into() }

/// Re-export of rust-allocated (stack based) `SizeMetric` struct
pub type AzSizeMetricTT = azul_impl::css::SizeMetric;
pub use AzSizeMetricTT as AzSizeMetric;

/// Re-export of rust-allocated (stack based) `FloatValue` struct
pub type AzFloatValueTT = azul_impl::css::FloatValue;
pub use AzFloatValueTT as AzFloatValue;

/// Re-export of rust-allocated (stack based) `PixelValue` struct
pub type AzPixelValueTT = azul_impl::css::PixelValue;
pub use AzPixelValueTT as AzPixelValue;

/// Re-export of rust-allocated (stack based) `PixelValueNoPercent` struct
pub type AzPixelValueNoPercentTT = azul_impl::css::PixelValueNoPercent;
pub use AzPixelValueNoPercentTT as AzPixelValueNoPercent;

/// Re-export of rust-allocated (stack based) `BoxShadowClipMode` struct
pub type AzBoxShadowClipModeTT = azul_impl::css::BoxShadowClipMode;
pub use AzBoxShadowClipModeTT as AzBoxShadowClipMode;

/// Re-export of rust-allocated (stack based) `StyleBoxShadow` struct
pub type AzStyleBoxShadowTT = azul_impl::css::StyleBoxShadow;
pub use AzStyleBoxShadowTT as AzStyleBoxShadow;

/// Re-export of rust-allocated (stack based) `LayoutAlignContent` struct
pub type AzLayoutAlignContentTT = azul_impl::css::LayoutAlignContent;
pub use AzLayoutAlignContentTT as AzLayoutAlignContent;

/// Re-export of rust-allocated (stack based) `LayoutAlignItems` struct
pub type AzLayoutAlignItemsTT = azul_impl::css::LayoutAlignItems;
pub use AzLayoutAlignItemsTT as AzLayoutAlignItems;

/// Re-export of rust-allocated (stack based) `LayoutBottom` struct
pub type AzLayoutBottomTT = azul_impl::css::LayoutBottom;
pub use AzLayoutBottomTT as AzLayoutBottom;

/// Re-export of rust-allocated (stack based) `LayoutBoxSizing` struct
pub type AzLayoutBoxSizingTT = azul_impl::css::LayoutBoxSizing;
pub use AzLayoutBoxSizingTT as AzLayoutBoxSizing;

/// Re-export of rust-allocated (stack based) `LayoutFlexDirection` struct
pub type AzLayoutFlexDirectionTT = azul_impl::css::LayoutFlexDirection;
pub use AzLayoutFlexDirectionTT as AzLayoutFlexDirection;

/// Re-export of rust-allocated (stack based) `LayoutDisplay` struct
pub type AzLayoutDisplayTT = azul_impl::css::LayoutDisplay;
pub use AzLayoutDisplayTT as AzLayoutDisplay;

/// Re-export of rust-allocated (stack based) `LayoutFlexGrow` struct
pub type AzLayoutFlexGrowTT = azul_impl::css::LayoutFlexGrow;
pub use AzLayoutFlexGrowTT as AzLayoutFlexGrow;

/// Re-export of rust-allocated (stack based) `LayoutFlexShrink` struct
pub type AzLayoutFlexShrinkTT = azul_impl::css::LayoutFlexShrink;
pub use AzLayoutFlexShrinkTT as AzLayoutFlexShrink;

/// Re-export of rust-allocated (stack based) `LayoutFloat` struct
pub type AzLayoutFloatTT = azul_impl::css::LayoutFloat;
pub use AzLayoutFloatTT as AzLayoutFloat;

/// Re-export of rust-allocated (stack based) `LayoutHeight` struct
pub type AzLayoutHeightTT = azul_impl::css::LayoutHeight;
pub use AzLayoutHeightTT as AzLayoutHeight;

/// Re-export of rust-allocated (stack based) `LayoutJustifyContent` struct
pub type AzLayoutJustifyContentTT = azul_impl::css::LayoutJustifyContent;
pub use AzLayoutJustifyContentTT as AzLayoutJustifyContent;

/// Re-export of rust-allocated (stack based) `LayoutLeft` struct
pub type AzLayoutLeftTT = azul_impl::css::LayoutLeft;
pub use AzLayoutLeftTT as AzLayoutLeft;

/// Re-export of rust-allocated (stack based) `LayoutMarginBottom` struct
pub type AzLayoutMarginBottomTT = azul_impl::css::LayoutMarginBottom;
pub use AzLayoutMarginBottomTT as AzLayoutMarginBottom;

/// Re-export of rust-allocated (stack based) `LayoutMarginLeft` struct
pub type AzLayoutMarginLeftTT = azul_impl::css::LayoutMarginLeft;
pub use AzLayoutMarginLeftTT as AzLayoutMarginLeft;

/// Re-export of rust-allocated (stack based) `LayoutMarginRight` struct
pub type AzLayoutMarginRightTT = azul_impl::css::LayoutMarginRight;
pub use AzLayoutMarginRightTT as AzLayoutMarginRight;

/// Re-export of rust-allocated (stack based) `LayoutMarginTop` struct
pub type AzLayoutMarginTopTT = azul_impl::css::LayoutMarginTop;
pub use AzLayoutMarginTopTT as AzLayoutMarginTop;

/// Re-export of rust-allocated (stack based) `LayoutMaxHeight` struct
pub type AzLayoutMaxHeightTT = azul_impl::css::LayoutMaxHeight;
pub use AzLayoutMaxHeightTT as AzLayoutMaxHeight;

/// Re-export of rust-allocated (stack based) `LayoutMaxWidth` struct
pub type AzLayoutMaxWidthTT = azul_impl::css::LayoutMaxWidth;
pub use AzLayoutMaxWidthTT as AzLayoutMaxWidth;

/// Re-export of rust-allocated (stack based) `LayoutMinHeight` struct
pub type AzLayoutMinHeightTT = azul_impl::css::LayoutMinHeight;
pub use AzLayoutMinHeightTT as AzLayoutMinHeight;

/// Re-export of rust-allocated (stack based) `LayoutMinWidth` struct
pub type AzLayoutMinWidthTT = azul_impl::css::LayoutMinWidth;
pub use AzLayoutMinWidthTT as AzLayoutMinWidth;

/// Re-export of rust-allocated (stack based) `LayoutPaddingBottom` struct
pub type AzLayoutPaddingBottomTT = azul_impl::css::LayoutPaddingBottom;
pub use AzLayoutPaddingBottomTT as AzLayoutPaddingBottom;

/// Re-export of rust-allocated (stack based) `LayoutPaddingLeft` struct
pub type AzLayoutPaddingLeftTT = azul_impl::css::LayoutPaddingLeft;
pub use AzLayoutPaddingLeftTT as AzLayoutPaddingLeft;

/// Re-export of rust-allocated (stack based) `LayoutPaddingRight` struct
pub type AzLayoutPaddingRightTT = azul_impl::css::LayoutPaddingRight;
pub use AzLayoutPaddingRightTT as AzLayoutPaddingRight;

/// Re-export of rust-allocated (stack based) `LayoutPaddingTop` struct
pub type AzLayoutPaddingTopTT = azul_impl::css::LayoutPaddingTop;
pub use AzLayoutPaddingTopTT as AzLayoutPaddingTop;

/// Re-export of rust-allocated (stack based) `LayoutPosition` struct
pub type AzLayoutPositionTT = azul_impl::css::LayoutPosition;
pub use AzLayoutPositionTT as AzLayoutPosition;

/// Re-export of rust-allocated (stack based) `LayoutRight` struct
pub type AzLayoutRightTT = azul_impl::css::LayoutRight;
pub use AzLayoutRightTT as AzLayoutRight;

/// Re-export of rust-allocated (stack based) `LayoutTop` struct
pub type AzLayoutTopTT = azul_impl::css::LayoutTop;
pub use AzLayoutTopTT as AzLayoutTop;

/// Re-export of rust-allocated (stack based) `LayoutWidth` struct
pub type AzLayoutWidthTT = azul_impl::css::LayoutWidth;
pub use AzLayoutWidthTT as AzLayoutWidth;

/// Re-export of rust-allocated (stack based) `LayoutFlexWrap` struct
pub type AzLayoutFlexWrapTT = azul_impl::css::LayoutFlexWrap;
pub use AzLayoutFlexWrapTT as AzLayoutFlexWrap;

/// Re-export of rust-allocated (stack based) `LayoutOverflow` struct
pub type AzLayoutOverflowTT = azul_impl::css::LayoutOverflow;
pub use AzLayoutOverflowTT as AzLayoutOverflow;

/// Re-export of rust-allocated (stack based) `PercentageValue` struct
pub type AzPercentageValueTT = azul_impl::css::PercentageValue;
pub use AzPercentageValueTT as AzPercentageValue;

/// Re-export of rust-allocated (stack based) `AngleMetric` struct
pub type AzAngleMetricTT = azul_impl::css::AngleMetric;
pub use AzAngleMetricTT as AzAngleMetric;

/// Re-export of rust-allocated (stack based) `AngleValue` struct
pub type AzAngleValueTT = azul_impl::css::AngleValue;
pub use AzAngleValueTT as AzAngleValue;

/// Re-export of rust-allocated (stack based) `LinearColorStop` struct
pub type AzLinearColorStopTT = azul_impl::css::LinearColorStop;
pub use AzLinearColorStopTT as AzLinearColorStop;

/// Re-export of rust-allocated (stack based) `RadialColorStop` struct
pub type AzRadialColorStopTT = azul_impl::css::RadialColorStop;
pub use AzRadialColorStopTT as AzRadialColorStop;

/// Re-export of rust-allocated (stack based) `DirectionCorner` struct
pub type AzDirectionCornerTT = azul_impl::css::DirectionCorner;
pub use AzDirectionCornerTT as AzDirectionCorner;

/// Re-export of rust-allocated (stack based) `DirectionCorners` struct
pub type AzDirectionCornersTT = azul_impl::css::DirectionCorners;
pub use AzDirectionCornersTT as AzDirectionCorners;

/// Re-export of rust-allocated (stack based) `Direction` struct
pub type AzDirectionTT = azul_impl::css::Direction;
pub use AzDirectionTT as AzDirection;

/// Re-export of rust-allocated (stack based) `ExtendMode` struct
pub type AzExtendModeTT = azul_impl::css::ExtendMode;
pub use AzExtendModeTT as AzExtendMode;

/// Re-export of rust-allocated (stack based) `LinearGradient` struct
pub type AzLinearGradientTT = azul_impl::css::LinearGradient;
pub use AzLinearGradientTT as AzLinearGradient;

/// Re-export of rust-allocated (stack based) `Shape` struct
pub type AzShapeTT = azul_impl::css::Shape;
pub use AzShapeTT as AzShape;

/// Re-export of rust-allocated (stack based) `RadialGradientSize` struct
pub type AzRadialGradientSizeTT = azul_impl::css::RadialGradientSize;
pub use AzRadialGradientSizeTT as AzRadialGradientSize;

/// Re-export of rust-allocated (stack based) `RadialGradient` struct
pub type AzRadialGradientTT = azul_impl::css::RadialGradient;
pub use AzRadialGradientTT as AzRadialGradient;

/// Re-export of rust-allocated (stack based) `ConicGradient` struct
pub type AzConicGradientTT = azul_impl::css::ConicGradient;
pub use AzConicGradientTT as AzConicGradient;

/// Re-export of rust-allocated (stack based) `CssImageId` struct
pub type AzCssImageIdTT = azul_impl::css::CssImageId;
pub use AzCssImageIdTT as AzCssImageId;

/// Re-export of rust-allocated (stack based) `StyleBackgroundContent` struct
pub type AzStyleBackgroundContentTT = azul_impl::css::StyleBackgroundContent;
pub use AzStyleBackgroundContentTT as AzStyleBackgroundContent;

/// Re-export of rust-allocated (stack based) `BackgroundPositionHorizontal` struct
pub type AzBackgroundPositionHorizontalTT = azul_impl::css::BackgroundPositionHorizontal;
pub use AzBackgroundPositionHorizontalTT as AzBackgroundPositionHorizontal;

/// Re-export of rust-allocated (stack based) `BackgroundPositionVertical` struct
pub type AzBackgroundPositionVerticalTT = azul_impl::css::BackgroundPositionVertical;
pub use AzBackgroundPositionVerticalTT as AzBackgroundPositionVertical;

/// Re-export of rust-allocated (stack based) `StyleBackgroundPosition` struct
pub type AzStyleBackgroundPositionTT = azul_impl::css::StyleBackgroundPosition;
pub use AzStyleBackgroundPositionTT as AzStyleBackgroundPosition;

/// Re-export of rust-allocated (stack based) `StyleBackgroundRepeat` struct
pub type AzStyleBackgroundRepeatTT = azul_impl::css::StyleBackgroundRepeat;
pub use AzStyleBackgroundRepeatTT as AzStyleBackgroundRepeat;

/// Re-export of rust-allocated (stack based) `StyleBackgroundSize` struct
pub type AzStyleBackgroundSizeTT = azul_impl::css::StyleBackgroundSize;
pub use AzStyleBackgroundSizeTT as AzStyleBackgroundSize;

/// Re-export of rust-allocated (stack based) `StyleBorderBottomColor` struct
pub type AzStyleBorderBottomColorTT = azul_impl::css::StyleBorderBottomColor;
pub use AzStyleBorderBottomColorTT as AzStyleBorderBottomColor;

/// Re-export of rust-allocated (stack based) `StyleBorderBottomLeftRadius` struct
pub type AzStyleBorderBottomLeftRadiusTT = azul_impl::css::StyleBorderBottomLeftRadius;
pub use AzStyleBorderBottomLeftRadiusTT as AzStyleBorderBottomLeftRadius;

/// Re-export of rust-allocated (stack based) `StyleBorderBottomRightRadius` struct
pub type AzStyleBorderBottomRightRadiusTT = azul_impl::css::StyleBorderBottomRightRadius;
pub use AzStyleBorderBottomRightRadiusTT as AzStyleBorderBottomRightRadius;

/// Re-export of rust-allocated (stack based) `BorderStyle` struct
pub type AzBorderStyleTT = azul_impl::css::BorderStyle;
pub use AzBorderStyleTT as AzBorderStyle;

/// Re-export of rust-allocated (stack based) `StyleBorderBottomStyle` struct
pub type AzStyleBorderBottomStyleTT = azul_impl::css::StyleBorderBottomStyle;
pub use AzStyleBorderBottomStyleTT as AzStyleBorderBottomStyle;

/// Re-export of rust-allocated (stack based) `LayoutBorderBottomWidth` struct
pub type AzLayoutBorderBottomWidthTT = azul_impl::css::LayoutBorderBottomWidth;
pub use AzLayoutBorderBottomWidthTT as AzLayoutBorderBottomWidth;

/// Re-export of rust-allocated (stack based) `StyleBorderLeftColor` struct
pub type AzStyleBorderLeftColorTT = azul_impl::css::StyleBorderLeftColor;
pub use AzStyleBorderLeftColorTT as AzStyleBorderLeftColor;

/// Re-export of rust-allocated (stack based) `StyleBorderLeftStyle` struct
pub type AzStyleBorderLeftStyleTT = azul_impl::css::StyleBorderLeftStyle;
pub use AzStyleBorderLeftStyleTT as AzStyleBorderLeftStyle;

/// Re-export of rust-allocated (stack based) `LayoutBorderLeftWidth` struct
pub type AzLayoutBorderLeftWidthTT = azul_impl::css::LayoutBorderLeftWidth;
pub use AzLayoutBorderLeftWidthTT as AzLayoutBorderLeftWidth;

/// Re-export of rust-allocated (stack based) `StyleBorderRightColor` struct
pub type AzStyleBorderRightColorTT = azul_impl::css::StyleBorderRightColor;
pub use AzStyleBorderRightColorTT as AzStyleBorderRightColor;

/// Re-export of rust-allocated (stack based) `StyleBorderRightStyle` struct
pub type AzStyleBorderRightStyleTT = azul_impl::css::StyleBorderRightStyle;
pub use AzStyleBorderRightStyleTT as AzStyleBorderRightStyle;

/// Re-export of rust-allocated (stack based) `LayoutBorderRightWidth` struct
pub type AzLayoutBorderRightWidthTT = azul_impl::css::LayoutBorderRightWidth;
pub use AzLayoutBorderRightWidthTT as AzLayoutBorderRightWidth;

/// Re-export of rust-allocated (stack based) `StyleBorderTopColor` struct
pub type AzStyleBorderTopColorTT = azul_impl::css::StyleBorderTopColor;
pub use AzStyleBorderTopColorTT as AzStyleBorderTopColor;

/// Re-export of rust-allocated (stack based) `StyleBorderTopLeftRadius` struct
pub type AzStyleBorderTopLeftRadiusTT = azul_impl::css::StyleBorderTopLeftRadius;
pub use AzStyleBorderTopLeftRadiusTT as AzStyleBorderTopLeftRadius;

/// Re-export of rust-allocated (stack based) `StyleBorderTopRightRadius` struct
pub type AzStyleBorderTopRightRadiusTT = azul_impl::css::StyleBorderTopRightRadius;
pub use AzStyleBorderTopRightRadiusTT as AzStyleBorderTopRightRadius;

/// Re-export of rust-allocated (stack based) `StyleBorderTopStyle` struct
pub type AzStyleBorderTopStyleTT = azul_impl::css::StyleBorderTopStyle;
pub use AzStyleBorderTopStyleTT as AzStyleBorderTopStyle;

/// Re-export of rust-allocated (stack based) `LayoutBorderTopWidth` struct
pub type AzLayoutBorderTopWidthTT = azul_impl::css::LayoutBorderTopWidth;
pub use AzLayoutBorderTopWidthTT as AzLayoutBorderTopWidth;

/// Re-export of rust-allocated (stack based) `ScrollbarInfo` struct
pub type AzScrollbarInfoTT = azul_impl::css::ScrollbarInfo;
pub use AzScrollbarInfoTT as AzScrollbarInfo;

/// Re-export of rust-allocated (stack based) `ScrollbarStyle` struct
pub type AzScrollbarStyleTT = azul_impl::css::ScrollbarStyle;
pub use AzScrollbarStyleTT as AzScrollbarStyle;

/// Re-export of rust-allocated (stack based) `StyleCursor` struct
pub type AzStyleCursorTT = azul_impl::css::StyleCursor;
pub use AzStyleCursorTT as AzStyleCursor;

/// Re-export of rust-allocated (stack based) `StyleFontFamily` struct
pub type AzStyleFontFamilyTT = azul_impl::css::StyleFontFamily;
pub use AzStyleFontFamilyTT as AzStyleFontFamily;

/// Re-export of rust-allocated (stack based) `StyleFontSize` struct
pub type AzStyleFontSizeTT = azul_impl::css::StyleFontSize;
pub use AzStyleFontSizeTT as AzStyleFontSize;

/// Re-export of rust-allocated (stack based) `StyleLetterSpacing` struct
pub type AzStyleLetterSpacingTT = azul_impl::css::StyleLetterSpacing;
pub use AzStyleLetterSpacingTT as AzStyleLetterSpacing;

/// Re-export of rust-allocated (stack based) `StyleLineHeight` struct
pub type AzStyleLineHeightTT = azul_impl::css::StyleLineHeight;
pub use AzStyleLineHeightTT as AzStyleLineHeight;

/// Re-export of rust-allocated (stack based) `StyleTabWidth` struct
pub type AzStyleTabWidthTT = azul_impl::css::StyleTabWidth;
pub use AzStyleTabWidthTT as AzStyleTabWidth;

/// Re-export of rust-allocated (stack based) `StyleOpacity` struct
pub type AzStyleOpacityTT = azul_impl::css::StyleOpacity;
pub use AzStyleOpacityTT as AzStyleOpacity;

/// Re-export of rust-allocated (stack based) `StyleTransformOrigin` struct
pub type AzStyleTransformOriginTT = azul_impl::css::StyleTransformOrigin;
pub use AzStyleTransformOriginTT as AzStyleTransformOrigin;

/// Re-export of rust-allocated (stack based) `StylePerspectiveOrigin` struct
pub type AzStylePerspectiveOriginTT = azul_impl::css::StyleTransformOrigin;
pub use AzStylePerspectiveOriginTT as AzStylePerspectiveOrigin;

/// Re-export of rust-allocated (stack based) `StyleBackfaceVisibility` struct
pub type AzStyleBackfaceVisibilityTT = azul_impl::css::StyleBackfaceVisibility;
pub use AzStyleBackfaceVisibilityTT as AzStyleBackfaceVisibility;

/// Re-export of rust-allocated (stack based) `StyleTransform` struct
pub type AzStyleTransformTT = azul_impl::css::StyleTransform;
pub use AzStyleTransformTT as AzStyleTransform;

/// Re-export of rust-allocated (stack based) `StyleTransformMatrix2D` struct
pub type AzStyleTransformMatrix2DTT = azul_impl::css::StyleTransformMatrix2D;
pub use AzStyleTransformMatrix2DTT as AzStyleTransformMatrix2D;

/// Re-export of rust-allocated (stack based) `StyleTransformMatrix3D` struct
pub type AzStyleTransformMatrix3DTT = azul_impl::css::StyleTransformMatrix3D;
pub use AzStyleTransformMatrix3DTT as AzStyleTransformMatrix3D;

/// Re-export of rust-allocated (stack based) `StyleTransformTranslate2D` struct
pub type AzStyleTransformTranslate2DTT = azul_impl::css::StyleTransformTranslate2D;
pub use AzStyleTransformTranslate2DTT as AzStyleTransformTranslate2D;

/// Re-export of rust-allocated (stack based) `StyleTransformTranslate3D` struct
pub type AzStyleTransformTranslate3DTT = azul_impl::css::StyleTransformTranslate3D;
pub use AzStyleTransformTranslate3DTT as AzStyleTransformTranslate3D;

/// Re-export of rust-allocated (stack based) `StyleTransformRotate3D` struct
pub type AzStyleTransformRotate3DTT = azul_impl::css::StyleTransformRotate3D;
pub use AzStyleTransformRotate3DTT as AzStyleTransformRotate3D;

/// Re-export of rust-allocated (stack based) `StyleTransformScale2D` struct
pub type AzStyleTransformScale2DTT = azul_impl::css::StyleTransformScale2D;
pub use AzStyleTransformScale2DTT as AzStyleTransformScale2D;

/// Re-export of rust-allocated (stack based) `StyleTransformScale3D` struct
pub type AzStyleTransformScale3DTT = azul_impl::css::StyleTransformScale3D;
pub use AzStyleTransformScale3DTT as AzStyleTransformScale3D;

/// Re-export of rust-allocated (stack based) `StyleTransformSkew2D` struct
pub type AzStyleTransformSkew2DTT = azul_impl::css::StyleTransformSkew2D;
pub use AzStyleTransformSkew2DTT as AzStyleTransformSkew2D;

/// Re-export of rust-allocated (stack based) `StyleTextAlignmentHorz` struct
pub type AzStyleTextAlignmentHorzTT = azul_impl::css::StyleTextAlignmentHorz;
pub use AzStyleTextAlignmentHorzTT as AzStyleTextAlignmentHorz;

/// Re-export of rust-allocated (stack based) `StyleTextColor` struct
pub type AzStyleTextColorTT = azul_impl::css::StyleTextColor;
pub use AzStyleTextColorTT as AzStyleTextColor;

/// Re-export of rust-allocated (stack based) `StyleWordSpacing` struct
pub type AzStyleWordSpacingTT = azul_impl::css::StyleWordSpacing;
pub use AzStyleWordSpacingTT as AzStyleWordSpacing;

/// Re-export of rust-allocated (stack based) `StyleBoxShadowValue` struct
pub type AzStyleBoxShadowValueTT = azul_impl::css::CssPropertyValue::<StyleBoxShadow>;
pub use AzStyleBoxShadowValueTT as AzStyleBoxShadowValue;

/// Re-export of rust-allocated (stack based) `LayoutAlignContentValue` struct
pub type AzLayoutAlignContentValueTT = azul_impl::css::CssPropertyValue::<LayoutAlignContent>;
pub use AzLayoutAlignContentValueTT as AzLayoutAlignContentValue;

/// Re-export of rust-allocated (stack based) `LayoutAlignItemsValue` struct
pub type AzLayoutAlignItemsValueTT = azul_impl::css::CssPropertyValue::<LayoutAlignItems>;
pub use AzLayoutAlignItemsValueTT as AzLayoutAlignItemsValue;

/// Re-export of rust-allocated (stack based) `LayoutBottomValue` struct
pub type AzLayoutBottomValueTT = azul_impl::css::CssPropertyValue::<LayoutBottom>;
pub use AzLayoutBottomValueTT as AzLayoutBottomValue;

/// Re-export of rust-allocated (stack based) `LayoutBoxSizingValue` struct
pub type AzLayoutBoxSizingValueTT = azul_impl::css::CssPropertyValue::<LayoutBoxSizing>;
pub use AzLayoutBoxSizingValueTT as AzLayoutBoxSizingValue;

/// Re-export of rust-allocated (stack based) `LayoutFlexDirectionValue` struct
pub type AzLayoutFlexDirectionValueTT = azul_impl::css::CssPropertyValue::<LayoutFlexDirection>;
pub use AzLayoutFlexDirectionValueTT as AzLayoutFlexDirectionValue;

/// Re-export of rust-allocated (stack based) `LayoutDisplayValue` struct
pub type AzLayoutDisplayValueTT = azul_impl::css::CssPropertyValue::<LayoutDisplay>;
pub use AzLayoutDisplayValueTT as AzLayoutDisplayValue;

/// Re-export of rust-allocated (stack based) `LayoutFlexGrowValue` struct
pub type AzLayoutFlexGrowValueTT = azul_impl::css::CssPropertyValue::<LayoutFlexGrow>;
pub use AzLayoutFlexGrowValueTT as AzLayoutFlexGrowValue;

/// Re-export of rust-allocated (stack based) `LayoutFlexShrinkValue` struct
pub type AzLayoutFlexShrinkValueTT = azul_impl::css::CssPropertyValue::<LayoutFlexShrink>;
pub use AzLayoutFlexShrinkValueTT as AzLayoutFlexShrinkValue;

/// Re-export of rust-allocated (stack based) `LayoutFloatValue` struct
pub type AzLayoutFloatValueTT = azul_impl::css::CssPropertyValue::<LayoutFloat>;
pub use AzLayoutFloatValueTT as AzLayoutFloatValue;

/// Re-export of rust-allocated (stack based) `LayoutHeightValue` struct
pub type AzLayoutHeightValueTT = azul_impl::css::CssPropertyValue::<LayoutHeight>;
pub use AzLayoutHeightValueTT as AzLayoutHeightValue;

/// Re-export of rust-allocated (stack based) `LayoutJustifyContentValue` struct
pub type AzLayoutJustifyContentValueTT = azul_impl::css::CssPropertyValue::<LayoutJustifyContent>;
pub use AzLayoutJustifyContentValueTT as AzLayoutJustifyContentValue;

/// Re-export of rust-allocated (stack based) `LayoutLeftValue` struct
pub type AzLayoutLeftValueTT = azul_impl::css::CssPropertyValue::<LayoutLeft>;
pub use AzLayoutLeftValueTT as AzLayoutLeftValue;

/// Re-export of rust-allocated (stack based) `LayoutMarginBottomValue` struct
pub type AzLayoutMarginBottomValueTT = azul_impl::css::CssPropertyValue::<LayoutMarginBottom>;
pub use AzLayoutMarginBottomValueTT as AzLayoutMarginBottomValue;

/// Re-export of rust-allocated (stack based) `LayoutMarginLeftValue` struct
pub type AzLayoutMarginLeftValueTT = azul_impl::css::CssPropertyValue::<LayoutMarginLeft>;
pub use AzLayoutMarginLeftValueTT as AzLayoutMarginLeftValue;

/// Re-export of rust-allocated (stack based) `LayoutMarginRightValue` struct
pub type AzLayoutMarginRightValueTT = azul_impl::css::CssPropertyValue::<LayoutMarginRight>;
pub use AzLayoutMarginRightValueTT as AzLayoutMarginRightValue;

/// Re-export of rust-allocated (stack based) `LayoutMarginTopValue` struct
pub type AzLayoutMarginTopValueTT = azul_impl::css::CssPropertyValue::<LayoutMarginTop>;
pub use AzLayoutMarginTopValueTT as AzLayoutMarginTopValue;

/// Re-export of rust-allocated (stack based) `LayoutMaxHeightValue` struct
pub type AzLayoutMaxHeightValueTT = azul_impl::css::CssPropertyValue::<LayoutMaxHeight>;
pub use AzLayoutMaxHeightValueTT as AzLayoutMaxHeightValue;

/// Re-export of rust-allocated (stack based) `LayoutMaxWidthValue` struct
pub type AzLayoutMaxWidthValueTT = azul_impl::css::CssPropertyValue::<LayoutMaxWidth>;
pub use AzLayoutMaxWidthValueTT as AzLayoutMaxWidthValue;

/// Re-export of rust-allocated (stack based) `LayoutMinHeightValue` struct
pub type AzLayoutMinHeightValueTT = azul_impl::css::CssPropertyValue::<LayoutMinHeight>;
pub use AzLayoutMinHeightValueTT as AzLayoutMinHeightValue;

/// Re-export of rust-allocated (stack based) `LayoutMinWidthValue` struct
pub type AzLayoutMinWidthValueTT = azul_impl::css::CssPropertyValue::<LayoutMinWidth>;
pub use AzLayoutMinWidthValueTT as AzLayoutMinWidthValue;

/// Re-export of rust-allocated (stack based) `LayoutPaddingBottomValue` struct
pub type AzLayoutPaddingBottomValueTT = azul_impl::css::CssPropertyValue::<LayoutPaddingBottom>;
pub use AzLayoutPaddingBottomValueTT as AzLayoutPaddingBottomValue;

/// Re-export of rust-allocated (stack based) `LayoutPaddingLeftValue` struct
pub type AzLayoutPaddingLeftValueTT = azul_impl::css::CssPropertyValue::<LayoutPaddingLeft>;
pub use AzLayoutPaddingLeftValueTT as AzLayoutPaddingLeftValue;

/// Re-export of rust-allocated (stack based) `LayoutPaddingRightValue` struct
pub type AzLayoutPaddingRightValueTT = azul_impl::css::CssPropertyValue::<LayoutPaddingRight>;
pub use AzLayoutPaddingRightValueTT as AzLayoutPaddingRightValue;

/// Re-export of rust-allocated (stack based) `LayoutPaddingTopValue` struct
pub type AzLayoutPaddingTopValueTT = azul_impl::css::CssPropertyValue::<LayoutPaddingTop>;
pub use AzLayoutPaddingTopValueTT as AzLayoutPaddingTopValue;

/// Re-export of rust-allocated (stack based) `LayoutPositionValue` struct
pub type AzLayoutPositionValueTT = azul_impl::css::CssPropertyValue::<LayoutPosition>;
pub use AzLayoutPositionValueTT as AzLayoutPositionValue;

/// Re-export of rust-allocated (stack based) `LayoutRightValue` struct
pub type AzLayoutRightValueTT = azul_impl::css::CssPropertyValue::<LayoutRight>;
pub use AzLayoutRightValueTT as AzLayoutRightValue;

/// Re-export of rust-allocated (stack based) `LayoutTopValue` struct
pub type AzLayoutTopValueTT = azul_impl::css::CssPropertyValue::<LayoutTop>;
pub use AzLayoutTopValueTT as AzLayoutTopValue;

/// Re-export of rust-allocated (stack based) `LayoutWidthValue` struct
pub type AzLayoutWidthValueTT = azul_impl::css::CssPropertyValue::<LayoutWidth>;
pub use AzLayoutWidthValueTT as AzLayoutWidthValue;

/// Re-export of rust-allocated (stack based) `LayoutFlexWrapValue` struct
pub type AzLayoutFlexWrapValueTT = azul_impl::css::CssPropertyValue::<LayoutFlexWrap>;
pub use AzLayoutFlexWrapValueTT as AzLayoutFlexWrapValue;

/// Re-export of rust-allocated (stack based) `LayoutOverflowValue` struct
pub type AzLayoutOverflowValueTT = azul_impl::css::CssPropertyValue::<LayoutOverflow>;
pub use AzLayoutOverflowValueTT as AzLayoutOverflowValue;

/// Re-export of rust-allocated (stack based) `ScrollbarStyleValue` struct
pub type AzScrollbarStyleValueTT = azul_impl::css::CssPropertyValue::<ScrollbarStyle>;
pub use AzScrollbarStyleValueTT as AzScrollbarStyleValue;

/// Re-export of rust-allocated (stack based) `StyleBackgroundContentVecValue` struct
pub type AzStyleBackgroundContentVecValueTT = azul_impl::css::CssPropertyValue::<StyleBackgroundContentVec>;
pub use AzStyleBackgroundContentVecValueTT as AzStyleBackgroundContentVecValue;

/// Re-export of rust-allocated (stack based) `StyleBackgroundPositionVecValue` struct
pub type AzStyleBackgroundPositionVecValueTT = azul_impl::css::CssPropertyValue::<StyleBackgroundPositionVec>;
pub use AzStyleBackgroundPositionVecValueTT as AzStyleBackgroundPositionVecValue;

/// Re-export of rust-allocated (stack based) `StyleBackgroundRepeatVecValue` struct
pub type AzStyleBackgroundRepeatVecValueTT = azul_impl::css::CssPropertyValue::<StyleBackgroundRepeatVec>;
pub use AzStyleBackgroundRepeatVecValueTT as AzStyleBackgroundRepeatVecValue;

/// Re-export of rust-allocated (stack based) `StyleBackgroundSizeVecValue` struct
pub type AzStyleBackgroundSizeVecValueTT = azul_impl::css::CssPropertyValue::<StyleBackgroundSizeVec>;
pub use AzStyleBackgroundSizeVecValueTT as AzStyleBackgroundSizeVecValue;

/// Re-export of rust-allocated (stack based) `StyleBorderBottomColorValue` struct
pub type AzStyleBorderBottomColorValueTT = azul_impl::css::CssPropertyValue::<StyleBorderBottomColor>;
pub use AzStyleBorderBottomColorValueTT as AzStyleBorderBottomColorValue;

/// Re-export of rust-allocated (stack based) `StyleBorderBottomLeftRadiusValue` struct
pub type AzStyleBorderBottomLeftRadiusValueTT = azul_impl::css::CssPropertyValue::<StyleBorderBottomLeftRadius>;
pub use AzStyleBorderBottomLeftRadiusValueTT as AzStyleBorderBottomLeftRadiusValue;

/// Re-export of rust-allocated (stack based) `StyleBorderBottomRightRadiusValue` struct
pub type AzStyleBorderBottomRightRadiusValueTT = azul_impl::css::CssPropertyValue::<StyleBorderBottomRightRadius>;
pub use AzStyleBorderBottomRightRadiusValueTT as AzStyleBorderBottomRightRadiusValue;

/// Re-export of rust-allocated (stack based) `StyleBorderBottomStyleValue` struct
pub type AzStyleBorderBottomStyleValueTT = azul_impl::css::CssPropertyValue::<StyleBorderBottomStyle>;
pub use AzStyleBorderBottomStyleValueTT as AzStyleBorderBottomStyleValue;

/// Re-export of rust-allocated (stack based) `LayoutBorderBottomWidthValue` struct
pub type AzLayoutBorderBottomWidthValueTT = azul_impl::css::CssPropertyValue::<LayoutBorderBottomWidth>;
pub use AzLayoutBorderBottomWidthValueTT as AzLayoutBorderBottomWidthValue;

/// Re-export of rust-allocated (stack based) `StyleBorderLeftColorValue` struct
pub type AzStyleBorderLeftColorValueTT = azul_impl::css::CssPropertyValue::<StyleBorderLeftColor>;
pub use AzStyleBorderLeftColorValueTT as AzStyleBorderLeftColorValue;

/// Re-export of rust-allocated (stack based) `StyleBorderLeftStyleValue` struct
pub type AzStyleBorderLeftStyleValueTT = azul_impl::css::CssPropertyValue::<StyleBorderLeftStyle>;
pub use AzStyleBorderLeftStyleValueTT as AzStyleBorderLeftStyleValue;

/// Re-export of rust-allocated (stack based) `LayoutBorderLeftWidthValue` struct
pub type AzLayoutBorderLeftWidthValueTT = azul_impl::css::CssPropertyValue::<LayoutBorderLeftWidth>;
pub use AzLayoutBorderLeftWidthValueTT as AzLayoutBorderLeftWidthValue;

/// Re-export of rust-allocated (stack based) `StyleBorderRightColorValue` struct
pub type AzStyleBorderRightColorValueTT = azul_impl::css::CssPropertyValue::<StyleBorderRightColor>;
pub use AzStyleBorderRightColorValueTT as AzStyleBorderRightColorValue;

/// Re-export of rust-allocated (stack based) `StyleBorderRightStyleValue` struct
pub type AzStyleBorderRightStyleValueTT = azul_impl::css::CssPropertyValue::<StyleBorderRightStyle>;
pub use AzStyleBorderRightStyleValueTT as AzStyleBorderRightStyleValue;

/// Re-export of rust-allocated (stack based) `LayoutBorderRightWidthValue` struct
pub type AzLayoutBorderRightWidthValueTT = azul_impl::css::CssPropertyValue::<LayoutBorderRightWidth>;
pub use AzLayoutBorderRightWidthValueTT as AzLayoutBorderRightWidthValue;

/// Re-export of rust-allocated (stack based) `StyleBorderTopColorValue` struct
pub type AzStyleBorderTopColorValueTT = azul_impl::css::CssPropertyValue::<StyleBorderTopColor>;
pub use AzStyleBorderTopColorValueTT as AzStyleBorderTopColorValue;

/// Re-export of rust-allocated (stack based) `StyleBorderTopLeftRadiusValue` struct
pub type AzStyleBorderTopLeftRadiusValueTT = azul_impl::css::CssPropertyValue::<StyleBorderTopLeftRadius>;
pub use AzStyleBorderTopLeftRadiusValueTT as AzStyleBorderTopLeftRadiusValue;

/// Re-export of rust-allocated (stack based) `StyleBorderTopRightRadiusValue` struct
pub type AzStyleBorderTopRightRadiusValueTT = azul_impl::css::CssPropertyValue::<StyleBorderTopRightRadius>;
pub use AzStyleBorderTopRightRadiusValueTT as AzStyleBorderTopRightRadiusValue;

/// Re-export of rust-allocated (stack based) `StyleBorderTopStyleValue` struct
pub type AzStyleBorderTopStyleValueTT = azul_impl::css::CssPropertyValue::<StyleBorderTopStyle>;
pub use AzStyleBorderTopStyleValueTT as AzStyleBorderTopStyleValue;

/// Re-export of rust-allocated (stack based) `LayoutBorderTopWidthValue` struct
pub type AzLayoutBorderTopWidthValueTT = azul_impl::css::CssPropertyValue::<LayoutBorderTopWidth>;
pub use AzLayoutBorderTopWidthValueTT as AzLayoutBorderTopWidthValue;

/// Re-export of rust-allocated (stack based) `StyleCursorValue` struct
pub type AzStyleCursorValueTT = azul_impl::css::CssPropertyValue::<StyleCursor>;
pub use AzStyleCursorValueTT as AzStyleCursorValue;

/// Re-export of rust-allocated (stack based) `StyleFontFamilyValue` struct
pub type AzStyleFontFamilyValueTT = azul_impl::css::CssPropertyValue::<StyleFontFamily>;
pub use AzStyleFontFamilyValueTT as AzStyleFontFamilyValue;

/// Re-export of rust-allocated (stack based) `StyleFontSizeValue` struct
pub type AzStyleFontSizeValueTT = azul_impl::css::CssPropertyValue::<StyleFontSize>;
pub use AzStyleFontSizeValueTT as AzStyleFontSizeValue;

/// Re-export of rust-allocated (stack based) `StyleLetterSpacingValue` struct
pub type AzStyleLetterSpacingValueTT = azul_impl::css::CssPropertyValue::<StyleLetterSpacing>;
pub use AzStyleLetterSpacingValueTT as AzStyleLetterSpacingValue;

/// Re-export of rust-allocated (stack based) `StyleLineHeightValue` struct
pub type AzStyleLineHeightValueTT = azul_impl::css::CssPropertyValue::<StyleLineHeight>;
pub use AzStyleLineHeightValueTT as AzStyleLineHeightValue;

/// Re-export of rust-allocated (stack based) `StyleTabWidthValue` struct
pub type AzStyleTabWidthValueTT = azul_impl::css::CssPropertyValue::<StyleTabWidth>;
pub use AzStyleTabWidthValueTT as AzStyleTabWidthValue;

/// Re-export of rust-allocated (stack based) `StyleTextAlignmentHorzValue` struct
pub type AzStyleTextAlignmentHorzValueTT = azul_impl::css::CssPropertyValue::<StyleTextAlignmentHorz>;
pub use AzStyleTextAlignmentHorzValueTT as AzStyleTextAlignmentHorzValue;

/// Re-export of rust-allocated (stack based) `StyleTextColorValue` struct
pub type AzStyleTextColorValueTT = azul_impl::css::CssPropertyValue::<StyleTextColor>;
pub use AzStyleTextColorValueTT as AzStyleTextColorValue;

/// Re-export of rust-allocated (stack based) `StyleWordSpacingValue` struct
pub type AzStyleWordSpacingValueTT = azul_impl::css::CssPropertyValue::<StyleWordSpacing>;
pub use AzStyleWordSpacingValueTT as AzStyleWordSpacingValue;

/// Re-export of rust-allocated (stack based) `StyleOpacityValue` struct
pub type AzStyleOpacityValueTT = azul_impl::css::CssPropertyValue::<StyleOpacity>;
pub use AzStyleOpacityValueTT as AzStyleOpacityValue;

/// Re-export of rust-allocated (stack based) `StyleTransformVecValue` struct
pub type AzStyleTransformVecValueTT = azul_impl::css::CssPropertyValue::<StyleTransformVec>;
pub use AzStyleTransformVecValueTT as AzStyleTransformVecValue;

/// Re-export of rust-allocated (stack based) `StyleTransformOriginValue` struct
pub type AzStyleTransformOriginValueTT = azul_impl::css::CssPropertyValue::<StyleTransformOrigin>;
pub use AzStyleTransformOriginValueTT as AzStyleTransformOriginValue;

/// Re-export of rust-allocated (stack based) `StylePerspectiveOriginValue` struct
pub type AzStylePerspectiveOriginValueTT = azul_impl::css::CssPropertyValue::<StylePerspectiveOrigin>;
pub use AzStylePerspectiveOriginValueTT as AzStylePerspectiveOriginValue;

/// Re-export of rust-allocated (stack based) `StyleBackfaceVisibilityValue` struct
pub type AzStyleBackfaceVisibilityValueTT = azul_impl::css::CssPropertyValue::<StyleBackfaceVisibility>;
pub use AzStyleBackfaceVisibilityValueTT as AzStyleBackfaceVisibilityValue;

/// Parsed CSS key-value pair
pub type AzCssPropertyTT = azul_impl::css::CssProperty;
pub use AzCssPropertyTT as AzCssProperty;

/// Re-export of rust-allocated (stack based) `Node` struct
pub type AzNodeTT = azul_impl::styled_dom::AzNode;
pub use AzNodeTT as AzNode;

/// Re-export of rust-allocated (stack based) `CascadeInfo` struct
pub type AzCascadeInfoTT = azul_impl::style::CascadeInfo;
pub use AzCascadeInfoTT as AzCascadeInfo;

/// Re-export of rust-allocated (stack based) `CssPropertySource` struct
pub type AzCssPropertySourceTT = azul_impl::styled_dom::CssPropertySource;
pub use AzCssPropertySourceTT as AzCssPropertySource;

/// Re-export of rust-allocated (stack based) `StyledNodeState` struct
pub type AzStyledNodeStateTT = azul_impl::styled_dom::StyledNodeState;
pub use AzStyledNodeStateTT as AzStyledNodeState;

/// Re-export of rust-allocated (stack based) `StyledNode` struct
pub type AzStyledNodeTT = azul_impl::styled_dom::StyledNode;
pub use AzStyledNodeTT as AzStyledNode;

/// Re-export of rust-allocated (stack based) `TagId` struct
pub type AzTagIdTT = azul_impl::styled_dom::AzTagId;
pub use AzTagIdTT as AzTagId;

/// Re-export of rust-allocated (stack based) `TagIdToNodeIdMapping` struct
pub type AzTagIdToNodeIdMappingTT = azul_impl::styled_dom::TagIdToNodeIdMapping;
pub use AzTagIdToNodeIdMappingTT as AzTagIdToNodeIdMapping;

/// Re-export of rust-allocated (stack based) `ParentWithNodeDepth` struct
pub type AzParentWithNodeDepthTT = azul_impl::styled_dom::ParentWithNodeDepth;
pub use AzParentWithNodeDepthTT as AzParentWithNodeDepth;

/// Re-export of rust-allocated (stack based) `CssPropertyCache` struct
pub type AzCssPropertyCacheTT = azul_impl::styled_dom::CssPropertyCachePtr;
pub use AzCssPropertyCacheTT as AzCssPropertyCache;
/// Destructor: Takes ownership of the `CssPropertyCache` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_css_property_cache_delete(object: &mut AzCssPropertyCache) {  unsafe { core::ptr::drop_in_place(object); } }
/// Clones the object
#[no_mangle] pub extern "C" fn az_css_property_cache_deep_copy(object: &AzCssPropertyCache) -> AzCssPropertyCache { object.clone() }

/// Re-export of rust-allocated (stack based) `StyledDom` struct
pub type AzStyledDomTT = azul_impl::styled_dom::StyledDom;
pub use AzStyledDomTT as AzStyledDom;
/// Styles a `Dom` with the given `Css`, returning the `StyledDom` - complexity `O(count(dom_nodes) * count(css_blocks))`: make sure that the `Dom` and the `Css` are as small as possible, use inline CSS if the performance isn't good enough
#[no_mangle] pub extern "C" fn az_styled_dom_new(dom: AzDom, css: AzCss) -> AzStyledDom { AzStyledDom::new(dom, css) }
/// Appends an already styled list of DOM nodes to the current `dom.root` - complexity `O(count(dom.dom_nodes))`
#[no_mangle] pub extern "C" fn az_styled_dom_append(styleddom: &mut AzStyledDom, dom: AzStyledDom) { styleddom.append(dom); }
/// Returns the number of nodes in the styled DOM
#[no_mangle] pub extern "C" fn az_styled_dom_node_count(styleddom: &AzStyledDom) -> usize { styleddom.node_count() }

/// Re-export of rust-allocated (stack based) `GlContextPtr` struct
pub type AzGlContextPtrTT = azul_impl::gl::GlContextPtr;
pub use AzGlContextPtrTT as AzGlContextPtr;
/// Equivalent to the Rust `GlContextPtr::get_type()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_type(glcontextptr: &AzGlContextPtr) -> AzGlType { glcontextptr.get_type() }
/// Equivalent to the Rust `GlContextPtr::buffer_data_untyped()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_buffer_data_untyped(glcontextptr: &AzGlContextPtr, target: u32, size: isize, data: *const c_void, usage: u32) { glcontextptr.buffer_data_untyped(target, size, data, usage) }
/// Equivalent to the Rust `GlContextPtr::buffer_sub_data_untyped()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_buffer_sub_data_untyped(glcontextptr: &AzGlContextPtr, target: u32, offset: isize, size: isize, data: *const c_void) { glcontextptr.buffer_sub_data_untyped(target, offset, size, data) }
/// Equivalent to the Rust `GlContextPtr::map_buffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_map_buffer(glcontextptr: &AzGlContextPtr, target: u32, access: u32) -> *mut c_void { glcontextptr.map_buffer(target, access) }
/// Equivalent to the Rust `GlContextPtr::map_buffer_range()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_map_buffer_range(glcontextptr: &AzGlContextPtr, target: u32, offset: isize, length: isize, access: u32) -> *mut c_void { glcontextptr.map_buffer_range(target, offset, length, access) }
/// Equivalent to the Rust `GlContextPtr::unmap_buffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_unmap_buffer(glcontextptr: &AzGlContextPtr, target: u32) -> u8 { glcontextptr.unmap_buffer(target) }
/// Equivalent to the Rust `GlContextPtr::tex_buffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_tex_buffer(glcontextptr: &AzGlContextPtr, target: u32, internal_format: u32, buffer: u32) { glcontextptr.tex_buffer(target, internal_format, buffer) }
/// Equivalent to the Rust `GlContextPtr::shader_source()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_shader_source(glcontextptr: &AzGlContextPtr, shader: u32, strings: AzStringVec) { glcontextptr.shader_source(shader, strings) }
/// Equivalent to the Rust `GlContextPtr::read_buffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_read_buffer(glcontextptr: &AzGlContextPtr, mode: u32) { glcontextptr.read_buffer(mode) }
/// Equivalent to the Rust `GlContextPtr::read_pixels_into_buffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_read_pixels_into_buffer(glcontextptr: &AzGlContextPtr, x: i32, y: i32, width: i32, height: i32, format: u32, pixel_type: u32, dst_buffer: AzU8VecRefMut) { glcontextptr.read_pixels_into_buffer(x, y, width, height, format, pixel_type, dst_buffer) }
/// Equivalent to the Rust `GlContextPtr::read_pixels()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_read_pixels(glcontextptr: &AzGlContextPtr, x: i32, y: i32, width: i32, height: i32, format: u32, pixel_type: u32) -> AzU8Vec { glcontextptr.read_pixels(x, y, width, height, format, pixel_type) }
/// Equivalent to the Rust `GlContextPtr::read_pixels_into_pbo()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_read_pixels_into_pbo(glcontextptr: &AzGlContextPtr, x: i32, y: i32, width: i32, height: i32, format: u32, pixel_type: u32) { glcontextptr.read_pixels_into_pbo(x, y, width, height, format, pixel_type) }
/// Equivalent to the Rust `GlContextPtr::sample_coverage()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_sample_coverage(glcontextptr: &AzGlContextPtr, value: f32, invert: bool) { glcontextptr.sample_coverage(value, invert) }
/// Equivalent to the Rust `GlContextPtr::polygon_offset()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_polygon_offset(glcontextptr: &AzGlContextPtr, factor: f32, units: f32) { glcontextptr.polygon_offset(factor, units) }
/// Equivalent to the Rust `GlContextPtr::pixel_store_i()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_pixel_store_i(glcontextptr: &AzGlContextPtr, name: u32, param: i32) { glcontextptr.pixel_store_i(name, param) }
/// Equivalent to the Rust `GlContextPtr::gen_buffers()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_gen_buffers(glcontextptr: &AzGlContextPtr, n: i32) -> AzGLuintVec { glcontextptr.gen_buffers(n) }
/// Equivalent to the Rust `GlContextPtr::gen_renderbuffers()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_gen_renderbuffers(glcontextptr: &AzGlContextPtr, n: i32) -> AzGLuintVec { glcontextptr.gen_renderbuffers(n) }
/// Equivalent to the Rust `GlContextPtr::gen_framebuffers()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_gen_framebuffers(glcontextptr: &AzGlContextPtr, n: i32) -> AzGLuintVec { glcontextptr.gen_framebuffers(n) }
/// Equivalent to the Rust `GlContextPtr::gen_textures()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_gen_textures(glcontextptr: &AzGlContextPtr, n: i32) -> AzGLuintVec { glcontextptr.gen_textures(n) }
/// Equivalent to the Rust `GlContextPtr::gen_vertex_arrays()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_gen_vertex_arrays(glcontextptr: &AzGlContextPtr, n: i32) -> AzGLuintVec { glcontextptr.gen_vertex_arrays(n) }
/// Equivalent to the Rust `GlContextPtr::gen_queries()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_gen_queries(glcontextptr: &AzGlContextPtr, n: i32) -> AzGLuintVec { glcontextptr.gen_queries(n) }
/// Equivalent to the Rust `GlContextPtr::begin_query()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_begin_query(glcontextptr: &AzGlContextPtr, target: u32, id: u32) { glcontextptr.begin_query(target, id) }
/// Equivalent to the Rust `GlContextPtr::end_query()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_end_query(glcontextptr: &AzGlContextPtr, target: u32) { glcontextptr.end_query(target) }
/// Equivalent to the Rust `GlContextPtr::query_counter()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_query_counter(glcontextptr: &AzGlContextPtr, id: u32, target: u32) { glcontextptr.query_counter(id, target) }
/// Equivalent to the Rust `GlContextPtr::get_query_object_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_query_object_iv(glcontextptr: &AzGlContextPtr, id: u32, pname: u32) -> i32 { glcontextptr.get_query_object_iv(id, pname) }
/// Equivalent to the Rust `GlContextPtr::get_query_object_uiv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_query_object_uiv(glcontextptr: &AzGlContextPtr, id: u32, pname: u32) -> u32 { glcontextptr.get_query_object_uiv(id, pname) }
/// Equivalent to the Rust `GlContextPtr::get_query_object_i64v()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_query_object_i64v(glcontextptr: &AzGlContextPtr, id: u32, pname: u32) -> i64 { glcontextptr.get_query_object_i64v(id, pname) }
/// Equivalent to the Rust `GlContextPtr::get_query_object_ui64v()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_query_object_ui64v(glcontextptr: &AzGlContextPtr, id: u32, pname: u32) -> u64 { glcontextptr.get_query_object_ui64v(id, pname) }
/// Equivalent to the Rust `GlContextPtr::delete_queries()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_delete_queries(glcontextptr: &AzGlContextPtr, queries: AzGLuintVecRef) { glcontextptr.delete_queries(queries) }
/// Equivalent to the Rust `GlContextPtr::delete_vertex_arrays()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_delete_vertex_arrays(glcontextptr: &AzGlContextPtr, vertex_arrays: AzGLuintVecRef) { glcontextptr.delete_vertex_arrays(vertex_arrays) }
/// Equivalent to the Rust `GlContextPtr::delete_buffers()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_delete_buffers(glcontextptr: &AzGlContextPtr, buffers: AzGLuintVecRef) { glcontextptr.delete_buffers(buffers) }
/// Equivalent to the Rust `GlContextPtr::delete_renderbuffers()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_delete_renderbuffers(glcontextptr: &AzGlContextPtr, renderbuffers: AzGLuintVecRef) { glcontextptr.delete_renderbuffers(renderbuffers) }
/// Equivalent to the Rust `GlContextPtr::delete_framebuffers()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_delete_framebuffers(glcontextptr: &AzGlContextPtr, framebuffers: AzGLuintVecRef) { glcontextptr.delete_framebuffers(framebuffers) }
/// Equivalent to the Rust `GlContextPtr::delete_textures()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_delete_textures(glcontextptr: &AzGlContextPtr, textures: AzGLuintVecRef) { glcontextptr.delete_textures(textures) }
/// Equivalent to the Rust `GlContextPtr::framebuffer_renderbuffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_framebuffer_renderbuffer(glcontextptr: &AzGlContextPtr, target: u32, attachment: u32, renderbuffertarget: u32, renderbuffer: u32) { glcontextptr.framebuffer_renderbuffer(target, attachment, renderbuffertarget, renderbuffer) }
/// Equivalent to the Rust `GlContextPtr::renderbuffer_storage()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_renderbuffer_storage(glcontextptr: &AzGlContextPtr, target: u32, internalformat: u32, width: i32, height: i32) { glcontextptr.renderbuffer_storage(target, internalformat, width, height) }
/// Equivalent to the Rust `GlContextPtr::depth_func()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_depth_func(glcontextptr: &AzGlContextPtr, func: u32) { glcontextptr.depth_func(func) }
/// Equivalent to the Rust `GlContextPtr::active_texture()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_active_texture(glcontextptr: &AzGlContextPtr, texture: u32) { glcontextptr.active_texture(texture) }
/// Equivalent to the Rust `GlContextPtr::attach_shader()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_attach_shader(glcontextptr: &AzGlContextPtr, program: u32, shader: u32) { glcontextptr.attach_shader(program, shader) }
/// Equivalent to the Rust `GlContextPtr::bind_attrib_location()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_bind_attrib_location(glcontextptr: &AzGlContextPtr, program: u32, index: u32, name: AzRefstr) { glcontextptr.bind_attrib_location(program, index, name) }
/// Equivalent to the Rust `GlContextPtr::get_uniform_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_uniform_iv(glcontextptr: &AzGlContextPtr, program: u32, location: i32, result: AzGLintVecRefMut) { glcontextptr.get_uniform_iv(program, location, result) }
/// Equivalent to the Rust `GlContextPtr::get_uniform_fv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_uniform_fv(glcontextptr: &AzGlContextPtr, program: u32, location: i32, result: AzGLfloatVecRefMut) { glcontextptr.get_uniform_fv(program, location, result) }
/// Equivalent to the Rust `GlContextPtr::get_uniform_block_index()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_uniform_block_index(glcontextptr: &AzGlContextPtr, program: u32, name: AzRefstr) -> u32 { glcontextptr.get_uniform_block_index(program, name) }
/// Equivalent to the Rust `GlContextPtr::get_uniform_indices()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_uniform_indices(glcontextptr: &AzGlContextPtr, program: u32, names: AzRefstrVecRef) -> AzGLuintVec { glcontextptr.get_uniform_indices(program, names) }
/// Equivalent to the Rust `GlContextPtr::bind_buffer_base()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_bind_buffer_base(glcontextptr: &AzGlContextPtr, target: u32, index: u32, buffer: u32) { glcontextptr.bind_buffer_base(target, index, buffer) }
/// Equivalent to the Rust `GlContextPtr::bind_buffer_range()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_bind_buffer_range(glcontextptr: &AzGlContextPtr, target: u32, index: u32, buffer: u32, offset: isize, size: isize) { glcontextptr.bind_buffer_range(target, index, buffer, offset, size) }
/// Equivalent to the Rust `GlContextPtr::uniform_block_binding()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_block_binding(glcontextptr: &AzGlContextPtr, program: u32, uniform_block_index: u32, uniform_block_binding: u32) { glcontextptr.uniform_block_binding(program, uniform_block_index, uniform_block_binding) }
/// Equivalent to the Rust `GlContextPtr::bind_buffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_bind_buffer(glcontextptr: &AzGlContextPtr, target: u32, buffer: u32) { glcontextptr.bind_buffer(target, buffer) }
/// Equivalent to the Rust `GlContextPtr::bind_vertex_array()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_bind_vertex_array(glcontextptr: &AzGlContextPtr, vao: u32) { glcontextptr.bind_vertex_array(vao) }
/// Equivalent to the Rust `GlContextPtr::bind_renderbuffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_bind_renderbuffer(glcontextptr: &AzGlContextPtr, target: u32, renderbuffer: u32) { glcontextptr.bind_renderbuffer(target, renderbuffer) }
/// Equivalent to the Rust `GlContextPtr::bind_framebuffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_bind_framebuffer(glcontextptr: &AzGlContextPtr, target: u32, framebuffer: u32) { glcontextptr.bind_framebuffer(target, framebuffer) }
/// Equivalent to the Rust `GlContextPtr::bind_texture()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_bind_texture(glcontextptr: &AzGlContextPtr, target: u32, texture: u32) { glcontextptr.bind_texture(target, texture) }
/// Equivalent to the Rust `GlContextPtr::draw_buffers()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_draw_buffers(glcontextptr: &AzGlContextPtr, bufs: AzGLenumVecRef) { glcontextptr.draw_buffers(bufs) }
/// Equivalent to the Rust `GlContextPtr::tex_image_2d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_tex_image_2d(glcontextptr: &AzGlContextPtr, target: u32, level: i32, internal_format: i32, width: i32, height: i32, border: i32, format: u32, ty: u32, opt_data: AzOptionU8VecRef) { glcontextptr.tex_image_2d(target, level, internal_format, width, height, border, format, ty, opt_data) }
/// Equivalent to the Rust `GlContextPtr::compressed_tex_image_2d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_compressed_tex_image_2d(glcontextptr: &AzGlContextPtr, target: u32, level: i32, internal_format: u32, width: i32, height: i32, border: i32, data: AzU8VecRef) { glcontextptr.compressed_tex_image_2d(target, level, internal_format, width, height, border, data) }
/// Equivalent to the Rust `GlContextPtr::compressed_tex_sub_image_2d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_compressed_tex_sub_image_2d(glcontextptr: &AzGlContextPtr, target: u32, level: i32, xoffset: i32, yoffset: i32, width: i32, height: i32, format: u32, data: AzU8VecRef) { glcontextptr.compressed_tex_sub_image_2d(target, level, xoffset, yoffset, width, height, format, data) }
/// Equivalent to the Rust `GlContextPtr::tex_image_3d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_tex_image_3d(glcontextptr: &AzGlContextPtr, target: u32, level: i32, internal_format: i32, width: i32, height: i32, depth: i32, border: i32, format: u32, ty: u32, opt_data: AzOptionU8VecRef) { glcontextptr.tex_image_3d(target, level, internal_format, width, height, depth, border, format, ty, opt_data) }
/// Equivalent to the Rust `GlContextPtr::copy_tex_image_2d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_copy_tex_image_2d(glcontextptr: &AzGlContextPtr, target: u32, level: i32, internal_format: u32, x: i32, y: i32, width: i32, height: i32, border: i32) { glcontextptr.copy_tex_image_2d(target, level, internal_format, x, y, width, height, border) }
/// Equivalent to the Rust `GlContextPtr::copy_tex_sub_image_2d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_copy_tex_sub_image_2d(glcontextptr: &AzGlContextPtr, target: u32, level: i32, xoffset: i32, yoffset: i32, x: i32, y: i32, width: i32, height: i32) { glcontextptr.copy_tex_sub_image_2d(target, level, xoffset, yoffset, x, y, width, height) }
/// Equivalent to the Rust `GlContextPtr::copy_tex_sub_image_3d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_copy_tex_sub_image_3d(glcontextptr: &AzGlContextPtr, target: u32, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, x: i32, y: i32, width: i32, height: i32) { glcontextptr.copy_tex_sub_image_3d(target, level, xoffset, yoffset, zoffset, x, y, width, height) }
/// Equivalent to the Rust `GlContextPtr::tex_sub_image_2d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_tex_sub_image_2d(glcontextptr: &AzGlContextPtr, target: u32, level: i32, xoffset: i32, yoffset: i32, width: i32, height: i32, format: u32, ty: u32, data: AzU8VecRef) { glcontextptr.tex_sub_image_2d(target, level, xoffset, yoffset, width, height, format, ty, data) }
/// Equivalent to the Rust `GlContextPtr::tex_sub_image_2d_pbo()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_tex_sub_image_2d_pbo(glcontextptr: &AzGlContextPtr, target: u32, level: i32, xoffset: i32, yoffset: i32, width: i32, height: i32, format: u32, ty: u32, offset: usize) { glcontextptr.tex_sub_image_2d_pbo(target, level, xoffset, yoffset, width, height, format, ty, offset) }
/// Equivalent to the Rust `GlContextPtr::tex_sub_image_3d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_tex_sub_image_3d(glcontextptr: &AzGlContextPtr, target: u32, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32, height: i32, depth: i32, format: u32, ty: u32, data: AzU8VecRef) { glcontextptr.tex_sub_image_3d(target, level, xoffset, yoffset, zoffset, width, height, depth, format, ty, data) }
/// Equivalent to the Rust `GlContextPtr::tex_sub_image_3d_pbo()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_tex_sub_image_3d_pbo(glcontextptr: &AzGlContextPtr, target: u32, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32, height: i32, depth: i32, format: u32, ty: u32, offset: usize) { glcontextptr.tex_sub_image_3d_pbo(target, level, xoffset, yoffset, zoffset, width, height, depth, format, ty, offset) }
/// Equivalent to the Rust `GlContextPtr::tex_storage_2d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_tex_storage_2d(glcontextptr: &AzGlContextPtr, target: u32, levels: i32, internal_format: u32, width: i32, height: i32) { glcontextptr.tex_storage_2d(target, levels, internal_format, width, height) }
/// Equivalent to the Rust `GlContextPtr::tex_storage_3d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_tex_storage_3d(glcontextptr: &AzGlContextPtr, target: u32, levels: i32, internal_format: u32, width: i32, height: i32, depth: i32) { glcontextptr.tex_storage_3d(target, levels, internal_format, width, height, depth) }
/// Equivalent to the Rust `GlContextPtr::get_tex_image_into_buffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_tex_image_into_buffer(glcontextptr: &AzGlContextPtr, target: u32, level: i32, format: u32, ty: u32, output: AzU8VecRefMut) { glcontextptr.get_tex_image_into_buffer(target, level, format, ty, output) }
/// Equivalent to the Rust `GlContextPtr::copy_image_sub_data()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_copy_image_sub_data(glcontextptr: &AzGlContextPtr, src_name: u32, src_target: u32, src_level: i32, src_x: i32, src_y: i32, src_z: i32, dst_name: u32, dst_target: u32, dst_level: i32, dst_x: i32, dst_y: i32, dst_z: i32, src_width: i32, src_height: i32, src_depth: i32) { glcontextptr.copy_image_sub_data(src_name, src_target, src_level, src_x, src_y, src_z, dst_name, dst_target, dst_level, dst_x, dst_y, dst_z, src_width, src_height, src_depth) }
/// Equivalent to the Rust `GlContextPtr::invalidate_framebuffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_invalidate_framebuffer(glcontextptr: &AzGlContextPtr, target: u32, attachments: AzGLenumVecRef) { glcontextptr.invalidate_framebuffer(target, attachments) }
/// Equivalent to the Rust `GlContextPtr::invalidate_sub_framebuffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_invalidate_sub_framebuffer(glcontextptr: &AzGlContextPtr, target: u32, attachments: AzGLenumVecRef, xoffset: i32, yoffset: i32, width: i32, height: i32) { glcontextptr.invalidate_sub_framebuffer(target, attachments, xoffset, yoffset, width, height) }
/// Equivalent to the Rust `GlContextPtr::get_integer_v()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_integer_v(glcontextptr: &AzGlContextPtr, name: u32, result: AzGLintVecRefMut) { glcontextptr.get_integer_v(name, result) }
/// Equivalent to the Rust `GlContextPtr::get_integer_64v()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_integer_64v(glcontextptr: &AzGlContextPtr, name: u32, result: AzGLint64VecRefMut) { glcontextptr.get_integer_64v(name, result) }
/// Equivalent to the Rust `GlContextPtr::get_integer_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_integer_iv(glcontextptr: &AzGlContextPtr, name: u32, index: u32, result: AzGLintVecRefMut) { glcontextptr.get_integer_iv(name, index, result) }
/// Equivalent to the Rust `GlContextPtr::get_integer_64iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_integer_64iv(glcontextptr: &AzGlContextPtr, name: u32, index: u32, result: AzGLint64VecRefMut) { glcontextptr.get_integer_64iv(name, index, result) }
/// Equivalent to the Rust `GlContextPtr::get_boolean_v()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_boolean_v(glcontextptr: &AzGlContextPtr, name: u32, result: AzGLbooleanVecRefMut) { glcontextptr.get_boolean_v(name, result) }
/// Equivalent to the Rust `GlContextPtr::get_float_v()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_float_v(glcontextptr: &AzGlContextPtr, name: u32, result: AzGLfloatVecRefMut) { glcontextptr.get_float_v(name, result) }
/// Equivalent to the Rust `GlContextPtr::get_framebuffer_attachment_parameter_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_framebuffer_attachment_parameter_iv(glcontextptr: &AzGlContextPtr, target: u32, attachment: u32, pname: u32) -> i32 { glcontextptr.get_framebuffer_attachment_parameter_iv(target, attachment, pname) }
/// Equivalent to the Rust `GlContextPtr::get_renderbuffer_parameter_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_renderbuffer_parameter_iv(glcontextptr: &AzGlContextPtr, target: u32, pname: u32) -> i32 { glcontextptr.get_renderbuffer_parameter_iv(target, pname) }
/// Equivalent to the Rust `GlContextPtr::get_tex_parameter_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_tex_parameter_iv(glcontextptr: &AzGlContextPtr, target: u32, name: u32) -> i32 { glcontextptr.get_tex_parameter_iv(target, name) }
/// Equivalent to the Rust `GlContextPtr::get_tex_parameter_fv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_tex_parameter_fv(glcontextptr: &AzGlContextPtr, target: u32, name: u32) -> f32 { glcontextptr.get_tex_parameter_fv(target, name) }
/// Equivalent to the Rust `GlContextPtr::tex_parameter_i()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_tex_parameter_i(glcontextptr: &AzGlContextPtr, target: u32, pname: u32, param: i32) { glcontextptr.tex_parameter_i(target, pname, param) }
/// Equivalent to the Rust `GlContextPtr::tex_parameter_f()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_tex_parameter_f(glcontextptr: &AzGlContextPtr, target: u32, pname: u32, param: f32) { glcontextptr.tex_parameter_f(target, pname, param) }
/// Equivalent to the Rust `GlContextPtr::framebuffer_texture_2d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_framebuffer_texture_2d(glcontextptr: &AzGlContextPtr, target: u32, attachment: u32, textarget: u32, texture: u32, level: i32) { glcontextptr.framebuffer_texture_2d(target, attachment, textarget, texture, level) }
/// Equivalent to the Rust `GlContextPtr::framebuffer_texture_layer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_framebuffer_texture_layer(glcontextptr: &AzGlContextPtr, target: u32, attachment: u32, texture: u32, level: i32, layer: i32) { glcontextptr.framebuffer_texture_layer(target, attachment, texture, level, layer) }
/// Equivalent to the Rust `GlContextPtr::blit_framebuffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_blit_framebuffer(glcontextptr: &AzGlContextPtr, src_x0: i32, src_y0: i32, src_x1: i32, src_y1: i32, dst_x0: i32, dst_y0: i32, dst_x1: i32, dst_y1: i32, mask: u32, filter: u32) { glcontextptr.blit_framebuffer(src_x0, src_y0, src_x1, src_y1, dst_x0, dst_y0, dst_x1, dst_y1, mask, filter) }
/// Equivalent to the Rust `GlContextPtr::vertex_attrib_4f()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_vertex_attrib_4f(glcontextptr: &AzGlContextPtr, index: u32, x: f32, y: f32, z: f32, w: f32) { glcontextptr.vertex_attrib_4f(index, x, y, z, w) }
/// Equivalent to the Rust `GlContextPtr::vertex_attrib_pointer_f32()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_vertex_attrib_pointer_f32(glcontextptr: &AzGlContextPtr, index: u32, size: i32, normalized: bool, stride: i32, offset: u32) { glcontextptr.vertex_attrib_pointer_f32(index, size, normalized, stride, offset) }
/// Equivalent to the Rust `GlContextPtr::vertex_attrib_pointer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_vertex_attrib_pointer(glcontextptr: &AzGlContextPtr, index: u32, size: i32, type_: u32, normalized: bool, stride: i32, offset: u32) { glcontextptr.vertex_attrib_pointer(index, size, type_, normalized, stride, offset) }
/// Equivalent to the Rust `GlContextPtr::vertex_attrib_i_pointer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_vertex_attrib_i_pointer(glcontextptr: &AzGlContextPtr, index: u32, size: i32, type_: u32, stride: i32, offset: u32) { glcontextptr.vertex_attrib_i_pointer(index, size, type_, stride, offset) }
/// Equivalent to the Rust `GlContextPtr::vertex_attrib_divisor()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_vertex_attrib_divisor(glcontextptr: &AzGlContextPtr, index: u32, divisor: u32) { glcontextptr.vertex_attrib_divisor(index, divisor) }
/// Equivalent to the Rust `GlContextPtr::viewport()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_viewport(glcontextptr: &AzGlContextPtr, x: i32, y: i32, width: i32, height: i32) { glcontextptr.viewport(x, y, width, height) }
/// Equivalent to the Rust `GlContextPtr::scissor()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_scissor(glcontextptr: &AzGlContextPtr, x: i32, y: i32, width: i32, height: i32) { glcontextptr.scissor(x, y, width, height) }
/// Equivalent to the Rust `GlContextPtr::line_width()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_line_width(glcontextptr: &AzGlContextPtr, width: f32) { glcontextptr.line_width(width) }
/// Equivalent to the Rust `GlContextPtr::use_program()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_use_program(glcontextptr: &AzGlContextPtr, program: u32) { glcontextptr.use_program(program) }
/// Equivalent to the Rust `GlContextPtr::validate_program()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_validate_program(glcontextptr: &AzGlContextPtr, program: u32) { glcontextptr.validate_program(program) }
/// Equivalent to the Rust `GlContextPtr::draw_arrays()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_draw_arrays(glcontextptr: &AzGlContextPtr, mode: u32, first: i32, count: i32) { glcontextptr.draw_arrays(mode, first, count) }
/// Equivalent to the Rust `GlContextPtr::draw_arrays_instanced()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_draw_arrays_instanced(glcontextptr: &AzGlContextPtr, mode: u32, first: i32, count: i32, primcount: i32) { glcontextptr.draw_arrays_instanced(mode, first, count, primcount) }
/// Equivalent to the Rust `GlContextPtr::draw_elements()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_draw_elements(glcontextptr: &AzGlContextPtr, mode: u32, count: i32, element_type: u32, indices_offset: u32) { glcontextptr.draw_elements(mode, count, element_type, indices_offset) }
/// Equivalent to the Rust `GlContextPtr::draw_elements_instanced()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_draw_elements_instanced(glcontextptr: &AzGlContextPtr, mode: u32, count: i32, element_type: u32, indices_offset: u32, primcount: i32) { glcontextptr.draw_elements_instanced(mode, count, element_type, indices_offset, primcount) }
/// Equivalent to the Rust `GlContextPtr::blend_color()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_blend_color(glcontextptr: &AzGlContextPtr, r: f32, g: f32, b: f32, a: f32) { glcontextptr.blend_color(r, g, b, a) }
/// Equivalent to the Rust `GlContextPtr::blend_func()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_blend_func(glcontextptr: &AzGlContextPtr, sfactor: u32, dfactor: u32) { glcontextptr.blend_func(sfactor, dfactor) }
/// Equivalent to the Rust `GlContextPtr::blend_func_separate()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_blend_func_separate(glcontextptr: &AzGlContextPtr, src_rgb: u32, dest_rgb: u32, src_alpha: u32, dest_alpha: u32) { glcontextptr.blend_func_separate(src_rgb, dest_rgb, src_alpha, dest_alpha) }
/// Equivalent to the Rust `GlContextPtr::blend_equation()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_blend_equation(glcontextptr: &AzGlContextPtr, mode: u32) { glcontextptr.blend_equation(mode) }
/// Equivalent to the Rust `GlContextPtr::blend_equation_separate()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_blend_equation_separate(glcontextptr: &AzGlContextPtr, mode_rgb: u32, mode_alpha: u32) { glcontextptr.blend_equation_separate(mode_rgb, mode_alpha) }
/// Equivalent to the Rust `GlContextPtr::color_mask()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_color_mask(glcontextptr: &AzGlContextPtr, r: bool, g: bool, b: bool, a: bool) { glcontextptr.color_mask(r, g, b, a) }
/// Equivalent to the Rust `GlContextPtr::cull_face()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_cull_face(glcontextptr: &AzGlContextPtr, mode: u32) { glcontextptr.cull_face(mode) }
/// Equivalent to the Rust `GlContextPtr::front_face()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_front_face(glcontextptr: &AzGlContextPtr, mode: u32) { glcontextptr.front_face(mode) }
/// Equivalent to the Rust `GlContextPtr::enable()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_enable(glcontextptr: &AzGlContextPtr, cap: u32) { glcontextptr.enable(cap) }
/// Equivalent to the Rust `GlContextPtr::disable()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_disable(glcontextptr: &AzGlContextPtr, cap: u32) { glcontextptr.disable(cap) }
/// Equivalent to the Rust `GlContextPtr::hint()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_hint(glcontextptr: &AzGlContextPtr, param_name: u32, param_val: u32) { glcontextptr.hint(param_name, param_val) }
/// Equivalent to the Rust `GlContextPtr::is_enabled()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_is_enabled(glcontextptr: &AzGlContextPtr, cap: u32) -> u8 { glcontextptr.is_enabled(cap) }
/// Equivalent to the Rust `GlContextPtr::is_shader()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_is_shader(glcontextptr: &AzGlContextPtr, shader: u32) -> u8 { glcontextptr.is_shader(shader) }
/// Equivalent to the Rust `GlContextPtr::is_texture()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_is_texture(glcontextptr: &AzGlContextPtr, texture: u32) -> u8 { glcontextptr.is_texture(texture) }
/// Equivalent to the Rust `GlContextPtr::is_framebuffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_is_framebuffer(glcontextptr: &AzGlContextPtr, framebuffer: u32) -> u8 { glcontextptr.is_framebuffer(framebuffer) }
/// Equivalent to the Rust `GlContextPtr::is_renderbuffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_is_renderbuffer(glcontextptr: &AzGlContextPtr, renderbuffer: u32) -> u8 { glcontextptr.is_renderbuffer(renderbuffer) }
/// Equivalent to the Rust `GlContextPtr::check_frame_buffer_status()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_check_frame_buffer_status(glcontextptr: &AzGlContextPtr, target: u32) -> u32 { glcontextptr.check_frame_buffer_status(target) }
/// Equivalent to the Rust `GlContextPtr::enable_vertex_attrib_array()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_enable_vertex_attrib_array(glcontextptr: &AzGlContextPtr, index: u32) { glcontextptr.enable_vertex_attrib_array(index) }
/// Equivalent to the Rust `GlContextPtr::disable_vertex_attrib_array()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_disable_vertex_attrib_array(glcontextptr: &AzGlContextPtr, index: u32) { glcontextptr.disable_vertex_attrib_array(index) }
/// Equivalent to the Rust `GlContextPtr::uniform_1f()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_1f(glcontextptr: &AzGlContextPtr, location: i32, v0: f32) { glcontextptr.uniform_1f(location, v0) }
/// Equivalent to the Rust `GlContextPtr::uniform_1fv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_1fv(glcontextptr: &AzGlContextPtr, location: i32, values: AzF32VecRef) { glcontextptr.uniform_1fv(location, values) }
/// Equivalent to the Rust `GlContextPtr::uniform_1i()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_1i(glcontextptr: &AzGlContextPtr, location: i32, v0: i32) { glcontextptr.uniform_1i(location, v0) }
/// Equivalent to the Rust `GlContextPtr::uniform_1iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_1iv(glcontextptr: &AzGlContextPtr, location: i32, values: AzI32VecRef) { glcontextptr.uniform_1iv(location, values) }
/// Equivalent to the Rust `GlContextPtr::uniform_1ui()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_1ui(glcontextptr: &AzGlContextPtr, location: i32, v0: u32) { glcontextptr.uniform_1ui(location, v0) }
/// Equivalent to the Rust `GlContextPtr::uniform_2f()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_2f(glcontextptr: &AzGlContextPtr, location: i32, v0: f32, v1: f32) { glcontextptr.uniform_2f(location, v0, v1) }
/// Equivalent to the Rust `GlContextPtr::uniform_2fv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_2fv(glcontextptr: &AzGlContextPtr, location: i32, values: AzF32VecRef) { glcontextptr.uniform_2fv(location, values) }
/// Equivalent to the Rust `GlContextPtr::uniform_2i()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_2i(glcontextptr: &AzGlContextPtr, location: i32, v0: i32, v1: i32) { glcontextptr.uniform_2i(location, v0, v1) }
/// Equivalent to the Rust `GlContextPtr::uniform_2iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_2iv(glcontextptr: &AzGlContextPtr, location: i32, values: AzI32VecRef) { glcontextptr.uniform_2iv(location, values) }
/// Equivalent to the Rust `GlContextPtr::uniform_2ui()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_2ui(glcontextptr: &AzGlContextPtr, location: i32, v0: u32, v1: u32) { glcontextptr.uniform_2ui(location, v0, v1) }
/// Equivalent to the Rust `GlContextPtr::uniform_3f()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_3f(glcontextptr: &AzGlContextPtr, location: i32, v0: f32, v1: f32, v2: f32) { glcontextptr.uniform_3f(location, v0, v1, v2) }
/// Equivalent to the Rust `GlContextPtr::uniform_3fv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_3fv(glcontextptr: &AzGlContextPtr, location: i32, values: AzF32VecRef) { glcontextptr.uniform_3fv(location, values) }
/// Equivalent to the Rust `GlContextPtr::uniform_3i()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_3i(glcontextptr: &AzGlContextPtr, location: i32, v0: i32, v1: i32, v2: i32) { glcontextptr.uniform_3i(location, v0, v1, v2) }
/// Equivalent to the Rust `GlContextPtr::uniform_3iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_3iv(glcontextptr: &AzGlContextPtr, location: i32, values: AzI32VecRef) { glcontextptr.uniform_3iv(location, values) }
/// Equivalent to the Rust `GlContextPtr::uniform_3ui()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_3ui(glcontextptr: &AzGlContextPtr, location: i32, v0: u32, v1: u32, v2: u32) { glcontextptr.uniform_3ui(location, v0, v1, v2) }
/// Equivalent to the Rust `GlContextPtr::uniform_4f()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_4f(glcontextptr: &AzGlContextPtr, location: i32, x: f32, y: f32, z: f32, w: f32) { glcontextptr.uniform_4f(location, x, y, z, w) }
/// Equivalent to the Rust `GlContextPtr::uniform_4i()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_4i(glcontextptr: &AzGlContextPtr, location: i32, x: i32, y: i32, z: i32, w: i32) { glcontextptr.uniform_4i(location, x, y, z, w) }
/// Equivalent to the Rust `GlContextPtr::uniform_4iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_4iv(glcontextptr: &AzGlContextPtr, location: i32, values: AzI32VecRef) { glcontextptr.uniform_4iv(location, values) }
/// Equivalent to the Rust `GlContextPtr::uniform_4ui()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_4ui(glcontextptr: &AzGlContextPtr, location: i32, x: u32, y: u32, z: u32, w: u32) { glcontextptr.uniform_4ui(location, x, y, z, w) }
/// Equivalent to the Rust `GlContextPtr::uniform_4fv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_4fv(glcontextptr: &AzGlContextPtr, location: i32, values: AzF32VecRef) { glcontextptr.uniform_4fv(location, values) }
/// Equivalent to the Rust `GlContextPtr::uniform_matrix_2fv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_matrix_2fv(glcontextptr: &AzGlContextPtr, location: i32, transpose: bool, value: AzF32VecRef) { glcontextptr.uniform_matrix_2fv(location, transpose, value) }
/// Equivalent to the Rust `GlContextPtr::uniform_matrix_3fv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_matrix_3fv(glcontextptr: &AzGlContextPtr, location: i32, transpose: bool, value: AzF32VecRef) { glcontextptr.uniform_matrix_3fv(location, transpose, value) }
/// Equivalent to the Rust `GlContextPtr::uniform_matrix_4fv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_matrix_4fv(glcontextptr: &AzGlContextPtr, location: i32, transpose: bool, value: AzF32VecRef) { glcontextptr.uniform_matrix_4fv(location, transpose, value) }
/// Equivalent to the Rust `GlContextPtr::depth_mask()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_depth_mask(glcontextptr: &AzGlContextPtr, flag: bool) { glcontextptr.depth_mask(flag) }
/// Equivalent to the Rust `GlContextPtr::depth_range()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_depth_range(glcontextptr: &AzGlContextPtr, near: f64, far: f64) { glcontextptr.depth_range(near, far) }
/// Equivalent to the Rust `GlContextPtr::get_active_attrib()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_active_attrib(glcontextptr: &AzGlContextPtr, program: u32, index: u32) -> AzGetActiveAttribReturn { glcontextptr.get_active_attrib(program, index) }
/// Equivalent to the Rust `GlContextPtr::get_active_uniform()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_active_uniform(glcontextptr: &AzGlContextPtr, program: u32, index: u32) -> AzGetActiveUniformReturn { glcontextptr.get_active_uniform(program, index) }
/// Equivalent to the Rust `GlContextPtr::get_active_uniforms_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_active_uniforms_iv(glcontextptr: &AzGlContextPtr, program: u32, indices: AzGLuintVec, pname: u32) -> AzGLintVec { glcontextptr.get_active_uniforms_iv(program, indices, pname) }
/// Equivalent to the Rust `GlContextPtr::get_active_uniform_block_i()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_active_uniform_block_i(glcontextptr: &AzGlContextPtr, program: u32, index: u32, pname: u32) -> i32 { glcontextptr.get_active_uniform_block_i(program, index, pname) }
/// Equivalent to the Rust `GlContextPtr::get_active_uniform_block_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_active_uniform_block_iv(glcontextptr: &AzGlContextPtr, program: u32, index: u32, pname: u32) -> AzGLintVec { glcontextptr.get_active_uniform_block_iv(program, index, pname) }
/// Equivalent to the Rust `GlContextPtr::get_active_uniform_block_name()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_active_uniform_block_name(glcontextptr: &AzGlContextPtr, program: u32, index: u32) -> AzString { glcontextptr.get_active_uniform_block_name(program, index) }
/// Equivalent to the Rust `GlContextPtr::get_attrib_location()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_attrib_location(glcontextptr: &AzGlContextPtr, program: u32, name: AzRefstr) -> i32 { glcontextptr.get_attrib_location(program, name) }
/// Equivalent to the Rust `GlContextPtr::get_frag_data_location()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_frag_data_location(glcontextptr: &AzGlContextPtr, program: u32, name: AzRefstr) -> i32 { glcontextptr.get_frag_data_location(program, name) }
/// Equivalent to the Rust `GlContextPtr::get_uniform_location()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_uniform_location(glcontextptr: &AzGlContextPtr, program: u32, name: AzRefstr) -> i32 { glcontextptr.get_uniform_location(program, name) }
/// Equivalent to the Rust `GlContextPtr::get_program_info_log()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_program_info_log(glcontextptr: &AzGlContextPtr, program: u32) -> AzString { glcontextptr.get_program_info_log(program) }
/// Equivalent to the Rust `GlContextPtr::get_program_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_program_iv(glcontextptr: &AzGlContextPtr, program: u32, pname: u32, result: AzGLintVecRefMut) { glcontextptr.get_program_iv(program, pname, result) }
/// Equivalent to the Rust `GlContextPtr::get_program_binary()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_program_binary(glcontextptr: &AzGlContextPtr, program: u32) -> AzGetProgramBinaryReturn { glcontextptr.get_program_binary(program) }
/// Equivalent to the Rust `GlContextPtr::program_binary()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_program_binary(glcontextptr: &AzGlContextPtr, program: u32, format: u32, binary: AzU8VecRef) { glcontextptr.program_binary(program, format, binary) }
/// Equivalent to the Rust `GlContextPtr::program_parameter_i()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_program_parameter_i(glcontextptr: &AzGlContextPtr, program: u32, pname: u32, value: i32) { glcontextptr.program_parameter_i(program, pname, value) }
/// Equivalent to the Rust `GlContextPtr::get_vertex_attrib_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_vertex_attrib_iv(glcontextptr: &AzGlContextPtr, index: u32, pname: u32, result: AzGLintVecRefMut) { glcontextptr.get_vertex_attrib_iv(index, pname, result) }
/// Equivalent to the Rust `GlContextPtr::get_vertex_attrib_fv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_vertex_attrib_fv(glcontextptr: &AzGlContextPtr, index: u32, pname: u32, result: AzGLfloatVecRefMut) { glcontextptr.get_vertex_attrib_fv(index, pname, result) }
/// Equivalent to the Rust `GlContextPtr::get_vertex_attrib_pointer_v()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_vertex_attrib_pointer_v(glcontextptr: &AzGlContextPtr, index: u32, pname: u32) -> isize { glcontextptr.get_vertex_attrib_pointer_v(index, pname) }
/// Equivalent to the Rust `GlContextPtr::get_buffer_parameter_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_buffer_parameter_iv(glcontextptr: &AzGlContextPtr, target: u32, pname: u32) -> i32 { glcontextptr.get_buffer_parameter_iv(target, pname) }
/// Equivalent to the Rust `GlContextPtr::get_shader_info_log()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_shader_info_log(glcontextptr: &AzGlContextPtr, shader: u32) -> AzString { glcontextptr.get_shader_info_log(shader) }
/// Equivalent to the Rust `GlContextPtr::get_string()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_string(glcontextptr: &AzGlContextPtr, which: u32) -> AzString { glcontextptr.get_string(which) }
/// Equivalent to the Rust `GlContextPtr::get_string_i()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_string_i(glcontextptr: &AzGlContextPtr, which: u32, index: u32) -> AzString { glcontextptr.get_string_i(which, index) }
/// Equivalent to the Rust `GlContextPtr::get_shader_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_shader_iv(glcontextptr: &AzGlContextPtr, shader: u32, pname: u32, result: AzGLintVecRefMut) { glcontextptr.get_shader_iv(shader, pname, result) }
/// Equivalent to the Rust `GlContextPtr::get_shader_precision_format()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_shader_precision_format(glcontextptr: &AzGlContextPtr, shader_type: u32, precision_type: u32) -> AzGlShaderPrecisionFormatReturn { glcontextptr.get_shader_precision_format(shader_type, precision_type) }
/// Equivalent to the Rust `GlContextPtr::compile_shader()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_compile_shader(glcontextptr: &AzGlContextPtr, shader: u32) { glcontextptr.compile_shader(shader) }
/// Equivalent to the Rust `GlContextPtr::create_program()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_create_program(glcontextptr: &AzGlContextPtr) -> u32 { glcontextptr.create_program() }
/// Equivalent to the Rust `GlContextPtr::delete_program()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_delete_program(glcontextptr: &AzGlContextPtr, program: u32) { glcontextptr.delete_program(program) }
/// Equivalent to the Rust `GlContextPtr::create_shader()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_create_shader(glcontextptr: &AzGlContextPtr, shader_type: u32) -> u32 { glcontextptr.create_shader(shader_type) }
/// Equivalent to the Rust `GlContextPtr::delete_shader()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_delete_shader(glcontextptr: &AzGlContextPtr, shader: u32) { glcontextptr.delete_shader(shader) }
/// Equivalent to the Rust `GlContextPtr::detach_shader()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_detach_shader(glcontextptr: &AzGlContextPtr, program: u32, shader: u32) { glcontextptr.detach_shader(program, shader) }
/// Equivalent to the Rust `GlContextPtr::link_program()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_link_program(glcontextptr: &AzGlContextPtr, program: u32) { glcontextptr.link_program(program) }
/// Equivalent to the Rust `GlContextPtr::clear_color()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_clear_color(glcontextptr: &AzGlContextPtr, r: f32, g: f32, b: f32, a: f32) { glcontextptr.clear_color(r, g, b, a) }
/// Equivalent to the Rust `GlContextPtr::clear()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_clear(glcontextptr: &AzGlContextPtr, buffer_mask: u32) { glcontextptr.clear(buffer_mask) }
/// Equivalent to the Rust `GlContextPtr::clear_depth()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_clear_depth(glcontextptr: &AzGlContextPtr, depth: f64) { glcontextptr.clear_depth(depth) }
/// Equivalent to the Rust `GlContextPtr::clear_stencil()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_clear_stencil(glcontextptr: &AzGlContextPtr, s: i32) { glcontextptr.clear_stencil(s) }
/// Equivalent to the Rust `GlContextPtr::flush()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_flush(glcontextptr: &AzGlContextPtr) { glcontextptr.flush() }
/// Equivalent to the Rust `GlContextPtr::finish()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_finish(glcontextptr: &AzGlContextPtr) { glcontextptr.finish() }
/// Equivalent to the Rust `GlContextPtr::get_error()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_error(glcontextptr: &AzGlContextPtr) -> u32 { glcontextptr.get_error() }
/// Equivalent to the Rust `GlContextPtr::stencil_mask()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_stencil_mask(glcontextptr: &AzGlContextPtr, mask: u32) { glcontextptr.stencil_mask(mask) }
/// Equivalent to the Rust `GlContextPtr::stencil_mask_separate()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_stencil_mask_separate(glcontextptr: &AzGlContextPtr, face: u32, mask: u32) { glcontextptr.stencil_mask_separate(face, mask) }
/// Equivalent to the Rust `GlContextPtr::stencil_func()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_stencil_func(glcontextptr: &AzGlContextPtr, func: u32, ref_: i32, mask: u32) { glcontextptr.stencil_func(func, ref_, mask) }
/// Equivalent to the Rust `GlContextPtr::stencil_func_separate()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_stencil_func_separate(glcontextptr: &AzGlContextPtr, face: u32, func: u32, ref_: i32, mask: u32) { glcontextptr.stencil_func_separate(face, func, ref_, mask) }
/// Equivalent to the Rust `GlContextPtr::stencil_op()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_stencil_op(glcontextptr: &AzGlContextPtr, sfail: u32, dpfail: u32, dppass: u32) { glcontextptr.stencil_op(sfail, dpfail, dppass) }
/// Equivalent to the Rust `GlContextPtr::stencil_op_separate()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_stencil_op_separate(glcontextptr: &AzGlContextPtr, face: u32, sfail: u32, dpfail: u32, dppass: u32) { glcontextptr.stencil_op_separate(face, sfail, dpfail, dppass) }
/// Equivalent to the Rust `GlContextPtr::egl_image_target_texture2d_oes()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_egl_image_target_texture2d_oes(glcontextptr: &AzGlContextPtr, target: u32, image: *const c_void) { glcontextptr.egl_image_target_texture2d_oes(target, image) }
/// Equivalent to the Rust `GlContextPtr::generate_mipmap()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_generate_mipmap(glcontextptr: &AzGlContextPtr, target: u32) { glcontextptr.generate_mipmap(target) }
/// Equivalent to the Rust `GlContextPtr::insert_event_marker_ext()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_insert_event_marker_ext(glcontextptr: &AzGlContextPtr, message: AzRefstr) { glcontextptr.insert_event_marker_ext(message) }
/// Equivalent to the Rust `GlContextPtr::push_group_marker_ext()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_push_group_marker_ext(glcontextptr: &AzGlContextPtr, message: AzRefstr) { glcontextptr.push_group_marker_ext(message) }
/// Equivalent to the Rust `GlContextPtr::pop_group_marker_ext()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_pop_group_marker_ext(glcontextptr: &AzGlContextPtr) { glcontextptr.pop_group_marker_ext() }
/// Equivalent to the Rust `GlContextPtr::debug_message_insert_khr()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_debug_message_insert_khr(glcontextptr: &AzGlContextPtr, source: u32, type_: u32, id: u32, severity: u32, message: AzRefstr) { glcontextptr.debug_message_insert_khr(source, type_, id, severity, message) }
/// Equivalent to the Rust `GlContextPtr::push_debug_group_khr()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_push_debug_group_khr(glcontextptr: &AzGlContextPtr, source: u32, id: u32, message: AzRefstr) { glcontextptr.push_debug_group_khr(source, id, message) }
/// Equivalent to the Rust `GlContextPtr::pop_debug_group_khr()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_pop_debug_group_khr(glcontextptr: &AzGlContextPtr) { glcontextptr.pop_debug_group_khr() }
/// Equivalent to the Rust `GlContextPtr::fence_sync()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_fence_sync(glcontextptr: &AzGlContextPtr, condition: u32, flags: u32) -> AzGLsyncPtr { glcontextptr.fence_sync(condition, flags) }
/// Equivalent to the Rust `GlContextPtr::client_wait_sync()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_client_wait_sync(glcontextptr: &AzGlContextPtr, sync: AzGLsyncPtr, flags: u32, timeout: u64) -> u32 { glcontextptr.client_wait_sync(sync, flags, timeout) }
/// Equivalent to the Rust `GlContextPtr::wait_sync()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_wait_sync(glcontextptr: &AzGlContextPtr, sync: AzGLsyncPtr, flags: u32, timeout: u64) { glcontextptr.wait_sync(sync, flags, timeout) }
/// Equivalent to the Rust `GlContextPtr::delete_sync()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_delete_sync(glcontextptr: &AzGlContextPtr, sync: AzGLsyncPtr) { glcontextptr.delete_sync(sync) }
/// Equivalent to the Rust `GlContextPtr::texture_range_apple()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_texture_range_apple(glcontextptr: &AzGlContextPtr, target: u32, data: AzU8VecRef) { glcontextptr.texture_range_apple(target, data) }
/// Equivalent to the Rust `GlContextPtr::gen_fences_apple()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_gen_fences_apple(glcontextptr: &AzGlContextPtr, n: i32) -> AzGLuintVec { glcontextptr.gen_fences_apple(n) }
/// Equivalent to the Rust `GlContextPtr::delete_fences_apple()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_delete_fences_apple(glcontextptr: &AzGlContextPtr, fences: AzGLuintVecRef) { glcontextptr.delete_fences_apple(fences) }
/// Equivalent to the Rust `GlContextPtr::set_fence_apple()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_set_fence_apple(glcontextptr: &AzGlContextPtr, fence: u32) { glcontextptr.set_fence_apple(fence) }
/// Equivalent to the Rust `GlContextPtr::finish_fence_apple()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_finish_fence_apple(glcontextptr: &AzGlContextPtr, fence: u32) { glcontextptr.finish_fence_apple(fence) }
/// Equivalent to the Rust `GlContextPtr::test_fence_apple()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_test_fence_apple(glcontextptr: &AzGlContextPtr, fence: u32) { glcontextptr.test_fence_apple(fence) }
/// Equivalent to the Rust `GlContextPtr::test_object_apple()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_test_object_apple(glcontextptr: &AzGlContextPtr, object: u32, name: u32) -> u8 { glcontextptr.test_object_apple(object, name) }
/// Equivalent to the Rust `GlContextPtr::finish_object_apple()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_finish_object_apple(glcontextptr: &AzGlContextPtr, object: u32, name: u32) { glcontextptr.finish_object_apple(object, name) }
/// Equivalent to the Rust `GlContextPtr::get_frag_data_index()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_frag_data_index(glcontextptr: &AzGlContextPtr, program: u32, name: AzRefstr) -> i32 { glcontextptr.get_frag_data_index(program, name) }
/// Equivalent to the Rust `GlContextPtr::blend_barrier_khr()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_blend_barrier_khr(glcontextptr: &AzGlContextPtr) { glcontextptr.blend_barrier_khr() }
/// Equivalent to the Rust `GlContextPtr::bind_frag_data_location_indexed()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_bind_frag_data_location_indexed(glcontextptr: &AzGlContextPtr, program: u32, color_number: u32, index: u32, name: AzRefstr) { glcontextptr.bind_frag_data_location_indexed(program, color_number, index, name) }
/// Equivalent to the Rust `GlContextPtr::get_debug_messages()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_debug_messages(glcontextptr: &AzGlContextPtr) -> AzDebugMessageVec { glcontextptr.get_debug_messages() }
/// Equivalent to the Rust `GlContextPtr::provoking_vertex_angle()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_provoking_vertex_angle(glcontextptr: &AzGlContextPtr, mode: u32) { glcontextptr.provoking_vertex_angle(mode) }
/// Equivalent to the Rust `GlContextPtr::gen_vertex_arrays_apple()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_gen_vertex_arrays_apple(glcontextptr: &AzGlContextPtr, n: i32) -> AzGLuintVec { glcontextptr.gen_vertex_arrays_apple(n) }
/// Equivalent to the Rust `GlContextPtr::bind_vertex_array_apple()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_bind_vertex_array_apple(glcontextptr: &AzGlContextPtr, vao: u32) { glcontextptr.bind_vertex_array_apple(vao) }
/// Equivalent to the Rust `GlContextPtr::delete_vertex_arrays_apple()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_delete_vertex_arrays_apple(glcontextptr: &AzGlContextPtr, vertex_arrays: AzGLuintVecRef) { glcontextptr.delete_vertex_arrays_apple(vertex_arrays) }
/// Equivalent to the Rust `GlContextPtr::copy_texture_chromium()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_copy_texture_chromium(glcontextptr: &AzGlContextPtr, source_id: u32, source_level: i32, dest_target: u32, dest_id: u32, dest_level: i32, internal_format: i32, dest_type: u32, unpack_flip_y: u8, unpack_premultiply_alpha: u8, unpack_unmultiply_alpha: u8) { glcontextptr.copy_texture_chromium(source_id, source_level, dest_target, dest_id, dest_level, internal_format, dest_type, unpack_flip_y, unpack_premultiply_alpha, unpack_unmultiply_alpha) }
/// Equivalent to the Rust `GlContextPtr::copy_sub_texture_chromium()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_copy_sub_texture_chromium(glcontextptr: &AzGlContextPtr, source_id: u32, source_level: i32, dest_target: u32, dest_id: u32, dest_level: i32, x_offset: i32, y_offset: i32, x: i32, y: i32, width: i32, height: i32, unpack_flip_y: u8, unpack_premultiply_alpha: u8, unpack_unmultiply_alpha: u8) { glcontextptr.copy_sub_texture_chromium(source_id, source_level, dest_target, dest_id, dest_level, x_offset, y_offset, x, y, width, height, unpack_flip_y, unpack_premultiply_alpha, unpack_unmultiply_alpha) }
/// Equivalent to the Rust `GlContextPtr::egl_image_target_renderbuffer_storage_oes()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_egl_image_target_renderbuffer_storage_oes(glcontextptr: &AzGlContextPtr, target: u32, image: *const c_void) { glcontextptr.egl_image_target_renderbuffer_storage_oes(target, image) }
/// Equivalent to the Rust `GlContextPtr::copy_texture_3d_angle()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_copy_texture_3d_angle(glcontextptr: &AzGlContextPtr, source_id: u32, source_level: i32, dest_target: u32, dest_id: u32, dest_level: i32, internal_format: i32, dest_type: u32, unpack_flip_y: u8, unpack_premultiply_alpha: u8, unpack_unmultiply_alpha: u8) { glcontextptr.copy_texture_3d_angle(source_id, source_level, dest_target, dest_id, dest_level, internal_format, dest_type, unpack_flip_y, unpack_premultiply_alpha, unpack_unmultiply_alpha) }
/// Equivalent to the Rust `GlContextPtr::copy_sub_texture_3d_angle()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_copy_sub_texture_3d_angle(glcontextptr: &AzGlContextPtr, source_id: u32, source_level: i32, dest_target: u32, dest_id: u32, dest_level: i32, x_offset: i32, y_offset: i32, z_offset: i32, x: i32, y: i32, z: i32, width: i32, height: i32, depth: i32, unpack_flip_y: u8, unpack_premultiply_alpha: u8, unpack_unmultiply_alpha: u8) { glcontextptr.copy_sub_texture_3d_angle(source_id, source_level, dest_target, dest_id, dest_level, x_offset, y_offset, z_offset, x, y, z, width, height, depth, unpack_flip_y, unpack_premultiply_alpha, unpack_unmultiply_alpha) }
/// Equivalent to the Rust `GlContextPtr::buffer_storage()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_buffer_storage(glcontextptr: &AzGlContextPtr, target: u32, size: isize, data: *const c_void, flags: u32) { glcontextptr.buffer_storage(target, size, data, flags) }
/// Equivalent to the Rust `GlContextPtr::flush_mapped_buffer_range()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_flush_mapped_buffer_range(glcontextptr: &AzGlContextPtr, target: u32, offset: isize, length: isize) { glcontextptr.flush_mapped_buffer_range(target, offset, length) }
/// Destructor: Takes ownership of the `GlContextPtr` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_delete(object: &mut AzGlContextPtr) {  unsafe { core::ptr::drop_in_place(object); } }
/// Clones the object
#[no_mangle] pub extern "C" fn az_gl_context_ptr_deep_copy(object: &AzGlContextPtr) -> AzGlContextPtr { object.clone() }

/// Re-export of rust-allocated (stack based) `Texture` struct
pub type AzTextureTT = azul_impl::gl::Texture;
pub use AzTextureTT as AzTexture;
/// Destructor: Takes ownership of the `Texture` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_texture_delete(object: &mut AzTexture) {  unsafe { core::ptr::drop_in_place(object); } }

/// Re-export of rust-allocated (stack based) `GlShaderPrecisionFormatReturn` struct
pub type AzGlShaderPrecisionFormatReturnTT = azul_impl::gl::GlShaderPrecisionFormatReturn;
pub use AzGlShaderPrecisionFormatReturnTT as AzGlShaderPrecisionFormatReturn;

/// Re-export of rust-allocated (stack based) `VertexAttributeType` struct
pub type AzVertexAttributeTypeTT = azul_impl::gl::VertexAttributeType;
pub use AzVertexAttributeTypeTT as AzVertexAttributeType;

/// Re-export of rust-allocated (stack based) `VertexAttribute` struct
pub type AzVertexAttributeTT = azul_impl::gl::VertexAttribute;
pub use AzVertexAttributeTT as AzVertexAttribute;

/// Re-export of rust-allocated (stack based) `VertexLayout` struct
pub type AzVertexLayoutTT = azul_impl::gl::VertexLayout;
pub use AzVertexLayoutTT as AzVertexLayout;

/// Re-export of rust-allocated (stack based) `VertexArrayObject` struct
pub type AzVertexArrayObjectTT = azul_impl::gl::VertexArrayObject;
pub use AzVertexArrayObjectTT as AzVertexArrayObject;

/// Re-export of rust-allocated (stack based) `IndexBufferFormat` struct
pub type AzIndexBufferFormatTT = azul_impl::gl::IndexBufferFormat;
pub use AzIndexBufferFormatTT as AzIndexBufferFormat;

/// Re-export of rust-allocated (stack based) `VertexBuffer` struct
pub type AzVertexBufferTT = azul_impl::gl::VertexBuffer;
pub use AzVertexBufferTT as AzVertexBuffer;

/// Re-export of rust-allocated (stack based) `GlType` struct
pub type AzGlTypeTT = azul_impl::gl::AzGlType;
pub use AzGlTypeTT as AzGlType;

/// Re-export of rust-allocated (stack based) `DebugMessage` struct
pub type AzDebugMessageTT = azul_impl::gl::AzDebugMessage;
pub use AzDebugMessageTT as AzDebugMessage;

/// C-ABI stable reexport of `&[u8]`
pub type AzU8VecRefTT = azul_impl::gl::U8VecRef;
pub use AzU8VecRefTT as AzU8VecRef;

/// C-ABI stable reexport of `&mut [u8]`
pub type AzU8VecRefMutTT = azul_impl::gl::U8VecRefMut;
pub use AzU8VecRefMutTT as AzU8VecRefMut;

/// C-ABI stable reexport of `&[f32]`
pub type AzF32VecRefTT = azul_impl::gl::F32VecRef;
pub use AzF32VecRefTT as AzF32VecRef;

/// C-ABI stable reexport of `&[i32]`
pub type AzI32VecRefTT = azul_impl::gl::I32VecRef;
pub use AzI32VecRefTT as AzI32VecRef;

/// C-ABI stable reexport of `&[GLuint]` aka `&[u32]`
pub type AzGLuintVecRefTT = azul_impl::gl::GLuintVecRef;
pub use AzGLuintVecRefTT as AzGLuintVecRef;

/// C-ABI stable reexport of `&[GLenum]` aka `&[u32]`
pub type AzGLenumVecRefTT = azul_impl::gl::GLenumVecRef;
pub use AzGLenumVecRefTT as AzGLenumVecRef;

/// C-ABI stable reexport of `&mut [GLint]` aka `&mut [i32]`
pub type AzGLintVecRefMutTT = azul_impl::gl::GLintVecRefMut;
pub use AzGLintVecRefMutTT as AzGLintVecRefMut;

/// C-ABI stable reexport of `&mut [GLint64]` aka `&mut [i64]`
pub type AzGLint64VecRefMutTT = azul_impl::gl::GLint64VecRefMut;
pub use AzGLint64VecRefMutTT as AzGLint64VecRefMut;

/// C-ABI stable reexport of `&mut [GLboolean]` aka `&mut [u8]`
pub type AzGLbooleanVecRefMutTT = azul_impl::gl::GLbooleanVecRefMut;
pub use AzGLbooleanVecRefMutTT as AzGLbooleanVecRefMut;

/// C-ABI stable reexport of `&mut [GLfloat]` aka `&mut [f32]`
pub type AzGLfloatVecRefMutTT = azul_impl::gl::GLfloatVecRefMut;
pub use AzGLfloatVecRefMutTT as AzGLfloatVecRefMut;

/// C-ABI stable reexport of `&[Refstr]` aka `&mut [&str]`
pub type AzRefstrVecRefTT = azul_impl::gl::RefstrVecRef;
pub use AzRefstrVecRefTT as AzRefstrVecRef;

/// C-ABI stable reexport of `&str`
pub type AzRefstrTT = azul_impl::gl::Refstr;
pub use AzRefstrTT as AzRefstr;

/// C-ABI stable reexport of `(U8Vec, u32)`
pub type AzGetProgramBinaryReturnTT = azul_impl::gl::GetProgramBinaryReturn;
pub use AzGetProgramBinaryReturnTT as AzGetProgramBinaryReturn;

/// C-ABI stable reexport of `(i32, u32, AzString)`
pub type AzGetActiveAttribReturnTT = azul_impl::gl::GetActiveAttribReturn;
pub use AzGetActiveAttribReturnTT as AzGetActiveAttribReturn;

/// C-ABI stable reexport of `*const gleam::gl::GLsync`
pub type AzGLsyncPtrTT = azul_impl::gl::GLsyncPtr;
pub use AzGLsyncPtrTT as AzGLsyncPtr;
/// Destructor: Takes ownership of the `GLsyncPtr` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_g_lsync_ptr_delete(object: &mut AzGLsyncPtr) {  unsafe { core::ptr::drop_in_place(object); } }

/// C-ABI stable reexport of `(i32, u32, AzString)`
pub type AzGetActiveUniformReturnTT = azul_impl::gl::GetActiveUniformReturn;
pub use AzGetActiveUniformReturnTT as AzGetActiveUniformReturn;

/// Re-export of rust-allocated (stack based) `TextureFlags` struct
pub type AzTextureFlagsTT = azul_impl::gl::TextureFlags;
pub use AzTextureFlagsTT as AzTextureFlags;
/// Default texture flags (not opaque, not a video texture)
#[no_mangle] pub extern "C" fn az_texture_flags_default() -> AzTextureFlags { TextureFlags::default() }

/// Re-export of rust-allocated (stack based) `ImageMask` struct
pub type AzImageMaskTT = azul_impl::resources::ImageMask;
pub use AzImageMaskTT as AzImageMask;

/// Re-export of rust-allocated (stack based) `RawImageFormat` struct
pub type AzRawImageFormatTT = azul_impl::resources::RawImageFormat;
pub use AzRawImageFormatTT as AzRawImageFormat;

/// Re-export of rust-allocated (stack based) `ImageId` struct
pub type AzImageIdTT = azul_impl::resources::ImageId;
pub use AzImageIdTT as AzImageId;
/// Creates a new, unique `ImageId`
#[no_mangle] pub extern "C" fn az_image_id_new() -> AzImageId { ImageId::new() }

/// Re-export of rust-allocated (stack based) `FontId` struct
pub type AzFontIdTT = azul_impl::resources::FontId;
pub use AzFontIdTT as AzFontId;
/// Creates a new, unique `FontId`
#[no_mangle] pub extern "C" fn az_font_id_new() -> AzFontId { FontId::new() }

/// Re-export of rust-allocated (stack based) `ImageSource` struct
pub type AzImageSourceTT = azul_impl::resources::ImageSource;
pub use AzImageSourceTT as AzImageSource;

/// Re-export of rust-allocated (stack based) `FontSource` struct
pub type AzFontSourceTT = azul_impl::resources::FontSource;
pub use AzFontSourceTT as AzFontSource;

/// Re-export of rust-allocated (stack based) `EmbeddedFontSource` struct
pub type AzEmbeddedFontSourceTT = azul_impl::resources::EmbeddedFontSource;
pub use AzEmbeddedFontSourceTT as AzEmbeddedFontSource;

/// Re-export of rust-allocated (stack based) `FileFontSource` struct
pub type AzFileFontSourceTT = azul_impl::resources::FileFontSource;
pub use AzFileFontSourceTT as AzFileFontSource;

/// Re-export of rust-allocated (stack based) `SystemFontSource` struct
pub type AzSystemFontSourceTT = azul_impl::resources::SystemFontSource;
pub use AzSystemFontSourceTT as AzSystemFontSource;

/// Re-export of rust-allocated (stack based) `RawImage` struct
pub type AzRawImageTT = azul_impl::resources::RawImage;
pub use AzRawImageTT as AzRawImage;
/// Creates a new `RawImage` by loading the decoded bytes
#[no_mangle] pub extern "C" fn az_raw_image_new(decoded_pixels: AzU8Vec, width: usize, height: usize, data_format: AzRawImageFormat) -> AzRawImage { RawImage { pixels: decoded_pixels, width, height, data_format: data_format } }

/// Re-export of rust-allocated (stack based) `SvgMultiPolygon` struct
pub type AzSvgMultiPolygonTT = azul_impl::svg::SvgMultiPolygon;
pub use AzSvgMultiPolygonTT as AzSvgMultiPolygon;

/// Re-export of rust-allocated (stack based) `SvgNode` struct
pub type AzSvgNodeTT = azul_impl::svg::SvgNode;
pub use AzSvgNodeTT as AzSvgNode;

/// Re-export of rust-allocated (stack based) `SvgStyledNode` struct
pub type AzSvgStyledNodeTT = azul_impl::svg::SvgStyledNode;
pub use AzSvgStyledNodeTT as AzSvgStyledNode;

/// Re-export of rust-allocated (stack based) `SvgCircle` struct
pub type AzSvgCircleTT = azul_impl::svg::SvgCircle;
pub use AzSvgCircleTT as AzSvgCircle;

/// Re-export of rust-allocated (stack based) `SvgPath` struct
pub type AzSvgPathTT = azul_impl::svg::SvgPath;
pub use AzSvgPathTT as AzSvgPath;

/// Re-export of rust-allocated (stack based) `SvgPathElement` struct
pub type AzSvgPathElementTT = azul_impl::svg::SvgPathElement;
pub use AzSvgPathElementTT as AzSvgPathElement;

/// Re-export of rust-allocated (stack based) `SvgLine` struct
pub type AzSvgLineTT = azul_impl::svg::SvgLine;
pub use AzSvgLineTT as AzSvgLine;

/// Re-export of rust-allocated (stack based) `SvgPoint` struct
pub type AzSvgPointTT = azul_impl::svg::SvgPoint;
pub use AzSvgPointTT as AzSvgPoint;

/// Re-export of rust-allocated (stack based) `SvgVertex` struct
pub type AzSvgVertexTT = azul_impl::svg::SvgVertex;
pub use AzSvgVertexTT as AzSvgVertex;

/// Re-export of rust-allocated (stack based) `SvgQuadraticCurve` struct
pub type AzSvgQuadraticCurveTT = azul_impl::svg::SvgQuadraticCurve;
pub use AzSvgQuadraticCurveTT as AzSvgQuadraticCurve;

/// Re-export of rust-allocated (stack based) `SvgCubicCurve` struct
pub type AzSvgCubicCurveTT = azul_impl::svg::SvgCubicCurve;
pub use AzSvgCubicCurveTT as AzSvgCubicCurve;

/// Re-export of rust-allocated (stack based) `SvgRect` struct
pub type AzSvgRectTT = azul_impl::svg::SvgRect;
pub use AzSvgRectTT as AzSvgRect;

/// Re-export of rust-allocated (stack based) `TesselatedCPUSvgNode` struct
pub type AzTesselatedCPUSvgNodeTT = azul_impl::svg::TesselatedCPUSvgNode;
pub use AzTesselatedCPUSvgNodeTT as AzTesselatedCPUSvgNode;

/// Re-export of rust-allocated (stack based) `SvgLineCap` struct
pub type AzSvgLineCapTT = azul_impl::svg::SvgLineCap;
pub use AzSvgLineCapTT as AzSvgLineCap;

/// Re-export of rust-allocated (stack based) `SvgParseOptions` struct
pub type AzSvgParseOptionsTT = azul_impl::svg::SvgParseOptions;
pub use AzSvgParseOptionsTT as AzSvgParseOptions;
/// Creates a new `SvgParseOptions` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `SvgParseOptions::default()` constructor.
#[no_mangle] pub extern "C" fn az_svg_parse_options_default() -> AzSvgParseOptions { AzSvgParseOptions::default() }

/// Re-export of rust-allocated (stack based) `ShapeRendering` struct
pub type AzShapeRenderingTT = azul_impl::svg::ShapeRendering;
pub use AzShapeRenderingTT as AzShapeRendering;

/// Re-export of rust-allocated (stack based) `TextRendering` struct
pub type AzTextRenderingTT = azul_impl::svg::TextRendering;
pub use AzTextRenderingTT as AzTextRendering;

/// Re-export of rust-allocated (stack based) `ImageRendering` struct
pub type AzImageRenderingTT = azul_impl::svg::ImageRendering;
pub use AzImageRenderingTT as AzImageRendering;

/// Re-export of rust-allocated (stack based) `FontDatabase` struct
pub type AzFontDatabaseTT = azul_impl::svg::FontDatabase;
pub use AzFontDatabaseTT as AzFontDatabase;

/// Re-export of rust-allocated (stack based) `SvgRenderOptions` struct
pub type AzSvgRenderOptionsTT = azul_impl::svg::SvgRenderOptions;
pub use AzSvgRenderOptionsTT as AzSvgRenderOptions;
/// Creates a new `SvgRenderOptions` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `SvgRenderOptions::default()` constructor.
#[no_mangle] pub extern "C" fn az_svg_render_options_default() -> AzSvgRenderOptions { AzSvgRenderOptions::default() }

/// Re-export of rust-allocated (stack based) `SvgFitTo` struct
pub type AzSvgFitToTT = azul_impl::svg::SvgFitTo;
pub use AzSvgFitToTT as AzSvgFitTo;

/// Re-export of rust-allocated (stack based) `Svg` struct
pub type AzSvgTT = azul_impl::svg::Svg;
pub use AzSvgTT as AzSvg;
/// Creates a new `Svg` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `Svg::parse()` constructor.
#[no_mangle] pub extern "C" fn az_svg_parse(svg_bytes: AzU8VecRef, parse_options: AzSvgParseOptions) -> AzResultSvgSvgParseError { azul_impl::svg::Svg::parse(svg_bytes.as_slice(), parse_options).into() }
/// Destructor: Takes ownership of the `Svg` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_svg_delete(object: &mut AzSvg) {  unsafe { core::ptr::drop_in_place(object); } }
/// Clones the object
#[no_mangle] pub extern "C" fn az_svg_deep_copy(object: &AzSvg) -> AzSvg { object.clone() }

/// Re-export of rust-allocated (stack based) `SvgXmlNode` struct
pub type AzSvgXmlNodeTT = azul_impl::svg::SvgXmlNode;
pub use AzSvgXmlNodeTT as AzSvgXmlNode;
/// Destructor: Takes ownership of the `SvgXmlNode` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_svg_xml_node_delete(object: &mut AzSvgXmlNode) {  unsafe { core::ptr::drop_in_place(object); } }
/// Clones the object
#[no_mangle] pub extern "C" fn az_svg_xml_node_deep_copy(object: &AzSvgXmlNode) -> AzSvgXmlNode { object.clone() }

/// Re-export of rust-allocated (stack based) `SvgLineJoin` struct
pub type AzSvgLineJoinTT = azul_impl::svg::SvgLineJoin;
pub use AzSvgLineJoinTT as AzSvgLineJoin;

/// Re-export of rust-allocated (stack based) `SvgDashPattern` struct
pub type AzSvgDashPatternTT = azul_impl::svg::SvgDashPattern;
pub use AzSvgDashPatternTT as AzSvgDashPattern;

/// Re-export of rust-allocated (stack based) `SvgStyle` struct
pub type AzSvgStyleTT = azul_impl::svg::SvgStyle;
pub use AzSvgStyleTT as AzSvgStyle;

/// Re-export of rust-allocated (stack based) `SvgFillStyle` struct
pub type AzSvgFillStyleTT = azul_impl::svg::SvgFillStyle;
pub use AzSvgFillStyleTT as AzSvgFillStyle;

/// Re-export of rust-allocated (stack based) `SvgStrokeStyle` struct
pub type AzSvgStrokeStyleTT = azul_impl::svg::SvgStrokeStyle;
pub use AzSvgStrokeStyleTT as AzSvgStrokeStyle;

/// Re-export of rust-allocated (stack based) `TimerId` struct
pub type AzTimerIdTT = azul_impl::task::TimerId;
pub use AzTimerIdTT as AzTimerId;
/// Creates a new `TimerId` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `TimerId::unique()` constructor.
#[no_mangle] pub extern "C" fn az_timer_id_unique() -> AzTimerId { TimerId::unique() }

/// Re-export of rust-allocated (stack based) `Timer` struct
pub type AzTimerTT = azul_impl::task::Timer;
pub use AzTimerTT as AzTimer;
/// Creates a new `Timer` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `Timer::new()` constructor.
#[no_mangle] pub extern "C" fn az_timer_new(timer_data: AzRefAny, callback: AzTimerCallbackType, get_system_time_fn: AzGetSystemTimeFn) -> AzTimer { Timer::new(timer_data, callback, get_system_time_fn) }
/// Equivalent to the Rust `Timer::with_delay()` function.
#[no_mangle] pub extern "C" fn az_timer_with_delay(timer: AzTimer, delay: AzDuration) -> AzTimer { timer.with_delay(delay) }
/// Equivalent to the Rust `Timer::with_interval()` function.
#[no_mangle] pub extern "C" fn az_timer_with_interval(timer: AzTimer, interval: AzDuration) -> AzTimer { timer.with_interval(interval) }
/// Equivalent to the Rust `Timer::with_timeout()` function.
#[no_mangle] pub extern "C" fn az_timer_with_timeout(timer: AzTimer, timeout: AzDuration) -> AzTimer { timer.with_timeout(timeout) }

/// Should a timer terminate or not - used to remove active timers
pub type AzTerminateTimerTT = azul_impl::task::TerminateTimer;
pub use AzTerminateTimerTT as AzTerminateTimer;

/// Re-export of rust-allocated (stack based) `ThreadId` struct
pub type AzThreadIdTT = azul_impl::task::ThreadId;
pub use AzThreadIdTT as AzThreadId;

/// Re-export of rust-allocated (stack based) `Thread` struct
pub type AzThreadTT = azul_impl::task::Thread;
pub use AzThreadTT as AzThread;

/// Re-export of rust-allocated (stack based) `ThreadSender` struct
pub type AzThreadSenderTT = azul_impl::task::ThreadSender;
pub use AzThreadSenderTT as AzThreadSender;
/// Equivalent to the Rust `ThreadSender::send()` function.
#[no_mangle] pub extern "C" fn az_thread_sender_send(threadsender: &mut AzThreadSender, msg: AzThreadReceiveMsg) -> bool { threadsender.send(msg) }
/// Destructor: Takes ownership of the `ThreadSender` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_thread_sender_delete(object: &mut AzThreadSender) {  unsafe { core::ptr::drop_in_place(object); } }

/// Re-export of rust-allocated (stack based) `ThreadReceiver` struct
pub type AzThreadReceiverTT = azul_impl::task::ThreadReceiver;
pub use AzThreadReceiverTT as AzThreadReceiver;
/// Equivalent to the Rust `ThreadReceiver::receive()` function.
#[no_mangle] pub extern "C" fn az_thread_receiver_receive(threadreceiver: &mut AzThreadReceiver) -> AzOptionThreadSendMsg { threadreceiver.recv().into() }
/// Destructor: Takes ownership of the `ThreadReceiver` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_thread_receiver_delete(object: &mut AzThreadReceiver) {  unsafe { core::ptr::drop_in_place(object); } }

/// Re-export of rust-allocated (stack based) `ThreadSendMsg` struct
pub type AzThreadSendMsgTT = azul_impl::task::ThreadSendMsg;
pub use AzThreadSendMsgTT as AzThreadSendMsg;

/// Re-export of rust-allocated (stack based) `ThreadReceiveMsg` struct
pub type AzThreadReceiveMsgTT = azul_impl::task::ThreadReceiveMsg;
pub use AzThreadReceiveMsgTT as AzThreadReceiveMsg;

/// Re-export of rust-allocated (stack based) `ThreadWriteBackMsg` struct
pub type AzThreadWriteBackMsgTT = azul_impl::task::ThreadWriteBackMsg;
pub use AzThreadWriteBackMsgTT as AzThreadWriteBackMsg;

pub type AzCreateThreadFnType = extern "C" fn(AzRefAny, AzRefAny, AzThreadCallbackType) -> AzThread;
/// Re-export of rust-allocated (stack based) `CreateThreadFn` struct
pub type AzCreateThreadFnTT = azul_impl::task::CreateThreadCallback;
pub use AzCreateThreadFnTT as AzCreateThreadFn;

pub type AzGetSystemTimeFnType = extern "C" fn() -> AzInstant;
/// Get the current system time, equivalent to `std::time::Instant::now()`, except it also works on systems that work with "ticks" instead of timers
pub type AzGetSystemTimeFnTT = azul_impl::task::GetSystemTimeCallback;
pub use AzGetSystemTimeFnTT as AzGetSystemTimeFn;

pub type AzCheckThreadFinishedFnType = extern "C" fn(&c_void) -> bool;
/// Function called to check if the thread has finished
pub type AzCheckThreadFinishedFnTT = azul_impl::task::CheckThreadFinishedCallback;
pub use AzCheckThreadFinishedFnTT as AzCheckThreadFinishedFn;

pub type AzLibrarySendThreadMsgFnType = extern "C" fn(&mut c_void, AzThreadSendMsg) -> bool;
/// Function to send a message to the thread
pub type AzLibrarySendThreadMsgFnTT = azul_impl::task::LibrarySendThreadMsgCallback;
pub use AzLibrarySendThreadMsgFnTT as AzLibrarySendThreadMsgFn;

pub type AzLibraryReceiveThreadMsgFnType = extern "C" fn(&mut c_void) -> AzOptionThreadReceiveMsg;
/// Function to receive a message from the thread
pub type AzLibraryReceiveThreadMsgFnTT = azul_impl::task::LibraryReceiveThreadMsgCallback;
pub use AzLibraryReceiveThreadMsgFnTT as AzLibraryReceiveThreadMsgFn;

pub type AzThreadRecvFnType = extern "C" fn(&mut c_void) -> AzOptionThreadSendMsg;
/// Function that the running `Thread` can call to receive messages from the main UI thread
pub type AzThreadRecvFnTT = azul_impl::task::ThreadRecvCallback;
pub use AzThreadRecvFnTT as AzThreadRecvFn;

pub type AzThreadSendFnType = extern "C" fn(&mut c_void, AzThreadReceiveMsg) -> bool;
/// Function that the running `Thread` can call to receive messages from the main UI thread
pub type AzThreadSendFnTT = azul_impl::task::ThreadSendCallback;
pub use AzThreadSendFnTT as AzThreadSendFn;

pub type AzThreadDestructorFnType = extern "C" fn(&mut c_void, &mut c_void, &mut c_void, &mut c_void);
/// Destructor of the `Thread`
pub type AzThreadDestructorFnTT = azul_impl::task::ThreadDestructorCallback;
pub use AzThreadDestructorFnTT as AzThreadDestructorFn;

pub type AzThreadReceiverDestructorFnType = extern "C" fn(&mut AzThreadReceiver);
/// Destructor of the `ThreadReceiver`
pub type AzThreadReceiverDestructorFnTT = azul_impl::task::ThreadReceiverDestructorCallback;
pub use AzThreadReceiverDestructorFnTT as AzThreadReceiverDestructorFn;

pub type AzThreadSenderDestructorFnType = extern "C" fn(&mut AzThreadSender);
/// Destructor of the `ThreadSender`
pub type AzThreadSenderDestructorFnTT = azul_impl::task::ThreadSenderDestructorCallback;
pub use AzThreadSenderDestructorFnTT as AzThreadSenderDestructorFn;

/// Re-export of rust-allocated (stack based) `String` struct
pub type AzStringTT = azul_impl::css::AzString;
pub use AzStringTT as AzString;

/// Wrapper over a Rust-allocated `Vec<Monitor>`
pub type AzMonitorVecTT = azul_impl::window::MonitorVec;
pub use AzMonitorVecTT as AzMonitorVec;
/// Destructor: Takes ownership of the `MonitorVec` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_monitor_vec_delete(object: &mut AzMonitorVec) {  unsafe { core::ptr::drop_in_place(object); } }

/// Wrapper over a Rust-allocated `Vec<VideoMode>`
pub type AzVideoModeVecTT = azul_impl::window::VideoModeVec;
pub use AzVideoModeVecTT as AzVideoModeVec;
/// Destructor: Takes ownership of the `VideoModeVec` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_video_mode_vec_delete(object: &mut AzVideoModeVec) {  unsafe { core::ptr::drop_in_place(object); } }

/// Wrapper over a Rust-allocated `Vec<Dom>`
pub type AzDomVecTT = azul_impl::dom::DomVec;
pub use AzDomVecTT as AzDomVec;
/// Destructor: Takes ownership of the `DomVec` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_dom_vec_delete(object: &mut AzDomVec) {  unsafe { core::ptr::drop_in_place(object); } }

/// Wrapper over a Rust-allocated `Vec<IdOrClass>`
pub type AzIdOrClassVecTT = azul_impl::dom::IdOrClassVec;
pub use AzIdOrClassVecTT as AzIdOrClassVec;
/// Destructor: Takes ownership of the `IdOrClassVec` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_id_or_class_vec_delete(object: &mut AzIdOrClassVec) {  unsafe { core::ptr::drop_in_place(object); } }

/// Wrapper over a Rust-allocated `Vec<NodeDataInlineCssProperty>`
pub type AzNodeDataInlineCssPropertyVecTT = azul_impl::dom::NodeDataInlineCssPropertyVec;
pub use AzNodeDataInlineCssPropertyVecTT as AzNodeDataInlineCssPropertyVec;
/// Destructor: Takes ownership of the `NodeDataInlineCssPropertyVec` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_node_data_inline_css_property_vec_delete(object: &mut AzNodeDataInlineCssPropertyVec) {  unsafe { core::ptr::drop_in_place(object); } }

/// Wrapper over a Rust-allocated `Vec<StyleBackgroundContent>`
pub type AzStyleBackgroundContentVecTT = azul_impl::css::StyleBackgroundContentVec;
pub use AzStyleBackgroundContentVecTT as AzStyleBackgroundContentVec;
/// Destructor: Takes ownership of the `StyleBackgroundContentVec` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_style_background_content_vec_delete(object: &mut AzStyleBackgroundContentVec) {  unsafe { core::ptr::drop_in_place(object); } }

/// Wrapper over a Rust-allocated `Vec<StyleBackgroundPosition>`
pub type AzStyleBackgroundPositionVecTT = azul_impl::css::StyleBackgroundPositionVec;
pub use AzStyleBackgroundPositionVecTT as AzStyleBackgroundPositionVec;
/// Destructor: Takes ownership of the `StyleBackgroundPositionVec` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_style_background_position_vec_delete(object: &mut AzStyleBackgroundPositionVec) {  unsafe { core::ptr::drop_in_place(object); } }

/// Wrapper over a Rust-allocated `Vec<StyleBackgroundRepeat>`
pub type AzStyleBackgroundRepeatVecTT = azul_impl::css::StyleBackgroundRepeatVec;
pub use AzStyleBackgroundRepeatVecTT as AzStyleBackgroundRepeatVec;
/// Destructor: Takes ownership of the `StyleBackgroundRepeatVec` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_style_background_repeat_vec_delete(object: &mut AzStyleBackgroundRepeatVec) {  unsafe { core::ptr::drop_in_place(object); } }

/// Wrapper over a Rust-allocated `Vec<StyleBackgroundSize>`
pub type AzStyleBackgroundSizeVecTT = azul_impl::css::StyleBackgroundSizeVec;
pub use AzStyleBackgroundSizeVecTT as AzStyleBackgroundSizeVec;
/// Destructor: Takes ownership of the `StyleBackgroundSizeVec` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_style_background_size_vec_delete(object: &mut AzStyleBackgroundSizeVec) {  unsafe { core::ptr::drop_in_place(object); } }

/// Wrapper over a Rust-allocated `Vec<StyleTransform>`
pub type AzStyleTransformVecTT = azul_impl::css::StyleTransformVec;
pub use AzStyleTransformVecTT as AzStyleTransformVec;
/// Destructor: Takes ownership of the `StyleTransformVec` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_style_transform_vec_delete(object: &mut AzStyleTransformVec) {  unsafe { core::ptr::drop_in_place(object); } }

/// Wrapper over a Rust-allocated `Vec<CssProperty>`
pub type AzCssPropertyVecTT = azul_impl::css::CssPropertyVec;
pub use AzCssPropertyVecTT as AzCssPropertyVec;
/// Destructor: Takes ownership of the `CssPropertyVec` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_css_property_vec_delete(object: &mut AzCssPropertyVec) {  unsafe { core::ptr::drop_in_place(object); } }

/// Wrapper over a Rust-allocated `Vec<SvgMultiPolygon>`
pub type AzSvgMultiPolygonVecTT = azul_impl::svg::SvgMultiPolygonVec;
pub use AzSvgMultiPolygonVecTT as AzSvgMultiPolygonVec;
/// Destructor: Takes ownership of the `SvgMultiPolygonVec` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_svg_multi_polygon_vec_delete(object: &mut AzSvgMultiPolygonVec) {  unsafe { core::ptr::drop_in_place(object); } }

/// Wrapper over a Rust-allocated `Vec<SvgPath>`
pub type AzSvgPathVecTT = azul_impl::svg::SvgPathVec;
pub use AzSvgPathVecTT as AzSvgPathVec;
/// Destructor: Takes ownership of the `SvgPathVec` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_svg_path_vec_delete(object: &mut AzSvgPathVec) {  unsafe { core::ptr::drop_in_place(object); } }

/// Wrapper over a Rust-allocated `Vec<VertexAttribute>`
pub type AzVertexAttributeVecTT = azul_impl::gl::VertexAttributeVec;
pub use AzVertexAttributeVecTT as AzVertexAttributeVec;
/// Destructor: Takes ownership of the `VertexAttributeVec` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_vertex_attribute_vec_delete(object: &mut AzVertexAttributeVec) {  unsafe { core::ptr::drop_in_place(object); } }

/// Wrapper over a Rust-allocated `VertexAttribute`
pub type AzSvgPathElementVecTT = azul_impl::svg::SvgPathElementVec;
pub use AzSvgPathElementVecTT as AzSvgPathElementVec;
/// Destructor: Takes ownership of the `SvgPathElementVec` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_svg_path_element_vec_delete(object: &mut AzSvgPathElementVec) {  unsafe { core::ptr::drop_in_place(object); } }

/// Wrapper over a Rust-allocated `SvgVertex`
pub type AzSvgVertexVecTT = azul_impl::svg::SvgVertexVec;
pub use AzSvgVertexVecTT as AzSvgVertexVec;
/// Destructor: Takes ownership of the `SvgVertexVec` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_svg_vertex_vec_delete(object: &mut AzSvgVertexVec) {  unsafe { core::ptr::drop_in_place(object); } }

/// Wrapper over a Rust-allocated `Vec<u32>`
pub type AzU32VecTT = azul_impl::css::U32Vec;
pub use AzU32VecTT as AzU32Vec;
/// Destructor: Takes ownership of the `U32Vec` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_u32_vec_delete(object: &mut AzU32Vec) {  unsafe { core::ptr::drop_in_place(object); } }

/// Wrapper over a Rust-allocated `XWindowType`
pub type AzXWindowTypeVecTT = azul_impl::window::XWindowTypeVec;
pub use AzXWindowTypeVecTT as AzXWindowTypeVec;
/// Destructor: Takes ownership of the `XWindowTypeVec` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_x_window_type_vec_delete(object: &mut AzXWindowTypeVec) {  unsafe { core::ptr::drop_in_place(object); } }

/// Wrapper over a Rust-allocated `VirtualKeyCode`
pub type AzVirtualKeyCodeVecTT = azul_impl::window::VirtualKeyCodeVec;
pub use AzVirtualKeyCodeVecTT as AzVirtualKeyCodeVec;
/// Destructor: Takes ownership of the `VirtualKeyCodeVec` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_virtual_key_code_vec_delete(object: &mut AzVirtualKeyCodeVec) {  unsafe { core::ptr::drop_in_place(object); } }

/// Wrapper over a Rust-allocated `CascadeInfo`
pub type AzCascadeInfoVecTT = azul_impl::style::CascadeInfoVec;
pub use AzCascadeInfoVecTT as AzCascadeInfoVec;
/// Destructor: Takes ownership of the `CascadeInfoVec` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_cascade_info_vec_delete(object: &mut AzCascadeInfoVec) {  unsafe { core::ptr::drop_in_place(object); } }

/// Wrapper over a Rust-allocated `ScanCode`
pub type AzScanCodeVecTT = azul_impl::window::ScanCodeVec;
pub use AzScanCodeVecTT as AzScanCodeVec;
/// Destructor: Takes ownership of the `ScanCodeVec` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_scan_code_vec_delete(object: &mut AzScanCodeVec) {  unsafe { core::ptr::drop_in_place(object); } }

/// Wrapper over a Rust-allocated `CssDeclaration`
pub type AzCssDeclarationVecTT = azul_impl::css::CssDeclarationVec;
pub use AzCssDeclarationVecTT as AzCssDeclarationVec;
/// Destructor: Takes ownership of the `CssDeclarationVec` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_css_declaration_vec_delete(object: &mut AzCssDeclarationVec) {  unsafe { core::ptr::drop_in_place(object); } }

/// Wrapper over a Rust-allocated `CssPathSelector`
pub type AzCssPathSelectorVecTT = azul_impl::css::CssPathSelectorVec;
pub use AzCssPathSelectorVecTT as AzCssPathSelectorVec;
/// Destructor: Takes ownership of the `CssPathSelectorVec` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_css_path_selector_vec_delete(object: &mut AzCssPathSelectorVec) {  unsafe { core::ptr::drop_in_place(object); } }

/// Wrapper over a Rust-allocated `Stylesheet`
pub type AzStylesheetVecTT = azul_impl::css::StylesheetVec;
pub use AzStylesheetVecTT as AzStylesheetVec;
/// Destructor: Takes ownership of the `StylesheetVec` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_stylesheet_vec_delete(object: &mut AzStylesheetVec) {  unsafe { core::ptr::drop_in_place(object); } }

/// Wrapper over a Rust-allocated `CssRuleBlock`
pub type AzCssRuleBlockVecTT = azul_impl::css::CssRuleBlockVec;
pub use AzCssRuleBlockVecTT as AzCssRuleBlockVec;
/// Destructor: Takes ownership of the `CssRuleBlockVec` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_css_rule_block_vec_delete(object: &mut AzCssRuleBlockVec) {  unsafe { core::ptr::drop_in_place(object); } }

/// Wrapper over a Rust-allocated `U8Vec`
pub type AzU8VecTT = azul_impl::css::U8Vec;
pub use AzU8VecTT as AzU8Vec;
/// Destructor: Takes ownership of the `U8Vec` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_u8_vec_delete(object: &mut AzU8Vec) {  unsafe { core::ptr::drop_in_place(object); } }

/// Wrapper over a Rust-allocated `CallbackData`
pub type AzCallbackDataVecTT = azul_impl::dom::CallbackDataVec;
pub use AzCallbackDataVecTT as AzCallbackDataVec;
/// Destructor: Takes ownership of the `CallbackDataVec` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_callback_data_vec_delete(object: &mut AzCallbackDataVec) {  unsafe { core::ptr::drop_in_place(object); } }

/// Wrapper over a Rust-allocated `Vec<DebugMessage>`
pub type AzDebugMessageVecTT = azul_impl::gl::AzDebugMessageVec;
pub use AzDebugMessageVecTT as AzDebugMessageVec;
/// Destructor: Takes ownership of the `DebugMessageVec` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_debug_message_vec_delete(object: &mut AzDebugMessageVec) {  unsafe { core::ptr::drop_in_place(object); } }

/// Wrapper over a Rust-allocated `U32Vec`
pub type AzGLuintVecTT = azul_impl::gl::GLuintVec;
pub use AzGLuintVecTT as AzGLuintVec;
/// Destructor: Takes ownership of the `GLuintVec` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_g_luint_vec_delete(object: &mut AzGLuintVec) {  unsafe { core::ptr::drop_in_place(object); } }

/// Wrapper over a Rust-allocated `GLintVec`
pub type AzGLintVecTT = azul_impl::gl::GLintVec;
pub use AzGLintVecTT as AzGLintVec;
/// Destructor: Takes ownership of the `GLintVec` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_g_lint_vec_delete(object: &mut AzGLintVec) {  unsafe { core::ptr::drop_in_place(object); } }

/// Wrapper over a Rust-allocated `StringVec`
pub type AzStringVecTT = azul_impl::css::StringVec;
pub use AzStringVecTT as AzStringVec;
/// Destructor: Takes ownership of the `StringVec` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_string_vec_delete(object: &mut AzStringVec) {  unsafe { core::ptr::drop_in_place(object); } }

/// Wrapper over a Rust-allocated `StringPairVec`
pub type AzStringPairVecTT = azul_impl::window::StringPairVec;
pub use AzStringPairVecTT as AzStringPairVec;
/// Destructor: Takes ownership of the `StringPairVec` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_string_pair_vec_delete(object: &mut AzStringPairVec) {  unsafe { core::ptr::drop_in_place(object); } }

/// Wrapper over a Rust-allocated `LinearColorStopVec`
pub type AzLinearColorStopVecTT = azul_impl::css::LinearColorStopVec;
pub use AzLinearColorStopVecTT as AzLinearColorStopVec;
/// Destructor: Takes ownership of the `LinearColorStopVec` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_linear_color_stop_vec_delete(object: &mut AzLinearColorStopVec) {  unsafe { core::ptr::drop_in_place(object); } }

/// Wrapper over a Rust-allocated `RadialColorStopVec`
pub type AzRadialColorStopVecTT = azul_impl::css::RadialColorStopVec;
pub use AzRadialColorStopVecTT as AzRadialColorStopVec;
/// Destructor: Takes ownership of the `RadialColorStopVec` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_radial_color_stop_vec_delete(object: &mut AzRadialColorStopVec) {  unsafe { core::ptr::drop_in_place(object); } }

/// Wrapper over a Rust-allocated `NodeIdVec`
pub type AzNodeIdVecTT = azul_impl::styled_dom::NodeIdVec;
pub use AzNodeIdVecTT as AzNodeIdVec;
/// Destructor: Takes ownership of the `NodeIdVec` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_node_id_vec_delete(object: &mut AzNodeIdVec) {  unsafe { core::ptr::drop_in_place(object); } }

/// Wrapper over a Rust-allocated `NodeVec`
pub type AzNodeVecTT = azul_impl::styled_dom::AzNodeVec;
pub use AzNodeVecTT as AzNodeVec;
/// Destructor: Takes ownership of the `NodeVec` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_node_vec_delete(object: &mut AzNodeVec) {  unsafe { core::ptr::drop_in_place(object); } }

/// Wrapper over a Rust-allocated `StyledNodeVec`
pub type AzStyledNodeVecTT = azul_impl::styled_dom::StyledNodeVec;
pub use AzStyledNodeVecTT as AzStyledNodeVec;
/// Destructor: Takes ownership of the `StyledNodeVec` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_styled_node_vec_delete(object: &mut AzStyledNodeVec) {  unsafe { core::ptr::drop_in_place(object); } }

/// Wrapper over a Rust-allocated `TagIdsToNodeIdsMappingVec`
pub type AzTagIdsToNodeIdsMappingVecTT = azul_impl::styled_dom::TagIdsToNodeIdsMappingVec;
pub use AzTagIdsToNodeIdsMappingVecTT as AzTagIdsToNodeIdsMappingVec;
/// Destructor: Takes ownership of the `TagIdsToNodeIdsMappingVec` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_tag_ids_to_node_ids_mapping_vec_delete(object: &mut AzTagIdsToNodeIdsMappingVec) {  unsafe { core::ptr::drop_in_place(object); } }

/// Wrapper over a Rust-allocated `ParentWithNodeDepthVec`
pub type AzParentWithNodeDepthVecTT = azul_impl::styled_dom::ParentWithNodeDepthVec;
pub use AzParentWithNodeDepthVecTT as AzParentWithNodeDepthVec;
/// Destructor: Takes ownership of the `ParentWithNodeDepthVec` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_parent_with_node_depth_vec_delete(object: &mut AzParentWithNodeDepthVec) {  unsafe { core::ptr::drop_in_place(object); } }

/// Wrapper over a Rust-allocated `NodeDataVec`
pub type AzNodeDataVecTT = azul_impl::dom::NodeDataVec;
pub use AzNodeDataVecTT as AzNodeDataVec;
/// Destructor: Takes ownership of the `NodeDataVec` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_node_data_vec_delete(object: &mut AzNodeDataVec) {  unsafe { core::ptr::drop_in_place(object); } }

/// Re-export of rust-allocated (stack based) `MonitorVecDestructor` struct
pub type AzMonitorVecDestructorTT = azul_impl::window::MonitorVecDestructor;
pub use AzMonitorVecDestructorTT as AzMonitorVecDestructor;

pub type AzMonitorVecDestructorType = extern "C" fn(&mut AzMonitorVec);
/// Re-export of rust-allocated (stack based) `VideoModeVecDestructor` struct
pub type AzVideoModeVecDestructorTT = azul_impl::window::VideoModeVecDestructor;
pub use AzVideoModeVecDestructorTT as AzVideoModeVecDestructor;

pub type AzVideoModeVecDestructorType = extern "C" fn(&mut AzVideoModeVec);
/// Re-export of rust-allocated (stack based) `DomVecDestructor` struct
pub type AzDomVecDestructorTT = azul_impl::dom::DomVecDestructor;
pub use AzDomVecDestructorTT as AzDomVecDestructor;

pub type AzDomVecDestructorType = extern "C" fn(&mut AzDomVec);
/// Re-export of rust-allocated (stack based) `IdOrClassVecDestructor` struct
pub type AzIdOrClassVecDestructorTT = azul_impl::dom::IdOrClassVecDestructor;
pub use AzIdOrClassVecDestructorTT as AzIdOrClassVecDestructor;

pub type AzIdOrClassVecDestructorType = extern "C" fn(&mut AzIdOrClassVec);
/// Re-export of rust-allocated (stack based) `NodeDataInlineCssPropertyVecDestructor` struct
pub type AzNodeDataInlineCssPropertyVecDestructorTT = azul_impl::dom::NodeDataInlineCssPropertyVecDestructor;
pub use AzNodeDataInlineCssPropertyVecDestructorTT as AzNodeDataInlineCssPropertyVecDestructor;

pub type AzNodeDataInlineCssPropertyVecDestructorType = extern "C" fn(&mut AzNodeDataInlineCssPropertyVec);
/// Re-export of rust-allocated (stack based) `StyleBackgroundContentVecDestructor` struct
pub type AzStyleBackgroundContentVecDestructorTT = azul_impl::css::StyleBackgroundContentVecDestructor;
pub use AzStyleBackgroundContentVecDestructorTT as AzStyleBackgroundContentVecDestructor;

pub type AzStyleBackgroundContentVecDestructorType = extern "C" fn(&mut AzStyleBackgroundContentVec);
/// Re-export of rust-allocated (stack based) `StyleBackgroundPositionVecDestructor` struct
pub type AzStyleBackgroundPositionVecDestructorTT = azul_impl::css::StyleBackgroundPositionVecDestructor;
pub use AzStyleBackgroundPositionVecDestructorTT as AzStyleBackgroundPositionVecDestructor;

pub type AzStyleBackgroundPositionVecDestructorType = extern "C" fn(&mut AzStyleBackgroundPositionVec);
/// Re-export of rust-allocated (stack based) `StyleBackgroundRepeatVecDestructor` struct
pub type AzStyleBackgroundRepeatVecDestructorTT = azul_impl::css::StyleBackgroundRepeatVecDestructor;
pub use AzStyleBackgroundRepeatVecDestructorTT as AzStyleBackgroundRepeatVecDestructor;

pub type AzStyleBackgroundRepeatVecDestructorType = extern "C" fn(&mut AzStyleBackgroundRepeatVec);
/// Re-export of rust-allocated (stack based) `StyleBackgroundSizeVecDestructor` struct
pub type AzStyleBackgroundSizeVecDestructorTT = azul_impl::css::StyleBackgroundSizeVecDestructor;
pub use AzStyleBackgroundSizeVecDestructorTT as AzStyleBackgroundSizeVecDestructor;

pub type AzStyleBackgroundSizeVecDestructorType = extern "C" fn(&mut AzStyleBackgroundSizeVec);
/// Re-export of rust-allocated (stack based) `StyleTransformVecDestructor` struct
pub type AzStyleTransformVecDestructorTT = azul_impl::css::StyleTransformVecDestructor;
pub use AzStyleTransformVecDestructorTT as AzStyleTransformVecDestructor;

pub type AzStyleTransformVecDestructorType = extern "C" fn(&mut AzStyleTransformVec);
/// Re-export of rust-allocated (stack based) `CssPropertyVecDestructor` struct
pub type AzCssPropertyVecDestructorTT = azul_impl::css::CssPropertyVecDestructor;
pub use AzCssPropertyVecDestructorTT as AzCssPropertyVecDestructor;

pub type AzCssPropertyVecDestructorType = extern "C" fn(&mut AzCssPropertyVec);
/// Re-export of rust-allocated (stack based) `SvgMultiPolygonVecDestructor` struct
pub type AzSvgMultiPolygonVecDestructorTT = azul_impl::svg::SvgMultiPolygonVecDestructor;
pub use AzSvgMultiPolygonVecDestructorTT as AzSvgMultiPolygonVecDestructor;

pub type AzSvgMultiPolygonVecDestructorType = extern "C" fn(&mut AzSvgMultiPolygonVec);
/// Re-export of rust-allocated (stack based) `SvgPathVecDestructor` struct
pub type AzSvgPathVecDestructorTT = azul_impl::svg::SvgPathVecDestructor;
pub use AzSvgPathVecDestructorTT as AzSvgPathVecDestructor;

pub type AzSvgPathVecDestructorType = extern "C" fn(&mut AzSvgPathVec);
/// Re-export of rust-allocated (stack based) `VertexAttributeVecDestructor` struct
pub type AzVertexAttributeVecDestructorTT = azul_impl::gl::VertexAttributeVecDestructor;
pub use AzVertexAttributeVecDestructorTT as AzVertexAttributeVecDestructor;

pub type AzVertexAttributeVecDestructorType = extern "C" fn(&mut AzVertexAttributeVec);
/// Re-export of rust-allocated (stack based) `SvgPathElementVecDestructor` struct
pub type AzSvgPathElementVecDestructorTT = azul_impl::svg::SvgPathElementVecDestructor;
pub use AzSvgPathElementVecDestructorTT as AzSvgPathElementVecDestructor;

pub type AzSvgPathElementVecDestructorType = extern "C" fn(&mut AzSvgPathElementVec);
/// Re-export of rust-allocated (stack based) `SvgVertexVecDestructor` struct
pub type AzSvgVertexVecDestructorTT = azul_impl::svg::SvgVertexVecDestructor;
pub use AzSvgVertexVecDestructorTT as AzSvgVertexVecDestructor;

pub type AzSvgVertexVecDestructorType = extern "C" fn(&mut AzSvgVertexVec);
/// Re-export of rust-allocated (stack based) `U32VecDestructor` struct
pub type AzU32VecDestructorTT = azul_impl::css::U32VecDestructor;
pub use AzU32VecDestructorTT as AzU32VecDestructor;

pub type AzU32VecDestructorType = extern "C" fn(&mut AzU32Vec);
/// Re-export of rust-allocated (stack based) `XWindowTypeVecDestructor` struct
pub type AzXWindowTypeVecDestructorTT = azul_impl::window::XWindowTypeVecDestructor;
pub use AzXWindowTypeVecDestructorTT as AzXWindowTypeVecDestructor;

pub type AzXWindowTypeVecDestructorType = extern "C" fn(&mut AzXWindowTypeVec);
/// Re-export of rust-allocated (stack based) `VirtualKeyCodeVecDestructor` struct
pub type AzVirtualKeyCodeVecDestructorTT = azul_impl::window::VirtualKeyCodeVecDestructor;
pub use AzVirtualKeyCodeVecDestructorTT as AzVirtualKeyCodeVecDestructor;

pub type AzVirtualKeyCodeVecDestructorType = extern "C" fn(&mut AzVirtualKeyCodeVec);
/// Re-export of rust-allocated (stack based) `CascadeInfoVecDestructor` struct
pub type AzCascadeInfoVecDestructorTT = azul_impl::style::CascadeInfoVecDestructor;
pub use AzCascadeInfoVecDestructorTT as AzCascadeInfoVecDestructor;

pub type AzCascadeInfoVecDestructorType = extern "C" fn(&mut AzCascadeInfoVec);
/// Re-export of rust-allocated (stack based) `ScanCodeVecDestructor` struct
pub type AzScanCodeVecDestructorTT = azul_impl::window::ScanCodeVecDestructor;
pub use AzScanCodeVecDestructorTT as AzScanCodeVecDestructor;

pub type AzScanCodeVecDestructorType = extern "C" fn(&mut AzScanCodeVec);
/// Re-export of rust-allocated (stack based) `CssDeclarationVecDestructor` struct
pub type AzCssDeclarationVecDestructorTT = azul_impl::css::CssDeclarationVecDestructor;
pub use AzCssDeclarationVecDestructorTT as AzCssDeclarationVecDestructor;

pub type AzCssDeclarationVecDestructorType = extern "C" fn(&mut AzCssDeclarationVec);
/// Re-export of rust-allocated (stack based) `CssPathSelectorVecDestructor` struct
pub type AzCssPathSelectorVecDestructorTT = azul_impl::css::CssPathSelectorVecDestructor;
pub use AzCssPathSelectorVecDestructorTT as AzCssPathSelectorVecDestructor;

pub type AzCssPathSelectorVecDestructorType = extern "C" fn(&mut AzCssPathSelectorVec);
/// Re-export of rust-allocated (stack based) `StylesheetVecDestructor` struct
pub type AzStylesheetVecDestructorTT = azul_impl::css::StylesheetVecDestructor;
pub use AzStylesheetVecDestructorTT as AzStylesheetVecDestructor;

pub type AzStylesheetVecDestructorType = extern "C" fn(&mut AzStylesheetVec);
/// Re-export of rust-allocated (stack based) `CssRuleBlockVecDestructor` struct
pub type AzCssRuleBlockVecDestructorTT = azul_impl::css::CssRuleBlockVecDestructor;
pub use AzCssRuleBlockVecDestructorTT as AzCssRuleBlockVecDestructor;

pub type AzCssRuleBlockVecDestructorType = extern "C" fn(&mut AzCssRuleBlockVec);
/// Re-export of rust-allocated (stack based) `U8VecDestructor` struct
pub type AzU8VecDestructorTT = azul_impl::css::U8VecDestructor;
pub use AzU8VecDestructorTT as AzU8VecDestructor;

pub type AzU8VecDestructorType = extern "C" fn(&mut AzU8Vec);
/// Re-export of rust-allocated (stack based) `CallbackDataVecDestructor` struct
pub type AzCallbackDataVecDestructorTT = azul_impl::dom::CallbackDataVecDestructor;
pub use AzCallbackDataVecDestructorTT as AzCallbackDataVecDestructor;

pub type AzCallbackDataVecDestructorType = extern "C" fn(&mut AzCallbackDataVec);
/// Re-export of rust-allocated (stack based) `DebugMessageVecDestructor` struct
pub type AzDebugMessageVecDestructorTT = azul_impl::gl::AzDebugMessageVecDestructor;
pub use AzDebugMessageVecDestructorTT as AzDebugMessageVecDestructor;

pub type AzDebugMessageVecDestructorType = extern "C" fn(&mut AzDebugMessageVec);
/// Re-export of rust-allocated (stack based) `GLuintVecDestructor` struct
pub type AzGLuintVecDestructorTT = azul_impl::gl::GLuintVecDestructor;
pub use AzGLuintVecDestructorTT as AzGLuintVecDestructor;

pub type AzGLuintVecDestructorType = extern "C" fn(&mut AzGLuintVec);
/// Re-export of rust-allocated (stack based) `GLintVecDestructor` struct
pub type AzGLintVecDestructorTT = azul_impl::gl::GLintVecDestructor;
pub use AzGLintVecDestructorTT as AzGLintVecDestructor;

pub type AzGLintVecDestructorType = extern "C" fn(&mut AzGLintVec);
/// Re-export of rust-allocated (stack based) `StringVecDestructor` struct
pub type AzStringVecDestructorTT = azul_impl::css::StringVecDestructor;
pub use AzStringVecDestructorTT as AzStringVecDestructor;

pub type AzStringVecDestructorType = extern "C" fn(&mut AzStringVec);
/// Re-export of rust-allocated (stack based) `StringPairVecDestructor` struct
pub type AzStringPairVecDestructorTT = azul_impl::window::StringPairVecDestructor;
pub use AzStringPairVecDestructorTT as AzStringPairVecDestructor;

pub type AzStringPairVecDestructorType = extern "C" fn(&mut AzStringPairVec);
/// Re-export of rust-allocated (stack based) `LinearColorStopVecDestructor` struct
pub type AzLinearColorStopVecDestructorTT = azul_impl::css::LinearColorStopVecDestructor;
pub use AzLinearColorStopVecDestructorTT as AzLinearColorStopVecDestructor;

pub type AzLinearColorStopVecDestructorType = extern "C" fn(&mut AzLinearColorStopVec);
/// Re-export of rust-allocated (stack based) `RadialColorStopVecDestructor` struct
pub type AzRadialColorStopVecDestructorTT = azul_impl::css::RadialColorStopVecDestructor;
pub use AzRadialColorStopVecDestructorTT as AzRadialColorStopVecDestructor;

pub type AzRadialColorStopVecDestructorType = extern "C" fn(&mut AzRadialColorStopVec);
/// Re-export of rust-allocated (stack based) `NodeIdVecDestructor` struct
pub type AzNodeIdVecDestructorTT = azul_impl::styled_dom::NodeIdVecDestructor;
pub use AzNodeIdVecDestructorTT as AzNodeIdVecDestructor;

pub type AzNodeIdVecDestructorType = extern "C" fn(&mut AzNodeIdVec);
/// Re-export of rust-allocated (stack based) `NodeVecDestructor` struct
pub type AzNodeVecDestructorTT = azul_impl::styled_dom::AzNodeVecDestructor;
pub use AzNodeVecDestructorTT as AzNodeVecDestructor;

pub type AzNodeVecDestructorType = extern "C" fn(&mut AzNodeVec);
/// Re-export of rust-allocated (stack based) `StyledNodeVecDestructor` struct
pub type AzStyledNodeVecDestructorTT = azul_impl::styled_dom::StyledNodeVecDestructor;
pub use AzStyledNodeVecDestructorTT as AzStyledNodeVecDestructor;

pub type AzStyledNodeVecDestructorType = extern "C" fn(&mut AzStyledNodeVec);
/// Re-export of rust-allocated (stack based) `TagIdsToNodeIdsMappingVecDestructor` struct
pub type AzTagIdsToNodeIdsMappingVecDestructorTT = azul_impl::styled_dom::TagIdToNodeIdMappingVecDestructor;
pub use AzTagIdsToNodeIdsMappingVecDestructorTT as AzTagIdsToNodeIdsMappingVecDestructor;

pub type AzTagIdsToNodeIdsMappingVecDestructorType = extern "C" fn(&mut AzTagIdsToNodeIdsMappingVec);
/// Re-export of rust-allocated (stack based) `ParentWithNodeDepthVecDestructor` struct
pub type AzParentWithNodeDepthVecDestructorTT = azul_impl::styled_dom::ParentWithNodeDepthVecDestructor;
pub use AzParentWithNodeDepthVecDestructorTT as AzParentWithNodeDepthVecDestructor;

pub type AzParentWithNodeDepthVecDestructorType = extern "C" fn(&mut AzParentWithNodeDepthVec);
/// Re-export of rust-allocated (stack based) `NodeDataVecDestructor` struct
pub type AzNodeDataVecDestructorTT = azul_impl::dom::NodeDataVecDestructor;
pub use AzNodeDataVecDestructorTT as AzNodeDataVecDestructor;

pub type AzNodeDataVecDestructorType = extern "C" fn(&mut AzNodeDataVec);
/// Re-export of rust-allocated (stack based) `OptionGlContextPtr` struct
pub type AzOptionGlContextPtrTT = azul_impl::gl::OptionGlContextPtr;
pub use AzOptionGlContextPtrTT as AzOptionGlContextPtr;

/// Re-export of rust-allocated (stack based) `OptionThreadReceiveMsg` struct
pub type AzOptionThreadReceiveMsgTT = azul_impl::task::OptionThreadReceiveMsg;
pub use AzOptionThreadReceiveMsgTT as AzOptionThreadReceiveMsg;

/// Re-export of rust-allocated (stack based) `OptionPercentageValue` struct
pub type AzOptionPercentageValueTT = azul_impl::css::OptionPercentageValue;
pub use AzOptionPercentageValueTT as AzOptionPercentageValue;

/// Re-export of rust-allocated (stack based) `OptionAngleValue` struct
pub type AzOptionAngleValueTT = azul_impl::css::OptionAngleValue;
pub use AzOptionAngleValueTT as AzOptionAngleValue;

/// Re-export of rust-allocated (stack based) `OptionRendererOptions` struct
pub type AzOptionRendererOptionsTT = azul_impl::window::OptionRendererOptions;
pub use AzOptionRendererOptionsTT as AzOptionRendererOptions;

/// Re-export of rust-allocated (stack based) `OptionCallback` struct
pub type AzOptionCallbackTT = azul_impl::callbacks::OptionCallback;
pub use AzOptionCallbackTT as AzOptionCallback;

/// Re-export of rust-allocated (stack based) `OptionThreadSendMsg` struct
pub type AzOptionThreadSendMsgTT = azul_impl::task::OptionThreadSendMsg;
pub use AzOptionThreadSendMsgTT as AzOptionThreadSendMsg;

/// Re-export of rust-allocated (stack based) `OptionLayoutRect` struct
pub type AzOptionLayoutRectTT = azul_impl::css::OptionLayoutRect;
pub use AzOptionLayoutRectTT as AzOptionLayoutRect;

/// Re-export of rust-allocated (stack based) `OptionRefAny` struct
pub type AzOptionRefAnyTT = azul_impl::callbacks::OptionRefAny;
pub use AzOptionRefAnyTT as AzOptionRefAny;

/// Re-export of rust-allocated (stack based) `OptionLayoutPoint` struct
pub type AzOptionLayoutPointTT = azul_impl::css::OptionLayoutPoint;
pub use AzOptionLayoutPointTT as AzOptionLayoutPoint;

/// Re-export of rust-allocated (stack based) `OptionWindowTheme` struct
pub type AzOptionWindowThemeTT = azul_impl::window::OptionWindowTheme;
pub use AzOptionWindowThemeTT as AzOptionWindowTheme;

/// Re-export of rust-allocated (stack based) `OptionNodeId` struct
pub type AzOptionNodeIdTT = azul_impl::styled_dom::OptionNodeId;
pub use AzOptionNodeIdTT as AzOptionNodeId;

/// Re-export of rust-allocated (stack based) `OptionDomNodeId` struct
pub type AzOptionDomNodeIdTT = azul_impl::callbacks::OptionDomNodeId;
pub use AzOptionDomNodeIdTT as AzOptionDomNodeId;

/// Re-export of rust-allocated (stack based) `OptionColorU` struct
pub type AzOptionColorUTT = azul_impl::css::OptionColorU;
pub use AzOptionColorUTT as AzOptionColorU;

/// Re-export of rust-allocated (stack based) `OptionRawImage` struct
pub type AzOptionRawImageTT = azul_impl::resources::OptionRawImage;
pub use AzOptionRawImageTT as AzOptionRawImage;

/// Re-export of rust-allocated (stack based) `OptionSvgDashPattern` struct
pub type AzOptionSvgDashPatternTT = azul_impl::svg::OptionSvgDashPattern;
pub use AzOptionSvgDashPatternTT as AzOptionSvgDashPattern;

/// Re-export of rust-allocated (stack based) `OptionWaylandTheme` struct
pub type AzOptionWaylandThemeTT = azul_impl::window::OptionWaylandTheme;
pub use AzOptionWaylandThemeTT as AzOptionWaylandTheme;

/// Re-export of rust-allocated (stack based) `OptionTaskBarIcon` struct
pub type AzOptionTaskBarIconTT = azul_impl::window::OptionTaskBarIcon;
pub use AzOptionTaskBarIconTT as AzOptionTaskBarIcon;

/// Re-export of rust-allocated (stack based) `OptionHwndHandle` struct
pub type AzOptionHwndHandleTT = azul_impl::window::OptionHwndHandle;
pub use AzOptionHwndHandleTT as AzOptionHwndHandle;

/// Re-export of rust-allocated (stack based) `OptionLogicalPosition` struct
pub type AzOptionLogicalPositionTT = azul_impl::window::OptionLogicalPosition;
pub use AzOptionLogicalPositionTT as AzOptionLogicalPosition;

/// Re-export of rust-allocated (stack based) `OptionPhysicalPositionI32` struct
pub type AzOptionPhysicalPositionI32TT = azul_impl::window::OptionPhysicalPositionI32;
pub use AzOptionPhysicalPositionI32TT as AzOptionPhysicalPositionI32;

/// Re-export of rust-allocated (stack based) `OptionWindowIcon` struct
pub type AzOptionWindowIconTT = azul_impl::window::OptionWindowIcon;
pub use AzOptionWindowIconTT as AzOptionWindowIcon;

/// Re-export of rust-allocated (stack based) `OptionString` struct
pub type AzOptionStringTT = azul_impl::css::OptionAzString;
pub use AzOptionStringTT as AzOptionString;

/// Re-export of rust-allocated (stack based) `OptionX11Visual` struct
pub type AzOptionX11VisualTT = azul_impl::window::OptionX11Visual;
pub use AzOptionX11VisualTT as AzOptionX11Visual;

/// Re-export of rust-allocated (stack based) `OptionI32` struct
pub type AzOptionI32TT = azul_impl::css::OptionI32;
pub use AzOptionI32TT as AzOptionI32;

/// Re-export of rust-allocated (stack based) `OptionF32` struct
pub type AzOptionF32TT = azul_impl::css::OptionF32;
pub use AzOptionF32TT as AzOptionF32;

/// Re-export of rust-allocated (stack based) `OptionMouseCursorType` struct
pub type AzOptionMouseCursorTypeTT = azul_impl::window::OptionMouseCursorType;
pub use AzOptionMouseCursorTypeTT as AzOptionMouseCursorType;

/// Re-export of rust-allocated (stack based) `OptionLogicalSize` struct
pub type AzOptionLogicalSizeTT = azul_impl::window::OptionLogicalSize;
pub use AzOptionLogicalSizeTT as AzOptionLogicalSize;

/// Option<char> but the char is a u32, for C FFI stability reasons
pub type AzOptionCharTT = azul_impl::window::OptionChar;
pub use AzOptionCharTT as AzOptionChar;

/// Re-export of rust-allocated (stack based) `OptionVirtualKeyCode` struct
pub type AzOptionVirtualKeyCodeTT = azul_impl::window::OptionVirtualKeyCode;
pub use AzOptionVirtualKeyCodeTT as AzOptionVirtualKeyCode;

/// Re-export of rust-allocated (stack based) `OptionDom` struct
pub type AzOptionDomTT = azul_impl::dom::OptionDom;
pub use AzOptionDomTT as AzOptionDom;

/// Re-export of rust-allocated (stack based) `OptionTexture` struct
pub type AzOptionTextureTT = azul_impl::gl::OptionTexture;
pub use AzOptionTextureTT as AzOptionTexture;

/// Re-export of rust-allocated (stack based) `OptionImageMask` struct
pub type AzOptionImageMaskTT = azul_impl::resources::OptionImageMask;
pub use AzOptionImageMaskTT as AzOptionImageMask;

/// Re-export of rust-allocated (stack based) `OptionTabIndex` struct
pub type AzOptionTabIndexTT = azul_impl::dom::OptionTabIndex;
pub use AzOptionTabIndexTT as AzOptionTabIndex;

/// Re-export of rust-allocated (stack based) `OptionTagId` struct
pub type AzOptionTagIdTT = azul_impl::styled_dom::OptionTagId;
pub use AzOptionTagIdTT as AzOptionTagId;

/// Re-export of rust-allocated (stack based) `OptionDuration` struct
pub type AzOptionDurationTT = azul_impl::task::OptionDuration;
pub use AzOptionDurationTT as AzOptionDuration;

/// Re-export of rust-allocated (stack based) `OptionInstant` struct
pub type AzOptionInstantTT = azul_impl::task::OptionInstant;
pub use AzOptionInstantTT as AzOptionInstant;

/// Re-export of rust-allocated (stack based) `OptionUsize` struct
pub type AzOptionUsizeTT = azul_impl::gl::OptionUsize;
pub use AzOptionUsizeTT as AzOptionUsize;

/// Re-export of rust-allocated (stack based) `OptionU8VecRef` struct
pub type AzOptionU8VecRefTT = azul_impl::gl::OptionU8VecRef;
pub use AzOptionU8VecRefTT as AzOptionU8VecRef;

/// Re-export of rust-allocated (stack based) `ResultSvgSvgParseError` struct
pub type AzResultSvgSvgParseErrorTT = azul_impl::svg::ResultSvgSvgParseError;
pub use AzResultSvgSvgParseErrorTT as AzResultSvgSvgParseError;

/// Re-export of rust-allocated (stack based) `SvgParseError` struct
pub type AzSvgParseErrorTT = azul_impl::svg::SvgParseError;
pub use AzSvgParseErrorTT as AzSvgParseError;

/// Re-export of rust-allocated (stack based) `XmlError` struct
pub type AzXmlErrorTT = azul_impl::xml::XmlError;
pub use AzXmlErrorTT as AzXmlError;

/// Re-export of rust-allocated (stack based) `DuplicatedNamespaceError` struct
pub type AzDuplicatedNamespaceErrorTT = azul_impl::xml::DuplicatedNamespaceError;
pub use AzDuplicatedNamespaceErrorTT as AzDuplicatedNamespaceError;

/// Re-export of rust-allocated (stack based) `UnknownNamespaceError` struct
pub type AzUnknownNamespaceErrorTT = azul_impl::xml::UnknownNamespaceError;
pub use AzUnknownNamespaceErrorTT as AzUnknownNamespaceError;

/// Re-export of rust-allocated (stack based) `UnexpectedCloseTagError` struct
pub type AzUnexpectedCloseTagErrorTT = azul_impl::xml::UnexpectedCloseTagError;
pub use AzUnexpectedCloseTagErrorTT as AzUnexpectedCloseTagError;

/// Re-export of rust-allocated (stack based) `UnknownEntityReferenceError` struct
pub type AzUnknownEntityReferenceErrorTT = azul_impl::xml::UnknownEntityReferenceError;
pub use AzUnknownEntityReferenceErrorTT as AzUnknownEntityReferenceError;

/// Re-export of rust-allocated (stack based) `DuplicatedAttributeError` struct
pub type AzDuplicatedAttributeErrorTT = azul_impl::xml::DuplicatedAttributeError;
pub use AzDuplicatedAttributeErrorTT as AzDuplicatedAttributeError;

/// Re-export of rust-allocated (stack based) `XmlParseError` struct
pub type AzXmlParseErrorTT = azul_impl::xml::XmlParseError;
pub use AzXmlParseErrorTT as AzXmlParseError;

/// Re-export of rust-allocated (stack based) `XmlTextError` struct
pub type AzXmlTextErrorTT = azul_impl::xml::XmlTextError;
pub use AzXmlTextErrorTT as AzXmlTextError;

/// Re-export of rust-allocated (stack based) `XmlStreamError` struct
pub type AzXmlStreamErrorTT = azul_impl::xml::XmlStreamError;
pub use AzXmlStreamErrorTT as AzXmlStreamError;

/// Re-export of rust-allocated (stack based) `NonXmlCharError` struct
pub type AzNonXmlCharErrorTT = azul_impl::xml::NonXmlCharError;
pub use AzNonXmlCharErrorTT as AzNonXmlCharError;

/// Re-export of rust-allocated (stack based) `InvalidCharError` struct
pub type AzInvalidCharErrorTT = azul_impl::xml::InvalidCharError;
pub use AzInvalidCharErrorTT as AzInvalidCharError;

/// Re-export of rust-allocated (stack based) `InvalidCharMultipleError` struct
pub type AzInvalidCharMultipleErrorTT = azul_impl::xml::InvalidCharMultipleError;
pub use AzInvalidCharMultipleErrorTT as AzInvalidCharMultipleError;

/// Re-export of rust-allocated (stack based) `InvalidQuoteError` struct
pub type AzInvalidQuoteErrorTT = azul_impl::xml::InvalidQuoteError;
pub use AzInvalidQuoteErrorTT as AzInvalidQuoteError;

/// Re-export of rust-allocated (stack based) `InvalidSpaceError` struct
pub type AzInvalidSpaceErrorTT = azul_impl::xml::InvalidSpaceError;
pub use AzInvalidSpaceErrorTT as AzInvalidSpaceError;

/// Re-export of rust-allocated (stack based) `InvalidStringError` struct
pub type AzInvalidStringErrorTT = azul_impl::xml::InvalidStringError;
pub use AzInvalidStringErrorTT as AzInvalidStringError;

/// Re-export of rust-allocated (stack based) `SvgParseErrorPosition` struct
pub type AzSvgParseErrorPositionTT = azul_impl::xml::XmlTextPos;
pub use AzSvgParseErrorPositionTT as AzSvgParseErrorPosition;

/// Re-export of rust-allocated (stack based) `Instant` struct
pub type AzInstantTT = azul_impl::task::Instant;
pub use AzInstantTT as AzInstant;

/// Re-export of rust-allocated (stack based) `InstantPtr` struct
pub type AzInstantPtrTT = azul_impl::task::AzInstantPtr;
pub use AzInstantPtrTT as AzInstantPtr;
/// Destructor: Takes ownership of the `InstantPtr` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_instant_ptr_delete(object: &mut AzInstantPtr) {  unsafe { core::ptr::drop_in_place(object); } }
/// Clones the object
#[no_mangle] pub extern "C" fn az_instant_ptr_deep_copy(object: &AzInstantPtr) -> AzInstantPtr { object.clone() }

pub type AzInstantPtrCloneFnType = extern "C" fn(&c_void) -> AzInstantPtr;
/// Re-export of rust-allocated (stack based) `InstantPtrCloneFn` struct
pub type AzInstantPtrCloneFnTT = azul_impl::task::InstantPtrCloneCallback;
pub use AzInstantPtrCloneFnTT as AzInstantPtrCloneFn;

pub type AzInstantPtrDestructorFnType = extern "C" fn(&mut c_void);
/// Re-export of rust-allocated (stack based) `InstantPtrDestructorFn` struct
pub type AzInstantPtrDestructorFnTT = azul_impl::task::InstantPtrDestructorCallback;
pub use AzInstantPtrDestructorFnTT as AzInstantPtrDestructorFn;

/// Re-export of rust-allocated (stack based) `SystemTick` struct
pub type AzSystemTickTT = azul_impl::task::SystemTick;
pub use AzSystemTickTT as AzSystemTick;

/// Re-export of rust-allocated (stack based) `Duration` struct
pub type AzDurationTT = azul_impl::task::Duration;
pub use AzDurationTT as AzDuration;

/// Re-export of rust-allocated (stack based) `SystemTimeDiff` struct
pub type AzSystemTimeDiffTT = azul_impl::task::SystemTimeDiff;
pub use AzSystemTimeDiffTT as AzSystemTimeDiff;

/// Re-export of rust-allocated (stack based) `SystemTickDiff` struct
pub type AzSystemTickDiffTT = azul_impl::task::SystemTickDiff;
pub use AzSystemTickDiffTT as AzSystemTickDiff;


#[cfg(test)]
#[allow(dead_code)]
mod test_sizes {
    impl AzString {
        #[inline]
        pub fn as_str(&self) -> &str {
            unsafe { std::str::from_utf8_unchecked(self.as_bytes()) }
        }
        #[inline]
        pub fn as_bytes(&self) -> &[u8] {
            unsafe { std::slice::from_raw_parts(self.vec.ptr, self.vec.len) }
        }
    }

    impl ::std::fmt::Debug for AzCallback                   { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { write!(f, "{:x}", self.cb as usize) }}
    impl ::std::fmt::Debug for AzLayoutCallback             { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { write!(f, "{:x}", self.cb as usize) }}
    impl ::std::fmt::Debug for AzGlCallback                 { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { write!(f, "{:x}", self.cb as usize) }}
    impl ::std::fmt::Debug for AzIFrameCallback             { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { write!(f, "{:x}", self.cb as usize) }}
    impl ::std::fmt::Debug for AzTimerCallback              { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { write!(f, "{:x}", self.cb as usize) }}
    impl ::std::fmt::Debug for AzWriteBackCallback          { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { write!(f, "{:x}", self.cb as usize) }}
    impl ::std::fmt::Debug for AzThreadDestructorFn         { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { write!(f, "{:x}", self.cb as usize) }}
    impl ::std::fmt::Debug for AzLibraryReceiveThreadMsgFn  { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { write!(f, "{:x}", self.cb as usize) }}
    impl ::std::fmt::Debug for AzLibrarySendThreadMsgFn     { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { write!(f, "{:x}", self.cb as usize) }}
    impl ::std::fmt::Debug for AzCheckThreadFinishedFn      { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { write!(f, "{:x}", self.cb as usize) }}
    impl ::std::fmt::Debug for AzGetSystemTimeFn            { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { write!(f, "{:x}", self.cb as usize) }}
    impl ::std::fmt::Debug for AzCreateThreadFn             { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { write!(f, "{:x}", self.cb as usize) }}
    impl ::std::fmt::Debug for AzThreadRecvFn               { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { write!(f, "{:x}", self.cb as usize) }}
    impl ::std::fmt::Debug for AzThreadReceiverDestructorFn { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { write!(f, "{:x}", self.cb as usize) }}
    impl ::std::fmt::Debug for AzThreadSenderDestructorFn   { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { write!(f, "{:x}", self.cb as usize) }}
    impl ::std::fmt::Debug for AzInstantPtrDestructorFn     { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { write!(f, "{:x}", self.cb as usize) }}
    impl ::std::fmt::Debug for AzInstantPtrCloneFn          { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { write!(f, "{:x}", self.cb as usize) }}
    impl ::std::fmt::Debug for AzThreadSendFn               { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { write!(f, "{:x}", self.cb as usize) }}

    impl ::std::fmt::Debug for AzRefCount {
        fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
            let ptr = unsafe { &*self.ptr };
            write!(f, "RefAnyRefCount {{\r\n")?;
            write!(f, "    num_copies: {}\r\n", ptr.num_copies)?;
            write!(f, "    num_refs: {}\r\n", ptr.num_refs)?;
            write!(f, "    num_mutable_refs: {}\r\n", ptr.num_mutable_refs)?;
            write!(f, "    _internal_len: {}\r\n", ptr._internal_len)?;
            write!(f, "    _internal_layout_size: {}\r\n", ptr._internal_layout_size)?;
            write!(f, "    _internal_layout_align: {}\r\n", ptr._internal_layout_align)?;
            write!(f, "    type_name: \"{}\"\r\n", ptr.type_name.as_str())?;
            write!(f, "    type_id: {}\r\n", ptr.type_id)?;
            write!(f, "    custom_destructor: 0x{:x}\r\n", ptr.custom_destructor as usize)?;
            write!(f, "}}\r\n")?;
            Ok(())
        }
    }

    impl ::std::fmt::Debug for AzDomVecDestructor { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { use AzDomVecDestructor::*; match self { DefaultRust => write!(f, "DefaultRust"), NoDestructor => write!(f, "NoDestructor"), External(_) => write!(f, "External"), }}}
    impl ::std::fmt::Debug for AzIdOrClassVecDestructor { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { use AzIdOrClassVecDestructor::*; match self { DefaultRust => write!(f, "DefaultRust"), NoDestructor => write!(f, "NoDestructor"), External(_) => write!(f, "External"), }}}
    impl ::std::fmt::Debug for AzNodeDataInlineCssPropertyVecDestructor { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { use AzNodeDataInlineCssPropertyVecDestructor::*; match self { DefaultRust => write!(f, "DefaultRust"), NoDestructor => write!(f, "NoDestructor"), External(_) => write!(f, "External"), }}}
    impl ::std::fmt::Debug for AzStyleBackgroundContentVecDestructor { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { use AzStyleBackgroundContentVecDestructor::*; match self { DefaultRust => write!(f, "DefaultRust"), NoDestructor => write!(f, "NoDestructor"), External(_) => write!(f, "External"), }}}
    impl ::std::fmt::Debug for AzStyleBackgroundPositionVecDestructor { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { use AzStyleBackgroundPositionVecDestructor::*; match self { DefaultRust => write!(f, "DefaultRust"), NoDestructor => write!(f, "NoDestructor"), External(_) => write!(f, "External"), }}}
    impl ::std::fmt::Debug for AzStyleBackgroundRepeatVecDestructor { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { use AzStyleBackgroundRepeatVecDestructor::*; match self { DefaultRust => write!(f, "DefaultRust"), NoDestructor => write!(f, "NoDestructor"), External(_) => write!(f, "External"), }}}
    impl ::std::fmt::Debug for AzStyleBackgroundSizeVecDestructor { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { use AzStyleBackgroundSizeVecDestructor::*; match self { DefaultRust => write!(f, "DefaultRust"), NoDestructor => write!(f, "NoDestructor"), External(_) => write!(f, "External"), }}}
    impl ::std::fmt::Debug for AzStyleTransformVecDestructor { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { use AzStyleTransformVecDestructor::*; match self { DefaultRust => write!(f, "DefaultRust"), NoDestructor => write!(f, "NoDestructor"), External(_) => write!(f, "External"), }}}
    impl ::std::fmt::Debug for AzCssPropertyVecDestructor { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { use AzCssPropertyVecDestructor::*; match self { DefaultRust => write!(f, "DefaultRust"), NoDestructor => write!(f, "NoDestructor"), External(_) => write!(f, "External"), }}}
    impl ::std::fmt::Debug for AzSvgMultiPolygonVecDestructor { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { use AzSvgMultiPolygonVecDestructor::*; match self { DefaultRust => write!(f, "DefaultRust"), NoDestructor => write!(f, "NoDestructor"), External(_) => write!(f, "External"), }}}
    impl ::std::fmt::Debug for AzSvgPathVecDestructor { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { use AzSvgPathVecDestructor::*; match self { DefaultRust => write!(f, "DefaultRust"), NoDestructor => write!(f, "NoDestructor"), External(_) => write!(f, "External"), }}}
    impl ::std::fmt::Debug for AzVertexAttributeVecDestructor { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { use AzVertexAttributeVecDestructor::*; match self { DefaultRust => write!(f, "DefaultRust"), NoDestructor => write!(f, "NoDestructor"), External(_) => write!(f, "External"), }}}
    impl ::std::fmt::Debug for AzSvgPathElementVecDestructor { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { use AzSvgPathElementVecDestructor::*; match self { DefaultRust => write!(f, "DefaultRust"), NoDestructor => write!(f, "NoDestructor"), External(_) => write!(f, "External"), }}}
    impl ::std::fmt::Debug for AzSvgVertexVecDestructor { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { use AzSvgVertexVecDestructor::*; match self { DefaultRust => write!(f, "DefaultRust"), NoDestructor => write!(f, "NoDestructor"), External(_) => write!(f, "External"), }}}
    impl ::std::fmt::Debug for AzU32VecDestructor { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { use AzU32VecDestructor::*; match self { DefaultRust => write!(f, "DefaultRust"), NoDestructor => write!(f, "NoDestructor"), External(_) => write!(f, "External"), }}}
    impl ::std::fmt::Debug for AzXWindowTypeVecDestructor { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { use AzXWindowTypeVecDestructor::*; match self { DefaultRust => write!(f, "DefaultRust"), NoDestructor => write!(f, "NoDestructor"), External(_) => write!(f, "External"), }}}
    impl ::std::fmt::Debug for AzVirtualKeyCodeVecDestructor { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { use AzVirtualKeyCodeVecDestructor::*; match self { DefaultRust => write!(f, "DefaultRust"), NoDestructor => write!(f, "NoDestructor"), External(_) => write!(f, "External"), }}}
    impl ::std::fmt::Debug for AzCascadeInfoVecDestructor { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { use AzCascadeInfoVecDestructor::*; match self { DefaultRust => write!(f, "DefaultRust"), NoDestructor => write!(f, "NoDestructor"), External(_) => write!(f, "External"), }}}
    impl ::std::fmt::Debug for AzScanCodeVecDestructor { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { use AzScanCodeVecDestructor::*; match self { DefaultRust => write!(f, "DefaultRust"), NoDestructor => write!(f, "NoDestructor"), External(_) => write!(f, "External"), }}}
    impl ::std::fmt::Debug for AzCssDeclarationVecDestructor { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { use AzCssDeclarationVecDestructor::*; match self { DefaultRust => write!(f, "DefaultRust"), NoDestructor => write!(f, "NoDestructor"), External(_) => write!(f, "External"), }}}
    impl ::std::fmt::Debug for AzCssPathSelectorVecDestructor { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { use AzCssPathSelectorVecDestructor::*; match self { DefaultRust => write!(f, "DefaultRust"), NoDestructor => write!(f, "NoDestructor"), External(_) => write!(f, "External"), }}}
    impl ::std::fmt::Debug for AzStylesheetVecDestructor { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { use AzStylesheetVecDestructor::*; match self { DefaultRust => write!(f, "DefaultRust"), NoDestructor => write!(f, "NoDestructor"), External(_) => write!(f, "External"), }}}
    impl ::std::fmt::Debug for AzCssRuleBlockVecDestructor { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { use AzCssRuleBlockVecDestructor::*; match self { DefaultRust => write!(f, "DefaultRust"), NoDestructor => write!(f, "NoDestructor"), External(_) => write!(f, "External"), }}}
    impl ::std::fmt::Debug for AzU8VecDestructor { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { use AzU8VecDestructor::*; match self { DefaultRust => write!(f, "DefaultRust"), NoDestructor => write!(f, "NoDestructor"), External(_) => write!(f, "External"), }}}
    impl ::std::fmt::Debug for AzCallbackDataVecDestructor { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { use AzCallbackDataVecDestructor::*; match self { DefaultRust => write!(f, "DefaultRust"), NoDestructor => write!(f, "NoDestructor"), External(_) => write!(f, "External"), }}}
    impl ::std::fmt::Debug for AzDebugMessageVecDestructor { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { use AzDebugMessageVecDestructor::*; match self { DefaultRust => write!(f, "DefaultRust"), NoDestructor => write!(f, "NoDestructor"), External(_) => write!(f, "External"), }}}
    impl ::std::fmt::Debug for AzGLuintVecDestructor { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { use AzGLuintVecDestructor::*; match self { DefaultRust => write!(f, "DefaultRust"), NoDestructor => write!(f, "NoDestructor"), External(_) => write!(f, "External"), }}}
    impl ::std::fmt::Debug for AzGLintVecDestructor { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { use AzGLintVecDestructor::*; match self { DefaultRust => write!(f, "DefaultRust"), NoDestructor => write!(f, "NoDestructor"), External(_) => write!(f, "External"), }}}
    impl ::std::fmt::Debug for AzStringVecDestructor { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { use AzStringVecDestructor::*; match self { DefaultRust => write!(f, "DefaultRust"), NoDestructor => write!(f, "NoDestructor"), External(_) => write!(f, "External"), }}}
    impl ::std::fmt::Debug for AzStringPairVecDestructor { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { use AzStringPairVecDestructor::*; match self { DefaultRust => write!(f, "DefaultRust"), NoDestructor => write!(f, "NoDestructor"), External(_) => write!(f, "External"), }}}
    impl ::std::fmt::Debug for AzLinearColorStopVecDestructor { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { use AzLinearColorStopVecDestructor::*; match self { DefaultRust => write!(f, "DefaultRust"), NoDestructor => write!(f, "NoDestructor"), External(_) => write!(f, "External"), }}}
    impl ::std::fmt::Debug for AzRadialColorStopVecDestructor { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { use AzRadialColorStopVecDestructor::*; match self { DefaultRust => write!(f, "DefaultRust"), NoDestructor => write!(f, "NoDestructor"), External(_) => write!(f, "External"), }}}
    impl ::std::fmt::Debug for AzNodeIdVecDestructor { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { use AzNodeIdVecDestructor::*; match self { DefaultRust => write!(f, "DefaultRust"), NoDestructor => write!(f, "NoDestructor"), External(_) => write!(f, "External"), }}}
    impl ::std::fmt::Debug for AzNodeVecDestructor { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { use AzNodeVecDestructor::*; match self { DefaultRust => write!(f, "DefaultRust"), NoDestructor => write!(f, "NoDestructor"), External(_) => write!(f, "External"), }}}
    impl ::std::fmt::Debug for AzStyledNodeVecDestructor { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { use AzStyledNodeVecDestructor::*; match self { DefaultRust => write!(f, "DefaultRust"), NoDestructor => write!(f, "NoDestructor"), External(_) => write!(f, "External"), }}}
    impl ::std::fmt::Debug for AzTagIdsToNodeIdsMappingVecDestructor { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { use AzTagIdsToNodeIdsMappingVecDestructor::*; match self { DefaultRust => write!(f, "DefaultRust"), NoDestructor => write!(f, "NoDestructor"), External(_) => write!(f, "External"), }}}
    impl ::std::fmt::Debug for AzParentWithNodeDepthVecDestructor { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { use AzParentWithNodeDepthVecDestructor::*; match self { DefaultRust => write!(f, "DefaultRust"), NoDestructor => write!(f, "NoDestructor"), External(_) => write!(f, "External"), }}}
    impl ::std::fmt::Debug for AzNodeDataVecDestructor { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { use AzNodeDataVecDestructor::*; match self { DefaultRust => write!(f, "DefaultRust"), NoDestructor => write!(f, "NoDestructor"), External(_) => write!(f, "External"), }}}
    /// Main application class
    #[repr(C)]     pub struct AzApp {
        pub(crate) ptr: *const c_void,
    }
    /// Configuration to set which messages should be logged.
    #[repr(C)]     pub enum AzAppLogLevel {
        Off,
        Error,
        Warn,
        Info,
        Debug,
        Trace,
    }
    /// Whether the renderer has VSync enabled
    #[repr(C)]     pub enum AzVsync {
        Enabled,
        Disabled,
    }
    /// Does the renderer render in SRGB color space? By default, azul tries to set it to `Enabled` and falls back to `Disabled` if the OpenGL context can't be initialized properly
    #[repr(C)]     pub enum AzSrgb {
        Enabled,
        Disabled,
    }
    /// Does the renderer render using hardware acceleration? By default, azul tries to set it to `Enabled` and falls back to `Disabled` if the OpenGL context can't be initialized properly
    #[repr(C)]     pub enum AzHwAcceleration {
        Enabled,
        Disabled,
    }
    /// Re-export of rust-allocated (stack based) `XWindowType` struct
    #[repr(C)]     pub enum AzXWindowType {
        Desktop,
        Dock,
        Toolbar,
        Menu,
        Utility,
        Splash,
        Dialog,
        DropdownMenu,
        PopupMenu,
        Tooltip,
        Notification,
        Combo,
        Dnd,
        Normal,
    }
    /// Symbolic name for a keyboard key, does **not** take the keyboard locale into account
    #[repr(C)]     pub enum AzVirtualKeyCode {
        Key1,
        Key2,
        Key3,
        Key4,
        Key5,
        Key6,
        Key7,
        Key8,
        Key9,
        Key0,
        A,
        B,
        C,
        D,
        E,
        F,
        G,
        H,
        I,
        J,
        K,
        L,
        M,
        N,
        O,
        P,
        Q,
        R,
        S,
        T,
        U,
        V,
        W,
        X,
        Y,
        Z,
        Escape,
        F1,
        F2,
        F3,
        F4,
        F5,
        F6,
        F7,
        F8,
        F9,
        F10,
        F11,
        F12,
        F13,
        F14,
        F15,
        F16,
        F17,
        F18,
        F19,
        F20,
        F21,
        F22,
        F23,
        F24,
        Snapshot,
        Scroll,
        Pause,
        Insert,
        Home,
        Delete,
        End,
        PageDown,
        PageUp,
        Left,
        Up,
        Right,
        Down,
        Back,
        Return,
        Space,
        Compose,
        Caret,
        Numlock,
        Numpad0,
        Numpad1,
        Numpad2,
        Numpad3,
        Numpad4,
        Numpad5,
        Numpad6,
        Numpad7,
        Numpad8,
        Numpad9,
        NumpadAdd,
        NumpadDivide,
        NumpadDecimal,
        NumpadComma,
        NumpadEnter,
        NumpadEquals,
        NumpadMultiply,
        NumpadSubtract,
        AbntC1,
        AbntC2,
        Apostrophe,
        Apps,
        Asterisk,
        At,
        Ax,
        Backslash,
        Calculator,
        Capital,
        Colon,
        Comma,
        Convert,
        Equals,
        Grave,
        Kana,
        Kanji,
        LAlt,
        LBracket,
        LControl,
        LShift,
        LWin,
        Mail,
        MediaSelect,
        MediaStop,
        Minus,
        Mute,
        MyComputer,
        NavigateForward,
        NavigateBackward,
        NextTrack,
        NoConvert,
        OEM102,
        Period,
        PlayPause,
        Plus,
        Power,
        PrevTrack,
        RAlt,
        RBracket,
        RControl,
        RShift,
        RWin,
        Semicolon,
        Slash,
        Sleep,
        Stop,
        Sysrq,
        Tab,
        Underline,
        Unlabeled,
        VolumeDown,
        VolumeUp,
        Wake,
        WebBack,
        WebFavorites,
        WebForward,
        WebHome,
        WebRefresh,
        WebSearch,
        WebStop,
        Yen,
        Copy,
        Paste,
        Cut,
    }
    /// Current icon of the mouse cursor
    #[repr(C)]     pub enum AzMouseCursorType {
        Default,
        Crosshair,
        Hand,
        Arrow,
        Move,
        Text,
        Wait,
        Help,
        Progress,
        NotAllowed,
        ContextMenu,
        Cell,
        VerticalText,
        Alias,
        Copy,
        NoDrop,
        Grab,
        Grabbing,
        AllScroll,
        ZoomIn,
        ZoomOut,
        EResize,
        NResize,
        NeResize,
        NwResize,
        SResize,
        SeResize,
        SwResize,
        WResize,
        EwResize,
        NsResize,
        NeswResize,
        NwseResize,
        ColResize,
        RowResize,
    }
    /// Renderer type of the current windows OpenGL context
    #[repr(C)]     pub enum AzRendererType {
        Hardware,
        Software,
    }
    /// Re-export of rust-allocated (stack based) `FullScreenMode` struct
    #[repr(C)]     pub enum AzFullScreenMode {
        SlowFullScreen,
        FastFullScreen,
        SlowWindowed,
        FastWindowed,
    }
    /// Re-export of rust-allocated (stack based) `WindowTheme` struct
    #[repr(C)]     pub enum AzWindowTheme {
        DarkMode,
        LightMode,
    }
    /// Re-export of rust-allocated (stack based) `MonitorHandle` struct
    #[repr(C)]     pub struct AzMonitorHandle {
        pub(crate) ptr: *mut c_void,
    }
    /// `AzLayoutCallbackType` struct
    pub type AzLayoutCallbackType = extern "C" fn(&mut AzRefAny, AzLayoutInfo) -> AzStyledDom;
    /// `AzCallbackType` struct
    pub type AzCallbackType = extern "C" fn(&mut AzRefAny, AzCallbackInfo) -> AzUpdateScreen;
    /// Specifies if the screen should be updated after the callback function has returned
    #[repr(C)]     pub enum AzUpdateScreen {
        DoNothing,
        RegenerateStyledDomForCurrentWindow,
        RegenerateStyledDomForAllWindows,
    }
    /// `AzIFrameCallbackType` struct
    pub type AzIFrameCallbackType = extern "C" fn(&mut AzRefAny, AzIFrameCallbackInfo) -> AzIFrameCallbackReturn;
    /// `AzGlCallbackType` struct
    pub type AzGlCallbackType = extern "C" fn(&mut AzRefAny, AzGlCallbackInfo) -> AzGlCallbackReturn;
    /// `AzTimerCallbackType` struct
    pub type AzTimerCallbackType = extern "C" fn(&mut AzRefAny, &mut AzRefAny, AzTimerCallbackInfo) -> AzTimerCallbackReturn;
    /// `AzWriteBackCallbackType` struct
    pub type AzWriteBackCallbackType = extern "C" fn(&mut AzRefAny, AzRefAny, AzCallbackInfo) -> AzUpdateScreen;
    /// `AzThreadCallbackType` struct
    pub type AzThreadCallbackType = extern "C" fn(AzRefAny, AzThreadSender, AzThreadReceiver);
    /// `AzRefAnyDestructorType` struct
    pub type AzRefAnyDestructorType = extern "C" fn(&mut c_void);
    /// Re-export of rust-allocated (stack based) `RefCount` struct
    #[repr(C)]     pub struct AzRefCount {
        pub(crate) ptr: *const AzRefCountInner,
    }
    /// RefAny is a reference-counted, type-erased pointer, which stores a reference to a struct. `RefAny` can be up- and downcasted (this usually done via generics and can't be expressed in the Rust API)
    #[repr(C)]     pub struct AzRefAny {
        pub _internal_ptr: *const c_void,
        pub is_dead: bool,
        pub sharing_info: AzRefCount,
    }
    /// When to call a callback action - `On::MouseOver`, `On::MouseOut`, etc.
    #[repr(C)]     pub enum AzOn {
        MouseOver,
        MouseDown,
        LeftMouseDown,
        MiddleMouseDown,
        RightMouseDown,
        MouseUp,
        LeftMouseUp,
        MiddleMouseUp,
        RightMouseUp,
        MouseEnter,
        MouseLeave,
        Scroll,
        TextInput,
        VirtualKeyDown,
        VirtualKeyUp,
        HoveredFile,
        DroppedFile,
        HoveredFileCancelled,
        FocusReceived,
        FocusLost,
    }
    /// Re-export of rust-allocated (stack based) `HoverEventFilter` struct
    #[repr(C)]     pub enum AzHoverEventFilter {
        MouseOver,
        MouseDown,
        LeftMouseDown,
        RightMouseDown,
        MiddleMouseDown,
        MouseUp,
        LeftMouseUp,
        RightMouseUp,
        MiddleMouseUp,
        MouseEnter,
        MouseLeave,
        Scroll,
        ScrollStart,
        ScrollEnd,
        TextInput,
        VirtualKeyDown,
        VirtualKeyUp,
        HoveredFile,
        DroppedFile,
        HoveredFileCancelled,
        TouchStart,
        TouchMove,
        TouchEnd,
        TouchCancel,
    }
    /// Re-export of rust-allocated (stack based) `FocusEventFilter` struct
    #[repr(C)]     pub enum AzFocusEventFilter {
        MouseOver,
        MouseDown,
        LeftMouseDown,
        RightMouseDown,
        MiddleMouseDown,
        MouseUp,
        LeftMouseUp,
        RightMouseUp,
        MiddleMouseUp,
        MouseEnter,
        MouseLeave,
        Scroll,
        ScrollStart,
        ScrollEnd,
        TextInput,
        VirtualKeyDown,
        VirtualKeyUp,
        FocusReceived,
        FocusLost,
    }
    /// Re-export of rust-allocated (stack based) `WindowEventFilter` struct
    #[repr(C)]     pub enum AzWindowEventFilter {
        MouseOver,
        MouseDown,
        LeftMouseDown,
        RightMouseDown,
        MiddleMouseDown,
        MouseUp,
        LeftMouseUp,
        RightMouseUp,
        MiddleMouseUp,
        MouseEnter,
        MouseLeave,
        Scroll,
        ScrollStart,
        ScrollEnd,
        TextInput,
        VirtualKeyDown,
        VirtualKeyUp,
        HoveredFile,
        DroppedFile,
        HoveredFileCancelled,
        Resized,
        Moved,
        TouchStart,
        TouchMove,
        TouchEnd,
        TouchCancel,
        FocusReceived,
        FocusLost,
        CloseRequested,
        ThemeChanged,
    }
    /// Re-export of rust-allocated (stack based) `ComponentEventFilter` struct
    #[repr(C)]     pub enum AzComponentEventFilter {
        AfterMount,
        BeforeUnmount,
        NodeResized,
    }
    /// Re-export of rust-allocated (stack based) `ApplicationEventFilter` struct
    #[repr(C)]     pub enum AzApplicationEventFilter {
        DeviceConnected,
        DeviceDisconnected,
    }
    /// Re-export of rust-allocated (stack based) `NodeTypePath` struct
    #[repr(C)]     pub enum AzNodeTypePath {
        Body,
        Div,
        Br,
        P,
        Img,
        Texture,
        IFrame,
    }
    /// Re-export of rust-allocated (stack based) `CssPropertyType` struct
    #[repr(C)]     pub enum AzCssPropertyType {
        TextColor,
        FontSize,
        FontFamily,
        TextAlign,
        LetterSpacing,
        LineHeight,
        WordSpacing,
        TabWidth,
        Cursor,
        Display,
        Float,
        BoxSizing,
        Width,
        Height,
        MinWidth,
        MinHeight,
        MaxWidth,
        MaxHeight,
        Position,
        Top,
        Right,
        Left,
        Bottom,
        FlexWrap,
        FlexDirection,
        FlexGrow,
        FlexShrink,
        JustifyContent,
        AlignItems,
        AlignContent,
        OverflowX,
        OverflowY,
        PaddingTop,
        PaddingLeft,
        PaddingRight,
        PaddingBottom,
        MarginTop,
        MarginLeft,
        MarginRight,
        MarginBottom,
        Background,
        BackgroundImage,
        BackgroundColor,
        BackgroundPosition,
        BackgroundSize,
        BackgroundRepeat,
        BorderTopLeftRadius,
        BorderTopRightRadius,
        BorderBottomLeftRadius,
        BorderBottomRightRadius,
        BorderTopColor,
        BorderRightColor,
        BorderLeftColor,
        BorderBottomColor,
        BorderTopStyle,
        BorderRightStyle,
        BorderLeftStyle,
        BorderBottomStyle,
        BorderTopWidth,
        BorderRightWidth,
        BorderLeftWidth,
        BorderBottomWidth,
        BoxShadowLeft,
        BoxShadowRight,
        BoxShadowTop,
        BoxShadowBottom,
        ScrollbarStyle,
        Opacity,
        Transform,
        PerspectiveOrigin,
        TransformOrigin,
        BackfaceVisibility,
    }
    /// Re-export of rust-allocated (stack based) `SizeMetric` struct
    #[repr(C)]     pub enum AzSizeMetric {
        Px,
        Pt,
        Em,
        Percent,
    }
    /// Re-export of rust-allocated (stack based) `BoxShadowClipMode` struct
    #[repr(C)]     pub enum AzBoxShadowClipMode {
        Outset,
        Inset,
    }
    /// Re-export of rust-allocated (stack based) `LayoutAlignContent` struct
    #[repr(C)]     pub enum AzLayoutAlignContent {
        Stretch,
        Center,
        Start,
        End,
        SpaceBetween,
        SpaceAround,
    }
    /// Re-export of rust-allocated (stack based) `LayoutAlignItems` struct
    #[repr(C)]     pub enum AzLayoutAlignItems {
        Stretch,
        Center,
        FlexStart,
        FlexEnd,
    }
    /// Re-export of rust-allocated (stack based) `LayoutBoxSizing` struct
    #[repr(C)]     pub enum AzLayoutBoxSizing {
        ContentBox,
        BorderBox,
    }
    /// Re-export of rust-allocated (stack based) `LayoutFlexDirection` struct
    #[repr(C)]     pub enum AzLayoutFlexDirection {
        Row,
        RowReverse,
        Column,
        ColumnReverse,
    }
    /// Re-export of rust-allocated (stack based) `LayoutDisplay` struct
    #[repr(C)]     pub enum AzLayoutDisplay {
        Flex,
        Block,
        InlineBlock,
    }
    /// Re-export of rust-allocated (stack based) `LayoutFloat` struct
    #[repr(C)]     pub enum AzLayoutFloat {
        Left,
        Right,
    }
    /// Re-export of rust-allocated (stack based) `LayoutJustifyContent` struct
    #[repr(C)]     pub enum AzLayoutJustifyContent {
        Start,
        End,
        Center,
        SpaceBetween,
        SpaceAround,
        SpaceEvenly,
    }
    /// Re-export of rust-allocated (stack based) `LayoutPosition` struct
    #[repr(C)]     pub enum AzLayoutPosition {
        Static,
        Relative,
        Absolute,
        Fixed,
    }
    /// Re-export of rust-allocated (stack based) `LayoutFlexWrap` struct
    #[repr(C)]     pub enum AzLayoutFlexWrap {
        Wrap,
        NoWrap,
    }
    /// Re-export of rust-allocated (stack based) `LayoutOverflow` struct
    #[repr(C)]     pub enum AzLayoutOverflow {
        Scroll,
        Auto,
        Hidden,
        Visible,
    }
    /// Re-export of rust-allocated (stack based) `AngleMetric` struct
    #[repr(C)]     pub enum AzAngleMetric {
        Degree,
        Radians,
        Grad,
        Turn,
        Percent,
    }
    /// Re-export of rust-allocated (stack based) `DirectionCorner` struct
    #[repr(C)]     pub enum AzDirectionCorner {
        Right,
        Left,
        Top,
        Bottom,
        TopRight,
        TopLeft,
        BottomRight,
        BottomLeft,
    }
    /// Re-export of rust-allocated (stack based) `ExtendMode` struct
    #[repr(C)]     pub enum AzExtendMode {
        Clamp,
        Repeat,
    }
    /// Re-export of rust-allocated (stack based) `Shape` struct
    #[repr(C)]     pub enum AzShape {
        Ellipse,
        Circle,
    }
    /// Re-export of rust-allocated (stack based) `RadialGradientSize` struct
    #[repr(C)]     pub enum AzRadialGradientSize {
        ClosestSide,
        ClosestCorner,
        FarthestSide,
        FarthestCorner,
    }
    /// Re-export of rust-allocated (stack based) `StyleBackgroundRepeat` struct
    #[repr(C)]     pub enum AzStyleBackgroundRepeat {
        NoRepeat,
        Repeat,
        RepeatX,
        RepeatY,
    }
    /// Re-export of rust-allocated (stack based) `BorderStyle` struct
    #[repr(C)]     pub enum AzBorderStyle {
        None,
        Solid,
        Double,
        Dotted,
        Dashed,
        Hidden,
        Groove,
        Ridge,
        Inset,
        Outset,
    }
    /// Re-export of rust-allocated (stack based) `StyleCursor` struct
    #[repr(C)]     pub enum AzStyleCursor {
        Alias,
        AllScroll,
        Cell,
        ColResize,
        ContextMenu,
        Copy,
        Crosshair,
        Default,
        EResize,
        EwResize,
        Grab,
        Grabbing,
        Help,
        Move,
        NResize,
        NsResize,
        NeswResize,
        NwseResize,
        Pointer,
        Progress,
        RowResize,
        SResize,
        SeResize,
        Text,
        Unset,
        VerticalText,
        WResize,
        Wait,
        ZoomIn,
        ZoomOut,
    }
    /// Re-export of rust-allocated (stack based) `StyleBackfaceVisibility` struct
    #[repr(C)]     pub enum AzStyleBackfaceVisibility {
        Hidden,
        Visible,
    }
    /// Re-export of rust-allocated (stack based) `StyleTextAlignmentHorz` struct
    #[repr(C)]     pub enum AzStyleTextAlignmentHorz {
        Left,
        Center,
        Right,
    }
    /// Re-export of rust-allocated (stack based) `CssPropertyCache` struct
    #[repr(C)]     pub struct AzCssPropertyCache {
        pub(crate) ptr: *mut c_void,
    }
    /// Re-export of rust-allocated (stack based) `GlContextPtr` struct
    #[repr(C)]     pub struct AzGlContextPtr {
        pub(crate) ptr: *const c_void,
        pub renderer_type: AzRendererType,
    }
    /// Re-export of rust-allocated (stack based) `Texture` struct
    #[repr(C)]     pub struct AzTexture {
        pub texture_id: u32,
        pub format: AzRawImageFormat,
        pub flags: AzTextureFlags,
        pub size: AzPhysicalSizeU32,
        pub gl_context: AzGlContextPtr,
    }
    /// Re-export of rust-allocated (stack based) `VertexAttributeType` struct
    #[repr(C)]     pub enum AzVertexAttributeType {
        Float,
        Double,
        UnsignedByte,
        UnsignedShort,
        UnsignedInt,
    }
    /// Re-export of rust-allocated (stack based) `IndexBufferFormat` struct
    #[repr(C)]     pub enum AzIndexBufferFormat {
        Points,
        Lines,
        LineStrip,
        Triangles,
        TriangleStrip,
        TriangleFan,
    }
    /// Re-export of rust-allocated (stack based) `GlType` struct
    #[repr(C)]     pub enum AzGlType {
        Gl,
        Gles,
    }
    /// C-ABI stable reexport of `*const gleam::gl::GLsync`
    #[repr(C)]     pub struct AzGLsyncPtr {
        pub(crate) ptr: *const c_void,
    }
    /// Re-export of rust-allocated (stack based) `RawImageFormat` struct
    #[repr(C)]     pub enum AzRawImageFormat {
        R8,
        R16,
        RG16,
        BGRA8,
        RGBAF32,
        RG8,
        RGBAI32,
        RGBA8,
    }
    /// Re-export of rust-allocated (stack based) `SvgLineCap` struct
    #[repr(C)]     pub enum AzSvgLineCap {
        Butt,
        Square,
        Round,
    }
    /// Re-export of rust-allocated (stack based) `ShapeRendering` struct
    #[repr(C)]     pub enum AzShapeRendering {
        OptimizeSpeed,
        CrispEdges,
        GeometricPrecision,
    }
    /// Re-export of rust-allocated (stack based) `TextRendering` struct
    #[repr(C)]     pub enum AzTextRendering {
        OptimizeSpeed,
        OptimizeLegibility,
        GeometricPrecision,
    }
    /// Re-export of rust-allocated (stack based) `ImageRendering` struct
    #[repr(C)]     pub enum AzImageRendering {
        OptimizeQuality,
        OptimizeSpeed,
    }
    /// Re-export of rust-allocated (stack based) `FontDatabase` struct
    #[repr(C)]     pub enum AzFontDatabase {
        Empty,
        System,
    }
    /// Re-export of rust-allocated (stack based) `Svg` struct
    #[repr(C)]     pub struct AzSvg {
        pub(crate) ptr: *mut c_void,
    }
    /// Re-export of rust-allocated (stack based) `SvgXmlNode` struct
    #[repr(C)]     pub struct AzSvgXmlNode {
        pub(crate) ptr: *mut c_void,
    }
    /// Re-export of rust-allocated (stack based) `SvgLineJoin` struct
    #[repr(C)]     pub enum AzSvgLineJoin {
        Miter,
        MiterClip,
        Round,
        Bevel,
    }
    /// Should a timer terminate or not - used to remove active timers
    #[repr(C)]     pub enum AzTerminateTimer {
        Terminate,
        Continue,
    }
    /// Re-export of rust-allocated (stack based) `ThreadSender` struct
    #[repr(C)]     pub struct AzThreadSender {
        pub(crate) ptr: *mut c_void,
        pub send_fn: AzThreadSendFn,
        pub destructor: AzThreadSenderDestructorFn,
    }
    /// Re-export of rust-allocated (stack based) `ThreadReceiver` struct
    #[repr(C)]     pub struct AzThreadReceiver {
        pub(crate) ptr: *mut c_void,
        pub recv_fn: AzThreadRecvFn,
        pub destructor: AzThreadReceiverDestructorFn,
    }
    /// Re-export of rust-allocated (stack based) `ThreadSendMsg` struct
    #[repr(C)]     pub enum AzThreadSendMsg {
        TerminateThread,
        Tick,
    }
    /// `AzCreateThreadFnType` struct
    pub type AzCreateThreadFnType = extern "C" fn(AzRefAny, AzRefAny, AzThreadCallbackType) -> AzThread;
    /// `AzGetSystemTimeFnType` struct
    pub type AzGetSystemTimeFnType = extern "C" fn() -> AzInstant;
    /// `AzCheckThreadFinishedFnType` struct
    pub type AzCheckThreadFinishedFnType = extern "C" fn(&c_void) -> bool;
    /// `AzLibrarySendThreadMsgFnType` struct
    pub type AzLibrarySendThreadMsgFnType = extern "C" fn(&mut c_void, AzThreadSendMsg) -> bool;
    /// `AzLibraryReceiveThreadMsgFnType` struct
    pub type AzLibraryReceiveThreadMsgFnType = extern "C" fn(&mut c_void) -> AzOptionThreadReceiveMsg;
    /// `AzThreadRecvFnType` struct
    pub type AzThreadRecvFnType = extern "C" fn(&mut c_void) -> AzOptionThreadSendMsg;
    /// `AzThreadSendFnType` struct
    pub type AzThreadSendFnType = extern "C" fn(&mut c_void, AzThreadReceiveMsg) -> bool;
    /// `AzThreadDestructorFnType` struct
    pub type AzThreadDestructorFnType = extern "C" fn(&mut c_void, &mut c_void, &mut c_void, &mut c_void);
    /// `AzThreadReceiverDestructorFnType` struct
    pub type AzThreadReceiverDestructorFnType = extern "C" fn(&mut AzThreadReceiver);
    /// `AzThreadSenderDestructorFnType` struct
    pub type AzThreadSenderDestructorFnType = extern "C" fn(&mut AzThreadSender);
    /// `AzMonitorVecDestructorType` struct
    pub type AzMonitorVecDestructorType = extern "C" fn(&mut AzMonitorVec);
    /// `AzVideoModeVecDestructorType` struct
    pub type AzVideoModeVecDestructorType = extern "C" fn(&mut AzVideoModeVec);
    /// `AzDomVecDestructorType` struct
    pub type AzDomVecDestructorType = extern "C" fn(&mut AzDomVec);
    /// `AzIdOrClassVecDestructorType` struct
    pub type AzIdOrClassVecDestructorType = extern "C" fn(&mut AzIdOrClassVec);
    /// `AzNodeDataInlineCssPropertyVecDestructorType` struct
    pub type AzNodeDataInlineCssPropertyVecDestructorType = extern "C" fn(&mut AzNodeDataInlineCssPropertyVec);
    /// `AzStyleBackgroundContentVecDestructorType` struct
    pub type AzStyleBackgroundContentVecDestructorType = extern "C" fn(&mut AzStyleBackgroundContentVec);
    /// `AzStyleBackgroundPositionVecDestructorType` struct
    pub type AzStyleBackgroundPositionVecDestructorType = extern "C" fn(&mut AzStyleBackgroundPositionVec);
    /// `AzStyleBackgroundRepeatVecDestructorType` struct
    pub type AzStyleBackgroundRepeatVecDestructorType = extern "C" fn(&mut AzStyleBackgroundRepeatVec);
    /// `AzStyleBackgroundSizeVecDestructorType` struct
    pub type AzStyleBackgroundSizeVecDestructorType = extern "C" fn(&mut AzStyleBackgroundSizeVec);
    /// `AzStyleTransformVecDestructorType` struct
    pub type AzStyleTransformVecDestructorType = extern "C" fn(&mut AzStyleTransformVec);
    /// `AzCssPropertyVecDestructorType` struct
    pub type AzCssPropertyVecDestructorType = extern "C" fn(&mut AzCssPropertyVec);
    /// `AzSvgMultiPolygonVecDestructorType` struct
    pub type AzSvgMultiPolygonVecDestructorType = extern "C" fn(&mut AzSvgMultiPolygonVec);
    /// `AzSvgPathVecDestructorType` struct
    pub type AzSvgPathVecDestructorType = extern "C" fn(&mut AzSvgPathVec);
    /// `AzVertexAttributeVecDestructorType` struct
    pub type AzVertexAttributeVecDestructorType = extern "C" fn(&mut AzVertexAttributeVec);
    /// `AzSvgPathElementVecDestructorType` struct
    pub type AzSvgPathElementVecDestructorType = extern "C" fn(&mut AzSvgPathElementVec);
    /// `AzSvgVertexVecDestructorType` struct
    pub type AzSvgVertexVecDestructorType = extern "C" fn(&mut AzSvgVertexVec);
    /// `AzU32VecDestructorType` struct
    pub type AzU32VecDestructorType = extern "C" fn(&mut AzU32Vec);
    /// `AzXWindowTypeVecDestructorType` struct
    pub type AzXWindowTypeVecDestructorType = extern "C" fn(&mut AzXWindowTypeVec);
    /// `AzVirtualKeyCodeVecDestructorType` struct
    pub type AzVirtualKeyCodeVecDestructorType = extern "C" fn(&mut AzVirtualKeyCodeVec);
    /// `AzCascadeInfoVecDestructorType` struct
    pub type AzCascadeInfoVecDestructorType = extern "C" fn(&mut AzCascadeInfoVec);
    /// `AzScanCodeVecDestructorType` struct
    pub type AzScanCodeVecDestructorType = extern "C" fn(&mut AzScanCodeVec);
    /// `AzCssDeclarationVecDestructorType` struct
    pub type AzCssDeclarationVecDestructorType = extern "C" fn(&mut AzCssDeclarationVec);
    /// `AzCssPathSelectorVecDestructorType` struct
    pub type AzCssPathSelectorVecDestructorType = extern "C" fn(&mut AzCssPathSelectorVec);
    /// `AzStylesheetVecDestructorType` struct
    pub type AzStylesheetVecDestructorType = extern "C" fn(&mut AzStylesheetVec);
    /// `AzCssRuleBlockVecDestructorType` struct
    pub type AzCssRuleBlockVecDestructorType = extern "C" fn(&mut AzCssRuleBlockVec);
    /// `AzU8VecDestructorType` struct
    pub type AzU8VecDestructorType = extern "C" fn(&mut AzU8Vec);
    /// `AzCallbackDataVecDestructorType` struct
    pub type AzCallbackDataVecDestructorType = extern "C" fn(&mut AzCallbackDataVec);
    /// `AzDebugMessageVecDestructorType` struct
    pub type AzDebugMessageVecDestructorType = extern "C" fn(&mut AzDebugMessageVec);
    /// `AzGLuintVecDestructorType` struct
    pub type AzGLuintVecDestructorType = extern "C" fn(&mut AzGLuintVec);
    /// `AzGLintVecDestructorType` struct
    pub type AzGLintVecDestructorType = extern "C" fn(&mut AzGLintVec);
    /// `AzStringVecDestructorType` struct
    pub type AzStringVecDestructorType = extern "C" fn(&mut AzStringVec);
    /// `AzStringPairVecDestructorType` struct
    pub type AzStringPairVecDestructorType = extern "C" fn(&mut AzStringPairVec);
    /// `AzLinearColorStopVecDestructorType` struct
    pub type AzLinearColorStopVecDestructorType = extern "C" fn(&mut AzLinearColorStopVec);
    /// `AzRadialColorStopVecDestructorType` struct
    pub type AzRadialColorStopVecDestructorType = extern "C" fn(&mut AzRadialColorStopVec);
    /// `AzNodeIdVecDestructorType` struct
    pub type AzNodeIdVecDestructorType = extern "C" fn(&mut AzNodeIdVec);
    /// `AzNodeVecDestructorType` struct
    pub type AzNodeVecDestructorType = extern "C" fn(&mut AzNodeVec);
    /// `AzStyledNodeVecDestructorType` struct
    pub type AzStyledNodeVecDestructorType = extern "C" fn(&mut AzStyledNodeVec);
    /// `AzTagIdsToNodeIdsMappingVecDestructorType` struct
    pub type AzTagIdsToNodeIdsMappingVecDestructorType = extern "C" fn(&mut AzTagIdsToNodeIdsMappingVec);
    /// `AzParentWithNodeDepthVecDestructorType` struct
    pub type AzParentWithNodeDepthVecDestructorType = extern "C" fn(&mut AzParentWithNodeDepthVec);
    /// `AzNodeDataVecDestructorType` struct
    pub type AzNodeDataVecDestructorType = extern "C" fn(&mut AzNodeDataVec);
    /// Re-export of rust-allocated (stack based) `InstantPtr` struct
    #[repr(C)]     pub struct AzInstantPtr {
        pub(crate) ptr: *const c_void,
        pub clone_fn: AzInstantPtrCloneFn,
        pub destructor: AzInstantPtrDestructorFn,
    }
    /// `AzInstantPtrCloneFnType` struct
    pub type AzInstantPtrCloneFnType = extern "C" fn(&c_void) -> AzInstantPtr;
    /// `AzInstantPtrDestructorFnType` struct
    pub type AzInstantPtrDestructorFnType = extern "C" fn(&mut c_void);
    /// Force a specific renderer: note that azul will **crash** on startup if the `RendererOptions` are not satisfied.
    #[repr(C)]     pub struct AzRendererOptions {
        pub vsync: AzVsync,
        pub srgb: AzSrgb,
        pub hw_accel: AzHwAcceleration,
    }
    /// Offset in physical pixels (integer units)
    #[repr(C)]     pub struct AzLayoutPoint {
        pub x: isize,
        pub y: isize,
    }
    /// Size in physical pixels (integer units)
    #[repr(C)]     pub struct AzLayoutSize {
        pub width: isize,
        pub height: isize,
    }
    /// Represents a rectangle in physical pixels (integer units)
    #[repr(C)]     pub struct AzLayoutRect {
        pub origin: AzLayoutPoint,
        pub size: AzLayoutSize,
    }
    /// Re-export of rust-allocated (stack based) `IOSHandle` struct
    #[repr(C)]     pub struct AzIOSHandle {
        pub ui_window: *mut c_void,
        pub ui_view: *mut c_void,
        pub ui_view_controller: *mut c_void,
    }
    /// Re-export of rust-allocated (stack based) `MacOSHandle` struct
    #[repr(C)]     pub struct AzMacOSHandle {
        pub ns_window: *mut c_void,
        pub ns_view: *mut c_void,
    }
    /// Re-export of rust-allocated (stack based) `XlibHandle` struct
    #[repr(C)]     pub struct AzXlibHandle {
        pub window: u64,
        pub display: *mut c_void,
    }
    /// Re-export of rust-allocated (stack based) `XcbHandle` struct
    #[repr(C)]     pub struct AzXcbHandle {
        pub window: u32,
        pub connection: *mut c_void,
    }
    /// Re-export of rust-allocated (stack based) `WaylandHandle` struct
    #[repr(C)]     pub struct AzWaylandHandle {
        pub surface: *mut c_void,
        pub display: *mut c_void,
    }
    /// Re-export of rust-allocated (stack based) `WindowsHandle` struct
    #[repr(C)]     pub struct AzWindowsHandle {
        pub hwnd: *mut c_void,
        pub hinstance: *mut c_void,
    }
    /// Re-export of rust-allocated (stack based) `WebHandle` struct
    #[repr(C)]     pub struct AzWebHandle {
        pub id: u32,
    }
    /// Re-export of rust-allocated (stack based) `AndroidHandle` struct
    #[repr(C)]     pub struct AzAndroidHandle {
        pub a_native_window: *mut c_void,
    }
    /// Same as `LayoutPoint`, but uses `i32` instead of `isize`
    #[repr(C)]     pub struct AzPhysicalPositionI32 {
        pub x: i32,
        pub y: i32,
    }
    /// Same as `LayoutPoint`, but uses `u32` instead of `isize`
    #[repr(C)]     pub struct AzPhysicalSizeU32 {
        pub width: u32,
        pub height: u32,
    }
    /// Logical position (can differ based on HiDPI settings). Usually this is what you'd want for hit-testing and positioning elements.
    #[repr(C)]     pub struct AzLogicalPosition {
        pub x: f32,
        pub y: f32,
    }
    /// Unique hash of a window icon, so that azul does not have to compare the actual bytes to see wether the window icon has changed.
    #[repr(C)]     pub struct AzIconKey {
        pub id: usize,
    }
    /// Symbolic accelerator key (ctrl, alt, shift)
    #[repr(C, u8)]     pub enum AzAcceleratorKey {
        Ctrl,
        Alt,
        Shift,
        Key(AzVirtualKeyCode),
    }
    /// Boolean flags relating to the current window state
    #[repr(C)]     pub struct AzWindowFlags {
        pub is_maximized: bool,
        pub is_minimized: bool,
        pub is_about_to_close: bool,
        pub is_fullscreen: bool,
        pub has_decorations: bool,
        pub is_visible: bool,
        pub is_always_on_top: bool,
        pub is_resizable: bool,
        pub has_focus: bool,
        pub has_extended_frame: bool,
        pub has_blur_behind_window: bool,
    }
    /// Debugging information, will be rendered as an overlay on top of the UI
    #[repr(C)]     pub struct AzDebugState {
        pub profiler_dbg: bool,
        pub render_target_dbg: bool,
        pub texture_cache_dbg: bool,
        pub gpu_time_queries: bool,
        pub gpu_sample_queries: bool,
        pub disable_batching: bool,
        pub epochs: bool,
        pub echo_driver_messages: bool,
        pub show_overdraw: bool,
        pub gpu_cache_dbg: bool,
        pub texture_cache_dbg_clear_evicted: bool,
        pub picture_caching_dbg: bool,
        pub primitive_dbg: bool,
        pub zoom_dbg: bool,
        pub small_screen: bool,
        pub disable_opaque_pass: bool,
        pub disable_alpha_pass: bool,
        pub disable_clip_masks: bool,
        pub disable_text_prims: bool,
        pub disable_gradient_prims: bool,
        pub obscure_images: bool,
        pub glyph_flashing: bool,
        pub smart_profiler: bool,
        pub invalidation_dbg: bool,
        pub tile_cache_logging_dbg: bool,
        pub profiler_capture: bool,
        pub force_picture_invalidation: bool,
    }
    /// Current position of the mouse cursor, relative to the window. Set to `Uninitialized` on startup (gets initialized on the first frame).
    #[repr(C, u8)]     pub enum AzCursorPosition {
        OutOfWindow,
        Uninitialized,
        InWindow(AzLogicalPosition),
    }
    /// Re-export of rust-allocated (stack based) `MacWindowOptions` struct
    #[repr(C)]     pub struct AzMacWindowOptions {
        pub _reserved: u8,
    }
    /// Re-export of rust-allocated (stack based) `WasmWindowOptions` struct
    #[repr(C)]     pub struct AzWasmWindowOptions {
        pub _reserved: u8,
    }
    /// Re-export of rust-allocated (stack based) `WindowPosition` struct
    #[repr(C, u8)]     pub enum AzWindowPosition {
        Uninitialized,
        Initialized(AzPhysicalPositionI32),
    }
    /// Re-export of rust-allocated (stack based) `ImePosition` struct
    #[repr(C, u8)]     pub enum AzImePosition {
        Uninitialized,
        Initialized(AzLogicalPosition),
    }
    /// Re-export of rust-allocated (stack based) `TouchState` struct
    #[repr(C)]     pub struct AzTouchState {
        pub unused: u8,
    }
    /// Re-export of rust-allocated (stack based) `VideoMode` struct
    #[repr(C)]     pub struct AzVideoMode {
        pub size: AzLayoutSize,
        pub bit_depth: u16,
        pub refresh_rate: u16,
    }
    /// Re-export of rust-allocated (stack based) `LogicalSize` struct
    #[repr(C)]     pub struct AzLogicalSize {
        pub width: f32,
        pub height: f32,
    }
    /// Re-export of rust-allocated (stack based) `LayoutCallback` struct
    #[repr(C)]     pub struct AzLayoutCallback {
        pub cb: AzLayoutCallbackType,
    }
    /// Re-export of rust-allocated (stack based) `Callback` struct
    #[repr(C)]     pub struct AzCallback {
        pub cb: AzCallbackType,
    }
    /// Re-export of rust-allocated (stack based) `NodeId` struct
    #[repr(C)]     pub struct AzNodeId {
        pub inner: usize,
    }
    /// Re-export of rust-allocated (stack based) `DomId` struct
    #[repr(C)]     pub struct AzDomId {
        pub inner: usize,
    }
    /// Re-export of rust-allocated (stack based) `DomNodeId` struct
    #[repr(C)]     pub struct AzDomNodeId {
        pub dom: AzDomId,
        pub node: AzNodeId,
    }
    /// Re-export of rust-allocated (stack based) `HidpiAdjustedBounds` struct
    #[repr(C)]     pub struct AzHidpiAdjustedBounds {
        pub logical_size: AzLogicalSize,
        pub hidpi_factor: f32,
    }
    /// Re-export of rust-allocated (stack based) `IFrameCallback` struct
    #[repr(C)]     pub struct AzIFrameCallback {
        pub cb: AzIFrameCallbackType,
    }
    /// Re-export of rust-allocated (stack based) `IFrameCallbackInfo` struct
    #[repr(C)]     pub struct AzIFrameCallbackInfo {
        pub resources: *const c_void,
        pub bounds: AzHidpiAdjustedBounds,
    }
    /// Re-export of rust-allocated (stack based) `GlCallback` struct
    #[repr(C)]     pub struct AzGlCallback {
        pub cb: AzGlCallbackType,
    }
    /// Re-export of rust-allocated (stack based) `TimerCallback` struct
    #[repr(C)]     pub struct AzTimerCallback {
        pub cb: AzTimerCallbackType,
    }
    /// Re-export of rust-allocated (stack based) `TimerCallbackReturn` struct
    #[repr(C)]     pub struct AzTimerCallbackReturn {
        pub should_update: AzUpdateScreen,
        pub should_terminate: AzTerminateTimer,
    }
    /// Re-export of rust-allocated (stack based) `WriteBackCallback` struct
    #[repr(C)]     pub struct AzWriteBackCallback {
        pub cb: AzWriteBackCallbackType,
    }
    /// Re-export of rust-allocated (stack based) `GlTextureNode` struct
    #[repr(C)]     pub struct AzGlTextureNode {
        pub callback: AzGlCallback,
        pub data: AzRefAny,
    }
    /// Re-export of rust-allocated (stack based) `IFrameNode` struct
    #[repr(C)]     pub struct AzIFrameNode {
        pub callback: AzIFrameCallback,
        pub data: AzRefAny,
    }
    /// Re-export of rust-allocated (stack based) `NotEventFilter` struct
    #[repr(C, u8)]     pub enum AzNotEventFilter {
        Hover(AzHoverEventFilter),
        Focus(AzFocusEventFilter),
    }
    /// Re-export of rust-allocated (stack based) `TabIndex` struct
    #[repr(C, u8)]     pub enum AzTabIndex {
        Auto,
        OverrideInParent(u32),
        NoKeyboardFocus,
    }
    /// Re-export of rust-allocated (stack based) `CssNthChildPattern` struct
    #[repr(C)]     pub struct AzCssNthChildPattern {
        pub repeat: u32,
        pub offset: u32,
    }
    /// Re-export of rust-allocated (stack based) `ColorU` struct
    #[repr(C)]     pub struct AzColorU {
        pub r: u8,
        pub g: u8,
        pub b: u8,
        pub a: u8,
    }
    /// Re-export of rust-allocated (stack based) `FloatValue` struct
    #[repr(C)]     pub struct AzFloatValue {
        pub number: isize,
    }
    /// Re-export of rust-allocated (stack based) `PixelValue` struct
    #[repr(C)]     pub struct AzPixelValue {
        pub metric: AzSizeMetric,
        pub number: AzFloatValue,
    }
    /// Re-export of rust-allocated (stack based) `PixelValueNoPercent` struct
    #[repr(C)]     pub struct AzPixelValueNoPercent {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `StyleBoxShadow` struct
    #[repr(C)]     pub struct AzStyleBoxShadow {
        pub offset: [AzPixelValueNoPercent;2],
        pub color: AzColorU,
        pub blur_radius: AzPixelValueNoPercent,
        pub spread_radius: AzPixelValueNoPercent,
        pub clip_mode: AzBoxShadowClipMode,
    }
    /// Re-export of rust-allocated (stack based) `LayoutBottom` struct
    #[repr(C)]     pub struct AzLayoutBottom {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `LayoutFlexGrow` struct
    #[repr(C)]     pub struct AzLayoutFlexGrow {
        pub inner: AzFloatValue,
    }
    /// Re-export of rust-allocated (stack based) `LayoutFlexShrink` struct
    #[repr(C)]     pub struct AzLayoutFlexShrink {
        pub inner: AzFloatValue,
    }
    /// Re-export of rust-allocated (stack based) `LayoutHeight` struct
    #[repr(C)]     pub struct AzLayoutHeight {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `LayoutLeft` struct
    #[repr(C)]     pub struct AzLayoutLeft {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `LayoutMarginBottom` struct
    #[repr(C)]     pub struct AzLayoutMarginBottom {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `LayoutMarginLeft` struct
    #[repr(C)]     pub struct AzLayoutMarginLeft {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `LayoutMarginRight` struct
    #[repr(C)]     pub struct AzLayoutMarginRight {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `LayoutMarginTop` struct
    #[repr(C)]     pub struct AzLayoutMarginTop {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `LayoutMaxHeight` struct
    #[repr(C)]     pub struct AzLayoutMaxHeight {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `LayoutMaxWidth` struct
    #[repr(C)]     pub struct AzLayoutMaxWidth {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `LayoutMinHeight` struct
    #[repr(C)]     pub struct AzLayoutMinHeight {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `LayoutMinWidth` struct
    #[repr(C)]     pub struct AzLayoutMinWidth {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `LayoutPaddingBottom` struct
    #[repr(C)]     pub struct AzLayoutPaddingBottom {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `LayoutPaddingLeft` struct
    #[repr(C)]     pub struct AzLayoutPaddingLeft {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `LayoutPaddingRight` struct
    #[repr(C)]     pub struct AzLayoutPaddingRight {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `LayoutPaddingTop` struct
    #[repr(C)]     pub struct AzLayoutPaddingTop {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `LayoutRight` struct
    #[repr(C)]     pub struct AzLayoutRight {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `LayoutTop` struct
    #[repr(C)]     pub struct AzLayoutTop {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `LayoutWidth` struct
    #[repr(C)]     pub struct AzLayoutWidth {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `PercentageValue` struct
    #[repr(C)]     pub struct AzPercentageValue {
        pub number: AzFloatValue,
    }
    /// Re-export of rust-allocated (stack based) `AngleValue` struct
    #[repr(C)]     pub struct AzAngleValue {
        pub metric: AzAngleMetric,
        pub number: AzFloatValue,
    }
    /// Re-export of rust-allocated (stack based) `DirectionCorners` struct
    #[repr(C)]     pub struct AzDirectionCorners {
        pub from: AzDirectionCorner,
        pub to: AzDirectionCorner,
    }
    /// Re-export of rust-allocated (stack based) `Direction` struct
    #[repr(C, u8)]     pub enum AzDirection {
        Angle(AzAngleValue),
        FromTo(AzDirectionCorners),
    }
    /// Re-export of rust-allocated (stack based) `BackgroundPositionHorizontal` struct
    #[repr(C, u8)]     pub enum AzBackgroundPositionHorizontal {
        Left,
        Center,
        Right,
        Exact(AzPixelValue),
    }
    /// Re-export of rust-allocated (stack based) `BackgroundPositionVertical` struct
    #[repr(C, u8)]     pub enum AzBackgroundPositionVertical {
        Top,
        Center,
        Bottom,
        Exact(AzPixelValue),
    }
    /// Re-export of rust-allocated (stack based) `StyleBackgroundPosition` struct
    #[repr(C)]     pub struct AzStyleBackgroundPosition {
        pub horizontal: AzBackgroundPositionHorizontal,
        pub vertical: AzBackgroundPositionVertical,
    }
    /// Re-export of rust-allocated (stack based) `StyleBackgroundSize` struct
    #[repr(C, u8)]     pub enum AzStyleBackgroundSize {
        ExactSize([AzPixelValue;2]),
        Contain,
        Cover,
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderBottomColor` struct
    #[repr(C)]     pub struct AzStyleBorderBottomColor {
        pub inner: AzColorU,
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderBottomLeftRadius` struct
    #[repr(C)]     pub struct AzStyleBorderBottomLeftRadius {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderBottomRightRadius` struct
    #[repr(C)]     pub struct AzStyleBorderBottomRightRadius {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderBottomStyle` struct
    #[repr(C)]     pub struct AzStyleBorderBottomStyle {
        pub inner: AzBorderStyle,
    }
    /// Re-export of rust-allocated (stack based) `LayoutBorderBottomWidth` struct
    #[repr(C)]     pub struct AzLayoutBorderBottomWidth {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderLeftColor` struct
    #[repr(C)]     pub struct AzStyleBorderLeftColor {
        pub inner: AzColorU,
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderLeftStyle` struct
    #[repr(C)]     pub struct AzStyleBorderLeftStyle {
        pub inner: AzBorderStyle,
    }
    /// Re-export of rust-allocated (stack based) `LayoutBorderLeftWidth` struct
    #[repr(C)]     pub struct AzLayoutBorderLeftWidth {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderRightColor` struct
    #[repr(C)]     pub struct AzStyleBorderRightColor {
        pub inner: AzColorU,
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderRightStyle` struct
    #[repr(C)]     pub struct AzStyleBorderRightStyle {
        pub inner: AzBorderStyle,
    }
    /// Re-export of rust-allocated (stack based) `LayoutBorderRightWidth` struct
    #[repr(C)]     pub struct AzLayoutBorderRightWidth {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderTopColor` struct
    #[repr(C)]     pub struct AzStyleBorderTopColor {
        pub inner: AzColorU,
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderTopLeftRadius` struct
    #[repr(C)]     pub struct AzStyleBorderTopLeftRadius {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderTopRightRadius` struct
    #[repr(C)]     pub struct AzStyleBorderTopRightRadius {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderTopStyle` struct
    #[repr(C)]     pub struct AzStyleBorderTopStyle {
        pub inner: AzBorderStyle,
    }
    /// Re-export of rust-allocated (stack based) `LayoutBorderTopWidth` struct
    #[repr(C)]     pub struct AzLayoutBorderTopWidth {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `StyleFontSize` struct
    #[repr(C)]     pub struct AzStyleFontSize {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `StyleLetterSpacing` struct
    #[repr(C)]     pub struct AzStyleLetterSpacing {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `StyleLineHeight` struct
    #[repr(C)]     pub struct AzStyleLineHeight {
        pub inner: AzPercentageValue,
    }
    /// Re-export of rust-allocated (stack based) `StyleTabWidth` struct
    #[repr(C)]     pub struct AzStyleTabWidth {
        pub inner: AzPercentageValue,
    }
    /// Re-export of rust-allocated (stack based) `StyleOpacity` struct
    #[repr(C)]     pub struct AzStyleOpacity {
        pub inner: AzFloatValue,
    }
    /// Re-export of rust-allocated (stack based) `StyleTransformOrigin` struct
    #[repr(C)]     pub struct AzStyleTransformOrigin {
        pub x: AzPixelValue,
        pub y: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `StylePerspectiveOrigin` struct
    #[repr(C)]     pub struct AzStylePerspectiveOrigin {
        pub x: AzPixelValue,
        pub y: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `StyleTransformMatrix2D` struct
    #[repr(C)]     pub struct AzStyleTransformMatrix2D {
        pub a: AzPixelValue,
        pub b: AzPixelValue,
        pub c: AzPixelValue,
        pub d: AzPixelValue,
        pub tx: AzPixelValue,
        pub ty: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `StyleTransformMatrix3D` struct
    #[repr(C)]     pub struct AzStyleTransformMatrix3D {
        pub m11: AzPixelValue,
        pub m12: AzPixelValue,
        pub m13: AzPixelValue,
        pub m14: AzPixelValue,
        pub m21: AzPixelValue,
        pub m22: AzPixelValue,
        pub m23: AzPixelValue,
        pub m24: AzPixelValue,
        pub m31: AzPixelValue,
        pub m32: AzPixelValue,
        pub m33: AzPixelValue,
        pub m34: AzPixelValue,
        pub m41: AzPixelValue,
        pub m42: AzPixelValue,
        pub m43: AzPixelValue,
        pub m44: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `StyleTransformTranslate2D` struct
    #[repr(C)]     pub struct AzStyleTransformTranslate2D {
        pub x: AzPixelValue,
        pub y: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `StyleTransformTranslate3D` struct
    #[repr(C)]     pub struct AzStyleTransformTranslate3D {
        pub x: AzPixelValue,
        pub y: AzPixelValue,
        pub z: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `StyleTransformRotate3D` struct
    #[repr(C)]     pub struct AzStyleTransformRotate3D {
        pub x: AzPercentageValue,
        pub y: AzPercentageValue,
        pub z: AzPercentageValue,
        pub angle: AzAngleValue,
    }
    /// Re-export of rust-allocated (stack based) `StyleTransformScale2D` struct
    #[repr(C)]     pub struct AzStyleTransformScale2D {
        pub x: AzPercentageValue,
        pub y: AzPercentageValue,
    }
    /// Re-export of rust-allocated (stack based) `StyleTransformScale3D` struct
    #[repr(C)]     pub struct AzStyleTransformScale3D {
        pub x: AzPercentageValue,
        pub y: AzPercentageValue,
        pub z: AzPercentageValue,
    }
    /// Re-export of rust-allocated (stack based) `StyleTransformSkew2D` struct
    #[repr(C)]     pub struct AzStyleTransformSkew2D {
        pub x: AzPercentageValue,
        pub y: AzPercentageValue,
    }
    /// Re-export of rust-allocated (stack based) `StyleTextColor` struct
    #[repr(C)]     pub struct AzStyleTextColor {
        pub inner: AzColorU,
    }
    /// Re-export of rust-allocated (stack based) `StyleWordSpacing` struct
    #[repr(C)]     pub struct AzStyleWordSpacing {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `StyleBoxShadowValue` struct
    #[repr(C, u8)]     pub enum AzStyleBoxShadowValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBoxShadow),
    }
    /// Re-export of rust-allocated (stack based) `LayoutAlignContentValue` struct
    #[repr(C, u8)]     pub enum AzLayoutAlignContentValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutAlignContent),
    }
    /// Re-export of rust-allocated (stack based) `LayoutAlignItemsValue` struct
    #[repr(C, u8)]     pub enum AzLayoutAlignItemsValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutAlignItems),
    }
    /// Re-export of rust-allocated (stack based) `LayoutBottomValue` struct
    #[repr(C, u8)]     pub enum AzLayoutBottomValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutBottom),
    }
    /// Re-export of rust-allocated (stack based) `LayoutBoxSizingValue` struct
    #[repr(C, u8)]     pub enum AzLayoutBoxSizingValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutBoxSizing),
    }
    /// Re-export of rust-allocated (stack based) `LayoutFlexDirectionValue` struct
    #[repr(C, u8)]     pub enum AzLayoutFlexDirectionValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutFlexDirection),
    }
    /// Re-export of rust-allocated (stack based) `LayoutDisplayValue` struct
    #[repr(C, u8)]     pub enum AzLayoutDisplayValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutDisplay),
    }
    /// Re-export of rust-allocated (stack based) `LayoutFlexGrowValue` struct
    #[repr(C, u8)]     pub enum AzLayoutFlexGrowValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutFlexGrow),
    }
    /// Re-export of rust-allocated (stack based) `LayoutFlexShrinkValue` struct
    #[repr(C, u8)]     pub enum AzLayoutFlexShrinkValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutFlexShrink),
    }
    /// Re-export of rust-allocated (stack based) `LayoutFloatValue` struct
    #[repr(C, u8)]     pub enum AzLayoutFloatValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutFloat),
    }
    /// Re-export of rust-allocated (stack based) `LayoutHeightValue` struct
    #[repr(C, u8)]     pub enum AzLayoutHeightValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutHeight),
    }
    /// Re-export of rust-allocated (stack based) `LayoutJustifyContentValue` struct
    #[repr(C, u8)]     pub enum AzLayoutJustifyContentValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutJustifyContent),
    }
    /// Re-export of rust-allocated (stack based) `LayoutLeftValue` struct
    #[repr(C, u8)]     pub enum AzLayoutLeftValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutLeft),
    }
    /// Re-export of rust-allocated (stack based) `LayoutMarginBottomValue` struct
    #[repr(C, u8)]     pub enum AzLayoutMarginBottomValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutMarginBottom),
    }
    /// Re-export of rust-allocated (stack based) `LayoutMarginLeftValue` struct
    #[repr(C, u8)]     pub enum AzLayoutMarginLeftValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutMarginLeft),
    }
    /// Re-export of rust-allocated (stack based) `LayoutMarginRightValue` struct
    #[repr(C, u8)]     pub enum AzLayoutMarginRightValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutMarginRight),
    }
    /// Re-export of rust-allocated (stack based) `LayoutMarginTopValue` struct
    #[repr(C, u8)]     pub enum AzLayoutMarginTopValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutMarginTop),
    }
    /// Re-export of rust-allocated (stack based) `LayoutMaxHeightValue` struct
    #[repr(C, u8)]     pub enum AzLayoutMaxHeightValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutMaxHeight),
    }
    /// Re-export of rust-allocated (stack based) `LayoutMaxWidthValue` struct
    #[repr(C, u8)]     pub enum AzLayoutMaxWidthValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutMaxWidth),
    }
    /// Re-export of rust-allocated (stack based) `LayoutMinHeightValue` struct
    #[repr(C, u8)]     pub enum AzLayoutMinHeightValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutMinHeight),
    }
    /// Re-export of rust-allocated (stack based) `LayoutMinWidthValue` struct
    #[repr(C, u8)]     pub enum AzLayoutMinWidthValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutMinWidth),
    }
    /// Re-export of rust-allocated (stack based) `LayoutPaddingBottomValue` struct
    #[repr(C, u8)]     pub enum AzLayoutPaddingBottomValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutPaddingBottom),
    }
    /// Re-export of rust-allocated (stack based) `LayoutPaddingLeftValue` struct
    #[repr(C, u8)]     pub enum AzLayoutPaddingLeftValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutPaddingLeft),
    }
    /// Re-export of rust-allocated (stack based) `LayoutPaddingRightValue` struct
    #[repr(C, u8)]     pub enum AzLayoutPaddingRightValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutPaddingRight),
    }
    /// Re-export of rust-allocated (stack based) `LayoutPaddingTopValue` struct
    #[repr(C, u8)]     pub enum AzLayoutPaddingTopValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutPaddingTop),
    }
    /// Re-export of rust-allocated (stack based) `LayoutPositionValue` struct
    #[repr(C, u8)]     pub enum AzLayoutPositionValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutPosition),
    }
    /// Re-export of rust-allocated (stack based) `LayoutRightValue` struct
    #[repr(C, u8)]     pub enum AzLayoutRightValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutRight),
    }
    /// Re-export of rust-allocated (stack based) `LayoutTopValue` struct
    #[repr(C, u8)]     pub enum AzLayoutTopValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutTop),
    }
    /// Re-export of rust-allocated (stack based) `LayoutWidthValue` struct
    #[repr(C, u8)]     pub enum AzLayoutWidthValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutWidth),
    }
    /// Re-export of rust-allocated (stack based) `LayoutFlexWrapValue` struct
    #[repr(C, u8)]     pub enum AzLayoutFlexWrapValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutFlexWrap),
    }
    /// Re-export of rust-allocated (stack based) `LayoutOverflowValue` struct
    #[repr(C, u8)]     pub enum AzLayoutOverflowValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutOverflow),
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderBottomColorValue` struct
    #[repr(C, u8)]     pub enum AzStyleBorderBottomColorValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBorderBottomColor),
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderBottomLeftRadiusValue` struct
    #[repr(C, u8)]     pub enum AzStyleBorderBottomLeftRadiusValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBorderBottomLeftRadius),
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderBottomRightRadiusValue` struct
    #[repr(C, u8)]     pub enum AzStyleBorderBottomRightRadiusValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBorderBottomRightRadius),
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderBottomStyleValue` struct
    #[repr(C, u8)]     pub enum AzStyleBorderBottomStyleValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBorderBottomStyle),
    }
    /// Re-export of rust-allocated (stack based) `LayoutBorderBottomWidthValue` struct
    #[repr(C, u8)]     pub enum AzLayoutBorderBottomWidthValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutBorderBottomWidth),
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderLeftColorValue` struct
    #[repr(C, u8)]     pub enum AzStyleBorderLeftColorValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBorderLeftColor),
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderLeftStyleValue` struct
    #[repr(C, u8)]     pub enum AzStyleBorderLeftStyleValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBorderLeftStyle),
    }
    /// Re-export of rust-allocated (stack based) `LayoutBorderLeftWidthValue` struct
    #[repr(C, u8)]     pub enum AzLayoutBorderLeftWidthValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutBorderLeftWidth),
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderRightColorValue` struct
    #[repr(C, u8)]     pub enum AzStyleBorderRightColorValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBorderRightColor),
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderRightStyleValue` struct
    #[repr(C, u8)]     pub enum AzStyleBorderRightStyleValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBorderRightStyle),
    }
    /// Re-export of rust-allocated (stack based) `LayoutBorderRightWidthValue` struct
    #[repr(C, u8)]     pub enum AzLayoutBorderRightWidthValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutBorderRightWidth),
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderTopColorValue` struct
    #[repr(C, u8)]     pub enum AzStyleBorderTopColorValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBorderTopColor),
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderTopLeftRadiusValue` struct
    #[repr(C, u8)]     pub enum AzStyleBorderTopLeftRadiusValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBorderTopLeftRadius),
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderTopRightRadiusValue` struct
    #[repr(C, u8)]     pub enum AzStyleBorderTopRightRadiusValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBorderTopRightRadius),
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderTopStyleValue` struct
    #[repr(C, u8)]     pub enum AzStyleBorderTopStyleValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBorderTopStyle),
    }
    /// Re-export of rust-allocated (stack based) `LayoutBorderTopWidthValue` struct
    #[repr(C, u8)]     pub enum AzLayoutBorderTopWidthValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutBorderTopWidth),
    }
    /// Re-export of rust-allocated (stack based) `StyleCursorValue` struct
    #[repr(C, u8)]     pub enum AzStyleCursorValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleCursor),
    }
    /// Re-export of rust-allocated (stack based) `StyleFontSizeValue` struct
    #[repr(C, u8)]     pub enum AzStyleFontSizeValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleFontSize),
    }
    /// Re-export of rust-allocated (stack based) `StyleLetterSpacingValue` struct
    #[repr(C, u8)]     pub enum AzStyleLetterSpacingValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleLetterSpacing),
    }
    /// Re-export of rust-allocated (stack based) `StyleLineHeightValue` struct
    #[repr(C, u8)]     pub enum AzStyleLineHeightValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleLineHeight),
    }
    /// Re-export of rust-allocated (stack based) `StyleTabWidthValue` struct
    #[repr(C, u8)]     pub enum AzStyleTabWidthValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleTabWidth),
    }
    /// Re-export of rust-allocated (stack based) `StyleTextAlignmentHorzValue` struct
    #[repr(C, u8)]     pub enum AzStyleTextAlignmentHorzValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleTextAlignmentHorz),
    }
    /// Re-export of rust-allocated (stack based) `StyleTextColorValue` struct
    #[repr(C, u8)]     pub enum AzStyleTextColorValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleTextColor),
    }
    /// Re-export of rust-allocated (stack based) `StyleWordSpacingValue` struct
    #[repr(C, u8)]     pub enum AzStyleWordSpacingValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleWordSpacing),
    }
    /// Re-export of rust-allocated (stack based) `StyleOpacityValue` struct
    #[repr(C, u8)]     pub enum AzStyleOpacityValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleOpacity),
    }
    /// Re-export of rust-allocated (stack based) `StyleTransformOriginValue` struct
    #[repr(C, u8)]     pub enum AzStyleTransformOriginValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleTransformOrigin),
    }
    /// Re-export of rust-allocated (stack based) `StylePerspectiveOriginValue` struct
    #[repr(C, u8)]     pub enum AzStylePerspectiveOriginValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStylePerspectiveOrigin),
    }
    /// Re-export of rust-allocated (stack based) `StyleBackfaceVisibilityValue` struct
    #[repr(C, u8)]     pub enum AzStyleBackfaceVisibilityValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBackfaceVisibility),
    }
    /// Re-export of rust-allocated (stack based) `Node` struct
    #[repr(C)]     pub struct AzNode {
        pub parent: usize,
        pub previous_sibling: usize,
        pub next_sibling: usize,
        pub last_child: usize,
    }
    /// Re-export of rust-allocated (stack based) `CascadeInfo` struct
    #[repr(C)]     pub struct AzCascadeInfo {
        pub index_in_parent: u32,
        pub is_last_child: bool,
    }
    /// Re-export of rust-allocated (stack based) `StyledNodeState` struct
    #[repr(C)]     pub struct AzStyledNodeState {
        pub normal: bool,
        pub hover: bool,
        pub active: bool,
        pub focused: bool,
    }
    /// Re-export of rust-allocated (stack based) `TagId` struct
    #[repr(C)]     pub struct AzTagId {
        pub inner: u64,
    }
    /// Re-export of rust-allocated (stack based) `ParentWithNodeDepth` struct
    #[repr(C)]     pub struct AzParentWithNodeDepth {
        pub depth: usize,
        pub node_id: AzNodeId,
    }
    /// Re-export of rust-allocated (stack based) `GlShaderPrecisionFormatReturn` struct
    #[repr(C)]     pub struct AzGlShaderPrecisionFormatReturn {
        pub _0: i32,
        pub _1: i32,
        pub _2: i32,
    }
    /// C-ABI stable reexport of `&[u8]`
    #[repr(C)]     pub struct AzU8VecRef {
        pub(crate) ptr: *const u8,
        pub len: usize,
    }
    /// C-ABI stable reexport of `&mut [u8]`
    #[repr(C)]     pub struct AzU8VecRefMut {
        pub(crate) ptr: *mut u8,
        pub len: usize,
    }
    /// C-ABI stable reexport of `&[f32]`
    #[repr(C)]     pub struct AzF32VecRef {
        pub(crate) ptr: *const f32,
        pub len: usize,
    }
    /// C-ABI stable reexport of `&[i32]`
    #[repr(C)]     pub struct AzI32VecRef {
        pub(crate) ptr: *const i32,
        pub len: usize,
    }
    /// C-ABI stable reexport of `&[GLuint]` aka `&[u32]`
    #[repr(C)]     pub struct AzGLuintVecRef {
        pub(crate) ptr: *const u32,
        pub len: usize,
    }
    /// C-ABI stable reexport of `&[GLenum]` aka `&[u32]`
    #[repr(C)]     pub struct AzGLenumVecRef {
        pub(crate) ptr: *const u32,
        pub len: usize,
    }
    /// C-ABI stable reexport of `&mut [GLint]` aka `&mut [i32]`
    #[repr(C)]     pub struct AzGLintVecRefMut {
        pub(crate) ptr: *mut i32,
        pub len: usize,
    }
    /// C-ABI stable reexport of `&mut [GLint64]` aka `&mut [i64]`
    #[repr(C)]     pub struct AzGLint64VecRefMut {
        pub(crate) ptr: *mut i64,
        pub len: usize,
    }
    /// C-ABI stable reexport of `&mut [GLboolean]` aka `&mut [u8]`
    #[repr(C)]     pub struct AzGLbooleanVecRefMut {
        pub(crate) ptr: *mut u8,
        pub len: usize,
    }
    /// C-ABI stable reexport of `&mut [GLfloat]` aka `&mut [f32]`
    #[repr(C)]     pub struct AzGLfloatVecRefMut {
        pub(crate) ptr: *mut f32,
        pub len: usize,
    }
    /// C-ABI stable reexport of `&str`
    #[repr(C)]     pub struct AzRefstr {
        pub(crate) ptr: *const u8,
        pub len: usize,
    }
    /// Re-export of rust-allocated (stack based) `TextureFlags` struct
    #[repr(C)]     pub struct AzTextureFlags {
        pub is_opaque: bool,
        pub is_video_texture: bool,
    }
    /// Re-export of rust-allocated (stack based) `ImageId` struct
    #[repr(C)]     pub struct AzImageId {
        pub id: usize,
    }
    /// Re-export of rust-allocated (stack based) `FontId` struct
    #[repr(C)]     pub struct AzFontId {
        pub id: usize,
    }
    /// Re-export of rust-allocated (stack based) `SvgCircle` struct
    #[repr(C)]     pub struct AzSvgCircle {
        pub center_x: f32,
        pub center_y: f32,
        pub radius: f32,
    }
    /// Re-export of rust-allocated (stack based) `SvgPoint` struct
    #[repr(C)]     pub struct AzSvgPoint {
        pub x: f32,
        pub y: f32,
    }
    /// Re-export of rust-allocated (stack based) `SvgVertex` struct
    #[repr(C)]     pub struct AzSvgVertex {
        pub x: f32,
        pub y: f32,
    }
    /// Re-export of rust-allocated (stack based) `SvgQuadraticCurve` struct
    #[repr(C)]     pub struct AzSvgQuadraticCurve {
        pub start: AzSvgPoint,
        pub ctrl: AzSvgPoint,
        pub end: AzSvgPoint,
    }
    /// Re-export of rust-allocated (stack based) `SvgCubicCurve` struct
    #[repr(C)]     pub struct AzSvgCubicCurve {
        pub start: AzSvgPoint,
        pub ctrl_1: AzSvgPoint,
        pub ctrl_2: AzSvgPoint,
        pub end: AzSvgPoint,
    }
    /// Re-export of rust-allocated (stack based) `SvgRect` struct
    #[repr(C)]     pub struct AzSvgRect {
        pub width: f32,
        pub height: f32,
        pub x: f32,
        pub y: f32,
        pub radius_top_left: f32,
        pub radius_top_right: f32,
        pub radius_bottom_left: f32,
        pub radius_bottom_right: f32,
    }
    /// Re-export of rust-allocated (stack based) `SvgFitTo` struct
    #[repr(C, u8)]     pub enum AzSvgFitTo {
        Original,
        Width(u32),
        Height(u32),
        Zoom(f32),
    }
    /// Re-export of rust-allocated (stack based) `SvgDashPattern` struct
    #[repr(C)]     pub struct AzSvgDashPattern {
        pub offset: usize,
        pub length_1: usize,
        pub gap_1: usize,
        pub length_2: usize,
        pub gap_2: usize,
        pub length_3: usize,
        pub gap_3: usize,
    }
    /// Re-export of rust-allocated (stack based) `SvgFillStyle` struct
    #[repr(C)]     pub struct AzSvgFillStyle {
        pub line_join: AzSvgLineJoin,
        pub miter_limit: usize,
        pub tolerance: usize,
    }
    /// Re-export of rust-allocated (stack based) `TimerId` struct
    #[repr(C)]     pub struct AzTimerId {
        pub id: usize,
    }
    /// Re-export of rust-allocated (stack based) `ThreadId` struct
    #[repr(C)]     pub struct AzThreadId {
        pub id: usize,
    }
    /// Re-export of rust-allocated (stack based) `ThreadWriteBackMsg` struct
    #[repr(C)]     pub struct AzThreadWriteBackMsg {
        pub data: AzRefAny,
        pub callback: AzWriteBackCallback,
    }
    /// Re-export of rust-allocated (stack based) `CreateThreadFn` struct
    #[repr(C)]     pub struct AzCreateThreadFn {
        pub cb: AzCreateThreadFnType,
    }
    /// Get the current system time, equivalent to `std::time::Instant::now()`, except it also works on systems that work with "ticks" instead of timers
    #[repr(C)]     pub struct AzGetSystemTimeFn {
        pub cb: AzGetSystemTimeFnType,
    }
    /// Function called to check if the thread has finished
    #[repr(C)]     pub struct AzCheckThreadFinishedFn {
        pub cb: AzCheckThreadFinishedFnType,
    }
    /// Function to send a message to the thread
    #[repr(C)]     pub struct AzLibrarySendThreadMsgFn {
        pub cb: AzLibrarySendThreadMsgFnType,
    }
    /// Function to receive a message from the thread
    #[repr(C)]     pub struct AzLibraryReceiveThreadMsgFn {
        pub cb: AzLibraryReceiveThreadMsgFnType,
    }
    /// Function that the running `Thread` can call to receive messages from the main UI thread
    #[repr(C)]     pub struct AzThreadRecvFn {
        pub cb: AzThreadRecvFnType,
    }
    /// Function that the running `Thread` can call to receive messages from the main UI thread
    #[repr(C)]     pub struct AzThreadSendFn {
        pub cb: AzThreadSendFnType,
    }
    /// Destructor of the `Thread`
    #[repr(C)]     pub struct AzThreadDestructorFn {
        pub cb: AzThreadDestructorFnType,
    }
    /// Destructor of the `ThreadReceiver`
    #[repr(C)]     pub struct AzThreadReceiverDestructorFn {
        pub cb: AzThreadReceiverDestructorFnType,
    }
    /// Destructor of the `ThreadSender`
    #[repr(C)]     pub struct AzThreadSenderDestructorFn {
        pub cb: AzThreadSenderDestructorFnType,
    }
    /// Re-export of rust-allocated (stack based) `MonitorVecDestructor` struct
    #[repr(C, u8)]     pub enum AzMonitorVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzMonitorVecDestructorType),
    }
    /// Re-export of rust-allocated (stack based) `VideoModeVecDestructor` struct
    #[repr(C, u8)]     pub enum AzVideoModeVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzVideoModeVecDestructorType),
    }
    /// Re-export of rust-allocated (stack based) `DomVecDestructor` struct
    #[repr(C, u8)]     pub enum AzDomVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzDomVecDestructorType),
    }
    /// Re-export of rust-allocated (stack based) `IdOrClassVecDestructor` struct
    #[repr(C, u8)]     pub enum AzIdOrClassVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzIdOrClassVecDestructorType),
    }
    /// Re-export of rust-allocated (stack based) `NodeDataInlineCssPropertyVecDestructor` struct
    #[repr(C, u8)]     pub enum AzNodeDataInlineCssPropertyVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzNodeDataInlineCssPropertyVecDestructorType),
    }
    /// Re-export of rust-allocated (stack based) `StyleBackgroundContentVecDestructor` struct
    #[repr(C, u8)]     pub enum AzStyleBackgroundContentVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzStyleBackgroundContentVecDestructorType),
    }
    /// Re-export of rust-allocated (stack based) `StyleBackgroundPositionVecDestructor` struct
    #[repr(C, u8)]     pub enum AzStyleBackgroundPositionVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzStyleBackgroundPositionVecDestructorType),
    }
    /// Re-export of rust-allocated (stack based) `StyleBackgroundRepeatVecDestructor` struct
    #[repr(C, u8)]     pub enum AzStyleBackgroundRepeatVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzStyleBackgroundRepeatVecDestructorType),
    }
    /// Re-export of rust-allocated (stack based) `StyleBackgroundSizeVecDestructor` struct
    #[repr(C, u8)]     pub enum AzStyleBackgroundSizeVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzStyleBackgroundSizeVecDestructorType),
    }
    /// Re-export of rust-allocated (stack based) `StyleTransformVecDestructor` struct
    #[repr(C, u8)]     pub enum AzStyleTransformVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzStyleTransformVecDestructorType),
    }
    /// Re-export of rust-allocated (stack based) `CssPropertyVecDestructor` struct
    #[repr(C, u8)]     pub enum AzCssPropertyVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzCssPropertyVecDestructorType),
    }
    /// Re-export of rust-allocated (stack based) `SvgMultiPolygonVecDestructor` struct
    #[repr(C, u8)]     pub enum AzSvgMultiPolygonVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzSvgMultiPolygonVecDestructorType),
    }
    /// Re-export of rust-allocated (stack based) `SvgPathVecDestructor` struct
    #[repr(C, u8)]     pub enum AzSvgPathVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzSvgPathVecDestructorType),
    }
    /// Re-export of rust-allocated (stack based) `VertexAttributeVecDestructor` struct
    #[repr(C, u8)]     pub enum AzVertexAttributeVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzVertexAttributeVecDestructorType),
    }
    /// Re-export of rust-allocated (stack based) `SvgPathElementVecDestructor` struct
    #[repr(C, u8)]     pub enum AzSvgPathElementVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzSvgPathElementVecDestructorType),
    }
    /// Re-export of rust-allocated (stack based) `SvgVertexVecDestructor` struct
    #[repr(C, u8)]     pub enum AzSvgVertexVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzSvgVertexVecDestructorType),
    }
    /// Re-export of rust-allocated (stack based) `U32VecDestructor` struct
    #[repr(C, u8)]     pub enum AzU32VecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzU32VecDestructorType),
    }
    /// Re-export of rust-allocated (stack based) `XWindowTypeVecDestructor` struct
    #[repr(C, u8)]     pub enum AzXWindowTypeVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzXWindowTypeVecDestructorType),
    }
    /// Re-export of rust-allocated (stack based) `VirtualKeyCodeVecDestructor` struct
    #[repr(C, u8)]     pub enum AzVirtualKeyCodeVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzVirtualKeyCodeVecDestructorType),
    }
    /// Re-export of rust-allocated (stack based) `CascadeInfoVecDestructor` struct
    #[repr(C, u8)]     pub enum AzCascadeInfoVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzCascadeInfoVecDestructorType),
    }
    /// Re-export of rust-allocated (stack based) `ScanCodeVecDestructor` struct
    #[repr(C, u8)]     pub enum AzScanCodeVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzScanCodeVecDestructorType),
    }
    /// Re-export of rust-allocated (stack based) `CssDeclarationVecDestructor` struct
    #[repr(C, u8)]     pub enum AzCssDeclarationVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzCssDeclarationVecDestructorType),
    }
    /// Re-export of rust-allocated (stack based) `CssPathSelectorVecDestructor` struct
    #[repr(C, u8)]     pub enum AzCssPathSelectorVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzCssPathSelectorVecDestructorType),
    }
    /// Re-export of rust-allocated (stack based) `StylesheetVecDestructor` struct
    #[repr(C, u8)]     pub enum AzStylesheetVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzStylesheetVecDestructorType),
    }
    /// Re-export of rust-allocated (stack based) `CssRuleBlockVecDestructor` struct
    #[repr(C, u8)]     pub enum AzCssRuleBlockVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzCssRuleBlockVecDestructorType),
    }
    /// Re-export of rust-allocated (stack based) `U8VecDestructor` struct
    #[repr(C, u8)]     pub enum AzU8VecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzU8VecDestructorType),
    }
    /// Re-export of rust-allocated (stack based) `CallbackDataVecDestructor` struct
    #[repr(C, u8)]     pub enum AzCallbackDataVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzCallbackDataVecDestructorType),
    }
    /// Re-export of rust-allocated (stack based) `DebugMessageVecDestructor` struct
    #[repr(C, u8)]     pub enum AzDebugMessageVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzDebugMessageVecDestructorType),
    }
    /// Re-export of rust-allocated (stack based) `GLuintVecDestructor` struct
    #[repr(C, u8)]     pub enum AzGLuintVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzGLuintVecDestructorType),
    }
    /// Re-export of rust-allocated (stack based) `GLintVecDestructor` struct
    #[repr(C, u8)]     pub enum AzGLintVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzGLintVecDestructorType),
    }
    /// Re-export of rust-allocated (stack based) `StringVecDestructor` struct
    #[repr(C, u8)]     pub enum AzStringVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzStringVecDestructorType),
    }
    /// Re-export of rust-allocated (stack based) `StringPairVecDestructor` struct
    #[repr(C, u8)]     pub enum AzStringPairVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzStringPairVecDestructorType),
    }
    /// Re-export of rust-allocated (stack based) `LinearColorStopVecDestructor` struct
    #[repr(C, u8)]     pub enum AzLinearColorStopVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzLinearColorStopVecDestructorType),
    }
    /// Re-export of rust-allocated (stack based) `RadialColorStopVecDestructor` struct
    #[repr(C, u8)]     pub enum AzRadialColorStopVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzRadialColorStopVecDestructorType),
    }
    /// Re-export of rust-allocated (stack based) `NodeIdVecDestructor` struct
    #[repr(C, u8)]     pub enum AzNodeIdVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzNodeIdVecDestructorType),
    }
    /// Re-export of rust-allocated (stack based) `NodeVecDestructor` struct
    #[repr(C, u8)]     pub enum AzNodeVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzNodeVecDestructorType),
    }
    /// Re-export of rust-allocated (stack based) `StyledNodeVecDestructor` struct
    #[repr(C, u8)]     pub enum AzStyledNodeVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzStyledNodeVecDestructorType),
    }
    /// Re-export of rust-allocated (stack based) `TagIdsToNodeIdsMappingVecDestructor` struct
    #[repr(C, u8)]     pub enum AzTagIdsToNodeIdsMappingVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzTagIdsToNodeIdsMappingVecDestructorType),
    }
    /// Re-export of rust-allocated (stack based) `ParentWithNodeDepthVecDestructor` struct
    #[repr(C, u8)]     pub enum AzParentWithNodeDepthVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzParentWithNodeDepthVecDestructorType),
    }
    /// Re-export of rust-allocated (stack based) `NodeDataVecDestructor` struct
    #[repr(C, u8)]     pub enum AzNodeDataVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzNodeDataVecDestructorType),
    }
    /// Re-export of rust-allocated (stack based) `OptionGlContextPtr` struct
    #[repr(C, u8)]     pub enum AzOptionGlContextPtr {
        None,
        Some(AzGlContextPtr),
    }
    /// Re-export of rust-allocated (stack based) `OptionPercentageValue` struct
    #[repr(C, u8)]     pub enum AzOptionPercentageValue {
        None,
        Some(AzPercentageValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionAngleValue` struct
    #[repr(C, u8)]     pub enum AzOptionAngleValue {
        None,
        Some(AzAngleValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionRendererOptions` struct
    #[repr(C, u8)]     pub enum AzOptionRendererOptions {
        None,
        Some(AzRendererOptions),
    }
    /// Re-export of rust-allocated (stack based) `OptionCallback` struct
    #[repr(C, u8)]     pub enum AzOptionCallback {
        None,
        Some(AzCallback),
    }
    /// Re-export of rust-allocated (stack based) `OptionThreadSendMsg` struct
    #[repr(C, u8)]     pub enum AzOptionThreadSendMsg {
        None,
        Some(AzThreadSendMsg),
    }
    /// Re-export of rust-allocated (stack based) `OptionLayoutRect` struct
    #[repr(C, u8)]     pub enum AzOptionLayoutRect {
        None,
        Some(AzLayoutRect),
    }
    /// Re-export of rust-allocated (stack based) `OptionRefAny` struct
    #[repr(C, u8)]     pub enum AzOptionRefAny {
        None,
        Some(AzRefAny),
    }
    /// Re-export of rust-allocated (stack based) `OptionLayoutPoint` struct
    #[repr(C, u8)]     pub enum AzOptionLayoutPoint {
        None,
        Some(AzLayoutPoint),
    }
    /// Re-export of rust-allocated (stack based) `OptionWindowTheme` struct
    #[repr(C, u8)]     pub enum AzOptionWindowTheme {
        None,
        Some(AzWindowTheme),
    }
    /// Re-export of rust-allocated (stack based) `OptionNodeId` struct
    #[repr(C, u8)]     pub enum AzOptionNodeId {
        None,
        Some(AzNodeId),
    }
    /// Re-export of rust-allocated (stack based) `OptionDomNodeId` struct
    #[repr(C, u8)]     pub enum AzOptionDomNodeId {
        None,
        Some(AzDomNodeId),
    }
    /// Re-export of rust-allocated (stack based) `OptionColorU` struct
    #[repr(C, u8)]     pub enum AzOptionColorU {
        None,
        Some(AzColorU),
    }
    /// Re-export of rust-allocated (stack based) `OptionSvgDashPattern` struct
    #[repr(C, u8)]     pub enum AzOptionSvgDashPattern {
        None,
        Some(AzSvgDashPattern),
    }
    /// Re-export of rust-allocated (stack based) `OptionHwndHandle` struct
    #[repr(C, u8)]     pub enum AzOptionHwndHandle {
        None,
        Some(*mut c_void),
    }
    /// Re-export of rust-allocated (stack based) `OptionLogicalPosition` struct
    #[repr(C, u8)]     pub enum AzOptionLogicalPosition {
        None,
        Some(AzLogicalPosition),
    }
    /// Re-export of rust-allocated (stack based) `OptionPhysicalPositionI32` struct
    #[repr(C, u8)]     pub enum AzOptionPhysicalPositionI32 {
        None,
        Some(AzPhysicalPositionI32),
    }
    /// Re-export of rust-allocated (stack based) `OptionX11Visual` struct
    #[repr(C, u8)]     pub enum AzOptionX11Visual {
        None,
        Some(*const c_void),
    }
    /// Re-export of rust-allocated (stack based) `OptionI32` struct
    #[repr(C, u8)]     pub enum AzOptionI32 {
        None,
        Some(i32),
    }
    /// Re-export of rust-allocated (stack based) `OptionF32` struct
    #[repr(C, u8)]     pub enum AzOptionF32 {
        None,
        Some(f32),
    }
    /// Re-export of rust-allocated (stack based) `OptionMouseCursorType` struct
    #[repr(C, u8)]     pub enum AzOptionMouseCursorType {
        None,
        Some(AzMouseCursorType),
    }
    /// Re-export of rust-allocated (stack based) `OptionLogicalSize` struct
    #[repr(C, u8)]     pub enum AzOptionLogicalSize {
        None,
        Some(AzLogicalSize),
    }
    /// Option<char> but the char is a u32, for C FFI stability reasons
    #[repr(C, u8)]     pub enum AzOptionChar {
        None,
        Some(u32),
    }
    /// Re-export of rust-allocated (stack based) `OptionVirtualKeyCode` struct
    #[repr(C, u8)]     pub enum AzOptionVirtualKeyCode {
        None,
        Some(AzVirtualKeyCode),
    }
    /// Re-export of rust-allocated (stack based) `OptionTexture` struct
    #[repr(C, u8)]     pub enum AzOptionTexture {
        None,
        Some(AzTexture),
    }
    /// Re-export of rust-allocated (stack based) `OptionTabIndex` struct
    #[repr(C, u8)]     pub enum AzOptionTabIndex {
        None,
        Some(AzTabIndex),
    }
    /// Re-export of rust-allocated (stack based) `OptionTagId` struct
    #[repr(C, u8)]     pub enum AzOptionTagId {
        None,
        Some(AzTagId),
    }
    /// Re-export of rust-allocated (stack based) `OptionUsize` struct
    #[repr(C, u8)]     pub enum AzOptionUsize {
        None,
        Some(usize),
    }
    /// Re-export of rust-allocated (stack based) `OptionU8VecRef` struct
    #[repr(C, u8)]     pub enum AzOptionU8VecRef {
        None,
        Some(AzU8VecRef),
    }
    /// Re-export of rust-allocated (stack based) `SvgParseErrorPosition` struct
    #[repr(C)]     pub struct AzSvgParseErrorPosition {
        pub row: u32,
        pub col: u32,
    }
    /// Re-export of rust-allocated (stack based) `InstantPtrCloneFn` struct
    #[repr(C)]     pub struct AzInstantPtrCloneFn {
        pub cb: AzInstantPtrCloneFnType,
    }
    /// Re-export of rust-allocated (stack based) `InstantPtrDestructorFn` struct
    #[repr(C)]     pub struct AzInstantPtrDestructorFn {
        pub cb: AzInstantPtrDestructorFnType,
    }
    /// Re-export of rust-allocated (stack based) `SystemTick` struct
    #[repr(C)]     pub struct AzSystemTick {
        pub tick_counter: u64,
    }
    /// Re-export of rust-allocated (stack based) `SystemTimeDiff` struct
    #[repr(C)]     pub struct AzSystemTimeDiff {
        pub secs: u64,
        pub nanos: u32,
    }
    /// Re-export of rust-allocated (stack based) `SystemTickDiff` struct
    #[repr(C)]     pub struct AzSystemTickDiff {
        pub tick_diff: u64,
    }
    /// Raw platform handle, for integration in / with other toolkits and custom non-azul window extensions
    #[repr(C, u8)]     pub enum AzRawWindowHandle {
        IOS(AzIOSHandle),
        MacOS(AzMacOSHandle),
        Xlib(AzXlibHandle),
        Xcb(AzXcbHandle),
        Wayland(AzWaylandHandle),
        Windows(AzWindowsHandle),
        Web(AzWebHandle),
        Android(AzAndroidHandle),
        Unsupported,
    }
    /// Logical rectangle area (can differ based on HiDPI settings). Usually this is what you'd want for hit-testing and positioning elements.
    #[repr(C)]     pub struct AzLogicalRect {
        pub origin: AzLogicalPosition,
        pub size: AzLogicalSize,
    }
    /// Minimum / maximum / current size of the window in logical dimensions
    #[repr(C)]     pub struct AzWindowSize {
        pub dimensions: AzLogicalSize,
        pub hidpi_factor: f32,
        pub system_hidpi_factor: f32,
        pub min_dimensions: AzOptionLogicalSize,
        pub max_dimensions: AzOptionLogicalSize,
    }
    /// Current mouse / cursor state
    #[repr(C)]     pub struct AzMouseState {
        pub mouse_cursor_type: AzOptionMouseCursorType,
        pub cursor_position: AzCursorPosition,
        pub is_cursor_locked: bool,
        pub left_down: bool,
        pub right_down: bool,
        pub middle_down: bool,
        pub scroll_x: AzOptionF32,
        pub scroll_y: AzOptionF32,
    }
    /// Re-export of rust-allocated (stack based) `GlCallbackReturn` struct
    #[repr(C)]     pub struct AzGlCallbackReturn {
        pub texture: AzOptionTexture,
    }
    /// Re-export of rust-allocated (stack based) `LayoutInfo` struct
    #[repr(C)]     pub struct AzLayoutInfo {
        pub window_size: *const AzWindowSize,
        pub window_size_width_stops: *mut c_void,
        pub window_size_height_stops: *mut c_void,
        pub resources: *const c_void,
    }
    /// External system callbacks to get the system time or create / manage threads
    #[repr(C)]     pub struct AzSystemCallbacks {
        pub create_thread_fn: AzCreateThreadFn,
        pub get_system_time_fn: AzGetSystemTimeFn,
    }
    /// Re-export of rust-allocated (stack based) `EventFilter` struct
    #[repr(C, u8)]     pub enum AzEventFilter {
        Hover(AzHoverEventFilter),
        Not(AzNotEventFilter),
        Focus(AzFocusEventFilter),
        Window(AzWindowEventFilter),
        Component(AzComponentEventFilter),
        Application(AzApplicationEventFilter),
    }
    /// Re-export of rust-allocated (stack based) `CssNthChildSelector` struct
    #[repr(C, u8)]     pub enum AzCssNthChildSelector {
        Number(u32),
        Even,
        Odd,
        Pattern(AzCssNthChildPattern),
    }
    /// Re-export of rust-allocated (stack based) `LinearColorStop` struct
    #[repr(C)]     pub struct AzLinearColorStop {
        pub offset: AzOptionPercentageValue,
        pub color: AzColorU,
    }
    /// Re-export of rust-allocated (stack based) `RadialColorStop` struct
    #[repr(C)]     pub struct AzRadialColorStop {
        pub offset: AzOptionAngleValue,
        pub color: AzColorU,
    }
    /// Re-export of rust-allocated (stack based) `StyleTransform` struct
    #[repr(C, u8)]     pub enum AzStyleTransform {
        Matrix(AzStyleTransformMatrix2D),
        Matrix3D(AzStyleTransformMatrix3D),
        Translate(AzStyleTransformTranslate2D),
        Translate3D(AzStyleTransformTranslate3D),
        TranslateX(AzPixelValue),
        TranslateY(AzPixelValue),
        TranslateZ(AzPixelValue),
        Rotate(AzPercentageValue),
        Rotate3D(AzStyleTransformRotate3D),
        RotateX(AzPercentageValue),
        RotateY(AzPercentageValue),
        RotateZ(AzPercentageValue),
        Scale(AzStyleTransformScale2D),
        Scale3D(AzStyleTransformScale3D),
        ScaleX(AzPercentageValue),
        ScaleY(AzPercentageValue),
        ScaleZ(AzPercentageValue),
        Skew(AzStyleTransformSkew2D),
        SkewX(AzPercentageValue),
        SkewY(AzPercentageValue),
        Perspective(AzPixelValue),
    }
    /// Re-export of rust-allocated (stack based) `StyledNode` struct
    #[repr(C)]     pub struct AzStyledNode {
        pub state: AzStyledNodeState,
        pub tag_id: AzOptionTagId,
    }
    /// Re-export of rust-allocated (stack based) `TagIdToNodeIdMapping` struct
    #[repr(C)]     pub struct AzTagIdToNodeIdMapping {
        pub tag_id: AzTagId,
        pub node_id: AzNodeId,
        pub tab_index: AzOptionTabIndex,
    }
    /// C-ABI stable reexport of `&[Refstr]` aka `&mut [&str]`
    #[repr(C)]     pub struct AzRefstrVecRef {
        pub(crate) ptr: *const AzRefstr,
        pub len: usize,
    }
    /// Re-export of rust-allocated (stack based) `ImageMask` struct
    #[repr(C)]     pub struct AzImageMask {
        pub image: AzImageId,
        pub rect: AzLogicalRect,
        pub repeat: bool,
    }
    /// Re-export of rust-allocated (stack based) `SvgLine` struct
    #[repr(C)]     pub struct AzSvgLine {
        pub start: AzSvgPoint,
        pub end: AzSvgPoint,
    }
    /// Re-export of rust-allocated (stack based) `SvgRenderOptions` struct
    #[repr(C)]     pub struct AzSvgRenderOptions {
        pub background_color: AzOptionColorU,
        pub fit: AzSvgFitTo,
    }
    /// Re-export of rust-allocated (stack based) `SvgStrokeStyle` struct
    #[repr(C)]     pub struct AzSvgStrokeStyle {
        pub start_cap: AzSvgLineCap,
        pub end_cap: AzSvgLineCap,
        pub line_join: AzSvgLineJoin,
        pub dash_pattern: AzOptionSvgDashPattern,
        pub line_width: usize,
        pub miter_limit: usize,
        pub tolerance: usize,
        pub apply_line_width: bool,
    }
    /// Re-export of rust-allocated (stack based) `Thread` struct
    #[repr(C)]     pub struct AzThread {
        pub thread_handle: *mut c_void,
        pub sender: *mut c_void,
        pub receiver: *mut c_void,
        pub writeback_data: AzRefAny,
        pub dropcheck: *mut c_void,
        pub check_thread_finished_fn: AzCheckThreadFinishedFn,
        pub send_thread_msg_fn: AzLibrarySendThreadMsgFn,
        pub receive_thread_msg_fn: AzLibraryReceiveThreadMsgFn,
        pub thread_destructor_fn: AzThreadDestructorFn,
    }
    /// Re-export of rust-allocated (stack based) `ThreadReceiveMsg` struct
    #[repr(C, u8)]     pub enum AzThreadReceiveMsg {
        WriteBack(AzThreadWriteBackMsg),
        Update(AzUpdateScreen),
    }
    /// Wrapper over a Rust-allocated `Vec<VideoMode>`
    #[repr(C)]     pub struct AzVideoModeVec {
        pub(crate) ptr: *const AzVideoMode,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzVideoModeVecDestructor,
    }
    /// Wrapper over a Rust-allocated `Vec<StyleBackgroundPosition>`
    #[repr(C)]     pub struct AzStyleBackgroundPositionVec {
        pub(crate) ptr: *const AzStyleBackgroundPosition,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzStyleBackgroundPositionVecDestructor,
    }
    /// Wrapper over a Rust-allocated `Vec<StyleBackgroundRepeat>`
    #[repr(C)]     pub struct AzStyleBackgroundRepeatVec {
        pub(crate) ptr: *const AzStyleBackgroundRepeat,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzStyleBackgroundRepeatVecDestructor,
    }
    /// Wrapper over a Rust-allocated `Vec<StyleBackgroundSize>`
    #[repr(C)]     pub struct AzStyleBackgroundSizeVec {
        pub(crate) ptr: *const AzStyleBackgroundSize,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzStyleBackgroundSizeVecDestructor,
    }
    /// Wrapper over a Rust-allocated `Vec<StyleTransform>`
    #[repr(C)]     pub struct AzStyleTransformVec {
        pub(crate) ptr: *const AzStyleTransform,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzStyleTransformVecDestructor,
    }
    /// Wrapper over a Rust-allocated `SvgVertex`
    #[repr(C)]     pub struct AzSvgVertexVec {
        pub(crate) ptr: *const AzSvgVertex,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzSvgVertexVecDestructor,
    }
    /// Wrapper over a Rust-allocated `Vec<u32>`
    #[repr(C)]     pub struct AzU32Vec {
        pub(crate) ptr: *const u32,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzU32VecDestructor,
    }
    /// Wrapper over a Rust-allocated `XWindowType`
    #[repr(C)]     pub struct AzXWindowTypeVec {
        pub(crate) ptr: *const AzXWindowType,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzXWindowTypeVecDestructor,
    }
    /// Wrapper over a Rust-allocated `VirtualKeyCode`
    #[repr(C)]     pub struct AzVirtualKeyCodeVec {
        pub(crate) ptr: *const AzVirtualKeyCode,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzVirtualKeyCodeVecDestructor,
    }
    /// Wrapper over a Rust-allocated `CascadeInfo`
    #[repr(C)]     pub struct AzCascadeInfoVec {
        pub(crate) ptr: *const AzCascadeInfo,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzCascadeInfoVecDestructor,
    }
    /// Wrapper over a Rust-allocated `ScanCode`
    #[repr(C)]     pub struct AzScanCodeVec {
        pub(crate) ptr: *const u32,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzScanCodeVecDestructor,
    }
    /// Wrapper over a Rust-allocated `U8Vec`
    #[repr(C)]     pub struct AzU8Vec {
        pub(crate) ptr: *const u8,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzU8VecDestructor,
    }
    /// Wrapper over a Rust-allocated `U32Vec`
    #[repr(C)]     pub struct AzGLuintVec {
        pub(crate) ptr: *const u32,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzGLuintVecDestructor,
    }
    /// Wrapper over a Rust-allocated `GLintVec`
    #[repr(C)]     pub struct AzGLintVec {
        pub(crate) ptr: *const i32,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzGLintVecDestructor,
    }
    /// Wrapper over a Rust-allocated `LinearColorStopVec`
    #[repr(C)]     pub struct AzLinearColorStopVec {
        pub(crate) ptr: *const AzLinearColorStop,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzLinearColorStopVecDestructor,
    }
    /// Wrapper over a Rust-allocated `RadialColorStopVec`
    #[repr(C)]     pub struct AzRadialColorStopVec {
        pub(crate) ptr: *const AzRadialColorStop,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzRadialColorStopVecDestructor,
    }
    /// Wrapper over a Rust-allocated `NodeIdVec`
    #[repr(C)]     pub struct AzNodeIdVec {
        pub(crate) ptr: *const AzNodeId,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzNodeIdVecDestructor,
    }
    /// Wrapper over a Rust-allocated `NodeVec`
    #[repr(C)]     pub struct AzNodeVec {
        pub(crate) ptr: *const AzNode,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzNodeVecDestructor,
    }
    /// Wrapper over a Rust-allocated `StyledNodeVec`
    #[repr(C)]     pub struct AzStyledNodeVec {
        pub(crate) ptr: *const AzStyledNode,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzStyledNodeVecDestructor,
    }
    /// Wrapper over a Rust-allocated `TagIdsToNodeIdsMappingVec`
    #[repr(C)]     pub struct AzTagIdsToNodeIdsMappingVec {
        pub(crate) ptr: *const AzTagIdToNodeIdMapping,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzTagIdsToNodeIdsMappingVecDestructor,
    }
    /// Wrapper over a Rust-allocated `ParentWithNodeDepthVec`
    #[repr(C)]     pub struct AzParentWithNodeDepthVec {
        pub(crate) ptr: *const AzParentWithNodeDepth,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzParentWithNodeDepthVecDestructor,
    }
    /// Re-export of rust-allocated (stack based) `OptionThreadReceiveMsg` struct
    #[repr(C, u8)]     pub enum AzOptionThreadReceiveMsg {
        None,
        Some(AzThreadReceiveMsg),
    }
    /// Re-export of rust-allocated (stack based) `OptionImageMask` struct
    #[repr(C, u8)]     pub enum AzOptionImageMask {
        None,
        Some(AzImageMask),
    }
    /// Re-export of rust-allocated (stack based) `NonXmlCharError` struct
    #[repr(C)]     pub struct AzNonXmlCharError {
        pub ch: u32,
        pub pos: AzSvgParseErrorPosition,
    }
    /// Re-export of rust-allocated (stack based) `InvalidCharError` struct
    #[repr(C)]     pub struct AzInvalidCharError {
        pub expected: u8,
        pub got: u8,
        pub pos: AzSvgParseErrorPosition,
    }
    /// Re-export of rust-allocated (stack based) `InvalidCharMultipleError` struct
    #[repr(C)]     pub struct AzInvalidCharMultipleError {
        pub expected: u8,
        pub got: AzU8Vec,
        pub pos: AzSvgParseErrorPosition,
    }
    /// Re-export of rust-allocated (stack based) `InvalidQuoteError` struct
    #[repr(C)]     pub struct AzInvalidQuoteError {
        pub got: u8,
        pub pos: AzSvgParseErrorPosition,
    }
    /// Re-export of rust-allocated (stack based) `InvalidSpaceError` struct
    #[repr(C)]     pub struct AzInvalidSpaceError {
        pub got: u8,
        pub pos: AzSvgParseErrorPosition,
    }
    /// Re-export of rust-allocated (stack based) `Instant` struct
    #[repr(C, u8)]     pub enum AzInstant {
        System(AzInstantPtr),
        Tick(AzSystemTick),
    }
    /// Re-export of rust-allocated (stack based) `Duration` struct
    #[repr(C, u8)]     pub enum AzDuration {
        System(AzSystemTimeDiff),
        Tick(AzSystemTickDiff),
    }
    /// Configuration for optional features, such as whether to enable logging or panic hooks
    #[repr(C)]     pub struct AzAppConfig {
        pub log_level: AzAppLogLevel,
        pub enable_visual_panic_hook: bool,
        pub enable_logging_on_panic: bool,
        pub enable_tab_navigation: bool,
        pub system_callbacks: AzSystemCallbacks,
    }
    /// Application taskbar icon, 256x256x4 bytes in size
    #[repr(C)]     pub struct AzTaskBarIcon {
        pub key: AzIconKey,
        pub rgba_bytes: AzU8Vec,
    }
    /// Small (16x16x4) window icon, usually shown in the window titlebar
    #[repr(C)]     pub struct AzSmallWindowIconBytes {
        pub key: AzIconKey,
        pub rgba_bytes: AzU8Vec,
    }
    /// Large (32x32x4) window icon, usually used on high-resolution displays (instead of `SmallWindowIcon`)
    #[repr(C)]     pub struct AzLargeWindowIconBytes {
        pub key: AzIconKey,
        pub rgba_bytes: AzU8Vec,
    }
    /// Window "favicon", usually shown in the top left of the window on Windows
    #[repr(C, u8)]     pub enum AzWindowIcon {
        Small(AzSmallWindowIconBytes),
        Large(AzLargeWindowIconBytes),
    }
    /// Current keyboard state, stores what keys / characters have been pressed
    #[repr(C)]     pub struct AzKeyboardState {
        pub shift_down: bool,
        pub ctrl_down: bool,
        pub alt_down: bool,
        pub super_down: bool,
        pub current_char: AzOptionChar,
        pub current_virtual_keycode: AzOptionVirtualKeyCode,
        pub pressed_virtual_keycodes: AzVirtualKeyCodeVec,
        pub pressed_scancodes: AzScanCodeVec,
    }
    /// Re-export of rust-allocated (stack based) `GlCallbackInfo` struct
    #[repr(C)]     pub struct AzGlCallbackInfo {
        pub callback_node_id: AzDomNodeId,
        pub bounds: AzHidpiAdjustedBounds,
        pub gl_context: *const AzGlContextPtr,
        pub resources: *const c_void,
        pub node_hierarchy: *const AzNodeVec,
        pub words_cache: *const c_void,
        pub shaped_words_cache: *const c_void,
        pub positioned_words_cache: *const c_void,
        pub positioned_rects: *const c_void,
    }
    /// Re-export of rust-allocated (stack based) `CallbackData` struct
    #[repr(C)]     pub struct AzCallbackData {
        pub event: AzEventFilter,
        pub callback: AzCallback,
        pub data: AzRefAny,
    }
    /// Re-export of rust-allocated (stack based) `CssPathPseudoSelector` struct
    #[repr(C, u8)]     pub enum AzCssPathPseudoSelector {
        First,
        Last,
        NthChild(AzCssNthChildSelector),
        Hover,
        Active,
        Focus,
    }
    /// Re-export of rust-allocated (stack based) `LinearGradient` struct
    #[repr(C)]     pub struct AzLinearGradient {
        pub direction: AzDirection,
        pub extend_mode: AzExtendMode,
        pub stops: AzLinearColorStopVec,
    }
    /// Re-export of rust-allocated (stack based) `RadialGradient` struct
    #[repr(C)]     pub struct AzRadialGradient {
        pub shape: AzShape,
        pub size: AzRadialGradientSize,
        pub position: AzStyleBackgroundPosition,
        pub extend_mode: AzExtendMode,
        pub stops: AzLinearColorStopVec,
    }
    /// Re-export of rust-allocated (stack based) `ConicGradient` struct
    #[repr(C)]     pub struct AzConicGradient {
        pub extend_mode: AzExtendMode,
        pub center: AzStyleBackgroundPosition,
        pub angle: AzAngleValue,
        pub stops: AzRadialColorStopVec,
    }
    /// Re-export of rust-allocated (stack based) `StyleBackgroundPositionVecValue` struct
    #[repr(C, u8)]     pub enum AzStyleBackgroundPositionVecValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBackgroundPositionVec),
    }
    /// Re-export of rust-allocated (stack based) `StyleBackgroundRepeatVecValue` struct
    #[repr(C, u8)]     pub enum AzStyleBackgroundRepeatVecValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBackgroundRepeatVec),
    }
    /// Re-export of rust-allocated (stack based) `StyleBackgroundSizeVecValue` struct
    #[repr(C, u8)]     pub enum AzStyleBackgroundSizeVecValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBackgroundSizeVec),
    }
    /// Re-export of rust-allocated (stack based) `StyleTransformVecValue` struct
    #[repr(C, u8)]     pub enum AzStyleTransformVecValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleTransformVec),
    }
    /// C-ABI stable reexport of `(U8Vec, u32)`
    #[repr(C)]     pub struct AzGetProgramBinaryReturn {
        pub _0: AzU8Vec,
        pub _1: u32,
    }
    /// Re-export of rust-allocated (stack based) `RawImage` struct
    #[repr(C)]     pub struct AzRawImage {
        pub pixels: AzU8Vec,
        pub width: usize,
        pub height: usize,
        pub data_format: AzRawImageFormat,
    }
    /// Re-export of rust-allocated (stack based) `SvgPathElement` struct
    #[repr(C, u8)]     pub enum AzSvgPathElement {
        Line(AzSvgLine),
        QuadraticCurve(AzSvgQuadraticCurve),
        CubicCurve(AzSvgCubicCurve),
    }
    /// Re-export of rust-allocated (stack based) `TesselatedCPUSvgNode` struct
    #[repr(C)]     pub struct AzTesselatedCPUSvgNode {
        pub vertices: AzSvgVertexVec,
        pub indices: AzU32Vec,
    }
    /// Re-export of rust-allocated (stack based) `SvgStyle` struct
    #[repr(C, u8)]     pub enum AzSvgStyle {
        Fill(AzSvgFillStyle),
        Stroke(AzSvgStrokeStyle),
    }
    /// Re-export of rust-allocated (stack based) `String` struct
    #[repr(C)]     pub struct AzString {
        pub vec: AzU8Vec,
    }
    /// Wrapper over a Rust-allocated `VertexAttribute`
    #[repr(C)]     pub struct AzSvgPathElementVec {
        pub(crate) ptr: *const AzSvgPathElement,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzSvgPathElementVecDestructor,
    }
    /// Wrapper over a Rust-allocated `CallbackData`
    #[repr(C)]     pub struct AzCallbackDataVec {
        pub(crate) ptr: *const AzCallbackData,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzCallbackDataVecDestructor,
    }
    /// Wrapper over a Rust-allocated `StringVec`
    #[repr(C)]     pub struct AzStringVec {
        pub(crate) ptr: *const AzString,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzStringVecDestructor,
    }
    /// Re-export of rust-allocated (stack based) `OptionRawImage` struct
    #[repr(C, u8)]     pub enum AzOptionRawImage {
        None,
        Some(AzRawImage),
    }
    /// Re-export of rust-allocated (stack based) `OptionTaskBarIcon` struct
    #[repr(C, u8)]     pub enum AzOptionTaskBarIcon {
        None,
        Some(AzTaskBarIcon),
    }
    /// Re-export of rust-allocated (stack based) `OptionWindowIcon` struct
    #[repr(C, u8)]     pub enum AzOptionWindowIcon {
        None,
        Some(AzWindowIcon),
    }
    /// Re-export of rust-allocated (stack based) `OptionString` struct
    #[repr(C, u8)]     pub enum AzOptionString {
        None,
        Some(AzString),
    }
    /// Re-export of rust-allocated (stack based) `OptionDuration` struct
    #[repr(C, u8)]     pub enum AzOptionDuration {
        None,
        Some(AzDuration),
    }
    /// Re-export of rust-allocated (stack based) `OptionInstant` struct
    #[repr(C, u8)]     pub enum AzOptionInstant {
        None,
        Some(AzInstant),
    }
    /// Re-export of rust-allocated (stack based) `DuplicatedNamespaceError` struct
    #[repr(C)]     pub struct AzDuplicatedNamespaceError {
        pub ns: AzString,
        pub pos: AzSvgParseErrorPosition,
    }
    /// Re-export of rust-allocated (stack based) `UnknownNamespaceError` struct
    #[repr(C)]     pub struct AzUnknownNamespaceError {
        pub ns: AzString,
        pub pos: AzSvgParseErrorPosition,
    }
    /// Re-export of rust-allocated (stack based) `UnexpectedCloseTagError` struct
    #[repr(C)]     pub struct AzUnexpectedCloseTagError {
        pub expected: AzString,
        pub actual: AzString,
        pub pos: AzSvgParseErrorPosition,
    }
    /// Re-export of rust-allocated (stack based) `UnknownEntityReferenceError` struct
    #[repr(C)]     pub struct AzUnknownEntityReferenceError {
        pub entity: AzString,
        pub pos: AzSvgParseErrorPosition,
    }
    /// Re-export of rust-allocated (stack based) `DuplicatedAttributeError` struct
    #[repr(C)]     pub struct AzDuplicatedAttributeError {
        pub attribute: AzString,
        pub pos: AzSvgParseErrorPosition,
    }
    /// Re-export of rust-allocated (stack based) `InvalidStringError` struct
    #[repr(C)]     pub struct AzInvalidStringError {
        pub got: AzString,
        pub pos: AzSvgParseErrorPosition,
    }
    /// Window configuration specific to Win32
    #[repr(C)]     pub struct AzWindowsWindowOptions {
        pub allow_drag_drop: bool,
        pub no_redirection_bitmap: bool,
        pub window_icon: AzOptionWindowIcon,
        pub taskbar_icon: AzOptionTaskBarIcon,
        pub parent_window: AzOptionHwndHandle,
    }
    /// CSD theme of the window title / button controls
    #[repr(C)]     pub struct AzWaylandTheme {
        pub title_bar_active_background_color: [u8;4],
        pub title_bar_active_separator_color: [u8;4],
        pub title_bar_active_text_color: [u8;4],
        pub title_bar_inactive_background_color: [u8;4],
        pub title_bar_inactive_separator_color: [u8;4],
        pub title_bar_inactive_text_color: [u8;4],
        pub maximize_idle_foreground_inactive_color: [u8;4],
        pub minimize_idle_foreground_inactive_color: [u8;4],
        pub close_idle_foreground_inactive_color: [u8;4],
        pub maximize_hovered_foreground_inactive_color: [u8;4],
        pub minimize_hovered_foreground_inactive_color: [u8;4],
        pub close_hovered_foreground_inactive_color: [u8;4],
        pub maximize_disabled_foreground_inactive_color: [u8;4],
        pub minimize_disabled_foreground_inactive_color: [u8;4],
        pub close_disabled_foreground_inactive_color: [u8;4],
        pub maximize_idle_background_inactive_color: [u8;4],
        pub minimize_idle_background_inactive_color: [u8;4],
        pub close_idle_background_inactive_color: [u8;4],
        pub maximize_hovered_background_inactive_color: [u8;4],
        pub minimize_hovered_background_inactive_color: [u8;4],
        pub close_hovered_background_inactive_color: [u8;4],
        pub maximize_disabled_background_inactive_color: [u8;4],
        pub minimize_disabled_background_inactive_color: [u8;4],
        pub close_disabled_background_inactive_color: [u8;4],
        pub maximize_idle_foreground_active_color: [u8;4],
        pub minimize_idle_foreground_active_color: [u8;4],
        pub close_idle_foreground_active_color: [u8;4],
        pub maximize_hovered_foreground_active_color: [u8;4],
        pub minimize_hovered_foreground_active_color: [u8;4],
        pub close_hovered_foreground_active_color: [u8;4],
        pub maximize_disabled_foreground_active_color: [u8;4],
        pub minimize_disabled_foreground_active_color: [u8;4],
        pub close_disabled_foreground_active_color: [u8;4],
        pub maximize_idle_background_active_color: [u8;4],
        pub minimize_idle_background_active_color: [u8;4],
        pub close_idle_background_active_color: [u8;4],
        pub maximize_hovered_background_active_color: [u8;4],
        pub minimize_hovered_background_active_color: [u8;4],
        pub close_hovered_background_active_color: [u8;4],
        pub maximize_disabled_background_active_color: [u8;4],
        pub minimize_disabled_background_active_color: [u8;4],
        pub close_disabled_background_active_color: [u8;4],
        pub title_bar_font: AzString,
        pub title_bar_font_size: f32,
    }
    /// Key-value pair, used for setting WM hints values specific to GNOME
    #[repr(C)]     pub struct AzStringPair {
        pub key: AzString,
        pub value: AzString,
    }
    /// Re-export of rust-allocated (stack based) `Monitor` struct
    #[repr(C)]     pub struct AzMonitor {
        pub handle: AzMonitorHandle,
        pub name: AzOptionString,
        pub size: AzLayoutSize,
        pub position: AzLayoutPoint,
        pub scale_factor: f64,
        pub video_modes: AzVideoModeVec,
        pub is_primary_monitor: bool,
    }
    /// Re-export of rust-allocated (stack based) `RefCountInner` struct
    #[repr(C)]     pub struct AzRefCountInner {
        pub num_copies: usize,
        pub num_refs: usize,
        pub num_mutable_refs: usize,
        pub _internal_len: usize,
        pub _internal_layout_size: usize,
        pub _internal_layout_align: usize,
        pub type_id: u64,
        pub type_name: AzString,
        pub custom_destructor: AzRefAnyDestructorType,
    }
    /// List of core DOM node types built-into by `azul`
    #[repr(C, u8)]     pub enum AzNodeType {
        Div,
        Body,
        Br,
        Label(AzString),
        Image(AzImageId),
        IFrame(AzIFrameNode),
        GlTexture(AzGlTextureNode),
    }
    /// Re-export of rust-allocated (stack based) `IdOrClass` struct
    #[repr(C, u8)]     pub enum AzIdOrClass {
        Id(AzString),
        Class(AzString),
    }
    /// Re-export of rust-allocated (stack based) `CssPathSelector` struct
    #[repr(C, u8)]     pub enum AzCssPathSelector {
        Global,
        Type(AzNodeTypePath),
        Class(AzString),
        Id(AzString),
        PseudoSelector(AzCssPathPseudoSelector),
        DirectChildren,
        Children,
    }
    /// Re-export of rust-allocated (stack based) `CssImageId` struct
    #[repr(C)]     pub struct AzCssImageId {
        pub inner: AzString,
    }
    /// Re-export of rust-allocated (stack based) `StyleBackgroundContent` struct
    #[repr(C, u8)]     pub enum AzStyleBackgroundContent {
        LinearGradient(AzLinearGradient),
        RadialGradient(AzRadialGradient),
        ConicGradient(AzConicGradient),
        Image(AzCssImageId),
        Color(AzColorU),
    }
    /// Re-export of rust-allocated (stack based) `ScrollbarInfo` struct
    #[repr(C)]     pub struct AzScrollbarInfo {
        pub width: AzLayoutWidth,
        pub padding_left: AzLayoutPaddingLeft,
        pub padding_right: AzLayoutPaddingRight,
        pub track: AzStyleBackgroundContent,
        pub thumb: AzStyleBackgroundContent,
        pub button: AzStyleBackgroundContent,
        pub corner: AzStyleBackgroundContent,
        pub resizer: AzStyleBackgroundContent,
    }
    /// Re-export of rust-allocated (stack based) `ScrollbarStyle` struct
    #[repr(C)]     pub struct AzScrollbarStyle {
        pub horizontal: AzScrollbarInfo,
        pub vertical: AzScrollbarInfo,
    }
    /// Re-export of rust-allocated (stack based) `StyleFontFamily` struct
    #[repr(C)]     pub struct AzStyleFontFamily {
        pub fonts: AzStringVec,
    }
    /// Re-export of rust-allocated (stack based) `ScrollbarStyleValue` struct
    #[repr(C, u8)]     pub enum AzScrollbarStyleValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzScrollbarStyle),
    }
    /// Re-export of rust-allocated (stack based) `StyleFontFamilyValue` struct
    #[repr(C, u8)]     pub enum AzStyleFontFamilyValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleFontFamily),
    }
    /// Re-export of rust-allocated (stack based) `VertexAttribute` struct
    #[repr(C)]     pub struct AzVertexAttribute {
        pub name: AzString,
        pub layout_location: AzOptionUsize,
        pub attribute_type: AzVertexAttributeType,
        pub item_count: usize,
    }
    /// Re-export of rust-allocated (stack based) `DebugMessage` struct
    #[repr(C)]     pub struct AzDebugMessage {
        pub message: AzString,
        pub source: u32,
        pub ty: u32,
        pub id: u32,
        pub severity: u32,
    }
    /// C-ABI stable reexport of `(i32, u32, AzString)`
    #[repr(C)]     pub struct AzGetActiveAttribReturn {
        pub _0: i32,
        pub _1: u32,
        pub _2: AzString,
    }
    /// C-ABI stable reexport of `(i32, u32, AzString)`
    #[repr(C)]     pub struct AzGetActiveUniformReturn {
        pub _0: i32,
        pub _1: u32,
        pub _2: AzString,
    }
    /// Re-export of rust-allocated (stack based) `ImageSource` struct
    #[repr(C, u8)]     pub enum AzImageSource {
        Embedded(AzU8Vec),
        File(AzString),
        Raw(AzRawImage),
    }
    /// Re-export of rust-allocated (stack based) `EmbeddedFontSource` struct
    #[repr(C)]     pub struct AzEmbeddedFontSource {
        pub postscript_id: AzString,
        pub font_data: AzU8Vec,
        pub load_glyph_outlines: bool,
    }
    /// Re-export of rust-allocated (stack based) `FileFontSource` struct
    #[repr(C)]     pub struct AzFileFontSource {
        pub postscript_id: AzString,
        pub file_path: AzString,
        pub load_glyph_outlines: bool,
    }
    /// Re-export of rust-allocated (stack based) `SystemFontSource` struct
    #[repr(C)]     pub struct AzSystemFontSource {
        pub postscript_id: AzString,
        pub load_glyph_outlines: bool,
    }
    /// Re-export of rust-allocated (stack based) `SvgPath` struct
    #[repr(C)]     pub struct AzSvgPath {
        pub items: AzSvgPathElementVec,
    }
    /// Re-export of rust-allocated (stack based) `SvgParseOptions` struct
    #[repr(C)]     pub struct AzSvgParseOptions {
        pub relative_image_path: AzOptionString,
        pub dpi: f32,
        pub default_font_family: AzString,
        pub font_size: f32,
        pub languages: AzStringVec,
        pub shape_rendering: AzShapeRendering,
        pub text_rendering: AzTextRendering,
        pub image_rendering: AzImageRendering,
        pub keep_named_groups: bool,
        pub fontdb: AzFontDatabase,
    }
    /// Re-export of rust-allocated (stack based) `Timer` struct
    #[repr(C)]     pub struct AzTimer {
        pub data: AzRefAny,
        pub created: AzInstant,
        pub last_run: AzOptionInstant,
        pub run_count: usize,
        pub delay: AzOptionDuration,
        pub interval: AzOptionDuration,
        pub timeout: AzOptionDuration,
        pub callback: AzTimerCallback,
    }
    /// Wrapper over a Rust-allocated `Vec<Monitor>`
    #[repr(C)]     pub struct AzMonitorVec {
        pub(crate) ptr: *const AzMonitor,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzMonitorVecDestructor,
    }
    /// Wrapper over a Rust-allocated `Vec<IdOrClass>`
    #[repr(C)]     pub struct AzIdOrClassVec {
        pub(crate) ptr: *const AzIdOrClass,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzIdOrClassVecDestructor,
    }
    /// Wrapper over a Rust-allocated `Vec<StyleBackgroundContent>`
    #[repr(C)]     pub struct AzStyleBackgroundContentVec {
        pub(crate) ptr: *const AzStyleBackgroundContent,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzStyleBackgroundContentVecDestructor,
    }
    /// Wrapper over a Rust-allocated `Vec<SvgPath>`
    #[repr(C)]     pub struct AzSvgPathVec {
        pub(crate) ptr: *const AzSvgPath,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzSvgPathVecDestructor,
    }
    /// Wrapper over a Rust-allocated `Vec<VertexAttribute>`
    #[repr(C)]     pub struct AzVertexAttributeVec {
        pub(crate) ptr: *const AzVertexAttribute,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzVertexAttributeVecDestructor,
    }
    /// Wrapper over a Rust-allocated `CssPathSelector`
    #[repr(C)]     pub struct AzCssPathSelectorVec {
        pub(crate) ptr: *const AzCssPathSelector,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzCssPathSelectorVecDestructor,
    }
    /// Wrapper over a Rust-allocated `Vec<DebugMessage>`
    #[repr(C)]     pub struct AzDebugMessageVec {
        pub(crate) ptr: *const AzDebugMessage,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzDebugMessageVecDestructor,
    }
    /// Wrapper over a Rust-allocated `StringPairVec`
    #[repr(C)]     pub struct AzStringPairVec {
        pub(crate) ptr: *const AzStringPair,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzStringPairVecDestructor,
    }
    /// Re-export of rust-allocated (stack based) `OptionWaylandTheme` struct
    #[repr(C, u8)]     pub enum AzOptionWaylandTheme {
        None,
        Some(AzWaylandTheme),
    }
    /// Re-export of rust-allocated (stack based) `XmlStreamError` struct
    #[repr(C, u8)]     pub enum AzXmlStreamError {
        UnexpectedEndOfStream,
        InvalidName,
        NonXmlChar(AzNonXmlCharError),
        InvalidChar(AzInvalidCharError),
        InvalidCharMultiple(AzInvalidCharMultipleError),
        InvalidQuote(AzInvalidQuoteError),
        InvalidSpace(AzInvalidSpaceError),
        InvalidString(AzInvalidStringError),
        InvalidReference,
        InvalidExternalID,
        InvalidCommentData,
        InvalidCommentEnd,
        InvalidCharacterData,
    }
    /// Re-export of rust-allocated (stack based) `LinuxWindowOptions` struct
    #[repr(C)]     pub struct AzLinuxWindowOptions {
        pub x11_visual: AzOptionX11Visual,
        pub x11_screen: AzOptionI32,
        pub x11_wm_classes: AzStringPairVec,
        pub x11_override_redirect: bool,
        pub x11_window_types: AzXWindowTypeVec,
        pub x11_gtk_theme_variant: AzOptionString,
        pub x11_resize_increments: AzOptionLogicalSize,
        pub x11_base_size: AzOptionLogicalSize,
        pub wayland_app_id: AzOptionString,
        pub wayland_theme: AzOptionWaylandTheme,
        pub request_user_attention: bool,
        pub window_icon: AzOptionWindowIcon,
    }
    /// Re-export of rust-allocated (stack based) `CssPath` struct
    #[repr(C)]     pub struct AzCssPath {
        pub selectors: AzCssPathSelectorVec,
    }
    /// Re-export of rust-allocated (stack based) `StyleBackgroundContentVecValue` struct
    #[repr(C, u8)]     pub enum AzStyleBackgroundContentVecValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBackgroundContentVec),
    }
    /// Parsed CSS key-value pair
    #[repr(C, u8)]     pub enum AzCssProperty {
        TextColor(AzStyleTextColorValue),
        FontSize(AzStyleFontSizeValue),
        FontFamily(AzStyleFontFamilyValue),
        TextAlign(AzStyleTextAlignmentHorzValue),
        LetterSpacing(AzStyleLetterSpacingValue),
        LineHeight(AzStyleLineHeightValue),
        WordSpacing(AzStyleWordSpacingValue),
        TabWidth(AzStyleTabWidthValue),
        Cursor(AzStyleCursorValue),
        Display(AzLayoutDisplayValue),
        Float(AzLayoutFloatValue),
        BoxSizing(AzLayoutBoxSizingValue),
        Width(AzLayoutWidthValue),
        Height(AzLayoutHeightValue),
        MinWidth(AzLayoutMinWidthValue),
        MinHeight(AzLayoutMinHeightValue),
        MaxWidth(AzLayoutMaxWidthValue),
        MaxHeight(AzLayoutMaxHeightValue),
        Position(AzLayoutPositionValue),
        Top(AzLayoutTopValue),
        Right(AzLayoutRightValue),
        Left(AzLayoutLeftValue),
        Bottom(AzLayoutBottomValue),
        FlexWrap(AzLayoutFlexWrapValue),
        FlexDirection(AzLayoutFlexDirectionValue),
        FlexGrow(AzLayoutFlexGrowValue),
        FlexShrink(AzLayoutFlexShrinkValue),
        JustifyContent(AzLayoutJustifyContentValue),
        AlignItems(AzLayoutAlignItemsValue),
        AlignContent(AzLayoutAlignContentValue),
        BackgroundContent(AzStyleBackgroundContentVecValue),
        BackgroundPosition(AzStyleBackgroundPositionVecValue),
        BackgroundSize(AzStyleBackgroundSizeVecValue),
        BackgroundRepeat(AzStyleBackgroundRepeatVecValue),
        OverflowX(AzLayoutOverflowValue),
        OverflowY(AzLayoutOverflowValue),
        PaddingTop(AzLayoutPaddingTopValue),
        PaddingLeft(AzLayoutPaddingLeftValue),
        PaddingRight(AzLayoutPaddingRightValue),
        PaddingBottom(AzLayoutPaddingBottomValue),
        MarginTop(AzLayoutMarginTopValue),
        MarginLeft(AzLayoutMarginLeftValue),
        MarginRight(AzLayoutMarginRightValue),
        MarginBottom(AzLayoutMarginBottomValue),
        BorderTopLeftRadius(AzStyleBorderTopLeftRadiusValue),
        BorderTopRightRadius(AzStyleBorderTopRightRadiusValue),
        BorderBottomLeftRadius(AzStyleBorderBottomLeftRadiusValue),
        BorderBottomRightRadius(AzStyleBorderBottomRightRadiusValue),
        BorderTopColor(AzStyleBorderTopColorValue),
        BorderRightColor(AzStyleBorderRightColorValue),
        BorderLeftColor(AzStyleBorderLeftColorValue),
        BorderBottomColor(AzStyleBorderBottomColorValue),
        BorderTopStyle(AzStyleBorderTopStyleValue),
        BorderRightStyle(AzStyleBorderRightStyleValue),
        BorderLeftStyle(AzStyleBorderLeftStyleValue),
        BorderBottomStyle(AzStyleBorderBottomStyleValue),
        BorderTopWidth(AzLayoutBorderTopWidthValue),
        BorderRightWidth(AzLayoutBorderRightWidthValue),
        BorderLeftWidth(AzLayoutBorderLeftWidthValue),
        BorderBottomWidth(AzLayoutBorderBottomWidthValue),
        BoxShadowLeft(AzStyleBoxShadowValue),
        BoxShadowRight(AzStyleBoxShadowValue),
        BoxShadowTop(AzStyleBoxShadowValue),
        BoxShadowBottom(AzStyleBoxShadowValue),
        ScrollbarStyle(AzScrollbarStyleValue),
        Opacity(AzStyleOpacityValue),
        Transform(AzStyleTransformVecValue),
        TransformOrigin(AzStyleTransformOriginValue),
        PerspectiveOrigin(AzStylePerspectiveOriginValue),
        BackfaceVisibility(AzStyleBackfaceVisibilityValue),
    }
    /// Re-export of rust-allocated (stack based) `CssPropertySource` struct
    #[repr(C, u8)]     pub enum AzCssPropertySource {
        Css(AzCssPath),
        Inline,
    }
    /// Re-export of rust-allocated (stack based) `VertexLayout` struct
    #[repr(C)]     pub struct AzVertexLayout {
        pub fields: AzVertexAttributeVec,
    }
    /// Re-export of rust-allocated (stack based) `VertexArrayObject` struct
    #[repr(C)]     pub struct AzVertexArrayObject {
        pub vertex_layout: AzVertexLayout,
        pub vao_id: u32,
        pub gl_context: AzGlContextPtr,
    }
    /// Re-export of rust-allocated (stack based) `VertexBuffer` struct
    #[repr(C)]     pub struct AzVertexBuffer {
        pub vertex_buffer_id: u32,
        pub vertex_buffer_len: usize,
        pub vao: AzVertexArrayObject,
        pub index_buffer_id: u32,
        pub index_buffer_len: usize,
        pub index_buffer_format: AzIndexBufferFormat,
    }
    /// Re-export of rust-allocated (stack based) `FontSource` struct
    #[repr(C, u8)]     pub enum AzFontSource {
        Embedded(AzEmbeddedFontSource),
        File(AzFileFontSource),
        System(AzSystemFontSource),
    }
    /// Re-export of rust-allocated (stack based) `SvgMultiPolygon` struct
    #[repr(C)]     pub struct AzSvgMultiPolygon {
        pub rings: AzSvgPathVec,
    }
    /// Wrapper over a Rust-allocated `Vec<CssProperty>`
    #[repr(C)]     pub struct AzCssPropertyVec {
        pub(crate) ptr: *const AzCssProperty,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzCssPropertyVecDestructor,
    }
    /// Wrapper over a Rust-allocated `Vec<SvgMultiPolygon>`
    #[repr(C)]     pub struct AzSvgMultiPolygonVec {
        pub(crate) ptr: *const AzSvgMultiPolygon,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzSvgMultiPolygonVecDestructor,
    }
    /// Re-export of rust-allocated (stack based) `XmlTextError` struct
    #[repr(C)]     pub struct AzXmlTextError {
        pub stream_error: AzXmlStreamError,
        pub pos: AzSvgParseErrorPosition,
    }
    /// Platform-specific window configuration, i.e. WM options that are not cross-platform
    #[repr(C)]     pub struct AzPlatformSpecificOptions {
        pub windows_options: AzWindowsWindowOptions,
        pub linux_options: AzLinuxWindowOptions,
        pub mac_options: AzMacWindowOptions,
        pub wasm_options: AzWasmWindowOptions,
    }
    /// Re-export of rust-allocated (stack based) `WindowState` struct
    #[repr(C)]     pub struct AzWindowState {
        pub title: AzString,
        pub theme: AzWindowTheme,
        pub size: AzWindowSize,
        pub position: AzWindowPosition,
        pub flags: AzWindowFlags,
        pub debug_state: AzDebugState,
        pub keyboard_state: AzKeyboardState,
        pub mouse_state: AzMouseState,
        pub touch_state: AzTouchState,
        pub ime_position: AzImePosition,
        pub monitor: AzMonitor,
        pub platform_specific_options: AzPlatformSpecificOptions,
        pub renderer_options: AzRendererOptions,
        pub background_color: AzColorU,
        pub layout_callback: AzLayoutCallback,
        pub close_callback: AzOptionCallback,
    }
    /// Re-export of rust-allocated (stack based) `FocusTargetPath` struct
    #[repr(C)]     pub struct AzFocusTargetPath {
        pub dom: AzDomId,
        pub css_path: AzCssPath,
    }
    /// Re-export of rust-allocated (stack based) `CallbackInfo` struct
    #[repr(C)]     pub struct AzCallbackInfo {
        pub current_window_state: *const c_void,
        pub modifiable_window_state: *mut AzWindowState,
        pub gl_context: *const AzGlContextPtr,
        pub resources: *mut c_void,
        pub timers: *mut c_void,
        pub threads: *mut c_void,
        pub new_windows: *mut c_void,
        pub current_window_handle: *const AzRawWindowHandle,
        pub node_hierarchy: *const c_void,
        pub system_callbacks: *const AzSystemCallbacks,
        pub datasets: *mut c_void,
        pub stop_propagation: *mut bool,
        pub focus_target: *mut c_void,
        pub words_cache: *const c_void,
        pub shaped_words_cache: *const c_void,
        pub positioned_words_cache: *const c_void,
        pub positioned_rects: *const c_void,
        pub words_changed_in_callbacks: *mut c_void,
        pub images_changed_in_callbacks: *mut c_void,
        pub image_masks_changed_in_callbacks: *mut c_void,
        pub css_properties_changed_in_callbacks: *mut c_void,
        pub current_scroll_states: *const c_void,
        pub nodes_scrolled_in_callback: *mut c_void,
        pub hit_dom_node: AzDomNodeId,
        pub cursor_relative_to_item: AzOptionLayoutPoint,
        pub cursor_in_viewport: AzOptionLayoutPoint,
    }
    /// Re-export of rust-allocated (stack based) `TimerCallbackInfo` struct
    #[repr(C)]     pub struct AzTimerCallbackInfo {
        pub callback_info: AzCallbackInfo,
        pub frame_start: AzInstant,
        pub call_count: usize,
        pub is_about_to_finish: bool,
    }
    /// Re-export of rust-allocated (stack based) `NodeDataInlineCssProperty` struct
    #[repr(C, u8)]     pub enum AzNodeDataInlineCssProperty {
        Normal(AzCssProperty),
        Active(AzCssProperty),
        Focus(AzCssProperty),
        Hover(AzCssProperty),
    }
    /// Re-export of rust-allocated (stack based) `DynamicCssProperty` struct
    #[repr(C)]     pub struct AzDynamicCssProperty {
        pub dynamic_id: AzString,
        pub default_value: AzCssProperty,
    }
    /// Re-export of rust-allocated (stack based) `SvgNode` struct
    #[repr(C, u8)]     pub enum AzSvgNode {
        MultiPolygonCollection(AzSvgMultiPolygonVec),
        MultiPolygon(AzSvgMultiPolygon),
        Path(AzSvgPath),
        Circle(AzSvgCircle),
        Rect(AzSvgRect),
    }
    /// Re-export of rust-allocated (stack based) `SvgStyledNode` struct
    #[repr(C)]     pub struct AzSvgStyledNode {
        pub geometry: AzSvgNode,
        pub style: AzSvgStyle,
    }
    /// Wrapper over a Rust-allocated `Vec<NodeDataInlineCssProperty>`
    #[repr(C)]     pub struct AzNodeDataInlineCssPropertyVec {
        pub(crate) ptr: *const AzNodeDataInlineCssProperty,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzNodeDataInlineCssPropertyVecDestructor,
    }
    /// Re-export of rust-allocated (stack based) `XmlParseError` struct
    #[repr(C, u8)]     pub enum AzXmlParseError {
        InvalidDeclaration(AzXmlTextError),
        InvalidComment(AzXmlTextError),
        InvalidPI(AzXmlTextError),
        InvalidDoctype(AzXmlTextError),
        InvalidEntity(AzXmlTextError),
        InvalidElement(AzXmlTextError),
        InvalidAttribute(AzXmlTextError),
        InvalidCdata(AzXmlTextError),
        InvalidCharData(AzXmlTextError),
        UnknownToken(AzSvgParseErrorPosition),
    }
    /// Options on how to initially create the window
    #[repr(C)]     pub struct AzWindowCreateOptions {
        pub state: AzWindowState,
        pub renderer_type: AzOptionRendererOptions,
        pub theme: AzOptionWindowTheme,
        pub create_callback: AzOptionCallback,
    }
    /// Defines the focus target for the next frame
    #[repr(C, u8)]     pub enum AzFocusTarget {
        Id(AzDomNodeId),
        Path(AzFocusTargetPath),
        Previous,
        Next,
        First,
        Last,
        NoFocus,
    }
    /// Represents one single DOM node (node type, classes, ids and callbacks are stored here)
    #[repr(C)]     pub struct AzNodeData {
        pub node_type: AzNodeType,
        pub dataset: AzOptionRefAny,
        pub ids_and_classes: AzIdOrClassVec,
        pub callbacks: AzCallbackDataVec,
        pub inline_css_props: AzNodeDataInlineCssPropertyVec,
        pub clip_mask: AzOptionImageMask,
        pub tab_index: AzOptionTabIndex,
    }
    /// Re-export of rust-allocated (stack based) `CssDeclaration` struct
    #[repr(C, u8)]     pub enum AzCssDeclaration {
        Static(AzCssProperty),
        Dynamic(AzDynamicCssProperty),
    }
    /// Wrapper over a Rust-allocated `CssDeclaration`
    #[repr(C)]     pub struct AzCssDeclarationVec {
        pub(crate) ptr: *const AzCssDeclaration,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzCssDeclarationVecDestructor,
    }
    /// Wrapper over a Rust-allocated `NodeDataVec`
    #[repr(C)]     pub struct AzNodeDataVec {
        pub(crate) ptr: *const AzNodeData,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzNodeDataVecDestructor,
    }
    /// Re-export of rust-allocated (stack based) `XmlError` struct
    #[repr(C, u8)]     pub enum AzXmlError {
        InvalidXmlPrefixUri(AzSvgParseErrorPosition),
        UnexpectedXmlUri(AzSvgParseErrorPosition),
        UnexpectedXmlnsUri(AzSvgParseErrorPosition),
        InvalidElementNamePrefix(AzSvgParseErrorPosition),
        DuplicatedNamespace(AzDuplicatedNamespaceError),
        UnknownNamespace(AzUnknownNamespaceError),
        UnexpectedCloseTag(AzUnexpectedCloseTagError),
        UnexpectedEntityCloseTag(AzSvgParseErrorPosition),
        UnknownEntityReference(AzUnknownEntityReferenceError),
        MalformedEntityReference(AzSvgParseErrorPosition),
        EntityReferenceLoop(AzSvgParseErrorPosition),
        InvalidAttributeValue(AzSvgParseErrorPosition),
        DuplicatedAttribute(AzDuplicatedAttributeError),
        NoRootNode,
        SizeLimit,
        ParserError(AzXmlParseError),
    }
    /// Re-export of rust-allocated (stack based) `Dom` struct
    #[repr(C)]     pub struct AzDom {
        pub root: AzNodeData,
        pub children: AzDomVec,
        pub estimated_total_children: usize,
    }
    /// Re-export of rust-allocated (stack based) `CssRuleBlock` struct
    #[repr(C)]     pub struct AzCssRuleBlock {
        pub path: AzCssPath,
        pub declarations: AzCssDeclarationVec,
    }
    /// Re-export of rust-allocated (stack based) `StyledDom` struct
    #[repr(C)]     pub struct AzStyledDom {
        pub root: AzNodeId,
        pub node_hierarchy: AzNodeVec,
        pub node_data: AzNodeDataVec,
        pub styled_nodes: AzStyledNodeVec,
        pub cascade_info: AzCascadeInfoVec,
        pub tag_ids_to_node_ids: AzTagIdsToNodeIdsMappingVec,
        pub non_leaf_nodes: AzParentWithNodeDepthVec,
        pub css_property_cache: AzCssPropertyCache,
    }
    /// Wrapper over a Rust-allocated `Vec<Dom>`
    #[repr(C)]     pub struct AzDomVec {
        pub(crate) ptr: *const AzDom,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzDomVecDestructor,
    }
    /// Wrapper over a Rust-allocated `CssRuleBlock`
    #[repr(C)]     pub struct AzCssRuleBlockVec {
        pub(crate) ptr: *const AzCssRuleBlock,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzCssRuleBlockVecDestructor,
    }
    /// Re-export of rust-allocated (stack based) `OptionDom` struct
    #[repr(C, u8)]     pub enum AzOptionDom {
        None,
        Some(AzDom),
    }
    /// Re-export of rust-allocated (stack based) `SvgParseError` struct
    #[repr(C, u8)]     pub enum AzSvgParseError {
        InvalidFileSuffix,
        FileOpenFailed,
        NotAnUtf8Str,
        MalformedGZip,
        InvalidSize,
        ParsingFailed(AzXmlError),
    }
    /// Re-export of rust-allocated (stack based) `IFrameCallbackReturn` struct
    #[repr(C)]     pub struct AzIFrameCallbackReturn {
        pub dom: AzStyledDom,
        pub size: AzLayoutRect,
        pub virtual_size: AzOptionLayoutRect,
    }
    /// Re-export of rust-allocated (stack based) `Stylesheet` struct
    #[repr(C)]     pub struct AzStylesheet {
        pub rules: AzCssRuleBlockVec,
    }
    /// Wrapper over a Rust-allocated `Stylesheet`
    #[repr(C)]     pub struct AzStylesheetVec {
        pub(crate) ptr: *const AzStylesheet,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzStylesheetVecDestructor,
    }
    /// Re-export of rust-allocated (stack based) `ResultSvgSvgParseError` struct
    #[repr(C, u8)]     pub enum AzResultSvgSvgParseError {
        Ok(AzSvg),
        Err(AzSvgParseError),
    }
    /// Re-export of rust-allocated (stack based) `Css` struct
    #[repr(C)]     pub struct AzCss {
        pub stylesheets: AzStylesheetVec,
    }
    use core::ffi::c_void;
    use azul_impl::css::*;

    #[test]
    fn test_size() {
         use core::alloc::Layout;
        assert_eq!((Layout::new::<azul_impl::app::AzAppPtr>(), "AzApp"), (Layout::new::<AzApp>(), "AzApp"));
        assert_eq!((Layout::new::<azul_impl::resources::AppLogLevel>(), "AzAppLogLevel"), (Layout::new::<AzAppLogLevel>(), "AzAppLogLevel"));
        assert_eq!((Layout::new::<azul_impl::window::Vsync>(), "AzVsync"), (Layout::new::<AzVsync>(), "AzVsync"));
        assert_eq!((Layout::new::<azul_impl::window::Srgb>(), "AzSrgb"), (Layout::new::<AzSrgb>(), "AzSrgb"));
        assert_eq!((Layout::new::<azul_impl::window::HwAcceleration>(), "AzHwAcceleration"), (Layout::new::<AzHwAcceleration>(), "AzHwAcceleration"));
        assert_eq!((Layout::new::<azul_impl::window::XWindowType>(), "AzXWindowType"), (Layout::new::<AzXWindowType>(), "AzXWindowType"));
        assert_eq!((Layout::new::<azul_impl::window::VirtualKeyCode>(), "AzVirtualKeyCode"), (Layout::new::<AzVirtualKeyCode>(), "AzVirtualKeyCode"));
        assert_eq!((Layout::new::<azul_impl::window::MouseCursorType>(), "AzMouseCursorType"), (Layout::new::<AzMouseCursorType>(), "AzMouseCursorType"));
        assert_eq!((Layout::new::<azul_impl::window::RendererType>(), "AzRendererType"), (Layout::new::<AzRendererType>(), "AzRendererType"));
        assert_eq!((Layout::new::<azul_impl::window::FullScreenMode>(), "AzFullScreenMode"), (Layout::new::<AzFullScreenMode>(), "AzFullScreenMode"));
        assert_eq!((Layout::new::<azul_impl::window::WindowTheme>(), "AzWindowTheme"), (Layout::new::<AzWindowTheme>(), "AzWindowTheme"));
        assert_eq!((Layout::new::<azul_impl::window::Monitor>(), "AzMonitorHandle"), (Layout::new::<AzMonitorHandle>(), "AzMonitorHandle"));
        assert_eq!((Layout::new::<azul_impl::callbacks::UpdateScreen>(), "AzUpdateScreen"), (Layout::new::<AzUpdateScreen>(), "AzUpdateScreen"));
        assert_eq!((Layout::new::<azul_impl::callbacks::RefCount>(), "AzRefCount"), (Layout::new::<AzRefCount>(), "AzRefCount"));
        assert_eq!((Layout::new::<azul_impl::callbacks::RefAny>(), "AzRefAny"), (Layout::new::<AzRefAny>(), "AzRefAny"));
        assert_eq!((Layout::new::<azul_impl::dom::On>(), "AzOn"), (Layout::new::<AzOn>(), "AzOn"));
        assert_eq!((Layout::new::<azul_impl::dom::HoverEventFilter>(), "AzHoverEventFilter"), (Layout::new::<AzHoverEventFilter>(), "AzHoverEventFilter"));
        assert_eq!((Layout::new::<azul_impl::dom::FocusEventFilter>(), "AzFocusEventFilter"), (Layout::new::<AzFocusEventFilter>(), "AzFocusEventFilter"));
        assert_eq!((Layout::new::<azul_impl::dom::WindowEventFilter>(), "AzWindowEventFilter"), (Layout::new::<AzWindowEventFilter>(), "AzWindowEventFilter"));
        assert_eq!((Layout::new::<azul_impl::dom::ComponentEventFilter>(), "AzComponentEventFilter"), (Layout::new::<AzComponentEventFilter>(), "AzComponentEventFilter"));
        assert_eq!((Layout::new::<azul_impl::dom::ApplicationEventFilter>(), "AzApplicationEventFilter"), (Layout::new::<AzApplicationEventFilter>(), "AzApplicationEventFilter"));
        assert_eq!((Layout::new::<azul_impl::css::NodeTypePath>(), "AzNodeTypePath"), (Layout::new::<AzNodeTypePath>(), "AzNodeTypePath"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyType>(), "AzCssPropertyType"), (Layout::new::<AzCssPropertyType>(), "AzCssPropertyType"));
        assert_eq!((Layout::new::<azul_impl::css::SizeMetric>(), "AzSizeMetric"), (Layout::new::<AzSizeMetric>(), "AzSizeMetric"));
        assert_eq!((Layout::new::<azul_impl::css::BoxShadowClipMode>(), "AzBoxShadowClipMode"), (Layout::new::<AzBoxShadowClipMode>(), "AzBoxShadowClipMode"));
        assert_eq!((Layout::new::<azul_impl::css::LayoutAlignContent>(), "AzLayoutAlignContent"), (Layout::new::<AzLayoutAlignContent>(), "AzLayoutAlignContent"));
        assert_eq!((Layout::new::<azul_impl::css::LayoutAlignItems>(), "AzLayoutAlignItems"), (Layout::new::<AzLayoutAlignItems>(), "AzLayoutAlignItems"));
        assert_eq!((Layout::new::<azul_impl::css::LayoutBoxSizing>(), "AzLayoutBoxSizing"), (Layout::new::<AzLayoutBoxSizing>(), "AzLayoutBoxSizing"));
        assert_eq!((Layout::new::<azul_impl::css::LayoutFlexDirection>(), "AzLayoutFlexDirection"), (Layout::new::<AzLayoutFlexDirection>(), "AzLayoutFlexDirection"));
        assert_eq!((Layout::new::<azul_impl::css::LayoutDisplay>(), "AzLayoutDisplay"), (Layout::new::<AzLayoutDisplay>(), "AzLayoutDisplay"));
        assert_eq!((Layout::new::<azul_impl::css::LayoutFloat>(), "AzLayoutFloat"), (Layout::new::<AzLayoutFloat>(), "AzLayoutFloat"));
        assert_eq!((Layout::new::<azul_impl::css::LayoutJustifyContent>(), "AzLayoutJustifyContent"), (Layout::new::<AzLayoutJustifyContent>(), "AzLayoutJustifyContent"));
        assert_eq!((Layout::new::<azul_impl::css::LayoutPosition>(), "AzLayoutPosition"), (Layout::new::<AzLayoutPosition>(), "AzLayoutPosition"));
        assert_eq!((Layout::new::<azul_impl::css::LayoutFlexWrap>(), "AzLayoutFlexWrap"), (Layout::new::<AzLayoutFlexWrap>(), "AzLayoutFlexWrap"));
        assert_eq!((Layout::new::<azul_impl::css::LayoutOverflow>(), "AzLayoutOverflow"), (Layout::new::<AzLayoutOverflow>(), "AzLayoutOverflow"));
        assert_eq!((Layout::new::<azul_impl::css::AngleMetric>(), "AzAngleMetric"), (Layout::new::<AzAngleMetric>(), "AzAngleMetric"));
        assert_eq!((Layout::new::<azul_impl::css::DirectionCorner>(), "AzDirectionCorner"), (Layout::new::<AzDirectionCorner>(), "AzDirectionCorner"));
        assert_eq!((Layout::new::<azul_impl::css::ExtendMode>(), "AzExtendMode"), (Layout::new::<AzExtendMode>(), "AzExtendMode"));
        assert_eq!((Layout::new::<azul_impl::css::Shape>(), "AzShape"), (Layout::new::<AzShape>(), "AzShape"));
        assert_eq!((Layout::new::<azul_impl::css::RadialGradientSize>(), "AzRadialGradientSize"), (Layout::new::<AzRadialGradientSize>(), "AzRadialGradientSize"));
        assert_eq!((Layout::new::<azul_impl::css::StyleBackgroundRepeat>(), "AzStyleBackgroundRepeat"), (Layout::new::<AzStyleBackgroundRepeat>(), "AzStyleBackgroundRepeat"));
        assert_eq!((Layout::new::<azul_impl::css::BorderStyle>(), "AzBorderStyle"), (Layout::new::<AzBorderStyle>(), "AzBorderStyle"));
        assert_eq!((Layout::new::<azul_impl::css::StyleCursor>(), "AzStyleCursor"), (Layout::new::<AzStyleCursor>(), "AzStyleCursor"));
        assert_eq!((Layout::new::<azul_impl::css::StyleBackfaceVisibility>(), "AzStyleBackfaceVisibility"), (Layout::new::<AzStyleBackfaceVisibility>(), "AzStyleBackfaceVisibility"));
        assert_eq!((Layout::new::<azul_impl::css::StyleTextAlignmentHorz>(), "AzStyleTextAlignmentHorz"), (Layout::new::<AzStyleTextAlignmentHorz>(), "AzStyleTextAlignmentHorz"));
        assert_eq!((Layout::new::<azul_impl::styled_dom::CssPropertyCachePtr>(), "AzCssPropertyCache"), (Layout::new::<AzCssPropertyCache>(), "AzCssPropertyCache"));
        assert_eq!((Layout::new::<azul_impl::gl::GlContextPtr>(), "AzGlContextPtr"), (Layout::new::<AzGlContextPtr>(), "AzGlContextPtr"));
        assert_eq!((Layout::new::<azul_impl::gl::Texture>(), "AzTexture"), (Layout::new::<AzTexture>(), "AzTexture"));
        assert_eq!((Layout::new::<azul_impl::gl::VertexAttributeType>(), "AzVertexAttributeType"), (Layout::new::<AzVertexAttributeType>(), "AzVertexAttributeType"));
        assert_eq!((Layout::new::<azul_impl::gl::IndexBufferFormat>(), "AzIndexBufferFormat"), (Layout::new::<AzIndexBufferFormat>(), "AzIndexBufferFormat"));
        assert_eq!((Layout::new::<azul_impl::gl::AzGlType>(), "AzGlType"), (Layout::new::<AzGlType>(), "AzGlType"));
        assert_eq!((Layout::new::<azul_impl::gl::GLsyncPtr>(), "AzGLsyncPtr"), (Layout::new::<AzGLsyncPtr>(), "AzGLsyncPtr"));
        assert_eq!((Layout::new::<azul_impl::resources::RawImageFormat>(), "AzRawImageFormat"), (Layout::new::<AzRawImageFormat>(), "AzRawImageFormat"));
        assert_eq!((Layout::new::<azul_impl::svg::SvgLineCap>(), "AzSvgLineCap"), (Layout::new::<AzSvgLineCap>(), "AzSvgLineCap"));
        assert_eq!((Layout::new::<azul_impl::svg::ShapeRendering>(), "AzShapeRendering"), (Layout::new::<AzShapeRendering>(), "AzShapeRendering"));
        assert_eq!((Layout::new::<azul_impl::svg::TextRendering>(), "AzTextRendering"), (Layout::new::<AzTextRendering>(), "AzTextRendering"));
        assert_eq!((Layout::new::<azul_impl::svg::ImageRendering>(), "AzImageRendering"), (Layout::new::<AzImageRendering>(), "AzImageRendering"));
        assert_eq!((Layout::new::<azul_impl::svg::FontDatabase>(), "AzFontDatabase"), (Layout::new::<AzFontDatabase>(), "AzFontDatabase"));
        assert_eq!((Layout::new::<azul_impl::svg::Svg>(), "AzSvg"), (Layout::new::<AzSvg>(), "AzSvg"));
        assert_eq!((Layout::new::<azul_impl::svg::SvgXmlNode>(), "AzSvgXmlNode"), (Layout::new::<AzSvgXmlNode>(), "AzSvgXmlNode"));
        assert_eq!((Layout::new::<azul_impl::svg::SvgLineJoin>(), "AzSvgLineJoin"), (Layout::new::<AzSvgLineJoin>(), "AzSvgLineJoin"));
        assert_eq!((Layout::new::<azul_impl::task::TerminateTimer>(), "AzTerminateTimer"), (Layout::new::<AzTerminateTimer>(), "AzTerminateTimer"));
        assert_eq!((Layout::new::<azul_impl::task::ThreadSender>(), "AzThreadSender"), (Layout::new::<AzThreadSender>(), "AzThreadSender"));
        assert_eq!((Layout::new::<azul_impl::task::ThreadReceiver>(), "AzThreadReceiver"), (Layout::new::<AzThreadReceiver>(), "AzThreadReceiver"));
        assert_eq!((Layout::new::<azul_impl::task::ThreadSendMsg>(), "AzThreadSendMsg"), (Layout::new::<AzThreadSendMsg>(), "AzThreadSendMsg"));
        assert_eq!((Layout::new::<azul_impl::task::AzInstantPtr>(), "AzInstantPtr"), (Layout::new::<AzInstantPtr>(), "AzInstantPtr"));
        assert_eq!((Layout::new::<azul_impl::window::RendererOptions>(), "AzRendererOptions"), (Layout::new::<AzRendererOptions>(), "AzRendererOptions"));
        assert_eq!((Layout::new::<azul_impl::css::LayoutPoint>(), "AzLayoutPoint"), (Layout::new::<AzLayoutPoint>(), "AzLayoutPoint"));
        assert_eq!((Layout::new::<azul_impl::css::LayoutSize>(), "AzLayoutSize"), (Layout::new::<AzLayoutSize>(), "AzLayoutSize"));
        assert_eq!((Layout::new::<azul_impl::css::LayoutRect>(), "AzLayoutRect"), (Layout::new::<AzLayoutRect>(), "AzLayoutRect"));
        assert_eq!((Layout::new::<azul_impl::window::IOSHandle>(), "AzIOSHandle"), (Layout::new::<AzIOSHandle>(), "AzIOSHandle"));
        assert_eq!((Layout::new::<azul_impl::window::MacOSHandle>(), "AzMacOSHandle"), (Layout::new::<AzMacOSHandle>(), "AzMacOSHandle"));
        assert_eq!((Layout::new::<azul_impl::window::XlibHandle>(), "AzXlibHandle"), (Layout::new::<AzXlibHandle>(), "AzXlibHandle"));
        assert_eq!((Layout::new::<azul_impl::window::XcbHandle>(), "AzXcbHandle"), (Layout::new::<AzXcbHandle>(), "AzXcbHandle"));
        assert_eq!((Layout::new::<azul_impl::window::WaylandHandle>(), "AzWaylandHandle"), (Layout::new::<AzWaylandHandle>(), "AzWaylandHandle"));
        assert_eq!((Layout::new::<azul_impl::window::WindowsHandle>(), "AzWindowsHandle"), (Layout::new::<AzWindowsHandle>(), "AzWindowsHandle"));
        assert_eq!((Layout::new::<azul_impl::window::WebHandle>(), "AzWebHandle"), (Layout::new::<AzWebHandle>(), "AzWebHandle"));
        assert_eq!((Layout::new::<azul_impl::window::AndroidHandle>(), "AzAndroidHandle"), (Layout::new::<AzAndroidHandle>(), "AzAndroidHandle"));
        assert_eq!((Layout::new::<azul_impl::window::PhysicalPosition<i32>>(), "AzPhysicalPositionI32"), (Layout::new::<AzPhysicalPositionI32>(), "AzPhysicalPositionI32"));
        assert_eq!((Layout::new::<azul_impl::window::PhysicalSize<u32>>(), "AzPhysicalSizeU32"), (Layout::new::<AzPhysicalSizeU32>(), "AzPhysicalSizeU32"));
        assert_eq!((Layout::new::<azul_impl::window::LogicalPosition>(), "AzLogicalPosition"), (Layout::new::<AzLogicalPosition>(), "AzLogicalPosition"));
        assert_eq!((Layout::new::<azul_impl::window::IconKey>(), "AzIconKey"), (Layout::new::<AzIconKey>(), "AzIconKey"));
        assert_eq!((Layout::new::<azul_impl::window::AcceleratorKey>(), "AzAcceleratorKey"), (Layout::new::<AzAcceleratorKey>(), "AzAcceleratorKey"));
        assert_eq!((Layout::new::<azul_impl::window::WindowFlags>(), "AzWindowFlags"), (Layout::new::<AzWindowFlags>(), "AzWindowFlags"));
        assert_eq!((Layout::new::<azul_impl::window::DebugState>(), "AzDebugState"), (Layout::new::<AzDebugState>(), "AzDebugState"));
        assert_eq!((Layout::new::<azul_impl::window::CursorPosition>(), "AzCursorPosition"), (Layout::new::<AzCursorPosition>(), "AzCursorPosition"));
        assert_eq!((Layout::new::<azul_impl::window::MacWindowOptions>(), "AzMacWindowOptions"), (Layout::new::<AzMacWindowOptions>(), "AzMacWindowOptions"));
        assert_eq!((Layout::new::<azul_impl::window::WasmWindowOptions>(), "AzWasmWindowOptions"), (Layout::new::<AzWasmWindowOptions>(), "AzWasmWindowOptions"));
        assert_eq!((Layout::new::<azul_impl::window::WindowPosition>(), "AzWindowPosition"), (Layout::new::<AzWindowPosition>(), "AzWindowPosition"));
        assert_eq!((Layout::new::<azul_impl::window::ImePosition>(), "AzImePosition"), (Layout::new::<AzImePosition>(), "AzImePosition"));
        assert_eq!((Layout::new::<azul_impl::window::TouchState>(), "AzTouchState"), (Layout::new::<AzTouchState>(), "AzTouchState"));
        assert_eq!((Layout::new::<azul_impl::window::VideoMode>(), "AzVideoMode"), (Layout::new::<AzVideoMode>(), "AzVideoMode"));
        assert_eq!((Layout::new::<azul_impl::window::LogicalSize>(), "AzLogicalSize"), (Layout::new::<AzLogicalSize>(), "AzLogicalSize"));
        assert_eq!((Layout::new::<azul_impl::callbacks::LayoutCallback>(), "AzLayoutCallback"), (Layout::new::<AzLayoutCallback>(), "AzLayoutCallback"));
        assert_eq!((Layout::new::<azul_impl::callbacks::Callback>(), "AzCallback"), (Layout::new::<AzCallback>(), "AzCallback"));
        assert_eq!((Layout::new::<azul_impl::styled_dom::AzNodeId>(), "AzNodeId"), (Layout::new::<AzNodeId>(), "AzNodeId"));
        assert_eq!((Layout::new::<azul_impl::styled_dom::DomId>(), "AzDomId"), (Layout::new::<AzDomId>(), "AzDomId"));
        assert_eq!((Layout::new::<azul_impl::callbacks::DomNodeId>(), "AzDomNodeId"), (Layout::new::<AzDomNodeId>(), "AzDomNodeId"));
        assert_eq!((Layout::new::<azul_impl::callbacks::HidpiAdjustedBounds>(), "AzHidpiAdjustedBounds"), (Layout::new::<AzHidpiAdjustedBounds>(), "AzHidpiAdjustedBounds"));
        assert_eq!((Layout::new::<azul_impl::callbacks::IFrameCallback>(), "AzIFrameCallback"), (Layout::new::<AzIFrameCallback>(), "AzIFrameCallback"));
        assert_eq!((Layout::new::<azul_impl::callbacks::IFrameCallbackInfo>(), "AzIFrameCallbackInfo"), (Layout::new::<AzIFrameCallbackInfo>(), "AzIFrameCallbackInfo"));
        assert_eq!((Layout::new::<azul_impl::callbacks::GlCallback>(), "AzGlCallback"), (Layout::new::<AzGlCallback>(), "AzGlCallback"));
        assert_eq!((Layout::new::<azul_impl::callbacks::TimerCallback>(), "AzTimerCallback"), (Layout::new::<AzTimerCallback>(), "AzTimerCallback"));
        assert_eq!((Layout::new::<azul_impl::callbacks::TimerCallbackReturn>(), "AzTimerCallbackReturn"), (Layout::new::<AzTimerCallbackReturn>(), "AzTimerCallbackReturn"));
        assert_eq!((Layout::new::<azul_impl::callbacks::WriteBackCallback>(), "AzWriteBackCallback"), (Layout::new::<AzWriteBackCallback>(), "AzWriteBackCallback"));
        assert_eq!((Layout::new::<azul_impl::dom::GlTextureNode>(), "AzGlTextureNode"), (Layout::new::<AzGlTextureNode>(), "AzGlTextureNode"));
        assert_eq!((Layout::new::<azul_impl::dom::IFrameNode>(), "AzIFrameNode"), (Layout::new::<AzIFrameNode>(), "AzIFrameNode"));
        assert_eq!((Layout::new::<azul_impl::dom::NotEventFilter>(), "AzNotEventFilter"), (Layout::new::<AzNotEventFilter>(), "AzNotEventFilter"));
        assert_eq!((Layout::new::<azul_impl::dom::TabIndex>(), "AzTabIndex"), (Layout::new::<AzTabIndex>(), "AzTabIndex"));
        assert_eq!((Layout::new::<azul_impl::css::CssNthChildPattern>(), "AzCssNthChildPattern"), (Layout::new::<AzCssNthChildPattern>(), "AzCssNthChildPattern"));
        assert_eq!((Layout::new::<azul_impl::css::ColorU>(), "AzColorU"), (Layout::new::<AzColorU>(), "AzColorU"));
        assert_eq!((Layout::new::<azul_impl::css::FloatValue>(), "AzFloatValue"), (Layout::new::<AzFloatValue>(), "AzFloatValue"));
        assert_eq!((Layout::new::<azul_impl::css::PixelValue>(), "AzPixelValue"), (Layout::new::<AzPixelValue>(), "AzPixelValue"));
        assert_eq!((Layout::new::<azul_impl::css::PixelValueNoPercent>(), "AzPixelValueNoPercent"), (Layout::new::<AzPixelValueNoPercent>(), "AzPixelValueNoPercent"));
        assert_eq!((Layout::new::<azul_impl::css::StyleBoxShadow>(), "AzStyleBoxShadow"), (Layout::new::<AzStyleBoxShadow>(), "AzStyleBoxShadow"));
        assert_eq!((Layout::new::<azul_impl::css::LayoutBottom>(), "AzLayoutBottom"), (Layout::new::<AzLayoutBottom>(), "AzLayoutBottom"));
        assert_eq!((Layout::new::<azul_impl::css::LayoutFlexGrow>(), "AzLayoutFlexGrow"), (Layout::new::<AzLayoutFlexGrow>(), "AzLayoutFlexGrow"));
        assert_eq!((Layout::new::<azul_impl::css::LayoutFlexShrink>(), "AzLayoutFlexShrink"), (Layout::new::<AzLayoutFlexShrink>(), "AzLayoutFlexShrink"));
        assert_eq!((Layout::new::<azul_impl::css::LayoutHeight>(), "AzLayoutHeight"), (Layout::new::<AzLayoutHeight>(), "AzLayoutHeight"));
        assert_eq!((Layout::new::<azul_impl::css::LayoutLeft>(), "AzLayoutLeft"), (Layout::new::<AzLayoutLeft>(), "AzLayoutLeft"));
        assert_eq!((Layout::new::<azul_impl::css::LayoutMarginBottom>(), "AzLayoutMarginBottom"), (Layout::new::<AzLayoutMarginBottom>(), "AzLayoutMarginBottom"));
        assert_eq!((Layout::new::<azul_impl::css::LayoutMarginLeft>(), "AzLayoutMarginLeft"), (Layout::new::<AzLayoutMarginLeft>(), "AzLayoutMarginLeft"));
        assert_eq!((Layout::new::<azul_impl::css::LayoutMarginRight>(), "AzLayoutMarginRight"), (Layout::new::<AzLayoutMarginRight>(), "AzLayoutMarginRight"));
        assert_eq!((Layout::new::<azul_impl::css::LayoutMarginTop>(), "AzLayoutMarginTop"), (Layout::new::<AzLayoutMarginTop>(), "AzLayoutMarginTop"));
        assert_eq!((Layout::new::<azul_impl::css::LayoutMaxHeight>(), "AzLayoutMaxHeight"), (Layout::new::<AzLayoutMaxHeight>(), "AzLayoutMaxHeight"));
        assert_eq!((Layout::new::<azul_impl::css::LayoutMaxWidth>(), "AzLayoutMaxWidth"), (Layout::new::<AzLayoutMaxWidth>(), "AzLayoutMaxWidth"));
        assert_eq!((Layout::new::<azul_impl::css::LayoutMinHeight>(), "AzLayoutMinHeight"), (Layout::new::<AzLayoutMinHeight>(), "AzLayoutMinHeight"));
        assert_eq!((Layout::new::<azul_impl::css::LayoutMinWidth>(), "AzLayoutMinWidth"), (Layout::new::<AzLayoutMinWidth>(), "AzLayoutMinWidth"));
        assert_eq!((Layout::new::<azul_impl::css::LayoutPaddingBottom>(), "AzLayoutPaddingBottom"), (Layout::new::<AzLayoutPaddingBottom>(), "AzLayoutPaddingBottom"));
        assert_eq!((Layout::new::<azul_impl::css::LayoutPaddingLeft>(), "AzLayoutPaddingLeft"), (Layout::new::<AzLayoutPaddingLeft>(), "AzLayoutPaddingLeft"));
        assert_eq!((Layout::new::<azul_impl::css::LayoutPaddingRight>(), "AzLayoutPaddingRight"), (Layout::new::<AzLayoutPaddingRight>(), "AzLayoutPaddingRight"));
        assert_eq!((Layout::new::<azul_impl::css::LayoutPaddingTop>(), "AzLayoutPaddingTop"), (Layout::new::<AzLayoutPaddingTop>(), "AzLayoutPaddingTop"));
        assert_eq!((Layout::new::<azul_impl::css::LayoutRight>(), "AzLayoutRight"), (Layout::new::<AzLayoutRight>(), "AzLayoutRight"));
        assert_eq!((Layout::new::<azul_impl::css::LayoutTop>(), "AzLayoutTop"), (Layout::new::<AzLayoutTop>(), "AzLayoutTop"));
        assert_eq!((Layout::new::<azul_impl::css::LayoutWidth>(), "AzLayoutWidth"), (Layout::new::<AzLayoutWidth>(), "AzLayoutWidth"));
        assert_eq!((Layout::new::<azul_impl::css::PercentageValue>(), "AzPercentageValue"), (Layout::new::<AzPercentageValue>(), "AzPercentageValue"));
        assert_eq!((Layout::new::<azul_impl::css::AngleValue>(), "AzAngleValue"), (Layout::new::<AzAngleValue>(), "AzAngleValue"));
        assert_eq!((Layout::new::<azul_impl::css::DirectionCorners>(), "AzDirectionCorners"), (Layout::new::<AzDirectionCorners>(), "AzDirectionCorners"));
        assert_eq!((Layout::new::<azul_impl::css::Direction>(), "AzDirection"), (Layout::new::<AzDirection>(), "AzDirection"));
        assert_eq!((Layout::new::<azul_impl::css::BackgroundPositionHorizontal>(), "AzBackgroundPositionHorizontal"), (Layout::new::<AzBackgroundPositionHorizontal>(), "AzBackgroundPositionHorizontal"));
        assert_eq!((Layout::new::<azul_impl::css::BackgroundPositionVertical>(), "AzBackgroundPositionVertical"), (Layout::new::<AzBackgroundPositionVertical>(), "AzBackgroundPositionVertical"));
        assert_eq!((Layout::new::<azul_impl::css::StyleBackgroundPosition>(), "AzStyleBackgroundPosition"), (Layout::new::<AzStyleBackgroundPosition>(), "AzStyleBackgroundPosition"));
        assert_eq!((Layout::new::<azul_impl::css::StyleBackgroundSize>(), "AzStyleBackgroundSize"), (Layout::new::<AzStyleBackgroundSize>(), "AzStyleBackgroundSize"));
        assert_eq!((Layout::new::<azul_impl::css::StyleBorderBottomColor>(), "AzStyleBorderBottomColor"), (Layout::new::<AzStyleBorderBottomColor>(), "AzStyleBorderBottomColor"));
        assert_eq!((Layout::new::<azul_impl::css::StyleBorderBottomLeftRadius>(), "AzStyleBorderBottomLeftRadius"), (Layout::new::<AzStyleBorderBottomLeftRadius>(), "AzStyleBorderBottomLeftRadius"));
        assert_eq!((Layout::new::<azul_impl::css::StyleBorderBottomRightRadius>(), "AzStyleBorderBottomRightRadius"), (Layout::new::<AzStyleBorderBottomRightRadius>(), "AzStyleBorderBottomRightRadius"));
        assert_eq!((Layout::new::<azul_impl::css::StyleBorderBottomStyle>(), "AzStyleBorderBottomStyle"), (Layout::new::<AzStyleBorderBottomStyle>(), "AzStyleBorderBottomStyle"));
        assert_eq!((Layout::new::<azul_impl::css::LayoutBorderBottomWidth>(), "AzLayoutBorderBottomWidth"), (Layout::new::<AzLayoutBorderBottomWidth>(), "AzLayoutBorderBottomWidth"));
        assert_eq!((Layout::new::<azul_impl::css::StyleBorderLeftColor>(), "AzStyleBorderLeftColor"), (Layout::new::<AzStyleBorderLeftColor>(), "AzStyleBorderLeftColor"));
        assert_eq!((Layout::new::<azul_impl::css::StyleBorderLeftStyle>(), "AzStyleBorderLeftStyle"), (Layout::new::<AzStyleBorderLeftStyle>(), "AzStyleBorderLeftStyle"));
        assert_eq!((Layout::new::<azul_impl::css::LayoutBorderLeftWidth>(), "AzLayoutBorderLeftWidth"), (Layout::new::<AzLayoutBorderLeftWidth>(), "AzLayoutBorderLeftWidth"));
        assert_eq!((Layout::new::<azul_impl::css::StyleBorderRightColor>(), "AzStyleBorderRightColor"), (Layout::new::<AzStyleBorderRightColor>(), "AzStyleBorderRightColor"));
        assert_eq!((Layout::new::<azul_impl::css::StyleBorderRightStyle>(), "AzStyleBorderRightStyle"), (Layout::new::<AzStyleBorderRightStyle>(), "AzStyleBorderRightStyle"));
        assert_eq!((Layout::new::<azul_impl::css::LayoutBorderRightWidth>(), "AzLayoutBorderRightWidth"), (Layout::new::<AzLayoutBorderRightWidth>(), "AzLayoutBorderRightWidth"));
        assert_eq!((Layout::new::<azul_impl::css::StyleBorderTopColor>(), "AzStyleBorderTopColor"), (Layout::new::<AzStyleBorderTopColor>(), "AzStyleBorderTopColor"));
        assert_eq!((Layout::new::<azul_impl::css::StyleBorderTopLeftRadius>(), "AzStyleBorderTopLeftRadius"), (Layout::new::<AzStyleBorderTopLeftRadius>(), "AzStyleBorderTopLeftRadius"));
        assert_eq!((Layout::new::<azul_impl::css::StyleBorderTopRightRadius>(), "AzStyleBorderTopRightRadius"), (Layout::new::<AzStyleBorderTopRightRadius>(), "AzStyleBorderTopRightRadius"));
        assert_eq!((Layout::new::<azul_impl::css::StyleBorderTopStyle>(), "AzStyleBorderTopStyle"), (Layout::new::<AzStyleBorderTopStyle>(), "AzStyleBorderTopStyle"));
        assert_eq!((Layout::new::<azul_impl::css::LayoutBorderTopWidth>(), "AzLayoutBorderTopWidth"), (Layout::new::<AzLayoutBorderTopWidth>(), "AzLayoutBorderTopWidth"));
        assert_eq!((Layout::new::<azul_impl::css::StyleFontSize>(), "AzStyleFontSize"), (Layout::new::<AzStyleFontSize>(), "AzStyleFontSize"));
        assert_eq!((Layout::new::<azul_impl::css::StyleLetterSpacing>(), "AzStyleLetterSpacing"), (Layout::new::<AzStyleLetterSpacing>(), "AzStyleLetterSpacing"));
        assert_eq!((Layout::new::<azul_impl::css::StyleLineHeight>(), "AzStyleLineHeight"), (Layout::new::<AzStyleLineHeight>(), "AzStyleLineHeight"));
        assert_eq!((Layout::new::<azul_impl::css::StyleTabWidth>(), "AzStyleTabWidth"), (Layout::new::<AzStyleTabWidth>(), "AzStyleTabWidth"));
        assert_eq!((Layout::new::<azul_impl::css::StyleOpacity>(), "AzStyleOpacity"), (Layout::new::<AzStyleOpacity>(), "AzStyleOpacity"));
        assert_eq!((Layout::new::<azul_impl::css::StyleTransformOrigin>(), "AzStyleTransformOrigin"), (Layout::new::<AzStyleTransformOrigin>(), "AzStyleTransformOrigin"));
        assert_eq!((Layout::new::<azul_impl::css::StyleTransformOrigin>(), "AzStylePerspectiveOrigin"), (Layout::new::<AzStylePerspectiveOrigin>(), "AzStylePerspectiveOrigin"));
        assert_eq!((Layout::new::<azul_impl::css::StyleTransformMatrix2D>(), "AzStyleTransformMatrix2D"), (Layout::new::<AzStyleTransformMatrix2D>(), "AzStyleTransformMatrix2D"));
        assert_eq!((Layout::new::<azul_impl::css::StyleTransformMatrix3D>(), "AzStyleTransformMatrix3D"), (Layout::new::<AzStyleTransformMatrix3D>(), "AzStyleTransformMatrix3D"));
        assert_eq!((Layout::new::<azul_impl::css::StyleTransformTranslate2D>(), "AzStyleTransformTranslate2D"), (Layout::new::<AzStyleTransformTranslate2D>(), "AzStyleTransformTranslate2D"));
        assert_eq!((Layout::new::<azul_impl::css::StyleTransformTranslate3D>(), "AzStyleTransformTranslate3D"), (Layout::new::<AzStyleTransformTranslate3D>(), "AzStyleTransformTranslate3D"));
        assert_eq!((Layout::new::<azul_impl::css::StyleTransformRotate3D>(), "AzStyleTransformRotate3D"), (Layout::new::<AzStyleTransformRotate3D>(), "AzStyleTransformRotate3D"));
        assert_eq!((Layout::new::<azul_impl::css::StyleTransformScale2D>(), "AzStyleTransformScale2D"), (Layout::new::<AzStyleTransformScale2D>(), "AzStyleTransformScale2D"));
        assert_eq!((Layout::new::<azul_impl::css::StyleTransformScale3D>(), "AzStyleTransformScale3D"), (Layout::new::<AzStyleTransformScale3D>(), "AzStyleTransformScale3D"));
        assert_eq!((Layout::new::<azul_impl::css::StyleTransformSkew2D>(), "AzStyleTransformSkew2D"), (Layout::new::<AzStyleTransformSkew2D>(), "AzStyleTransformSkew2D"));
        assert_eq!((Layout::new::<azul_impl::css::StyleTextColor>(), "AzStyleTextColor"), (Layout::new::<AzStyleTextColor>(), "AzStyleTextColor"));
        assert_eq!((Layout::new::<azul_impl::css::StyleWordSpacing>(), "AzStyleWordSpacing"), (Layout::new::<AzStyleWordSpacing>(), "AzStyleWordSpacing"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<StyleBoxShadow>>(), "AzStyleBoxShadowValue"), (Layout::new::<AzStyleBoxShadowValue>(), "AzStyleBoxShadowValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<LayoutAlignContent>>(), "AzLayoutAlignContentValue"), (Layout::new::<AzLayoutAlignContentValue>(), "AzLayoutAlignContentValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<LayoutAlignItems>>(), "AzLayoutAlignItemsValue"), (Layout::new::<AzLayoutAlignItemsValue>(), "AzLayoutAlignItemsValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<LayoutBottom>>(), "AzLayoutBottomValue"), (Layout::new::<AzLayoutBottomValue>(), "AzLayoutBottomValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<LayoutBoxSizing>>(), "AzLayoutBoxSizingValue"), (Layout::new::<AzLayoutBoxSizingValue>(), "AzLayoutBoxSizingValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<LayoutFlexDirection>>(), "AzLayoutFlexDirectionValue"), (Layout::new::<AzLayoutFlexDirectionValue>(), "AzLayoutFlexDirectionValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<LayoutDisplay>>(), "AzLayoutDisplayValue"), (Layout::new::<AzLayoutDisplayValue>(), "AzLayoutDisplayValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<LayoutFlexGrow>>(), "AzLayoutFlexGrowValue"), (Layout::new::<AzLayoutFlexGrowValue>(), "AzLayoutFlexGrowValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<LayoutFlexShrink>>(), "AzLayoutFlexShrinkValue"), (Layout::new::<AzLayoutFlexShrinkValue>(), "AzLayoutFlexShrinkValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<LayoutFloat>>(), "AzLayoutFloatValue"), (Layout::new::<AzLayoutFloatValue>(), "AzLayoutFloatValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<LayoutHeight>>(), "AzLayoutHeightValue"), (Layout::new::<AzLayoutHeightValue>(), "AzLayoutHeightValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<LayoutJustifyContent>>(), "AzLayoutJustifyContentValue"), (Layout::new::<AzLayoutJustifyContentValue>(), "AzLayoutJustifyContentValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<LayoutLeft>>(), "AzLayoutLeftValue"), (Layout::new::<AzLayoutLeftValue>(), "AzLayoutLeftValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<LayoutMarginBottom>>(), "AzLayoutMarginBottomValue"), (Layout::new::<AzLayoutMarginBottomValue>(), "AzLayoutMarginBottomValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<LayoutMarginLeft>>(), "AzLayoutMarginLeftValue"), (Layout::new::<AzLayoutMarginLeftValue>(), "AzLayoutMarginLeftValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<LayoutMarginRight>>(), "AzLayoutMarginRightValue"), (Layout::new::<AzLayoutMarginRightValue>(), "AzLayoutMarginRightValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<LayoutMarginTop>>(), "AzLayoutMarginTopValue"), (Layout::new::<AzLayoutMarginTopValue>(), "AzLayoutMarginTopValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<LayoutMaxHeight>>(), "AzLayoutMaxHeightValue"), (Layout::new::<AzLayoutMaxHeightValue>(), "AzLayoutMaxHeightValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<LayoutMaxWidth>>(), "AzLayoutMaxWidthValue"), (Layout::new::<AzLayoutMaxWidthValue>(), "AzLayoutMaxWidthValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<LayoutMinHeight>>(), "AzLayoutMinHeightValue"), (Layout::new::<AzLayoutMinHeightValue>(), "AzLayoutMinHeightValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<LayoutMinWidth>>(), "AzLayoutMinWidthValue"), (Layout::new::<AzLayoutMinWidthValue>(), "AzLayoutMinWidthValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<LayoutPaddingBottom>>(), "AzLayoutPaddingBottomValue"), (Layout::new::<AzLayoutPaddingBottomValue>(), "AzLayoutPaddingBottomValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<LayoutPaddingLeft>>(), "AzLayoutPaddingLeftValue"), (Layout::new::<AzLayoutPaddingLeftValue>(), "AzLayoutPaddingLeftValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<LayoutPaddingRight>>(), "AzLayoutPaddingRightValue"), (Layout::new::<AzLayoutPaddingRightValue>(), "AzLayoutPaddingRightValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<LayoutPaddingTop>>(), "AzLayoutPaddingTopValue"), (Layout::new::<AzLayoutPaddingTopValue>(), "AzLayoutPaddingTopValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<LayoutPosition>>(), "AzLayoutPositionValue"), (Layout::new::<AzLayoutPositionValue>(), "AzLayoutPositionValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<LayoutRight>>(), "AzLayoutRightValue"), (Layout::new::<AzLayoutRightValue>(), "AzLayoutRightValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<LayoutTop>>(), "AzLayoutTopValue"), (Layout::new::<AzLayoutTopValue>(), "AzLayoutTopValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<LayoutWidth>>(), "AzLayoutWidthValue"), (Layout::new::<AzLayoutWidthValue>(), "AzLayoutWidthValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<LayoutFlexWrap>>(), "AzLayoutFlexWrapValue"), (Layout::new::<AzLayoutFlexWrapValue>(), "AzLayoutFlexWrapValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<LayoutOverflow>>(), "AzLayoutOverflowValue"), (Layout::new::<AzLayoutOverflowValue>(), "AzLayoutOverflowValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<StyleBorderBottomColor>>(), "AzStyleBorderBottomColorValue"), (Layout::new::<AzStyleBorderBottomColorValue>(), "AzStyleBorderBottomColorValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<StyleBorderBottomLeftRadius>>(), "AzStyleBorderBottomLeftRadiusValue"), (Layout::new::<AzStyleBorderBottomLeftRadiusValue>(), "AzStyleBorderBottomLeftRadiusValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<StyleBorderBottomRightRadius>>(), "AzStyleBorderBottomRightRadiusValue"), (Layout::new::<AzStyleBorderBottomRightRadiusValue>(), "AzStyleBorderBottomRightRadiusValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<StyleBorderBottomStyle>>(), "AzStyleBorderBottomStyleValue"), (Layout::new::<AzStyleBorderBottomStyleValue>(), "AzStyleBorderBottomStyleValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<LayoutBorderBottomWidth>>(), "AzLayoutBorderBottomWidthValue"), (Layout::new::<AzLayoutBorderBottomWidthValue>(), "AzLayoutBorderBottomWidthValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<StyleBorderLeftColor>>(), "AzStyleBorderLeftColorValue"), (Layout::new::<AzStyleBorderLeftColorValue>(), "AzStyleBorderLeftColorValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<StyleBorderLeftStyle>>(), "AzStyleBorderLeftStyleValue"), (Layout::new::<AzStyleBorderLeftStyleValue>(), "AzStyleBorderLeftStyleValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<LayoutBorderLeftWidth>>(), "AzLayoutBorderLeftWidthValue"), (Layout::new::<AzLayoutBorderLeftWidthValue>(), "AzLayoutBorderLeftWidthValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<StyleBorderRightColor>>(), "AzStyleBorderRightColorValue"), (Layout::new::<AzStyleBorderRightColorValue>(), "AzStyleBorderRightColorValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<StyleBorderRightStyle>>(), "AzStyleBorderRightStyleValue"), (Layout::new::<AzStyleBorderRightStyleValue>(), "AzStyleBorderRightStyleValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<LayoutBorderRightWidth>>(), "AzLayoutBorderRightWidthValue"), (Layout::new::<AzLayoutBorderRightWidthValue>(), "AzLayoutBorderRightWidthValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<StyleBorderTopColor>>(), "AzStyleBorderTopColorValue"), (Layout::new::<AzStyleBorderTopColorValue>(), "AzStyleBorderTopColorValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<StyleBorderTopLeftRadius>>(), "AzStyleBorderTopLeftRadiusValue"), (Layout::new::<AzStyleBorderTopLeftRadiusValue>(), "AzStyleBorderTopLeftRadiusValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<StyleBorderTopRightRadius>>(), "AzStyleBorderTopRightRadiusValue"), (Layout::new::<AzStyleBorderTopRightRadiusValue>(), "AzStyleBorderTopRightRadiusValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<StyleBorderTopStyle>>(), "AzStyleBorderTopStyleValue"), (Layout::new::<AzStyleBorderTopStyleValue>(), "AzStyleBorderTopStyleValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<LayoutBorderTopWidth>>(), "AzLayoutBorderTopWidthValue"), (Layout::new::<AzLayoutBorderTopWidthValue>(), "AzLayoutBorderTopWidthValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<StyleCursor>>(), "AzStyleCursorValue"), (Layout::new::<AzStyleCursorValue>(), "AzStyleCursorValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<StyleFontSize>>(), "AzStyleFontSizeValue"), (Layout::new::<AzStyleFontSizeValue>(), "AzStyleFontSizeValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<StyleLetterSpacing>>(), "AzStyleLetterSpacingValue"), (Layout::new::<AzStyleLetterSpacingValue>(), "AzStyleLetterSpacingValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<StyleLineHeight>>(), "AzStyleLineHeightValue"), (Layout::new::<AzStyleLineHeightValue>(), "AzStyleLineHeightValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<StyleTabWidth>>(), "AzStyleTabWidthValue"), (Layout::new::<AzStyleTabWidthValue>(), "AzStyleTabWidthValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<StyleTextAlignmentHorz>>(), "AzStyleTextAlignmentHorzValue"), (Layout::new::<AzStyleTextAlignmentHorzValue>(), "AzStyleTextAlignmentHorzValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<StyleTextColor>>(), "AzStyleTextColorValue"), (Layout::new::<AzStyleTextColorValue>(), "AzStyleTextColorValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<StyleWordSpacing>>(), "AzStyleWordSpacingValue"), (Layout::new::<AzStyleWordSpacingValue>(), "AzStyleWordSpacingValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<StyleOpacity>>(), "AzStyleOpacityValue"), (Layout::new::<AzStyleOpacityValue>(), "AzStyleOpacityValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<StyleTransformOrigin>>(), "AzStyleTransformOriginValue"), (Layout::new::<AzStyleTransformOriginValue>(), "AzStyleTransformOriginValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<StylePerspectiveOrigin>>(), "AzStylePerspectiveOriginValue"), (Layout::new::<AzStylePerspectiveOriginValue>(), "AzStylePerspectiveOriginValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<StyleBackfaceVisibility>>(), "AzStyleBackfaceVisibilityValue"), (Layout::new::<AzStyleBackfaceVisibilityValue>(), "AzStyleBackfaceVisibilityValue"));
        assert_eq!((Layout::new::<azul_impl::styled_dom::AzNode>(), "AzNode"), (Layout::new::<AzNode>(), "AzNode"));
        assert_eq!((Layout::new::<azul_impl::style::CascadeInfo>(), "AzCascadeInfo"), (Layout::new::<AzCascadeInfo>(), "AzCascadeInfo"));
        assert_eq!((Layout::new::<azul_impl::styled_dom::StyledNodeState>(), "AzStyledNodeState"), (Layout::new::<AzStyledNodeState>(), "AzStyledNodeState"));
        assert_eq!((Layout::new::<azul_impl::styled_dom::AzTagId>(), "AzTagId"), (Layout::new::<AzTagId>(), "AzTagId"));
        assert_eq!((Layout::new::<azul_impl::styled_dom::ParentWithNodeDepth>(), "AzParentWithNodeDepth"), (Layout::new::<AzParentWithNodeDepth>(), "AzParentWithNodeDepth"));
        assert_eq!((Layout::new::<azul_impl::gl::GlShaderPrecisionFormatReturn>(), "AzGlShaderPrecisionFormatReturn"), (Layout::new::<AzGlShaderPrecisionFormatReturn>(), "AzGlShaderPrecisionFormatReturn"));
        assert_eq!((Layout::new::<azul_impl::gl::U8VecRef>(), "AzU8VecRef"), (Layout::new::<AzU8VecRef>(), "AzU8VecRef"));
        assert_eq!((Layout::new::<azul_impl::gl::U8VecRefMut>(), "AzU8VecRefMut"), (Layout::new::<AzU8VecRefMut>(), "AzU8VecRefMut"));
        assert_eq!((Layout::new::<azul_impl::gl::F32VecRef>(), "AzF32VecRef"), (Layout::new::<AzF32VecRef>(), "AzF32VecRef"));
        assert_eq!((Layout::new::<azul_impl::gl::I32VecRef>(), "AzI32VecRef"), (Layout::new::<AzI32VecRef>(), "AzI32VecRef"));
        assert_eq!((Layout::new::<azul_impl::gl::GLuintVecRef>(), "AzGLuintVecRef"), (Layout::new::<AzGLuintVecRef>(), "AzGLuintVecRef"));
        assert_eq!((Layout::new::<azul_impl::gl::GLenumVecRef>(), "AzGLenumVecRef"), (Layout::new::<AzGLenumVecRef>(), "AzGLenumVecRef"));
        assert_eq!((Layout::new::<azul_impl::gl::GLintVecRefMut>(), "AzGLintVecRefMut"), (Layout::new::<AzGLintVecRefMut>(), "AzGLintVecRefMut"));
        assert_eq!((Layout::new::<azul_impl::gl::GLint64VecRefMut>(), "AzGLint64VecRefMut"), (Layout::new::<AzGLint64VecRefMut>(), "AzGLint64VecRefMut"));
        assert_eq!((Layout::new::<azul_impl::gl::GLbooleanVecRefMut>(), "AzGLbooleanVecRefMut"), (Layout::new::<AzGLbooleanVecRefMut>(), "AzGLbooleanVecRefMut"));
        assert_eq!((Layout::new::<azul_impl::gl::GLfloatVecRefMut>(), "AzGLfloatVecRefMut"), (Layout::new::<AzGLfloatVecRefMut>(), "AzGLfloatVecRefMut"));
        assert_eq!((Layout::new::<azul_impl::gl::Refstr>(), "AzRefstr"), (Layout::new::<AzRefstr>(), "AzRefstr"));
        assert_eq!((Layout::new::<azul_impl::gl::TextureFlags>(), "AzTextureFlags"), (Layout::new::<AzTextureFlags>(), "AzTextureFlags"));
        assert_eq!((Layout::new::<azul_impl::resources::ImageId>(), "AzImageId"), (Layout::new::<AzImageId>(), "AzImageId"));
        assert_eq!((Layout::new::<azul_impl::resources::FontId>(), "AzFontId"), (Layout::new::<AzFontId>(), "AzFontId"));
        assert_eq!((Layout::new::<azul_impl::svg::SvgCircle>(), "AzSvgCircle"), (Layout::new::<AzSvgCircle>(), "AzSvgCircle"));
        assert_eq!((Layout::new::<azul_impl::svg::SvgPoint>(), "AzSvgPoint"), (Layout::new::<AzSvgPoint>(), "AzSvgPoint"));
        assert_eq!((Layout::new::<azul_impl::svg::SvgVertex>(), "AzSvgVertex"), (Layout::new::<AzSvgVertex>(), "AzSvgVertex"));
        assert_eq!((Layout::new::<azul_impl::svg::SvgQuadraticCurve>(), "AzSvgQuadraticCurve"), (Layout::new::<AzSvgQuadraticCurve>(), "AzSvgQuadraticCurve"));
        assert_eq!((Layout::new::<azul_impl::svg::SvgCubicCurve>(), "AzSvgCubicCurve"), (Layout::new::<AzSvgCubicCurve>(), "AzSvgCubicCurve"));
        assert_eq!((Layout::new::<azul_impl::svg::SvgRect>(), "AzSvgRect"), (Layout::new::<AzSvgRect>(), "AzSvgRect"));
        assert_eq!((Layout::new::<azul_impl::svg::SvgFitTo>(), "AzSvgFitTo"), (Layout::new::<AzSvgFitTo>(), "AzSvgFitTo"));
        assert_eq!((Layout::new::<azul_impl::svg::SvgDashPattern>(), "AzSvgDashPattern"), (Layout::new::<AzSvgDashPattern>(), "AzSvgDashPattern"));
        assert_eq!((Layout::new::<azul_impl::svg::SvgFillStyle>(), "AzSvgFillStyle"), (Layout::new::<AzSvgFillStyle>(), "AzSvgFillStyle"));
        assert_eq!((Layout::new::<azul_impl::task::TimerId>(), "AzTimerId"), (Layout::new::<AzTimerId>(), "AzTimerId"));
        assert_eq!((Layout::new::<azul_impl::task::ThreadId>(), "AzThreadId"), (Layout::new::<AzThreadId>(), "AzThreadId"));
        assert_eq!((Layout::new::<azul_impl::task::ThreadWriteBackMsg>(), "AzThreadWriteBackMsg"), (Layout::new::<AzThreadWriteBackMsg>(), "AzThreadWriteBackMsg"));
        assert_eq!((Layout::new::<azul_impl::task::CreateThreadCallback>(), "AzCreateThreadFn"), (Layout::new::<AzCreateThreadFn>(), "AzCreateThreadFn"));
        assert_eq!((Layout::new::<azul_impl::task::GetSystemTimeCallback>(), "AzGetSystemTimeFn"), (Layout::new::<AzGetSystemTimeFn>(), "AzGetSystemTimeFn"));
        assert_eq!((Layout::new::<azul_impl::task::CheckThreadFinishedCallback>(), "AzCheckThreadFinishedFn"), (Layout::new::<AzCheckThreadFinishedFn>(), "AzCheckThreadFinishedFn"));
        assert_eq!((Layout::new::<azul_impl::task::LibrarySendThreadMsgCallback>(), "AzLibrarySendThreadMsgFn"), (Layout::new::<AzLibrarySendThreadMsgFn>(), "AzLibrarySendThreadMsgFn"));
        assert_eq!((Layout::new::<azul_impl::task::LibraryReceiveThreadMsgCallback>(), "AzLibraryReceiveThreadMsgFn"), (Layout::new::<AzLibraryReceiveThreadMsgFn>(), "AzLibraryReceiveThreadMsgFn"));
        assert_eq!((Layout::new::<azul_impl::task::ThreadRecvCallback>(), "AzThreadRecvFn"), (Layout::new::<AzThreadRecvFn>(), "AzThreadRecvFn"));
        assert_eq!((Layout::new::<azul_impl::task::ThreadSendCallback>(), "AzThreadSendFn"), (Layout::new::<AzThreadSendFn>(), "AzThreadSendFn"));
        assert_eq!((Layout::new::<azul_impl::task::ThreadDestructorCallback>(), "AzThreadDestructorFn"), (Layout::new::<AzThreadDestructorFn>(), "AzThreadDestructorFn"));
        assert_eq!((Layout::new::<azul_impl::task::ThreadReceiverDestructorCallback>(), "AzThreadReceiverDestructorFn"), (Layout::new::<AzThreadReceiverDestructorFn>(), "AzThreadReceiverDestructorFn"));
        assert_eq!((Layout::new::<azul_impl::task::ThreadSenderDestructorCallback>(), "AzThreadSenderDestructorFn"), (Layout::new::<AzThreadSenderDestructorFn>(), "AzThreadSenderDestructorFn"));
        assert_eq!((Layout::new::<azul_impl::window::MonitorVecDestructor>(), "AzMonitorVecDestructor"), (Layout::new::<AzMonitorVecDestructor>(), "AzMonitorVecDestructor"));
        assert_eq!((Layout::new::<azul_impl::window::VideoModeVecDestructor>(), "AzVideoModeVecDestructor"), (Layout::new::<AzVideoModeVecDestructor>(), "AzVideoModeVecDestructor"));
        assert_eq!((Layout::new::<azul_impl::dom::DomVecDestructor>(), "AzDomVecDestructor"), (Layout::new::<AzDomVecDestructor>(), "AzDomVecDestructor"));
        assert_eq!((Layout::new::<azul_impl::dom::IdOrClassVecDestructor>(), "AzIdOrClassVecDestructor"), (Layout::new::<AzIdOrClassVecDestructor>(), "AzIdOrClassVecDestructor"));
        assert_eq!((Layout::new::<azul_impl::dom::NodeDataInlineCssPropertyVecDestructor>(), "AzNodeDataInlineCssPropertyVecDestructor"), (Layout::new::<AzNodeDataInlineCssPropertyVecDestructor>(), "AzNodeDataInlineCssPropertyVecDestructor"));
        assert_eq!((Layout::new::<azul_impl::css::StyleBackgroundContentVecDestructor>(), "AzStyleBackgroundContentVecDestructor"), (Layout::new::<AzStyleBackgroundContentVecDestructor>(), "AzStyleBackgroundContentVecDestructor"));
        assert_eq!((Layout::new::<azul_impl::css::StyleBackgroundPositionVecDestructor>(), "AzStyleBackgroundPositionVecDestructor"), (Layout::new::<AzStyleBackgroundPositionVecDestructor>(), "AzStyleBackgroundPositionVecDestructor"));
        assert_eq!((Layout::new::<azul_impl::css::StyleBackgroundRepeatVecDestructor>(), "AzStyleBackgroundRepeatVecDestructor"), (Layout::new::<AzStyleBackgroundRepeatVecDestructor>(), "AzStyleBackgroundRepeatVecDestructor"));
        assert_eq!((Layout::new::<azul_impl::css::StyleBackgroundSizeVecDestructor>(), "AzStyleBackgroundSizeVecDestructor"), (Layout::new::<AzStyleBackgroundSizeVecDestructor>(), "AzStyleBackgroundSizeVecDestructor"));
        assert_eq!((Layout::new::<azul_impl::css::StyleTransformVecDestructor>(), "AzStyleTransformVecDestructor"), (Layout::new::<AzStyleTransformVecDestructor>(), "AzStyleTransformVecDestructor"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyVecDestructor>(), "AzCssPropertyVecDestructor"), (Layout::new::<AzCssPropertyVecDestructor>(), "AzCssPropertyVecDestructor"));
        assert_eq!((Layout::new::<azul_impl::svg::SvgMultiPolygonVecDestructor>(), "AzSvgMultiPolygonVecDestructor"), (Layout::new::<AzSvgMultiPolygonVecDestructor>(), "AzSvgMultiPolygonVecDestructor"));
        assert_eq!((Layout::new::<azul_impl::svg::SvgPathVecDestructor>(), "AzSvgPathVecDestructor"), (Layout::new::<AzSvgPathVecDestructor>(), "AzSvgPathVecDestructor"));
        assert_eq!((Layout::new::<azul_impl::gl::VertexAttributeVecDestructor>(), "AzVertexAttributeVecDestructor"), (Layout::new::<AzVertexAttributeVecDestructor>(), "AzVertexAttributeVecDestructor"));
        assert_eq!((Layout::new::<azul_impl::svg::SvgPathElementVecDestructor>(), "AzSvgPathElementVecDestructor"), (Layout::new::<AzSvgPathElementVecDestructor>(), "AzSvgPathElementVecDestructor"));
        assert_eq!((Layout::new::<azul_impl::svg::SvgVertexVecDestructor>(), "AzSvgVertexVecDestructor"), (Layout::new::<AzSvgVertexVecDestructor>(), "AzSvgVertexVecDestructor"));
        assert_eq!((Layout::new::<azul_impl::css::U32VecDestructor>(), "AzU32VecDestructor"), (Layout::new::<AzU32VecDestructor>(), "AzU32VecDestructor"));
        assert_eq!((Layout::new::<azul_impl::window::XWindowTypeVecDestructor>(), "AzXWindowTypeVecDestructor"), (Layout::new::<AzXWindowTypeVecDestructor>(), "AzXWindowTypeVecDestructor"));
        assert_eq!((Layout::new::<azul_impl::window::VirtualKeyCodeVecDestructor>(), "AzVirtualKeyCodeVecDestructor"), (Layout::new::<AzVirtualKeyCodeVecDestructor>(), "AzVirtualKeyCodeVecDestructor"));
        assert_eq!((Layout::new::<azul_impl::style::CascadeInfoVecDestructor>(), "AzCascadeInfoVecDestructor"), (Layout::new::<AzCascadeInfoVecDestructor>(), "AzCascadeInfoVecDestructor"));
        assert_eq!((Layout::new::<azul_impl::window::ScanCodeVecDestructor>(), "AzScanCodeVecDestructor"), (Layout::new::<AzScanCodeVecDestructor>(), "AzScanCodeVecDestructor"));
        assert_eq!((Layout::new::<azul_impl::css::CssDeclarationVecDestructor>(), "AzCssDeclarationVecDestructor"), (Layout::new::<AzCssDeclarationVecDestructor>(), "AzCssDeclarationVecDestructor"));
        assert_eq!((Layout::new::<azul_impl::css::CssPathSelectorVecDestructor>(), "AzCssPathSelectorVecDestructor"), (Layout::new::<AzCssPathSelectorVecDestructor>(), "AzCssPathSelectorVecDestructor"));
        assert_eq!((Layout::new::<azul_impl::css::StylesheetVecDestructor>(), "AzStylesheetVecDestructor"), (Layout::new::<AzStylesheetVecDestructor>(), "AzStylesheetVecDestructor"));
        assert_eq!((Layout::new::<azul_impl::css::CssRuleBlockVecDestructor>(), "AzCssRuleBlockVecDestructor"), (Layout::new::<AzCssRuleBlockVecDestructor>(), "AzCssRuleBlockVecDestructor"));
        assert_eq!((Layout::new::<azul_impl::css::U8VecDestructor>(), "AzU8VecDestructor"), (Layout::new::<AzU8VecDestructor>(), "AzU8VecDestructor"));
        assert_eq!((Layout::new::<azul_impl::dom::CallbackDataVecDestructor>(), "AzCallbackDataVecDestructor"), (Layout::new::<AzCallbackDataVecDestructor>(), "AzCallbackDataVecDestructor"));
        assert_eq!((Layout::new::<azul_impl::gl::AzDebugMessageVecDestructor>(), "AzDebugMessageVecDestructor"), (Layout::new::<AzDebugMessageVecDestructor>(), "AzDebugMessageVecDestructor"));
        assert_eq!((Layout::new::<azul_impl::gl::GLuintVecDestructor>(), "AzGLuintVecDestructor"), (Layout::new::<AzGLuintVecDestructor>(), "AzGLuintVecDestructor"));
        assert_eq!((Layout::new::<azul_impl::gl::GLintVecDestructor>(), "AzGLintVecDestructor"), (Layout::new::<AzGLintVecDestructor>(), "AzGLintVecDestructor"));
        assert_eq!((Layout::new::<azul_impl::css::StringVecDestructor>(), "AzStringVecDestructor"), (Layout::new::<AzStringVecDestructor>(), "AzStringVecDestructor"));
        assert_eq!((Layout::new::<azul_impl::window::StringPairVecDestructor>(), "AzStringPairVecDestructor"), (Layout::new::<AzStringPairVecDestructor>(), "AzStringPairVecDestructor"));
        assert_eq!((Layout::new::<azul_impl::css::LinearColorStopVecDestructor>(), "AzLinearColorStopVecDestructor"), (Layout::new::<AzLinearColorStopVecDestructor>(), "AzLinearColorStopVecDestructor"));
        assert_eq!((Layout::new::<azul_impl::css::RadialColorStopVecDestructor>(), "AzRadialColorStopVecDestructor"), (Layout::new::<AzRadialColorStopVecDestructor>(), "AzRadialColorStopVecDestructor"));
        assert_eq!((Layout::new::<azul_impl::styled_dom::NodeIdVecDestructor>(), "AzNodeIdVecDestructor"), (Layout::new::<AzNodeIdVecDestructor>(), "AzNodeIdVecDestructor"));
        assert_eq!((Layout::new::<azul_impl::styled_dom::AzNodeVecDestructor>(), "AzNodeVecDestructor"), (Layout::new::<AzNodeVecDestructor>(), "AzNodeVecDestructor"));
        assert_eq!((Layout::new::<azul_impl::styled_dom::StyledNodeVecDestructor>(), "AzStyledNodeVecDestructor"), (Layout::new::<AzStyledNodeVecDestructor>(), "AzStyledNodeVecDestructor"));
        assert_eq!((Layout::new::<azul_impl::styled_dom::TagIdToNodeIdMappingVecDestructor>(), "AzTagIdsToNodeIdsMappingVecDestructor"), (Layout::new::<AzTagIdsToNodeIdsMappingVecDestructor>(), "AzTagIdsToNodeIdsMappingVecDestructor"));
        assert_eq!((Layout::new::<azul_impl::styled_dom::ParentWithNodeDepthVecDestructor>(), "AzParentWithNodeDepthVecDestructor"), (Layout::new::<AzParentWithNodeDepthVecDestructor>(), "AzParentWithNodeDepthVecDestructor"));
        assert_eq!((Layout::new::<azul_impl::dom::NodeDataVecDestructor>(), "AzNodeDataVecDestructor"), (Layout::new::<AzNodeDataVecDestructor>(), "AzNodeDataVecDestructor"));
        assert_eq!((Layout::new::<azul_impl::gl::OptionGlContextPtr>(), "AzOptionGlContextPtr"), (Layout::new::<AzOptionGlContextPtr>(), "AzOptionGlContextPtr"));
        assert_eq!((Layout::new::<azul_impl::css::OptionPercentageValue>(), "AzOptionPercentageValue"), (Layout::new::<AzOptionPercentageValue>(), "AzOptionPercentageValue"));
        assert_eq!((Layout::new::<azul_impl::css::OptionAngleValue>(), "AzOptionAngleValue"), (Layout::new::<AzOptionAngleValue>(), "AzOptionAngleValue"));
        assert_eq!((Layout::new::<azul_impl::window::OptionRendererOptions>(), "AzOptionRendererOptions"), (Layout::new::<AzOptionRendererOptions>(), "AzOptionRendererOptions"));
        assert_eq!((Layout::new::<azul_impl::callbacks::OptionCallback>(), "AzOptionCallback"), (Layout::new::<AzOptionCallback>(), "AzOptionCallback"));
        assert_eq!((Layout::new::<azul_impl::task::OptionThreadSendMsg>(), "AzOptionThreadSendMsg"), (Layout::new::<AzOptionThreadSendMsg>(), "AzOptionThreadSendMsg"));
        assert_eq!((Layout::new::<azul_impl::css::OptionLayoutRect>(), "AzOptionLayoutRect"), (Layout::new::<AzOptionLayoutRect>(), "AzOptionLayoutRect"));
        assert_eq!((Layout::new::<azul_impl::callbacks::OptionRefAny>(), "AzOptionRefAny"), (Layout::new::<AzOptionRefAny>(), "AzOptionRefAny"));
        assert_eq!((Layout::new::<azul_impl::css::OptionLayoutPoint>(), "AzOptionLayoutPoint"), (Layout::new::<AzOptionLayoutPoint>(), "AzOptionLayoutPoint"));
        assert_eq!((Layout::new::<azul_impl::window::OptionWindowTheme>(), "AzOptionWindowTheme"), (Layout::new::<AzOptionWindowTheme>(), "AzOptionWindowTheme"));
        assert_eq!((Layout::new::<azul_impl::styled_dom::OptionNodeId>(), "AzOptionNodeId"), (Layout::new::<AzOptionNodeId>(), "AzOptionNodeId"));
        assert_eq!((Layout::new::<azul_impl::callbacks::OptionDomNodeId>(), "AzOptionDomNodeId"), (Layout::new::<AzOptionDomNodeId>(), "AzOptionDomNodeId"));
        assert_eq!((Layout::new::<azul_impl::css::OptionColorU>(), "AzOptionColorU"), (Layout::new::<AzOptionColorU>(), "AzOptionColorU"));
        assert_eq!((Layout::new::<azul_impl::svg::OptionSvgDashPattern>(), "AzOptionSvgDashPattern"), (Layout::new::<AzOptionSvgDashPattern>(), "AzOptionSvgDashPattern"));
        assert_eq!((Layout::new::<azul_impl::window::OptionHwndHandle>(), "AzOptionHwndHandle"), (Layout::new::<AzOptionHwndHandle>(), "AzOptionHwndHandle"));
        assert_eq!((Layout::new::<azul_impl::window::OptionLogicalPosition>(), "AzOptionLogicalPosition"), (Layout::new::<AzOptionLogicalPosition>(), "AzOptionLogicalPosition"));
        assert_eq!((Layout::new::<azul_impl::window::OptionPhysicalPositionI32>(), "AzOptionPhysicalPositionI32"), (Layout::new::<AzOptionPhysicalPositionI32>(), "AzOptionPhysicalPositionI32"));
        assert_eq!((Layout::new::<azul_impl::window::OptionX11Visual>(), "AzOptionX11Visual"), (Layout::new::<AzOptionX11Visual>(), "AzOptionX11Visual"));
        assert_eq!((Layout::new::<azul_impl::css::OptionI32>(), "AzOptionI32"), (Layout::new::<AzOptionI32>(), "AzOptionI32"));
        assert_eq!((Layout::new::<azul_impl::css::OptionF32>(), "AzOptionF32"), (Layout::new::<AzOptionF32>(), "AzOptionF32"));
        assert_eq!((Layout::new::<azul_impl::window::OptionMouseCursorType>(), "AzOptionMouseCursorType"), (Layout::new::<AzOptionMouseCursorType>(), "AzOptionMouseCursorType"));
        assert_eq!((Layout::new::<azul_impl::window::OptionLogicalSize>(), "AzOptionLogicalSize"), (Layout::new::<AzOptionLogicalSize>(), "AzOptionLogicalSize"));
        assert_eq!((Layout::new::<azul_impl::window::OptionChar>(), "AzOptionChar"), (Layout::new::<AzOptionChar>(), "AzOptionChar"));
        assert_eq!((Layout::new::<azul_impl::window::OptionVirtualKeyCode>(), "AzOptionVirtualKeyCode"), (Layout::new::<AzOptionVirtualKeyCode>(), "AzOptionVirtualKeyCode"));
        assert_eq!((Layout::new::<azul_impl::gl::OptionTexture>(), "AzOptionTexture"), (Layout::new::<AzOptionTexture>(), "AzOptionTexture"));
        assert_eq!((Layout::new::<azul_impl::dom::OptionTabIndex>(), "AzOptionTabIndex"), (Layout::new::<AzOptionTabIndex>(), "AzOptionTabIndex"));
        assert_eq!((Layout::new::<azul_impl::styled_dom::OptionTagId>(), "AzOptionTagId"), (Layout::new::<AzOptionTagId>(), "AzOptionTagId"));
        assert_eq!((Layout::new::<azul_impl::gl::OptionUsize>(), "AzOptionUsize"), (Layout::new::<AzOptionUsize>(), "AzOptionUsize"));
        assert_eq!((Layout::new::<azul_impl::gl::OptionU8VecRef>(), "AzOptionU8VecRef"), (Layout::new::<AzOptionU8VecRef>(), "AzOptionU8VecRef"));
        assert_eq!((Layout::new::<azul_impl::xml::XmlTextPos>(), "AzSvgParseErrorPosition"), (Layout::new::<AzSvgParseErrorPosition>(), "AzSvgParseErrorPosition"));
        assert_eq!((Layout::new::<azul_impl::task::InstantPtrCloneCallback>(), "AzInstantPtrCloneFn"), (Layout::new::<AzInstantPtrCloneFn>(), "AzInstantPtrCloneFn"));
        assert_eq!((Layout::new::<azul_impl::task::InstantPtrDestructorCallback>(), "AzInstantPtrDestructorFn"), (Layout::new::<AzInstantPtrDestructorFn>(), "AzInstantPtrDestructorFn"));
        assert_eq!((Layout::new::<azul_impl::task::SystemTick>(), "AzSystemTick"), (Layout::new::<AzSystemTick>(), "AzSystemTick"));
        assert_eq!((Layout::new::<azul_impl::task::SystemTimeDiff>(), "AzSystemTimeDiff"), (Layout::new::<AzSystemTimeDiff>(), "AzSystemTimeDiff"));
        assert_eq!((Layout::new::<azul_impl::task::SystemTickDiff>(), "AzSystemTickDiff"), (Layout::new::<AzSystemTickDiff>(), "AzSystemTickDiff"));
        assert_eq!((Layout::new::<azul_impl::window::RawWindowHandle>(), "AzRawWindowHandle"), (Layout::new::<AzRawWindowHandle>(), "AzRawWindowHandle"));
        assert_eq!((Layout::new::<azul_impl::window::LogicalRect>(), "AzLogicalRect"), (Layout::new::<AzLogicalRect>(), "AzLogicalRect"));
        assert_eq!((Layout::new::<azul_impl::window::WindowSize>(), "AzWindowSize"), (Layout::new::<AzWindowSize>(), "AzWindowSize"));
        assert_eq!((Layout::new::<azul_impl::window::MouseState>(), "AzMouseState"), (Layout::new::<AzMouseState>(), "AzMouseState"));
        assert_eq!((Layout::new::<azul_impl::callbacks::GlCallbackReturn>(), "AzGlCallbackReturn"), (Layout::new::<AzGlCallbackReturn>(), "AzGlCallbackReturn"));
        assert_eq!((Layout::new::<azul_impl::callbacks::LayoutInfo>(), "AzLayoutInfo"), (Layout::new::<AzLayoutInfo>(), "AzLayoutInfo"));
        assert_eq!((Layout::new::<azul_impl::task::ExternalSystemCallbacks>(), "AzSystemCallbacks"), (Layout::new::<AzSystemCallbacks>(), "AzSystemCallbacks"));
        assert_eq!((Layout::new::<azul_impl::dom::EventFilter>(), "AzEventFilter"), (Layout::new::<AzEventFilter>(), "AzEventFilter"));
        assert_eq!((Layout::new::<azul_impl::css::CssNthChildSelector>(), "AzCssNthChildSelector"), (Layout::new::<AzCssNthChildSelector>(), "AzCssNthChildSelector"));
        assert_eq!((Layout::new::<azul_impl::css::LinearColorStop>(), "AzLinearColorStop"), (Layout::new::<AzLinearColorStop>(), "AzLinearColorStop"));
        assert_eq!((Layout::new::<azul_impl::css::RadialColorStop>(), "AzRadialColorStop"), (Layout::new::<AzRadialColorStop>(), "AzRadialColorStop"));
        assert_eq!((Layout::new::<azul_impl::css::StyleTransform>(), "AzStyleTransform"), (Layout::new::<AzStyleTransform>(), "AzStyleTransform"));
        assert_eq!((Layout::new::<azul_impl::styled_dom::StyledNode>(), "AzStyledNode"), (Layout::new::<AzStyledNode>(), "AzStyledNode"));
        assert_eq!((Layout::new::<azul_impl::styled_dom::TagIdToNodeIdMapping>(), "AzTagIdToNodeIdMapping"), (Layout::new::<AzTagIdToNodeIdMapping>(), "AzTagIdToNodeIdMapping"));
        assert_eq!((Layout::new::<azul_impl::gl::RefstrVecRef>(), "AzRefstrVecRef"), (Layout::new::<AzRefstrVecRef>(), "AzRefstrVecRef"));
        assert_eq!((Layout::new::<azul_impl::resources::ImageMask>(), "AzImageMask"), (Layout::new::<AzImageMask>(), "AzImageMask"));
        assert_eq!((Layout::new::<azul_impl::svg::SvgLine>(), "AzSvgLine"), (Layout::new::<AzSvgLine>(), "AzSvgLine"));
        assert_eq!((Layout::new::<azul_impl::svg::SvgRenderOptions>(), "AzSvgRenderOptions"), (Layout::new::<AzSvgRenderOptions>(), "AzSvgRenderOptions"));
        assert_eq!((Layout::new::<azul_impl::svg::SvgStrokeStyle>(), "AzSvgStrokeStyle"), (Layout::new::<AzSvgStrokeStyle>(), "AzSvgStrokeStyle"));
        assert_eq!((Layout::new::<azul_impl::task::Thread>(), "AzThread"), (Layout::new::<AzThread>(), "AzThread"));
        assert_eq!((Layout::new::<azul_impl::task::ThreadReceiveMsg>(), "AzThreadReceiveMsg"), (Layout::new::<AzThreadReceiveMsg>(), "AzThreadReceiveMsg"));
        assert_eq!((Layout::new::<azul_impl::window::VideoModeVec>(), "AzVideoModeVec"), (Layout::new::<AzVideoModeVec>(), "AzVideoModeVec"));
        assert_eq!((Layout::new::<azul_impl::css::StyleBackgroundPositionVec>(), "AzStyleBackgroundPositionVec"), (Layout::new::<AzStyleBackgroundPositionVec>(), "AzStyleBackgroundPositionVec"));
        assert_eq!((Layout::new::<azul_impl::css::StyleBackgroundRepeatVec>(), "AzStyleBackgroundRepeatVec"), (Layout::new::<AzStyleBackgroundRepeatVec>(), "AzStyleBackgroundRepeatVec"));
        assert_eq!((Layout::new::<azul_impl::css::StyleBackgroundSizeVec>(), "AzStyleBackgroundSizeVec"), (Layout::new::<AzStyleBackgroundSizeVec>(), "AzStyleBackgroundSizeVec"));
        assert_eq!((Layout::new::<azul_impl::css::StyleTransformVec>(), "AzStyleTransformVec"), (Layout::new::<AzStyleTransformVec>(), "AzStyleTransformVec"));
        assert_eq!((Layout::new::<azul_impl::svg::SvgVertexVec>(), "AzSvgVertexVec"), (Layout::new::<AzSvgVertexVec>(), "AzSvgVertexVec"));
        assert_eq!((Layout::new::<azul_impl::css::U32Vec>(), "AzU32Vec"), (Layout::new::<AzU32Vec>(), "AzU32Vec"));
        assert_eq!((Layout::new::<azul_impl::window::XWindowTypeVec>(), "AzXWindowTypeVec"), (Layout::new::<AzXWindowTypeVec>(), "AzXWindowTypeVec"));
        assert_eq!((Layout::new::<azul_impl::window::VirtualKeyCodeVec>(), "AzVirtualKeyCodeVec"), (Layout::new::<AzVirtualKeyCodeVec>(), "AzVirtualKeyCodeVec"));
        assert_eq!((Layout::new::<azul_impl::style::CascadeInfoVec>(), "AzCascadeInfoVec"), (Layout::new::<AzCascadeInfoVec>(), "AzCascadeInfoVec"));
        assert_eq!((Layout::new::<azul_impl::window::ScanCodeVec>(), "AzScanCodeVec"), (Layout::new::<AzScanCodeVec>(), "AzScanCodeVec"));
        assert_eq!((Layout::new::<azul_impl::css::U8Vec>(), "AzU8Vec"), (Layout::new::<AzU8Vec>(), "AzU8Vec"));
        assert_eq!((Layout::new::<azul_impl::gl::GLuintVec>(), "AzGLuintVec"), (Layout::new::<AzGLuintVec>(), "AzGLuintVec"));
        assert_eq!((Layout::new::<azul_impl::gl::GLintVec>(), "AzGLintVec"), (Layout::new::<AzGLintVec>(), "AzGLintVec"));
        assert_eq!((Layout::new::<azul_impl::css::LinearColorStopVec>(), "AzLinearColorStopVec"), (Layout::new::<AzLinearColorStopVec>(), "AzLinearColorStopVec"));
        assert_eq!((Layout::new::<azul_impl::css::RadialColorStopVec>(), "AzRadialColorStopVec"), (Layout::new::<AzRadialColorStopVec>(), "AzRadialColorStopVec"));
        assert_eq!((Layout::new::<azul_impl::styled_dom::NodeIdVec>(), "AzNodeIdVec"), (Layout::new::<AzNodeIdVec>(), "AzNodeIdVec"));
        assert_eq!((Layout::new::<azul_impl::styled_dom::AzNodeVec>(), "AzNodeVec"), (Layout::new::<AzNodeVec>(), "AzNodeVec"));
        assert_eq!((Layout::new::<azul_impl::styled_dom::StyledNodeVec>(), "AzStyledNodeVec"), (Layout::new::<AzStyledNodeVec>(), "AzStyledNodeVec"));
        assert_eq!((Layout::new::<azul_impl::styled_dom::TagIdsToNodeIdsMappingVec>(), "AzTagIdsToNodeIdsMappingVec"), (Layout::new::<AzTagIdsToNodeIdsMappingVec>(), "AzTagIdsToNodeIdsMappingVec"));
        assert_eq!((Layout::new::<azul_impl::styled_dom::ParentWithNodeDepthVec>(), "AzParentWithNodeDepthVec"), (Layout::new::<AzParentWithNodeDepthVec>(), "AzParentWithNodeDepthVec"));
        assert_eq!((Layout::new::<azul_impl::task::OptionThreadReceiveMsg>(), "AzOptionThreadReceiveMsg"), (Layout::new::<AzOptionThreadReceiveMsg>(), "AzOptionThreadReceiveMsg"));
        assert_eq!((Layout::new::<azul_impl::resources::OptionImageMask>(), "AzOptionImageMask"), (Layout::new::<AzOptionImageMask>(), "AzOptionImageMask"));
        assert_eq!((Layout::new::<azul_impl::xml::NonXmlCharError>(), "AzNonXmlCharError"), (Layout::new::<AzNonXmlCharError>(), "AzNonXmlCharError"));
        assert_eq!((Layout::new::<azul_impl::xml::InvalidCharError>(), "AzInvalidCharError"), (Layout::new::<AzInvalidCharError>(), "AzInvalidCharError"));
        assert_eq!((Layout::new::<azul_impl::xml::InvalidCharMultipleError>(), "AzInvalidCharMultipleError"), (Layout::new::<AzInvalidCharMultipleError>(), "AzInvalidCharMultipleError"));
        assert_eq!((Layout::new::<azul_impl::xml::InvalidQuoteError>(), "AzInvalidQuoteError"), (Layout::new::<AzInvalidQuoteError>(), "AzInvalidQuoteError"));
        assert_eq!((Layout::new::<azul_impl::xml::InvalidSpaceError>(), "AzInvalidSpaceError"), (Layout::new::<AzInvalidSpaceError>(), "AzInvalidSpaceError"));
        assert_eq!((Layout::new::<azul_impl::task::Instant>(), "AzInstant"), (Layout::new::<AzInstant>(), "AzInstant"));
        assert_eq!((Layout::new::<azul_impl::task::Duration>(), "AzDuration"), (Layout::new::<AzDuration>(), "AzDuration"));
        assert_eq!((Layout::new::<azul_impl::resources::AppConfig>(), "AzAppConfig"), (Layout::new::<AzAppConfig>(), "AzAppConfig"));
        assert_eq!((Layout::new::<azul_impl::window::TaskBarIcon>(), "AzTaskBarIcon"), (Layout::new::<AzTaskBarIcon>(), "AzTaskBarIcon"));
        assert_eq!((Layout::new::<azul_impl::window::SmallWindowIconBytes>(), "AzSmallWindowIconBytes"), (Layout::new::<AzSmallWindowIconBytes>(), "AzSmallWindowIconBytes"));
        assert_eq!((Layout::new::<azul_impl::window::LargeWindowIconBytes>(), "AzLargeWindowIconBytes"), (Layout::new::<AzLargeWindowIconBytes>(), "AzLargeWindowIconBytes"));
        assert_eq!((Layout::new::<azul_impl::window::WindowIcon>(), "AzWindowIcon"), (Layout::new::<AzWindowIcon>(), "AzWindowIcon"));
        assert_eq!((Layout::new::<azul_impl::window::KeyboardState>(), "AzKeyboardState"), (Layout::new::<AzKeyboardState>(), "AzKeyboardState"));
        assert_eq!((Layout::new::<azul_impl::callbacks::GlCallbackInfo>(), "AzGlCallbackInfo"), (Layout::new::<AzGlCallbackInfo>(), "AzGlCallbackInfo"));
        assert_eq!((Layout::new::<azul_impl::dom::CallbackData>(), "AzCallbackData"), (Layout::new::<AzCallbackData>(), "AzCallbackData"));
        assert_eq!((Layout::new::<azul_impl::css::CssPathPseudoSelector>(), "AzCssPathPseudoSelector"), (Layout::new::<AzCssPathPseudoSelector>(), "AzCssPathPseudoSelector"));
        assert_eq!((Layout::new::<azul_impl::css::LinearGradient>(), "AzLinearGradient"), (Layout::new::<AzLinearGradient>(), "AzLinearGradient"));
        assert_eq!((Layout::new::<azul_impl::css::RadialGradient>(), "AzRadialGradient"), (Layout::new::<AzRadialGradient>(), "AzRadialGradient"));
        assert_eq!((Layout::new::<azul_impl::css::ConicGradient>(), "AzConicGradient"), (Layout::new::<AzConicGradient>(), "AzConicGradient"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<StyleBackgroundPositionVec>>(), "AzStyleBackgroundPositionVecValue"), (Layout::new::<AzStyleBackgroundPositionVecValue>(), "AzStyleBackgroundPositionVecValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<StyleBackgroundRepeatVec>>(), "AzStyleBackgroundRepeatVecValue"), (Layout::new::<AzStyleBackgroundRepeatVecValue>(), "AzStyleBackgroundRepeatVecValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<StyleBackgroundSizeVec>>(), "AzStyleBackgroundSizeVecValue"), (Layout::new::<AzStyleBackgroundSizeVecValue>(), "AzStyleBackgroundSizeVecValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<StyleTransformVec>>(), "AzStyleTransformVecValue"), (Layout::new::<AzStyleTransformVecValue>(), "AzStyleTransformVecValue"));
        assert_eq!((Layout::new::<azul_impl::gl::GetProgramBinaryReturn>(), "AzGetProgramBinaryReturn"), (Layout::new::<AzGetProgramBinaryReturn>(), "AzGetProgramBinaryReturn"));
        assert_eq!((Layout::new::<azul_impl::resources::RawImage>(), "AzRawImage"), (Layout::new::<AzRawImage>(), "AzRawImage"));
        assert_eq!((Layout::new::<azul_impl::svg::SvgPathElement>(), "AzSvgPathElement"), (Layout::new::<AzSvgPathElement>(), "AzSvgPathElement"));
        assert_eq!((Layout::new::<azul_impl::svg::TesselatedCPUSvgNode>(), "AzTesselatedCPUSvgNode"), (Layout::new::<AzTesselatedCPUSvgNode>(), "AzTesselatedCPUSvgNode"));
        assert_eq!((Layout::new::<azul_impl::svg::SvgStyle>(), "AzSvgStyle"), (Layout::new::<AzSvgStyle>(), "AzSvgStyle"));
        assert_eq!((Layout::new::<azul_impl::css::AzString>(), "AzString"), (Layout::new::<AzString>(), "AzString"));
        assert_eq!((Layout::new::<azul_impl::svg::SvgPathElementVec>(), "AzSvgPathElementVec"), (Layout::new::<AzSvgPathElementVec>(), "AzSvgPathElementVec"));
        assert_eq!((Layout::new::<azul_impl::dom::CallbackDataVec>(), "AzCallbackDataVec"), (Layout::new::<AzCallbackDataVec>(), "AzCallbackDataVec"));
        assert_eq!((Layout::new::<azul_impl::css::StringVec>(), "AzStringVec"), (Layout::new::<AzStringVec>(), "AzStringVec"));
        assert_eq!((Layout::new::<azul_impl::resources::OptionRawImage>(), "AzOptionRawImage"), (Layout::new::<AzOptionRawImage>(), "AzOptionRawImage"));
        assert_eq!((Layout::new::<azul_impl::window::OptionTaskBarIcon>(), "AzOptionTaskBarIcon"), (Layout::new::<AzOptionTaskBarIcon>(), "AzOptionTaskBarIcon"));
        assert_eq!((Layout::new::<azul_impl::window::OptionWindowIcon>(), "AzOptionWindowIcon"), (Layout::new::<AzOptionWindowIcon>(), "AzOptionWindowIcon"));
        assert_eq!((Layout::new::<azul_impl::css::OptionAzString>(), "AzOptionString"), (Layout::new::<AzOptionString>(), "AzOptionString"));
        assert_eq!((Layout::new::<azul_impl::task::OptionDuration>(), "AzOptionDuration"), (Layout::new::<AzOptionDuration>(), "AzOptionDuration"));
        assert_eq!((Layout::new::<azul_impl::task::OptionInstant>(), "AzOptionInstant"), (Layout::new::<AzOptionInstant>(), "AzOptionInstant"));
        assert_eq!((Layout::new::<azul_impl::xml::DuplicatedNamespaceError>(), "AzDuplicatedNamespaceError"), (Layout::new::<AzDuplicatedNamespaceError>(), "AzDuplicatedNamespaceError"));
        assert_eq!((Layout::new::<azul_impl::xml::UnknownNamespaceError>(), "AzUnknownNamespaceError"), (Layout::new::<AzUnknownNamespaceError>(), "AzUnknownNamespaceError"));
        assert_eq!((Layout::new::<azul_impl::xml::UnexpectedCloseTagError>(), "AzUnexpectedCloseTagError"), (Layout::new::<AzUnexpectedCloseTagError>(), "AzUnexpectedCloseTagError"));
        assert_eq!((Layout::new::<azul_impl::xml::UnknownEntityReferenceError>(), "AzUnknownEntityReferenceError"), (Layout::new::<AzUnknownEntityReferenceError>(), "AzUnknownEntityReferenceError"));
        assert_eq!((Layout::new::<azul_impl::xml::DuplicatedAttributeError>(), "AzDuplicatedAttributeError"), (Layout::new::<AzDuplicatedAttributeError>(), "AzDuplicatedAttributeError"));
        assert_eq!((Layout::new::<azul_impl::xml::InvalidStringError>(), "AzInvalidStringError"), (Layout::new::<AzInvalidStringError>(), "AzInvalidStringError"));
        assert_eq!((Layout::new::<azul_impl::window::WindowsWindowOptions>(), "AzWindowsWindowOptions"), (Layout::new::<AzWindowsWindowOptions>(), "AzWindowsWindowOptions"));
        assert_eq!((Layout::new::<azul_impl::window::WaylandTheme>(), "AzWaylandTheme"), (Layout::new::<AzWaylandTheme>(), "AzWaylandTheme"));
        assert_eq!((Layout::new::<azul_impl::window::AzStringPair>(), "AzStringPair"), (Layout::new::<AzStringPair>(), "AzStringPair"));
        assert_eq!((Layout::new::<azul_impl::window::Monitor>(), "AzMonitor"), (Layout::new::<AzMonitor>(), "AzMonitor"));
        assert_eq!((Layout::new::<azul_impl::callbacks::RefCountInner>(), "AzRefCountInner"), (Layout::new::<AzRefCountInner>(), "AzRefCountInner"));
        assert_eq!((Layout::new::<azul_impl::dom::NodeType>(), "AzNodeType"), (Layout::new::<AzNodeType>(), "AzNodeType"));
        assert_eq!((Layout::new::<azul_impl::dom::IdOrClass>(), "AzIdOrClass"), (Layout::new::<AzIdOrClass>(), "AzIdOrClass"));
        assert_eq!((Layout::new::<azul_impl::css::CssPathSelector>(), "AzCssPathSelector"), (Layout::new::<AzCssPathSelector>(), "AzCssPathSelector"));
        assert_eq!((Layout::new::<azul_impl::css::CssImageId>(), "AzCssImageId"), (Layout::new::<AzCssImageId>(), "AzCssImageId"));
        assert_eq!((Layout::new::<azul_impl::css::StyleBackgroundContent>(), "AzStyleBackgroundContent"), (Layout::new::<AzStyleBackgroundContent>(), "AzStyleBackgroundContent"));
        assert_eq!((Layout::new::<azul_impl::css::ScrollbarInfo>(), "AzScrollbarInfo"), (Layout::new::<AzScrollbarInfo>(), "AzScrollbarInfo"));
        assert_eq!((Layout::new::<azul_impl::css::ScrollbarStyle>(), "AzScrollbarStyle"), (Layout::new::<AzScrollbarStyle>(), "AzScrollbarStyle"));
        assert_eq!((Layout::new::<azul_impl::css::StyleFontFamily>(), "AzStyleFontFamily"), (Layout::new::<AzStyleFontFamily>(), "AzStyleFontFamily"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<ScrollbarStyle>>(), "AzScrollbarStyleValue"), (Layout::new::<AzScrollbarStyleValue>(), "AzScrollbarStyleValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<StyleFontFamily>>(), "AzStyleFontFamilyValue"), (Layout::new::<AzStyleFontFamilyValue>(), "AzStyleFontFamilyValue"));
        assert_eq!((Layout::new::<azul_impl::gl::VertexAttribute>(), "AzVertexAttribute"), (Layout::new::<AzVertexAttribute>(), "AzVertexAttribute"));
        assert_eq!((Layout::new::<azul_impl::gl::AzDebugMessage>(), "AzDebugMessage"), (Layout::new::<AzDebugMessage>(), "AzDebugMessage"));
        assert_eq!((Layout::new::<azul_impl::gl::GetActiveAttribReturn>(), "AzGetActiveAttribReturn"), (Layout::new::<AzGetActiveAttribReturn>(), "AzGetActiveAttribReturn"));
        assert_eq!((Layout::new::<azul_impl::gl::GetActiveUniformReturn>(), "AzGetActiveUniformReturn"), (Layout::new::<AzGetActiveUniformReturn>(), "AzGetActiveUniformReturn"));
        assert_eq!((Layout::new::<azul_impl::resources::ImageSource>(), "AzImageSource"), (Layout::new::<AzImageSource>(), "AzImageSource"));
        assert_eq!((Layout::new::<azul_impl::resources::EmbeddedFontSource>(), "AzEmbeddedFontSource"), (Layout::new::<AzEmbeddedFontSource>(), "AzEmbeddedFontSource"));
        assert_eq!((Layout::new::<azul_impl::resources::FileFontSource>(), "AzFileFontSource"), (Layout::new::<AzFileFontSource>(), "AzFileFontSource"));
        assert_eq!((Layout::new::<azul_impl::resources::SystemFontSource>(), "AzSystemFontSource"), (Layout::new::<AzSystemFontSource>(), "AzSystemFontSource"));
        assert_eq!((Layout::new::<azul_impl::svg::SvgPath>(), "AzSvgPath"), (Layout::new::<AzSvgPath>(), "AzSvgPath"));
        assert_eq!((Layout::new::<azul_impl::svg::SvgParseOptions>(), "AzSvgParseOptions"), (Layout::new::<AzSvgParseOptions>(), "AzSvgParseOptions"));
        assert_eq!((Layout::new::<azul_impl::task::Timer>(), "AzTimer"), (Layout::new::<AzTimer>(), "AzTimer"));
        assert_eq!((Layout::new::<azul_impl::window::MonitorVec>(), "AzMonitorVec"), (Layout::new::<AzMonitorVec>(), "AzMonitorVec"));
        assert_eq!((Layout::new::<azul_impl::dom::IdOrClassVec>(), "AzIdOrClassVec"), (Layout::new::<AzIdOrClassVec>(), "AzIdOrClassVec"));
        assert_eq!((Layout::new::<azul_impl::css::StyleBackgroundContentVec>(), "AzStyleBackgroundContentVec"), (Layout::new::<AzStyleBackgroundContentVec>(), "AzStyleBackgroundContentVec"));
        assert_eq!((Layout::new::<azul_impl::svg::SvgPathVec>(), "AzSvgPathVec"), (Layout::new::<AzSvgPathVec>(), "AzSvgPathVec"));
        assert_eq!((Layout::new::<azul_impl::gl::VertexAttributeVec>(), "AzVertexAttributeVec"), (Layout::new::<AzVertexAttributeVec>(), "AzVertexAttributeVec"));
        assert_eq!((Layout::new::<azul_impl::css::CssPathSelectorVec>(), "AzCssPathSelectorVec"), (Layout::new::<AzCssPathSelectorVec>(), "AzCssPathSelectorVec"));
        assert_eq!((Layout::new::<azul_impl::gl::AzDebugMessageVec>(), "AzDebugMessageVec"), (Layout::new::<AzDebugMessageVec>(), "AzDebugMessageVec"));
        assert_eq!((Layout::new::<azul_impl::window::StringPairVec>(), "AzStringPairVec"), (Layout::new::<AzStringPairVec>(), "AzStringPairVec"));
        assert_eq!((Layout::new::<azul_impl::window::OptionWaylandTheme>(), "AzOptionWaylandTheme"), (Layout::new::<AzOptionWaylandTheme>(), "AzOptionWaylandTheme"));
        assert_eq!((Layout::new::<azul_impl::xml::XmlStreamError>(), "AzXmlStreamError"), (Layout::new::<AzXmlStreamError>(), "AzXmlStreamError"));
        assert_eq!((Layout::new::<azul_impl::window::LinuxWindowOptions>(), "AzLinuxWindowOptions"), (Layout::new::<AzLinuxWindowOptions>(), "AzLinuxWindowOptions"));
        assert_eq!((Layout::new::<azul_impl::css::CssPath>(), "AzCssPath"), (Layout::new::<AzCssPath>(), "AzCssPath"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyValue::<StyleBackgroundContentVec>>(), "AzStyleBackgroundContentVecValue"), (Layout::new::<AzStyleBackgroundContentVecValue>(), "AzStyleBackgroundContentVecValue"));
        assert_eq!((Layout::new::<azul_impl::css::CssProperty>(), "AzCssProperty"), (Layout::new::<AzCssProperty>(), "AzCssProperty"));
        assert_eq!((Layout::new::<azul_impl::styled_dom::CssPropertySource>(), "AzCssPropertySource"), (Layout::new::<AzCssPropertySource>(), "AzCssPropertySource"));
        assert_eq!((Layout::new::<azul_impl::gl::VertexLayout>(), "AzVertexLayout"), (Layout::new::<AzVertexLayout>(), "AzVertexLayout"));
        assert_eq!((Layout::new::<azul_impl::gl::VertexArrayObject>(), "AzVertexArrayObject"), (Layout::new::<AzVertexArrayObject>(), "AzVertexArrayObject"));
        assert_eq!((Layout::new::<azul_impl::gl::VertexBuffer>(), "AzVertexBuffer"), (Layout::new::<AzVertexBuffer>(), "AzVertexBuffer"));
        assert_eq!((Layout::new::<azul_impl::resources::FontSource>(), "AzFontSource"), (Layout::new::<AzFontSource>(), "AzFontSource"));
        assert_eq!((Layout::new::<azul_impl::svg::SvgMultiPolygon>(), "AzSvgMultiPolygon"), (Layout::new::<AzSvgMultiPolygon>(), "AzSvgMultiPolygon"));
        assert_eq!((Layout::new::<azul_impl::css::CssPropertyVec>(), "AzCssPropertyVec"), (Layout::new::<AzCssPropertyVec>(), "AzCssPropertyVec"));
        assert_eq!((Layout::new::<azul_impl::svg::SvgMultiPolygonVec>(), "AzSvgMultiPolygonVec"), (Layout::new::<AzSvgMultiPolygonVec>(), "AzSvgMultiPolygonVec"));
        assert_eq!((Layout::new::<azul_impl::xml::XmlTextError>(), "AzXmlTextError"), (Layout::new::<AzXmlTextError>(), "AzXmlTextError"));
        assert_eq!((Layout::new::<azul_impl::window::PlatformSpecificOptions>(), "AzPlatformSpecificOptions"), (Layout::new::<AzPlatformSpecificOptions>(), "AzPlatformSpecificOptions"));
        assert_eq!((Layout::new::<azul_impl::window::WindowState>(), "AzWindowState"), (Layout::new::<AzWindowState>(), "AzWindowState"));
        assert_eq!((Layout::new::<azul_impl::callbacks::FocusTargetPath>(), "AzFocusTargetPath"), (Layout::new::<AzFocusTargetPath>(), "AzFocusTargetPath"));
        assert_eq!((Layout::new::<azul_impl::callbacks::CallbackInfo>(), "AzCallbackInfo"), (Layout::new::<AzCallbackInfo>(), "AzCallbackInfo"));
        assert_eq!((Layout::new::<azul_impl::callbacks::TimerCallbackInfo>(), "AzTimerCallbackInfo"), (Layout::new::<AzTimerCallbackInfo>(), "AzTimerCallbackInfo"));
        assert_eq!((Layout::new::<azul_impl::dom::NodeDataInlineCssProperty>(), "AzNodeDataInlineCssProperty"), (Layout::new::<AzNodeDataInlineCssProperty>(), "AzNodeDataInlineCssProperty"));
        assert_eq!((Layout::new::<azul_impl::css::DynamicCssProperty>(), "AzDynamicCssProperty"), (Layout::new::<AzDynamicCssProperty>(), "AzDynamicCssProperty"));
        assert_eq!((Layout::new::<azul_impl::svg::SvgNode>(), "AzSvgNode"), (Layout::new::<AzSvgNode>(), "AzSvgNode"));
        assert_eq!((Layout::new::<azul_impl::svg::SvgStyledNode>(), "AzSvgStyledNode"), (Layout::new::<AzSvgStyledNode>(), "AzSvgStyledNode"));
        assert_eq!((Layout::new::<azul_impl::dom::NodeDataInlineCssPropertyVec>(), "AzNodeDataInlineCssPropertyVec"), (Layout::new::<AzNodeDataInlineCssPropertyVec>(), "AzNodeDataInlineCssPropertyVec"));
        assert_eq!((Layout::new::<azul_impl::xml::XmlParseError>(), "AzXmlParseError"), (Layout::new::<AzXmlParseError>(), "AzXmlParseError"));
        assert_eq!((Layout::new::<azul_impl::window::WindowCreateOptions>(), "AzWindowCreateOptions"), (Layout::new::<AzWindowCreateOptions>(), "AzWindowCreateOptions"));
        assert_eq!((Layout::new::<azul_impl::callbacks::FocusTarget>(), "AzFocusTarget"), (Layout::new::<AzFocusTarget>(), "AzFocusTarget"));
        assert_eq!((Layout::new::<azul_impl::dom::NodeData>(), "AzNodeData"), (Layout::new::<AzNodeData>(), "AzNodeData"));
        assert_eq!((Layout::new::<azul_impl::css::CssDeclaration>(), "AzCssDeclaration"), (Layout::new::<AzCssDeclaration>(), "AzCssDeclaration"));
        assert_eq!((Layout::new::<azul_impl::css::CssDeclarationVec>(), "AzCssDeclarationVec"), (Layout::new::<AzCssDeclarationVec>(), "AzCssDeclarationVec"));
        assert_eq!((Layout::new::<azul_impl::dom::NodeDataVec>(), "AzNodeDataVec"), (Layout::new::<AzNodeDataVec>(), "AzNodeDataVec"));
        assert_eq!((Layout::new::<azul_impl::xml::XmlError>(), "AzXmlError"), (Layout::new::<AzXmlError>(), "AzXmlError"));
        assert_eq!((Layout::new::<azul_impl::dom::Dom>(), "AzDom"), (Layout::new::<AzDom>(), "AzDom"));
        assert_eq!((Layout::new::<azul_impl::css::CssRuleBlock>(), "AzCssRuleBlock"), (Layout::new::<AzCssRuleBlock>(), "AzCssRuleBlock"));
        assert_eq!((Layout::new::<azul_impl::styled_dom::StyledDom>(), "AzStyledDom"), (Layout::new::<AzStyledDom>(), "AzStyledDom"));
        assert_eq!((Layout::new::<azul_impl::dom::DomVec>(), "AzDomVec"), (Layout::new::<AzDomVec>(), "AzDomVec"));
        assert_eq!((Layout::new::<azul_impl::css::CssRuleBlockVec>(), "AzCssRuleBlockVec"), (Layout::new::<AzCssRuleBlockVec>(), "AzCssRuleBlockVec"));
        assert_eq!((Layout::new::<azul_impl::dom::OptionDom>(), "AzOptionDom"), (Layout::new::<AzOptionDom>(), "AzOptionDom"));
        assert_eq!((Layout::new::<azul_impl::svg::SvgParseError>(), "AzSvgParseError"), (Layout::new::<AzSvgParseError>(), "AzSvgParseError"));
        assert_eq!((Layout::new::<azul_impl::callbacks::IFrameCallbackReturn>(), "AzIFrameCallbackReturn"), (Layout::new::<AzIFrameCallbackReturn>(), "AzIFrameCallbackReturn"));
        assert_eq!((Layout::new::<azul_impl::css::Stylesheet>(), "AzStylesheet"), (Layout::new::<AzStylesheet>(), "AzStylesheet"));
        assert_eq!((Layout::new::<azul_impl::css::StylesheetVec>(), "AzStylesheetVec"), (Layout::new::<AzStylesheetVec>(), "AzStylesheetVec"));
        assert_eq!((Layout::new::<azul_impl::svg::ResultSvgSvgParseError>(), "AzResultSvgSvgParseError"), (Layout::new::<AzResultSvgSvgParseError>(), "AzResultSvgSvgParseError"));
        assert_eq!((Layout::new::<azul_impl::css::Css>(), "AzCss"), (Layout::new::<AzCss>(), "AzCss"));
    }
}

#![crate_type = "cdylib"]

// WARNING: autogenerated code for azul api version 0.1.0


//! Public API for Azul
//!
//! A single function can have multiple implementations depending on whether it is
//! compiled for the Rust-desktop target, the Rust-wasm target or the C API.
//!
//! For now, the crate simply re-exports azul_core and calls the c_api functions

#![doc(
    html_logo_url = "https://raw.githubusercontent.com/maps4print/azul/master/assets/images/azul_logo_full_min.svg.png",
    html_favicon_url = "https://raw.githubusercontent.com/maps4print/azul/master/assets/images/favicon.ico",
)]

#![allow(dead_code)]
#![allow(unused_imports)]

extern crate azul_core;
#[cfg(target_arch = "wasm32")]
extern crate azul_web as azul_impl;
#[cfg(not(target_arch = "wasm32"))]
extern crate azul_desktop as azul_impl;

use core::ffi::c_void;
use std::{path::PathBuf, vec::Vec, string::String, time::Duration};
use azul_impl::{
    css::{self, *},
    dom::{Dom, NodeData},
    callbacks::{
        RefAny, LayoutInfo,
        Callback, CallbackInfo, CallbackType,
        TimerCallback, TimerCallbackType, TimerCallbackInfo, TimerCallbackReturn,
        GlCallback, GlCallbackInfo, GlCallbackReturn, ThreadCallbackType,
        IFrameCallback, IFrameCallbackInfo, IFrameCallbackReturn
    },
    window::{WindowCreateOptions, WindowState},
    resources::{RawImage, RawImageFormat, FontId, TextId, ImageId},
    app::{App, AppConfig},
    task::{OptionDuration, Timer, TimerId, Thread},
    gl::{OptionTexture, TextureFlags, Texture, GlContextPtr},
};

fn deallocate_vec<T>(ptr: *mut T, cap: usize) {

    if cap == 0 {
        return;
    }

    let layout = match std::alloc::Layout::array::<T>(cap) {
        Ok(o) => o,
        Err(_) => { std::process::exit(-1); },
    };

    unsafe { std::alloc::dealloc(ptr as *mut u8, layout); }
}
/// Re-export of rust-allocated (stack based) `String` struct
pub type AzStringTT = azul_impl::css::AzString;
pub use AzStringTT as AzString;
/// Creates + allocates a Rust `String` by **copying** it from another utf8-encoded string
#[no_mangle] pub extern "C" fn az_string_from_utf8_unchecked(ptr: *const u8, len: usize) -> AzString { AzString::from_utf8_unchecked(ptr, len) }
/// Creates + allocates a Rust `String` by **copying** it from another utf8-encoded string
#[no_mangle] pub extern "C" fn az_string_from_utf8_lossy(ptr: *const u8, len: usize) -> AzString { AzString::from_utf8_lossy(ptr, len) }
/// Returns the internal bytes of the String as a `U8Vec`
#[no_mangle] pub extern "C" fn az_string_into_bytes(string: AzString) -> AzU8Vec { string.into_bytes() }
/// Destructor: Takes ownership of the `String` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_string_delete(object: &mut AzString) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_string_deep_copy(object: &AzString) -> AzString { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_string_fmt_debug(object: &AzString) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `Vec<StyleTransform>`
pub type AzStyleTransformVecTT = azul_impl::css::StyleTransformVec;
pub use AzStyleTransformVecTT as AzStyleTransformVec;
/// Creates a new, empty Rust `Vec<StyleTransform>`
#[no_mangle] pub extern "C" fn az_style_transform_vec_new() -> AzStyleTransformVec { Vec::<AzStyleTransform>::new().into() }
/// Creates a new, empty Rust `Vec<StyleTransform>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_style_transform_vec_with_capacity(cap: usize) -> AzStyleTransformVec { Vec::<AzStyleTransform>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<StyleTransform>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_style_transform_vec_copy_from(ptr: *const AzStyleTransform, len: usize) -> AzStyleTransformVec { unsafe { std::slice::from_raw_parts(ptr, len).to_vec() }.into() }
/// Destructor: Takes ownership of the `StyleTransformVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_transform_vec_delete(object: &mut AzStyleTransformVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_transform_vec_deep_copy(object: &AzStyleTransformVec) -> AzStyleTransformVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_transform_vec_fmt_debug(object: &AzStyleTransformVec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `Vec<ContentGroup>`
pub type AzContentGroupVecTT = azul_impl::styled_dom::ContentGroupVec;
pub use AzContentGroupVecTT as AzContentGroupVec;
/// Creates a new, empty Rust `Vec<ContentGroup>`
#[no_mangle] pub extern "C" fn az_content_group_vec_new() -> AzContentGroupVec { Vec::<AzContentGroup>::new().into() }
/// Creates a new, empty Rust `Vec<ContentGroup>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_content_group_vec_with_capacity(cap: usize) -> AzContentGroupVec { Vec::<AzContentGroup>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<ContentGroup>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_content_group_vec_copy_from(ptr: *const AzContentGroup, len: usize) -> AzContentGroupVec { unsafe { std::slice::from_raw_parts(ptr, len).to_vec() }.into() }
/// Destructor: Takes ownership of the `ContentGroupVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_content_group_vec_delete(object: &mut AzContentGroupVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_content_group_vec_deep_copy(object: &AzContentGroupVec) -> AzContentGroupVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_content_group_vec_fmt_debug(object: &AzContentGroupVec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `Vec<CssProperty>`
pub type AzCssPropertyVecTT = azul_impl::css::CssPropertyVec;
pub use AzCssPropertyVecTT as AzCssPropertyVec;
/// Creates a new, empty Rust `Vec<CssProperty>`
#[no_mangle] pub extern "C" fn az_css_property_vec_new() -> AzCssPropertyVec { Vec::<AzCssProperty>::new().into() }
/// Creates a new, empty Rust `Vec<CssProperty>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_css_property_vec_with_capacity(cap: usize) -> AzCssPropertyVec { Vec::<AzCssProperty>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<CssProperty>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_css_property_vec_copy_from(ptr: *const AzCssProperty, len: usize) -> AzCssPropertyVec { unsafe { std::slice::from_raw_parts(ptr, len).to_vec() }.into() }
/// Destructor: Takes ownership of the `CssPropertyVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_css_property_vec_delete(object: &mut AzCssPropertyVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_css_property_vec_deep_copy(object: &AzCssPropertyVec) -> AzCssPropertyVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_css_property_vec_fmt_debug(object: &AzCssPropertyVec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `Vec<SvgMultiPolygon>`
pub type AzSvgMultiPolygonVecTT = azul_impl::svg::SvgMultiPolygonVec;
pub use AzSvgMultiPolygonVecTT as AzSvgMultiPolygonVec;
/// Creates a new, empty Rust `Vec<SvgMultiPolygon>`
#[no_mangle] pub extern "C" fn az_svg_multi_polygon_vec_new() -> AzSvgMultiPolygonVec { Vec::<AzSvgMultiPolygon>::new().into() }
/// Creates a new, empty Rust `Vec<SvgMultiPolygon>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_svg_multi_polygon_vec_with_capacity(cap: usize) -> AzSvgMultiPolygonVec { Vec::<AzSvgMultiPolygon>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<SvgMultiPolygon>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_svg_multi_polygon_vec_copy_from(ptr: *const AzSvgMultiPolygon, len: usize) -> AzSvgMultiPolygonVec { unsafe { std::slice::from_raw_parts(ptr, len).to_vec() }.into() }
/// Destructor: Takes ownership of the `SvgMultiPolygonVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_svg_multi_polygon_vec_delete(object: &mut AzSvgMultiPolygonVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_svg_multi_polygon_vec_deep_copy(object: &AzSvgMultiPolygonVec) -> AzSvgMultiPolygonVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_svg_multi_polygon_vec_fmt_debug(object: &AzSvgMultiPolygonVec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `Vec<SvgPath>`
pub type AzSvgPathVecTT = azul_impl::svg::SvgPathVec;
pub use AzSvgPathVecTT as AzSvgPathVec;
/// Creates a new, empty Rust `Vec<SvgPath>`
#[no_mangle] pub extern "C" fn az_svg_path_vec_new() -> AzSvgPathVec { Vec::<AzSvgPath>::new().into() }
/// Creates a new, empty Rust `Vec<SvgPath>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_svg_path_vec_with_capacity(cap: usize) -> AzSvgPathVec { Vec::<AzSvgPath>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<SvgPath>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_svg_path_vec_copy_from(ptr: *const AzSvgPath, len: usize) -> AzSvgPathVec { unsafe { std::slice::from_raw_parts(ptr, len).to_vec() }.into() }
/// Destructor: Takes ownership of the `SvgPathVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_svg_path_vec_delete(object: &mut AzSvgPathVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_svg_path_vec_deep_copy(object: &AzSvgPathVec) -> AzSvgPathVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_svg_path_vec_fmt_debug(object: &AzSvgPathVec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `Vec<VertexAttribute>`
pub type AzVertexAttributeVecTT = azul_impl::gl::VertexAttributeVec;
pub use AzVertexAttributeVecTT as AzVertexAttributeVec;
/// Creates a new, empty Rust `Vec<VertexAttribute>`
#[no_mangle] pub extern "C" fn az_vertex_attribute_vec_new() -> AzVertexAttributeVec { Vec::<AzVertexAttribute>::new().into() }
/// Creates a new, empty Rust `Vec<VertexAttribute>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_vertex_attribute_vec_with_capacity(cap: usize) -> AzVertexAttributeVec { Vec::<AzVertexAttribute>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<VertexAttribute>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_vertex_attribute_vec_copy_from(ptr: *const AzVertexAttribute, len: usize) -> AzVertexAttributeVec { unsafe { std::slice::from_raw_parts(ptr, len).to_vec() }.into() }
/// Destructor: Takes ownership of the `VertexAttributeVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_vertex_attribute_vec_delete(object: &mut AzVertexAttributeVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_vertex_attribute_vec_deep_copy(object: &AzVertexAttributeVec) -> AzVertexAttributeVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_vertex_attribute_vec_fmt_debug(object: &AzVertexAttributeVec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `VertexAttribute`
pub type AzSvgPathElementVecTT = azul_impl::svg::SvgPathElementVec;
pub use AzSvgPathElementVecTT as AzSvgPathElementVec;
/// Creates a new, empty Rust `Vec<SvgPathElement>`
#[no_mangle] pub extern "C" fn az_svg_path_element_vec_new() -> AzSvgPathElementVec { Vec::<AzSvgPathElement>::new().into() }
/// Creates a new, empty Rust `Vec<SvgPathElement>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_svg_path_element_vec_with_capacity(cap: usize) -> AzSvgPathElementVec { Vec::<AzSvgPathElement>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<SvgPathElement>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_svg_path_element_vec_copy_from(ptr: *const AzSvgPathElement, len: usize) -> AzSvgPathElementVec { unsafe { std::slice::from_raw_parts(ptr, len).to_vec() }.into() }
/// Destructor: Takes ownership of the `SvgPathElementVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_svg_path_element_vec_delete(object: &mut AzSvgPathElementVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_svg_path_element_vec_deep_copy(object: &AzSvgPathElementVec) -> AzSvgPathElementVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_svg_path_element_vec_fmt_debug(object: &AzSvgPathElementVec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `SvgVertex`
pub type AzSvgVertexVecTT = azul_impl::svg::SvgVertexVec;
pub use AzSvgVertexVecTT as AzSvgVertexVec;
/// Creates a new, empty Rust `Vec<SvgVertex>`
#[no_mangle] pub extern "C" fn az_svg_vertex_vec_new() -> AzSvgVertexVec { Vec::<AzSvgVertex>::new().into() }
/// Creates a new, empty Rust `Vec<SvgVertex>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_svg_vertex_vec_with_capacity(cap: usize) -> AzSvgVertexVec { Vec::<AzSvgVertex>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<SvgVertex>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_svg_vertex_vec_copy_from(ptr: *const AzSvgVertex, len: usize) -> AzSvgVertexVec { unsafe { std::slice::from_raw_parts(ptr, len).to_vec() }.into() }
/// Destructor: Takes ownership of the `SvgVertexVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_svg_vertex_vec_delete(object: &mut AzSvgVertexVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_svg_vertex_vec_deep_copy(object: &AzSvgVertexVec) -> AzSvgVertexVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_svg_vertex_vec_fmt_debug(object: &AzSvgVertexVec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `Vec<u32>`
pub type AzU32VecTT = azul_impl::svg::U32Vec;
pub use AzU32VecTT as AzU32Vec;
/// Creates a new, empty Rust `Vec<u32>`
#[no_mangle] pub extern "C" fn az_u32_vec_new() -> AzU32Vec { Vec::<u32>::new().into() }
/// Creates a new, empty Rust `Vec<u32>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_u32_vec_with_capacity(cap: usize) -> AzU32Vec { Vec::<u32>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<u32>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_u32_vec_copy_from(ptr: *const u32, len: usize) -> AzU32Vec { unsafe { std::slice::from_raw_parts(ptr, len).to_vec() }.into() }
/// Destructor: Takes ownership of the `U32Vec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_u32_vec_delete(object: &mut AzU32Vec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_u32_vec_deep_copy(object: &AzU32Vec) -> AzU32Vec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_u32_vec_fmt_debug(object: &AzU32Vec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `XWindowType`
pub type AzXWindowTypeVecTT = azul_impl::window::XWindowTypeVec;
pub use AzXWindowTypeVecTT as AzXWindowTypeVec;
/// Creates a new, empty Rust `Vec<XWindowType>`
#[no_mangle] pub extern "C" fn az_x_window_type_vec_new() -> AzXWindowTypeVec { Vec::<AzXWindowType>::new().into() }
/// Creates a new, empty Rust `Vec<XWindowType>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_x_window_type_vec_with_capacity(cap: usize) -> AzXWindowTypeVec { Vec::<AzXWindowType>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<XWindowType>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_x_window_type_vec_copy_from(ptr: *const AzXWindowType, len: usize) -> AzXWindowTypeVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `XWindowTypeVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_x_window_type_vec_delete(object: &mut AzXWindowTypeVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_x_window_type_vec_deep_copy(object: &AzXWindowTypeVec) -> AzXWindowTypeVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_x_window_type_vec_fmt_debug(object: &AzXWindowTypeVec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `VirtualKeyCode`
pub type AzVirtualKeyCodeVecTT = azul_impl::window::VirtualKeyCodeVec;
pub use AzVirtualKeyCodeVecTT as AzVirtualKeyCodeVec;
/// Creates a new, empty Rust `Vec<VirtualKeyCode>`
#[no_mangle] pub extern "C" fn az_virtual_key_code_vec_new() -> AzVirtualKeyCodeVec { Vec::<AzVirtualKeyCode>::new().into() }
/// Creates a new, empty Rust `Vec<VirtualKeyCode>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_virtual_key_code_vec_with_capacity(cap: usize) -> AzVirtualKeyCodeVec { Vec::<AzVirtualKeyCode>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<VirtualKeyCode>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_virtual_key_code_vec_copy_from(ptr: *const AzVirtualKeyCode, len: usize) -> AzVirtualKeyCodeVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `VirtualKeyCodeVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_virtual_key_code_vec_delete(object: &mut AzVirtualKeyCodeVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_virtual_key_code_vec_deep_copy(object: &AzVirtualKeyCodeVec) -> AzVirtualKeyCodeVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_virtual_key_code_vec_fmt_debug(object: &AzVirtualKeyCodeVec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `CascadeInfo`
pub type AzCascadeInfoVecTT = azul_impl::style::CascadeInfoVec;
pub use AzCascadeInfoVecTT as AzCascadeInfoVec;
/// Creates a new, empty Rust `Vec<CascadeInfo>`
#[no_mangle] pub extern "C" fn az_cascade_info_vec_new() -> AzCascadeInfoVec { Vec::<AzCascadeInfo>::new().into() }
/// Creates a new, empty Rust `Vec<CascadeInfo>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_cascade_info_vec_with_capacity(cap: usize) -> AzCascadeInfoVec { Vec::<AzCascadeInfo>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<CascadeInfo>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_cascade_info_vec_copy_from(ptr: *const AzCascadeInfo, len: usize) -> AzCascadeInfoVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `CascadeInfoVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_cascade_info_vec_delete(object: &mut AzCascadeInfoVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_cascade_info_vec_deep_copy(object: &AzCascadeInfoVec) -> AzCascadeInfoVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_cascade_info_vec_fmt_debug(object: &AzCascadeInfoVec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `ScanCode`
pub type AzScanCodeVecTT = azul_impl::window::ScanCodeVec;
pub use AzScanCodeVecTT as AzScanCodeVec;
/// Creates a new, empty Rust `Vec<ScanCode>`
#[no_mangle] pub extern "C" fn az_scan_code_vec_new() -> AzScanCodeVec { Vec::<u32>::new().into() }
/// Creates a new, empty Rust `Vec<ScanCode>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_scan_code_vec_with_capacity(cap: usize) -> AzScanCodeVec { Vec::<u32>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<ScanCode>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_scan_code_vec_copy_from(ptr: *const u32, len: usize) -> AzScanCodeVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `ScanCodeVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_scan_code_vec_delete(object: &mut AzScanCodeVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_scan_code_vec_deep_copy(object: &AzScanCodeVec) -> AzScanCodeVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_scan_code_vec_fmt_debug(object: &AzScanCodeVec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `CssDeclaration`
pub type AzCssDeclarationVecTT = azul_impl::css::CssDeclarationVec;
pub use AzCssDeclarationVecTT as AzCssDeclarationVec;
/// Creates a new, empty Rust `Vec<CssDeclaration>`
#[no_mangle] pub extern "C" fn az_css_declaration_vec_new() -> AzCssDeclarationVec { Vec::<AzCssDeclaration>::new().into() }
/// Creates a new, empty Rust `Vec<CssDeclaration>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_css_declaration_vec_with_capacity(cap: usize) -> AzCssDeclarationVec { Vec::<AzCssDeclaration>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<CssDeclaration>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_css_declaration_vec_copy_from(ptr: *const AzCssDeclaration, len: usize) -> AzCssDeclarationVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `CssDeclarationVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_css_declaration_vec_delete(object: &mut AzCssDeclarationVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_css_declaration_vec_deep_copy(object: &AzCssDeclarationVec) -> AzCssDeclarationVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_css_declaration_vec_fmt_debug(object: &AzCssDeclarationVec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `CssPathSelector`
pub type AzCssPathSelectorVecTT = azul_impl::css::CssPathSelectorVec;
pub use AzCssPathSelectorVecTT as AzCssPathSelectorVec;
/// Creates a new, empty Rust `Vec<CssPathSelector>`
#[no_mangle] pub extern "C" fn az_css_path_selector_vec_new() -> AzCssPathSelectorVec { Vec::<AzCssPathSelector>::new().into() }
/// Creates a new, empty Rust `Vec<CssPathSelector>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_css_path_selector_vec_with_capacity(cap: usize) -> AzCssPathSelectorVec { Vec::<AzCssPathSelector>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<CssPathSelector>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_css_path_selector_vec_copy_from(ptr: *const AzCssPathSelector, len: usize) -> AzCssPathSelectorVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `CssPathSelectorVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_css_path_selector_vec_delete(object: &mut AzCssPathSelectorVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_css_path_selector_vec_deep_copy(object: &AzCssPathSelectorVec) -> AzCssPathSelectorVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_css_path_selector_vec_fmt_debug(object: &AzCssPathSelectorVec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `Stylesheet`
pub type AzStylesheetVecTT = azul_impl::css::StylesheetVec;
pub use AzStylesheetVecTT as AzStylesheetVec;
/// Creates a new, empty Rust `Vec<Stylesheet>`
#[no_mangle] pub extern "C" fn az_stylesheet_vec_new() -> AzStylesheetVec { Vec::<AzStylesheet>::new().into() }
/// Creates a new, empty Rust `Vec<Stylesheet>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_stylesheet_vec_with_capacity(cap: usize) -> AzStylesheetVec { Vec::<AzStylesheet>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<Stylesheet>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_stylesheet_vec_copy_from(ptr: *const AzStylesheet, len: usize) -> AzStylesheetVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `StylesheetVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_stylesheet_vec_delete(object: &mut AzStylesheetVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_stylesheet_vec_deep_copy(object: &AzStylesheetVec) -> AzStylesheetVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_stylesheet_vec_fmt_debug(object: &AzStylesheetVec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `CssRuleBlock`
pub type AzCssRuleBlockVecTT = azul_impl::css::CssRuleBlockVec;
pub use AzCssRuleBlockVecTT as AzCssRuleBlockVec;
/// Creates a new, empty Rust `Vec<CssRuleBlock>`
#[no_mangle] pub extern "C" fn az_css_rule_block_vec_new() -> AzCssRuleBlockVec { Vec::<AzCssRuleBlock>::new().into() }
/// Creates a new, empty Rust `Vec<CssRuleBlock>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_css_rule_block_vec_with_capacity(cap: usize) -> AzCssRuleBlockVec { Vec::<AzCssRuleBlock>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<CssRuleBlock>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_css_rule_block_vec_copy_from(ptr: *const AzCssRuleBlock, len: usize) -> AzCssRuleBlockVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `CssRuleBlockVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_css_rule_block_vec_delete(object: &mut AzCssRuleBlockVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_css_rule_block_vec_deep_copy(object: &AzCssRuleBlockVec) -> AzCssRuleBlockVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_css_rule_block_vec_fmt_debug(object: &AzCssRuleBlockVec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `U8Vec`
pub type AzU8VecTT = azul_impl::css::U8Vec;
pub use AzU8VecTT as AzU8Vec;
/// Creates a new, empty Rust `Vec<u8>`
#[no_mangle] pub extern "C" fn az_u8_vec_new() -> AzU8Vec { Vec::<u8>::new().into() }
/// Creates a new, empty Rust `Vec<u8>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_u8_vec_with_capacity(cap: usize) -> AzU8Vec { Vec::<u8>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<u8>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_u8_vec_copy_from(ptr: *const u8, len: usize) -> AzU8Vec { unsafe { std::slice::from_raw_parts(ptr, len).to_vec() }.into() }
/// Destructor: Takes ownership of the `U8Vec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_u8_vec_delete(object: &mut AzU8Vec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_u8_vec_deep_copy(object: &AzU8Vec) -> AzU8Vec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_u8_vec_fmt_debug(object: &AzU8Vec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `CallbackData`
pub type AzCallbackDataVecTT = azul_impl::dom::CallbackDataVec;
pub use AzCallbackDataVecTT as AzCallbackDataVec;
/// Creates a new, empty Rust `Vec<CallbackData>`
#[no_mangle] pub extern "C" fn az_callback_data_vec_new() -> AzCallbackDataVec { Vec::<AzCallbackData>::new().into() }
/// Creates a new, empty Rust `Vec<CallbackData>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_callback_data_vec_with_capacity(cap: usize) -> AzCallbackDataVec { Vec::<AzCallbackData>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<CallbackData>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_callback_data_vec_copy_from(ptr: *const AzCallbackData, len: usize) -> AzCallbackDataVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `CallbackDataVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_callback_data_vec_delete(object: &mut AzCallbackDataVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_callback_data_vec_deep_copy(object: &AzCallbackDataVec) -> AzCallbackDataVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_callback_data_vec_fmt_debug(object: &AzCallbackDataVec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `Vec<DebugMessage>`
pub type AzDebugMessageVecTT = azul_impl::gl::AzDebugMessageVec;
pub use AzDebugMessageVecTT as AzDebugMessageVec;
/// Creates a new, empty Rust `Vec<DebugMessage>`
#[no_mangle] pub extern "C" fn az_debug_message_vec_new() -> AzDebugMessageVec { Vec::<AzDebugMessage>::new().into() }
/// Creates a new, empty Rust `Vec<DebugMessage>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_debug_message_vec_with_capacity(cap: usize) -> AzDebugMessageVec { Vec::<AzDebugMessage>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<DebugMessage>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_debug_message_vec_copy_from(ptr: *const AzDebugMessage, len: usize) -> AzDebugMessageVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `DebugMessageVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_debug_message_vec_delete(object: &mut AzDebugMessageVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_debug_message_vec_deep_copy(object: &AzDebugMessageVec) -> AzDebugMessageVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_debug_message_vec_fmt_debug(object: &AzDebugMessageVec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `U32Vec`
pub type AzGLuintVecTT = azul_impl::gl::GLuintVec;
pub use AzGLuintVecTT as AzGLuintVec;
/// Creates a new, empty Rust `Vec<u32>`
#[no_mangle] pub extern "C" fn az_g_luint_vec_new() -> AzGLuintVec { Vec::<u32>::new().into() }
/// Creates a new, empty Rust `Vec<u32>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_g_luint_vec_with_capacity(cap: usize) -> AzGLuintVec { Vec::<u32>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<u32>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_g_luint_vec_copy_from(ptr: *const u32, len: usize) -> AzGLuintVec { unsafe { std::slice::from_raw_parts(ptr, len).to_vec() }.into() }
/// Destructor: Takes ownership of the `GLuintVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_g_luint_vec_delete(object: &mut AzGLuintVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_g_luint_vec_deep_copy(object: &AzGLuintVec) -> AzGLuintVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_g_luint_vec_fmt_debug(object: &AzGLuintVec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `GLintVec`
pub type AzGLintVecTT = azul_impl::gl::GLintVec;
pub use AzGLintVecTT as AzGLintVec;
/// Creates a new, empty Rust `Vec<GLint>`
#[no_mangle] pub extern "C" fn az_g_lint_vec_new() -> AzGLintVec { Vec::<i32>::new().into() }
/// Creates a new, empty Rust `Vec<GLint>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_g_lint_vec_with_capacity(cap: usize) -> AzGLintVec { Vec::<i32>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<GLint>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_g_lint_vec_copy_from(ptr: *const i32, len: usize) -> AzGLintVec { unsafe { std::slice::from_raw_parts(ptr, len).to_vec() }.into() }
/// Destructor: Takes ownership of the `GLintVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_g_lint_vec_delete(object: &mut AzGLintVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_g_lint_vec_deep_copy(object: &AzGLintVec) -> AzGLintVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_g_lint_vec_fmt_debug(object: &AzGLintVec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `DomVec`
pub type AzDomVecTT = azul_impl::dom::DomVec;
pub use AzDomVecTT as AzDomVec;
/// Creates a new, empty Rust `Vec<Dom>`
#[no_mangle] pub extern "C" fn az_dom_vec_new() -> AzDomVec { Vec::<AzDom>::new().into() }
/// Creates a new, empty Rust `Vec<Dom>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_dom_vec_with_capacity(cap: usize) -> AzDomVec { Vec::<AzDom>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<Dom>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_dom_vec_copy_from(ptr: *const AzDom, len: usize) -> AzDomVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `DomVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_dom_vec_delete(object: &mut AzDomVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_dom_vec_deep_copy(object: &AzDomVec) -> AzDomVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_dom_vec_fmt_debug(object: &AzDomVec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `StringVec`
pub type AzStringVecTT = azul_impl::css::StringVec;
pub use AzStringVecTT as AzStringVec;
/// Creates a new, empty Rust `Vec<String>`
#[no_mangle] pub extern "C" fn az_string_vec_new() -> AzStringVec { Vec::<AzString>::new().into() }
/// Creates a new, empty Rust `Vec<String>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_string_vec_with_capacity(cap: usize) -> AzStringVec { Vec::<AzString>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<String>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_string_vec_copy_from(ptr: *const AzString, len: usize) -> AzStringVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `StringVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_string_vec_delete(object: &mut AzStringVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_string_vec_deep_copy(object: &AzStringVec) -> AzStringVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_string_vec_fmt_debug(object: &AzStringVec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `StringPairVec`
pub type AzStringPairVecTT = azul_impl::window::StringPairVec;
pub use AzStringPairVecTT as AzStringPairVec;
/// Creates a new, empty Rust `Vec<StringPair>`
#[no_mangle] pub extern "C" fn az_string_pair_vec_new() -> AzStringPairVec { Vec::<AzStringPair>::new().into() }
/// Creates a new, empty Rust `Vec<StringPair>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_string_pair_vec_with_capacity(cap: usize) -> AzStringPairVec { Vec::<AzStringPair>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<StringPair>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_string_pair_vec_copy_from(ptr: *const AzStringPair, len: usize) -> AzStringPairVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `StringPairVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_string_pair_vec_delete(object: &mut AzStringPairVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_string_pair_vec_deep_copy(object: &AzStringPairVec) -> AzStringPairVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_string_pair_vec_fmt_debug(object: &AzStringPairVec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `GradientStopPreVec`
pub type AzGradientStopPreVecTT = azul_impl::css::GradientStopPreVec;
pub use AzGradientStopPreVecTT as AzGradientStopPreVec;
/// Creates a new, empty Rust `Vec<GradientStopPre>`
#[no_mangle] pub extern "C" fn az_gradient_stop_pre_vec_new() -> AzGradientStopPreVec { Vec::<AzGradientStopPre>::new().into() }
/// Creates a new, empty Rust `Vec<GradientStopPre>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_gradient_stop_pre_vec_with_capacity(cap: usize) -> AzGradientStopPreVec { Vec::<AzGradientStopPre>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<GradientStopPre>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_gradient_stop_pre_vec_copy_from(ptr: *const AzGradientStopPre, len: usize) -> AzGradientStopPreVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `GradientStopPreVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_gradient_stop_pre_vec_delete(object: &mut AzGradientStopPreVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_gradient_stop_pre_vec_deep_copy(object: &AzGradientStopPreVec) -> AzGradientStopPreVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_gradient_stop_pre_vec_fmt_debug(object: &AzGradientStopPreVec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `CascadedCssPropertyWithSourceVec`
pub type AzCascadedCssPropertyWithSourceVecTT = azul_impl::styled_dom::CascadedCssPropertyWithSourceVec;
pub use AzCascadedCssPropertyWithSourceVecTT as AzCascadedCssPropertyWithSourceVec;
/// Creates a new, empty Rust `Vec<CascadedCssPropertyWithSource>`
#[no_mangle] pub extern "C" fn az_cascaded_css_property_with_source_vec_new() -> AzCascadedCssPropertyWithSourceVec { Vec::<AzCascadedCssPropertyWithSource>::new().into() }
/// Creates a new, empty Rust `Vec<CascadedCssPropertyWithSource>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_cascaded_css_property_with_source_vec_with_capacity(cap: usize) -> AzCascadedCssPropertyWithSourceVec { Vec::<AzCascadedCssPropertyWithSource>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<CascadedCssPropertyWithSource>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_cascaded_css_property_with_source_vec_copy_from(ptr: *const AzCascadedCssPropertyWithSource, len: usize) -> AzCascadedCssPropertyWithSourceVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `CascadedCssPropertyWithSourceVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_cascaded_css_property_with_source_vec_delete(object: &mut AzCascadedCssPropertyWithSourceVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_cascaded_css_property_with_source_vec_deep_copy(object: &AzCascadedCssPropertyWithSourceVec) -> AzCascadedCssPropertyWithSourceVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_cascaded_css_property_with_source_vec_fmt_debug(object: &AzCascadedCssPropertyWithSourceVec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `NodeIdVec`
pub type AzNodeIdVecTT = azul_impl::styled_dom::NodeIdVec;
pub use AzNodeIdVecTT as AzNodeIdVec;
/// Creates a new, empty Rust `Vec<NodeId>`
#[no_mangle] pub extern "C" fn az_node_id_vec_new() -> AzNodeIdVec { Vec::<AzNodeId>::new().into() }
/// Creates a new, empty Rust `Vec<NodeId>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_node_id_vec_with_capacity(cap: usize) -> AzNodeIdVec { Vec::<AzNodeId>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<NodeId>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_node_id_vec_copy_from(ptr: *const AzNodeId, len: usize) -> AzNodeIdVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `NodeIdVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_node_id_vec_delete(object: &mut AzNodeIdVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_node_id_vec_deep_copy(object: &AzNodeIdVec) -> AzNodeIdVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_node_id_vec_fmt_debug(object: &AzNodeIdVec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `NodeVec`
pub type AzNodeVecTT = azul_impl::styled_dom::AzNodeVec;
pub use AzNodeVecTT as AzNodeVec;
/// Creates a new, empty Rust `Vec<Node>`
#[no_mangle] pub extern "C" fn az_node_vec_new() -> AzNodeVec { Vec::<AzNode>::new().into() }
/// Creates a new, empty Rust `Vec<Node>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_node_vec_with_capacity(cap: usize) -> AzNodeVec { Vec::<AzNode>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<Node>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_node_vec_copy_from(ptr: *const AzNode, len: usize) -> AzNodeVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `NodeVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_node_vec_delete(object: &mut AzNodeVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_node_vec_deep_copy(object: &AzNodeVec) -> AzNodeVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_node_vec_fmt_debug(object: &AzNodeVec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `StyledNodeVec`
pub type AzStyledNodeVecTT = azul_impl::styled_dom::StyledNodeVec;
pub use AzStyledNodeVecTT as AzStyledNodeVec;
/// Creates a new, empty Rust `Vec<StyledNode>`
#[no_mangle] pub extern "C" fn az_styled_node_vec_new() -> AzStyledNodeVec { Vec::<AzStyledNode>::new().into() }
/// Creates a new, empty Rust `Vec<StyledNode>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_styled_node_vec_with_capacity(cap: usize) -> AzStyledNodeVec { Vec::<AzStyledNode>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<StyledNode>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_styled_node_vec_copy_from(ptr: *const AzStyledNode, len: usize) -> AzStyledNodeVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `StyledNodeVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_styled_node_vec_delete(object: &mut AzStyledNodeVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_styled_node_vec_deep_copy(object: &AzStyledNodeVec) -> AzStyledNodeVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_styled_node_vec_fmt_debug(object: &AzStyledNodeVec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `TagIdsToNodeIdsMappingVec`
pub type AzTagIdsToNodeIdsMappingVecTT = azul_impl::styled_dom::TagIdsToNodeIdsMappingVec;
pub use AzTagIdsToNodeIdsMappingVecTT as AzTagIdsToNodeIdsMappingVec;
/// Creates a new, empty Rust `Vec<TagIdToNodeIdMapping>`
#[no_mangle] pub extern "C" fn az_tag_ids_to_node_ids_mapping_vec_new() -> AzTagIdsToNodeIdsMappingVec { Vec::<AzTagIdToNodeIdMapping>::new().into() }
/// Creates a new, empty Rust `Vec<TagIdToNodeIdMapping>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_tag_ids_to_node_ids_mapping_vec_with_capacity(cap: usize) -> AzTagIdsToNodeIdsMappingVec { Vec::<AzTagIdToNodeIdMapping>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<TagIdToNodeIdMapping>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_tag_ids_to_node_ids_mapping_vec_copy_from(ptr: *const AzTagIdToNodeIdMapping, len: usize) -> AzTagIdsToNodeIdsMappingVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `TagIdsToNodeIdsMappingVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_tag_ids_to_node_ids_mapping_vec_delete(object: &mut AzTagIdsToNodeIdsMappingVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_tag_ids_to_node_ids_mapping_vec_deep_copy(object: &AzTagIdsToNodeIdsMappingVec) -> AzTagIdsToNodeIdsMappingVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_tag_ids_to_node_ids_mapping_vec_fmt_debug(object: &AzTagIdsToNodeIdsMappingVec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `ParentWithNodeDepthVec`
pub type AzParentWithNodeDepthVecTT = azul_impl::styled_dom::ParentWithNodeDepthVec;
pub use AzParentWithNodeDepthVecTT as AzParentWithNodeDepthVec;
/// Creates a new, empty Rust `Vec<ParentWithNodeDepth>`
#[no_mangle] pub extern "C" fn az_parent_with_node_depth_vec_new() -> AzParentWithNodeDepthVec { Vec::<AzParentWithNodeDepth>::new().into() }
/// Creates a new, empty Rust `Vec<ParentWithNodeDepth>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_parent_with_node_depth_vec_with_capacity(cap: usize) -> AzParentWithNodeDepthVec { Vec::<AzParentWithNodeDepth>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<ParentWithNodeDepth>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_parent_with_node_depth_vec_copy_from(ptr: *const AzParentWithNodeDepth, len: usize) -> AzParentWithNodeDepthVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `ParentWithNodeDepthVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_parent_with_node_depth_vec_delete(object: &mut AzParentWithNodeDepthVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_parent_with_node_depth_vec_deep_copy(object: &AzParentWithNodeDepthVec) -> AzParentWithNodeDepthVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_parent_with_node_depth_vec_fmt_debug(object: &AzParentWithNodeDepthVec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `NodeDataVec`
pub type AzNodeDataVecTT = azul_impl::styled_dom::NodeDataVec;
pub use AzNodeDataVecTT as AzNodeDataVec;
/// Creates a new, empty Rust `Vec<NodeData>`
#[no_mangle] pub extern "C" fn az_node_data_vec_new() -> AzNodeDataVec { Vec::<NodeData>::new().into() }
/// Creates a new, empty Rust `Vec<NodeData>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_node_data_vec_with_capacity(cap: usize) -> AzNodeDataVec { Vec::<NodeData>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<NodeData>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_node_data_vec_copy_from(ptr: *const AzNodeData, len: usize) -> AzNodeDataVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `NodeDataVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_node_data_vec_delete(object: &mut AzNodeDataVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_node_data_vec_deep_copy(object: &AzNodeDataVec) -> AzNodeDataVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_node_data_vec_fmt_debug(object: &AzNodeDataVec) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionThreadSendMsg` struct
pub type AzOptionThreadSendMsgTT = azul_impl::task::OptionThreadSendMsg;
pub use AzOptionThreadSendMsgTT as AzOptionThreadSendMsg;
/// Destructor: Takes ownership of the `OptionThreadSendMsg` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_thread_send_msg_delete(object: &mut AzOptionThreadSendMsg) { match object { azul_impl::task::OptionThreadSendMsg::None => { }, azul_impl::task::OptionThreadSendMsg::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_thread_send_msg_deep_copy(object: &AzOptionThreadSendMsg) -> AzOptionThreadSendMsg { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_thread_send_msg_fmt_debug(object: &AzOptionThreadSendMsg) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionLayoutRect` struct
pub type AzOptionLayoutRectTT = azul_impl::css::OptionLayoutRect;
pub use AzOptionLayoutRectTT as AzOptionLayoutRect;
/// Destructor: Takes ownership of the `OptionLayoutRect` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_layout_rect_delete(object: &mut AzOptionLayoutRect) { match object { azul_impl::css::OptionLayoutRect::None => { }, azul_impl::css::OptionLayoutRect::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_layout_rect_deep_copy(object: &AzOptionLayoutRect) -> AzOptionLayoutRect { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_layout_rect_fmt_debug(object: &AzOptionLayoutRect) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionRefAny` struct
pub type AzOptionRefAnyTT = azul_impl::callbacks::OptionRefAny;
pub use AzOptionRefAnyTT as AzOptionRefAny;
/// Destructor: Takes ownership of the `OptionRefAny` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_ref_any_delete(object: &mut AzOptionRefAny) { match object { azul_impl::callbacks::OptionRefAny::None => { }, azul_impl::callbacks::OptionRefAny::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_ref_any_deep_copy(object: &AzOptionRefAny) -> AzOptionRefAny { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_ref_any_fmt_debug(object: &AzOptionRefAny) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionStyleOpacityValue` struct
pub type AzOptionStyleOpacityValueTT = azul_impl::css::OptionStyleOpacityValue;
pub use AzOptionStyleOpacityValueTT as AzOptionStyleOpacityValue;
/// Destructor: Takes ownership of the `OptionStyleOpacityValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_style_opacity_value_delete(object: &mut AzOptionStyleOpacityValue) { match object { azul_impl::css::OptionStyleOpacityValue::None => { }, azul_impl::css::OptionStyleOpacityValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_style_opacity_value_deep_copy(object: &AzOptionStyleOpacityValue) -> AzOptionStyleOpacityValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_style_opacity_value_fmt_debug(object: &AzOptionStyleOpacityValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionStyleTransformVecValue` struct
pub type AzOptionStyleTransformVecValueTT = azul_impl::css::OptionStyleTransformVecValue;
pub use AzOptionStyleTransformVecValueTT as AzOptionStyleTransformVecValue;
/// Destructor: Takes ownership of the `OptionStyleTransformVecValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_style_transform_vec_value_delete(object: &mut AzOptionStyleTransformVecValue) { match object { azul_impl::css::OptionStyleTransformVecValue::None => { }, azul_impl::css::OptionStyleTransformVecValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_style_transform_vec_value_deep_copy(object: &AzOptionStyleTransformVecValue) -> AzOptionStyleTransformVecValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_style_transform_vec_value_fmt_debug(object: &AzOptionStyleTransformVecValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionStyleTransformOriginValue` struct
pub type AzOptionStyleTransformOriginValueTT = azul_impl::css::OptionStyleTransformOriginValue;
pub use AzOptionStyleTransformOriginValueTT as AzOptionStyleTransformOriginValue;
/// Destructor: Takes ownership of the `OptionStyleTransformOriginValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_style_transform_origin_value_delete(object: &mut AzOptionStyleTransformOriginValue) { match object { azul_impl::css::OptionStyleTransformOriginValue::None => { }, azul_impl::css::OptionStyleTransformOriginValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_style_transform_origin_value_deep_copy(object: &AzOptionStyleTransformOriginValue) -> AzOptionStyleTransformOriginValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_style_transform_origin_value_fmt_debug(object: &AzOptionStyleTransformOriginValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionStylePerspectiveOriginValue` struct
pub type AzOptionStylePerspectiveOriginValueTT = azul_impl::css::OptionStylePerspectiveOriginValue;
pub use AzOptionStylePerspectiveOriginValueTT as AzOptionStylePerspectiveOriginValue;
/// Destructor: Takes ownership of the `OptionStylePerspectiveOriginValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_style_perspective_origin_value_delete(object: &mut AzOptionStylePerspectiveOriginValue) { match object { azul_impl::css::OptionStylePerspectiveOriginValue::None => { }, azul_impl::css::OptionStylePerspectiveOriginValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_style_perspective_origin_value_deep_copy(object: &AzOptionStylePerspectiveOriginValue) -> AzOptionStylePerspectiveOriginValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_style_perspective_origin_value_fmt_debug(object: &AzOptionStylePerspectiveOriginValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionStyleBackfaceVisibilityValue` struct
pub type AzOptionStyleBackfaceVisibilityValueTT = azul_impl::css::OptionStyleBackfaceVisibilityValue;
pub use AzOptionStyleBackfaceVisibilityValueTT as AzOptionStyleBackfaceVisibilityValue;
/// Destructor: Takes ownership of the `OptionStyleBackfaceVisibilityValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_style_backface_visibility_value_delete(object: &mut AzOptionStyleBackfaceVisibilityValue) { match object { azul_impl::css::OptionStyleBackfaceVisibilityValue::None => { }, azul_impl::css::OptionStyleBackfaceVisibilityValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_style_backface_visibility_value_deep_copy(object: &AzOptionStyleBackfaceVisibilityValue) -> AzOptionStyleBackfaceVisibilityValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_style_backface_visibility_value_fmt_debug(object: &AzOptionStyleBackfaceVisibilityValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionLayoutPoint` struct
pub type AzOptionLayoutPointTT = azul_impl::css::OptionLayoutPoint;
pub use AzOptionLayoutPointTT as AzOptionLayoutPoint;
/// Destructor: Takes ownership of the `OptionLayoutPoint` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_layout_point_delete(object: &mut AzOptionLayoutPoint) { match object { azul_impl::css::OptionLayoutPoint::None => { }, azul_impl::css::OptionLayoutPoint::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_layout_point_deep_copy(object: &AzOptionLayoutPoint) -> AzOptionLayoutPoint { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_layout_point_fmt_debug(object: &AzOptionLayoutPoint) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionWindowTheme` struct
pub type AzOptionWindowThemeTT = azul_impl::window::OptionWindowTheme;
pub use AzOptionWindowThemeTT as AzOptionWindowTheme;
/// Destructor: Takes ownership of the `OptionWindowTheme` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_window_theme_delete(object: &mut AzOptionWindowTheme) { match object { azul_impl::window::OptionWindowTheme::None => { }, azul_impl::window::OptionWindowTheme::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_window_theme_deep_copy(object: &AzOptionWindowTheme) -> AzOptionWindowTheme { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_window_theme_fmt_debug(object: &AzOptionWindowTheme) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionNodeId` struct
pub type AzOptionNodeIdTT = azul_impl::styled_dom::OptionNodeId;
pub use AzOptionNodeIdTT as AzOptionNodeId;
/// Destructor: Takes ownership of the `OptionNodeId` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_node_id_delete(object: &mut AzOptionNodeId) { match object { azul_impl::styled_dom::OptionNodeId::None => { }, azul_impl::styled_dom::OptionNodeId::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_node_id_deep_copy(object: &AzOptionNodeId) -> AzOptionNodeId { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_node_id_fmt_debug(object: &AzOptionNodeId) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionDomNodeId` struct
pub type AzOptionDomNodeIdTT = azul_impl::callbacks::OptionDomNodeId;
pub use AzOptionDomNodeIdTT as AzOptionDomNodeId;
/// Destructor: Takes ownership of the `OptionDomNodeId` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_dom_node_id_delete(object: &mut AzOptionDomNodeId) { match object { azul_impl::callbacks::OptionDomNodeId::None => { }, azul_impl::callbacks::OptionDomNodeId::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_dom_node_id_deep_copy(object: &AzOptionDomNodeId) -> AzOptionDomNodeId { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_dom_node_id_fmt_debug(object: &AzOptionDomNodeId) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionColorU` struct
pub type AzOptionColorUTT = azul_impl::css::OptionColorU;
pub use AzOptionColorUTT as AzOptionColorU;
/// Destructor: Takes ownership of the `OptionColorU` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_color_u_delete(object: &mut AzOptionColorU) { match object { azul_impl::css::OptionColorU::None => { }, azul_impl::css::OptionColorU::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_color_u_deep_copy(object: &AzOptionColorU) -> AzOptionColorU { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_color_u_fmt_debug(object: &AzOptionColorU) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionRawImage` struct
pub type AzOptionRawImageTT = azul_impl::resources::OptionRawImage;
pub use AzOptionRawImageTT as AzOptionRawImage;
/// Destructor: Takes ownership of the `OptionRawImage` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_raw_image_delete(object: &mut AzOptionRawImage) { match object { azul_impl::resources::OptionRawImage::None => { }, azul_impl::resources::OptionRawImage::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_raw_image_deep_copy(object: &AzOptionRawImage) -> AzOptionRawImage { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_raw_image_fmt_debug(object: &AzOptionRawImage) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionSvgDashPattern` struct
pub type AzOptionSvgDashPatternTT = azul_impl::svg::OptionSvgDashPattern;
pub use AzOptionSvgDashPatternTT as AzOptionSvgDashPattern;
/// Destructor: Takes ownership of the `OptionSvgDashPattern` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_svg_dash_pattern_delete(object: &mut AzOptionSvgDashPattern) { match object { azul_impl::svg::OptionSvgDashPattern::None => { }, azul_impl::svg::OptionSvgDashPattern::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_svg_dash_pattern_deep_copy(object: &AzOptionSvgDashPattern) -> AzOptionSvgDashPattern { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_svg_dash_pattern_fmt_debug(object: &AzOptionSvgDashPattern) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionWaylandTheme` struct
pub type AzOptionWaylandThemeTT = azul_impl::window::OptionWaylandTheme;
pub use AzOptionWaylandThemeTT as AzOptionWaylandTheme;
/// Destructor: Takes ownership of the `OptionWaylandTheme` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_wayland_theme_delete(object: &mut AzOptionWaylandTheme) { match object { azul_impl::window::OptionWaylandTheme::None => { }, azul_impl::window::OptionWaylandTheme::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_wayland_theme_deep_copy(object: &AzOptionWaylandTheme) -> AzOptionWaylandTheme { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_wayland_theme_fmt_debug(object: &AzOptionWaylandTheme) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionTaskBarIcon` struct
pub type AzOptionTaskBarIconTT = azul_impl::window::OptionTaskBarIcon;
pub use AzOptionTaskBarIconTT as AzOptionTaskBarIcon;
/// Destructor: Takes ownership of the `OptionTaskBarIcon` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_task_bar_icon_delete(object: &mut AzOptionTaskBarIcon) { match object { azul_impl::window::OptionTaskBarIcon::None => { }, azul_impl::window::OptionTaskBarIcon::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_task_bar_icon_deep_copy(object: &AzOptionTaskBarIcon) -> AzOptionTaskBarIcon { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_task_bar_icon_fmt_debug(object: &AzOptionTaskBarIcon) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionHwndHandle` struct
pub type AzOptionHwndHandleTT = azul_impl::window::OptionHwndHandle;
pub use AzOptionHwndHandleTT as AzOptionHwndHandle;
/// Destructor: Takes ownership of the `OptionHwndHandle` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_hwnd_handle_delete(object: &mut AzOptionHwndHandle) { match object { azul_impl::window::OptionHwndHandle::None => { }, azul_impl::window::OptionHwndHandle::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_hwnd_handle_deep_copy(object: &AzOptionHwndHandle) -> AzOptionHwndHandle { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_hwnd_handle_fmt_debug(object: &AzOptionHwndHandle) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionLogicalPosition` struct
pub type AzOptionLogicalPositionTT = azul_impl::window::OptionLogicalPosition;
pub use AzOptionLogicalPositionTT as AzOptionLogicalPosition;
/// Destructor: Takes ownership of the `OptionLogicalPosition` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_logical_position_delete(object: &mut AzOptionLogicalPosition) { match object { azul_impl::window::OptionLogicalPosition::None => { }, azul_impl::window::OptionLogicalPosition::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_logical_position_deep_copy(object: &AzOptionLogicalPosition) -> AzOptionLogicalPosition { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_logical_position_fmt_debug(object: &AzOptionLogicalPosition) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionPhysicalPositionI32` struct
pub type AzOptionPhysicalPositionI32TT = azul_impl::window::OptionPhysicalPositionI32;
pub use AzOptionPhysicalPositionI32TT as AzOptionPhysicalPositionI32;
/// Destructor: Takes ownership of the `OptionPhysicalPositionI32` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_physical_position_i32_delete(object: &mut AzOptionPhysicalPositionI32) { match object { azul_impl::window::OptionPhysicalPositionI32::None => { }, azul_impl::window::OptionPhysicalPositionI32::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_physical_position_i32_deep_copy(object: &AzOptionPhysicalPositionI32) -> AzOptionPhysicalPositionI32 { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_physical_position_i32_fmt_debug(object: &AzOptionPhysicalPositionI32) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionWindowIcon` struct
pub type AzOptionWindowIconTT = azul_impl::window::OptionWindowIcon;
pub use AzOptionWindowIconTT as AzOptionWindowIcon;
/// Destructor: Takes ownership of the `OptionWindowIcon` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_window_icon_delete(object: &mut AzOptionWindowIcon) { match object { azul_impl::window::OptionWindowIcon::None => { }, azul_impl::window::OptionWindowIcon::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_window_icon_deep_copy(object: &AzOptionWindowIcon) -> AzOptionWindowIcon { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_window_icon_fmt_debug(object: &AzOptionWindowIcon) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionString` struct
pub type AzOptionStringTT = azul_impl::window::OptionAzString;
pub use AzOptionStringTT as AzOptionString;
/// Destructor: Takes ownership of the `OptionString` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_string_delete(object: &mut AzOptionString) { match object { azul_impl::window::OptionAzString::None => { }, azul_impl::window::OptionAzString::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_string_deep_copy(object: &AzOptionString) -> AzOptionString { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_string_fmt_debug(object: &AzOptionString) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionX11Visual` struct
pub type AzOptionX11VisualTT = azul_impl::window::OptionX11Visual;
pub use AzOptionX11VisualTT as AzOptionX11Visual;
/// Destructor: Takes ownership of the `OptionX11Visual` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_x11_visual_delete(object: &mut AzOptionX11Visual) { match object { azul_impl::window::OptionX11Visual::None => { }, azul_impl::window::OptionX11Visual::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_x11_visual_deep_copy(object: &AzOptionX11Visual) -> AzOptionX11Visual { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_x11_visual_fmt_debug(object: &AzOptionX11Visual) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionI32` struct
pub type AzOptionI32TT = azul_impl::window::OptionI32;
pub use AzOptionI32TT as AzOptionI32;
/// Destructor: Takes ownership of the `OptionI32` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_i32_delete(object: &mut AzOptionI32) { match object { azul_impl::window::OptionI32::None => { }, azul_impl::window::OptionI32::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_i32_deep_copy(object: &AzOptionI32) -> AzOptionI32 { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_i32_fmt_debug(object: &AzOptionI32) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionF32` struct
pub type AzOptionF32TT = azul_impl::window::OptionF32;
pub use AzOptionF32TT as AzOptionF32;
/// Destructor: Takes ownership of the `OptionF32` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_f32_delete(object: &mut AzOptionF32) { match object { azul_impl::window::OptionF32::None => { }, azul_impl::window::OptionF32::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_f32_deep_copy(object: &AzOptionF32) -> AzOptionF32 { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_f32_fmt_debug(object: &AzOptionF32) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionMouseCursorType` struct
pub type AzOptionMouseCursorTypeTT = azul_impl::window::OptionMouseCursorType;
pub use AzOptionMouseCursorTypeTT as AzOptionMouseCursorType;
/// Destructor: Takes ownership of the `OptionMouseCursorType` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_mouse_cursor_type_delete(object: &mut AzOptionMouseCursorType) { match object { azul_impl::window::OptionMouseCursorType::None => { }, azul_impl::window::OptionMouseCursorType::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_mouse_cursor_type_deep_copy(object: &AzOptionMouseCursorType) -> AzOptionMouseCursorType { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_mouse_cursor_type_fmt_debug(object: &AzOptionMouseCursorType) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionLogicalSize` struct
pub type AzOptionLogicalSizeTT = azul_impl::window::OptionLogicalSize;
pub use AzOptionLogicalSizeTT as AzOptionLogicalSize;
/// Destructor: Takes ownership of the `OptionLogicalSize` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_logical_size_delete(object: &mut AzOptionLogicalSize) { match object { azul_impl::window::OptionLogicalSize::None => { }, azul_impl::window::OptionLogicalSize::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_logical_size_deep_copy(object: &AzOptionLogicalSize) -> AzOptionLogicalSize { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_logical_size_fmt_debug(object: &AzOptionLogicalSize) -> AzString { format!("{:#?}", object).into() }

/// Option<char> but the char is a u32, for C FFI stability reasons
pub type AzOptionCharTT = azul_impl::window::OptionChar;
pub use AzOptionCharTT as AzOptionChar;
/// Destructor: Takes ownership of the `OptionChar` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_char_delete(object: &mut AzOptionChar) { match object { azul_impl::window::OptionChar::None => { }, azul_impl::window::OptionChar::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_char_deep_copy(object: &AzOptionChar) -> AzOptionChar { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_char_fmt_debug(object: &AzOptionChar) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionVirtualKeyCode` struct
pub type AzOptionVirtualKeyCodeTT = azul_impl::window::OptionVirtualKeyCode;
pub use AzOptionVirtualKeyCodeTT as AzOptionVirtualKeyCode;
/// Destructor: Takes ownership of the `OptionVirtualKeyCode` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_virtual_key_code_delete(object: &mut AzOptionVirtualKeyCode) { match object { azul_impl::window::OptionVirtualKeyCode::None => { }, azul_impl::window::OptionVirtualKeyCode::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_virtual_key_code_deep_copy(object: &AzOptionVirtualKeyCode) -> AzOptionVirtualKeyCode { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_virtual_key_code_fmt_debug(object: &AzOptionVirtualKeyCode) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionPercentageValue` struct
pub type AzOptionPercentageValueTT = azul_impl::css::OptionPercentageValue;
pub use AzOptionPercentageValueTT as AzOptionPercentageValue;
/// Destructor: Takes ownership of the `OptionPercentageValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_percentage_value_delete(object: &mut AzOptionPercentageValue) { match object { azul_impl::css::OptionPercentageValue::None => { }, azul_impl::css::OptionPercentageValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_percentage_value_deep_copy(object: &AzOptionPercentageValue) -> AzOptionPercentageValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_percentage_value_fmt_debug(object: &AzOptionPercentageValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionDom` struct
pub type AzOptionDomTT = azul_impl::dom::OptionDom;
pub use AzOptionDomTT as AzOptionDom;
/// Destructor: Takes ownership of the `OptionDom` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_dom_delete(object: &mut AzOptionDom) { match object { azul_impl::dom::OptionDom::None => { }, azul_impl::dom::OptionDom::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_dom_deep_copy(object: &AzOptionDom) -> AzOptionDom { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_dom_fmt_debug(object: &AzOptionDom) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionTexture` struct
pub type AzOptionTextureTT = azul_impl::gl::OptionTexture;
pub use AzOptionTextureTT as AzOptionTexture;
/// Destructor: Takes ownership of the `OptionTexture` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_texture_delete(object: &mut AzOptionTexture) { match object { azul_impl::gl::OptionTexture::None => { }, azul_impl::gl::OptionTexture::Some(_) => { }, }
}
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_texture_fmt_debug(object: &AzOptionTexture) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionImageMask` struct
pub type AzOptionImageMaskTT = azul_impl::dom::OptionImageMask;
pub use AzOptionImageMaskTT as AzOptionImageMask;
/// Destructor: Takes ownership of the `OptionImageMask` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_image_mask_delete(object: &mut AzOptionImageMask) { match object { azul_impl::dom::OptionImageMask::None => { }, azul_impl::dom::OptionImageMask::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_image_mask_deep_copy(object: &AzOptionImageMask) -> AzOptionImageMask { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_image_mask_fmt_debug(object: &AzOptionImageMask) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionTabIndex` struct
pub type AzOptionTabIndexTT = azul_impl::dom::OptionTabIndex;
pub use AzOptionTabIndexTT as AzOptionTabIndex;
/// Destructor: Takes ownership of the `OptionTabIndex` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_tab_index_delete(object: &mut AzOptionTabIndex) { match object { azul_impl::dom::OptionTabIndex::None => { }, azul_impl::dom::OptionTabIndex::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_tab_index_deep_copy(object: &AzOptionTabIndex) -> AzOptionTabIndex { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_tab_index_fmt_debug(object: &AzOptionTabIndex) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionStyleBackgroundContentValue` struct
pub type AzOptionStyleBackgroundContentValueTT = azul_impl::css::OptionStyleBackgroundContentValue;
pub use AzOptionStyleBackgroundContentValueTT as AzOptionStyleBackgroundContentValue;
/// Destructor: Takes ownership of the `OptionStyleBackgroundContentValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_style_background_content_value_delete(object: &mut AzOptionStyleBackgroundContentValue) { match object { azul_impl::css::OptionStyleBackgroundContentValue::None => { }, azul_impl::css::OptionStyleBackgroundContentValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_style_background_content_value_deep_copy(object: &AzOptionStyleBackgroundContentValue) -> AzOptionStyleBackgroundContentValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_style_background_content_value_fmt_debug(object: &AzOptionStyleBackgroundContentValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionStyleBackgroundPositionValue` struct
pub type AzOptionStyleBackgroundPositionValueTT = azul_impl::css::OptionStyleBackgroundPositionValue;
pub use AzOptionStyleBackgroundPositionValueTT as AzOptionStyleBackgroundPositionValue;
/// Destructor: Takes ownership of the `OptionStyleBackgroundPositionValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_style_background_position_value_delete(object: &mut AzOptionStyleBackgroundPositionValue) { match object { azul_impl::css::OptionStyleBackgroundPositionValue::None => { }, azul_impl::css::OptionStyleBackgroundPositionValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_style_background_position_value_deep_copy(object: &AzOptionStyleBackgroundPositionValue) -> AzOptionStyleBackgroundPositionValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_style_background_position_value_fmt_debug(object: &AzOptionStyleBackgroundPositionValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionStyleBackgroundSizeValue` struct
pub type AzOptionStyleBackgroundSizeValueTT = azul_impl::css::OptionStyleBackgroundSizeValue;
pub use AzOptionStyleBackgroundSizeValueTT as AzOptionStyleBackgroundSizeValue;
/// Destructor: Takes ownership of the `OptionStyleBackgroundSizeValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_style_background_size_value_delete(object: &mut AzOptionStyleBackgroundSizeValue) { match object { azul_impl::css::OptionStyleBackgroundSizeValue::None => { }, azul_impl::css::OptionStyleBackgroundSizeValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_style_background_size_value_deep_copy(object: &AzOptionStyleBackgroundSizeValue) -> AzOptionStyleBackgroundSizeValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_style_background_size_value_fmt_debug(object: &AzOptionStyleBackgroundSizeValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionStyleBackgroundRepeatValue` struct
pub type AzOptionStyleBackgroundRepeatValueTT = azul_impl::css::OptionStyleBackgroundRepeatValue;
pub use AzOptionStyleBackgroundRepeatValueTT as AzOptionStyleBackgroundRepeatValue;
/// Destructor: Takes ownership of the `OptionStyleBackgroundRepeatValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_style_background_repeat_value_delete(object: &mut AzOptionStyleBackgroundRepeatValue) { match object { azul_impl::css::OptionStyleBackgroundRepeatValue::None => { }, azul_impl::css::OptionStyleBackgroundRepeatValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_style_background_repeat_value_deep_copy(object: &AzOptionStyleBackgroundRepeatValue) -> AzOptionStyleBackgroundRepeatValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_style_background_repeat_value_fmt_debug(object: &AzOptionStyleBackgroundRepeatValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionStyleFontSizeValue` struct
pub type AzOptionStyleFontSizeValueTT = azul_impl::css::OptionStyleFontSizeValue;
pub use AzOptionStyleFontSizeValueTT as AzOptionStyleFontSizeValue;
/// Destructor: Takes ownership of the `OptionStyleFontSizeValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_style_font_size_value_delete(object: &mut AzOptionStyleFontSizeValue) { match object { azul_impl::css::OptionStyleFontSizeValue::None => { }, azul_impl::css::OptionStyleFontSizeValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_style_font_size_value_deep_copy(object: &AzOptionStyleFontSizeValue) -> AzOptionStyleFontSizeValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_style_font_size_value_fmt_debug(object: &AzOptionStyleFontSizeValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionStyleFontFamilyValue` struct
pub type AzOptionStyleFontFamilyValueTT = azul_impl::css::OptionStyleFontFamilyValue;
pub use AzOptionStyleFontFamilyValueTT as AzOptionStyleFontFamilyValue;
/// Destructor: Takes ownership of the `OptionStyleFontFamilyValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_style_font_family_value_delete(object: &mut AzOptionStyleFontFamilyValue) { match object { azul_impl::css::OptionStyleFontFamilyValue::None => { }, azul_impl::css::OptionStyleFontFamilyValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_style_font_family_value_deep_copy(object: &AzOptionStyleFontFamilyValue) -> AzOptionStyleFontFamilyValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_style_font_family_value_fmt_debug(object: &AzOptionStyleFontFamilyValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionStyleTextColorValue` struct
pub type AzOptionStyleTextColorValueTT = azul_impl::css::OptionStyleTextColorValue;
pub use AzOptionStyleTextColorValueTT as AzOptionStyleTextColorValue;
/// Destructor: Takes ownership of the `OptionStyleTextColorValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_style_text_color_value_delete(object: &mut AzOptionStyleTextColorValue) { match object { azul_impl::css::OptionStyleTextColorValue::None => { }, azul_impl::css::OptionStyleTextColorValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_style_text_color_value_deep_copy(object: &AzOptionStyleTextColorValue) -> AzOptionStyleTextColorValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_style_text_color_value_fmt_debug(object: &AzOptionStyleTextColorValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionStyleTextAlignmentHorzValue` struct
pub type AzOptionStyleTextAlignmentHorzValueTT = azul_impl::css::OptionStyleTextAlignmentHorzValue;
pub use AzOptionStyleTextAlignmentHorzValueTT as AzOptionStyleTextAlignmentHorzValue;
/// Destructor: Takes ownership of the `OptionStyleTextAlignmentHorzValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_style_text_alignment_horz_value_delete(object: &mut AzOptionStyleTextAlignmentHorzValue) { match object { azul_impl::css::OptionStyleTextAlignmentHorzValue::None => { }, azul_impl::css::OptionStyleTextAlignmentHorzValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_style_text_alignment_horz_value_deep_copy(object: &AzOptionStyleTextAlignmentHorzValue) -> AzOptionStyleTextAlignmentHorzValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_style_text_alignment_horz_value_fmt_debug(object: &AzOptionStyleTextAlignmentHorzValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionStyleLineHeightValue` struct
pub type AzOptionStyleLineHeightValueTT = azul_impl::css::OptionStyleLineHeightValue;
pub use AzOptionStyleLineHeightValueTT as AzOptionStyleLineHeightValue;
/// Destructor: Takes ownership of the `OptionStyleLineHeightValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_style_line_height_value_delete(object: &mut AzOptionStyleLineHeightValue) { match object { azul_impl::css::OptionStyleLineHeightValue::None => { }, azul_impl::css::OptionStyleLineHeightValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_style_line_height_value_deep_copy(object: &AzOptionStyleLineHeightValue) -> AzOptionStyleLineHeightValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_style_line_height_value_fmt_debug(object: &AzOptionStyleLineHeightValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionStyleLetterSpacingValue` struct
pub type AzOptionStyleLetterSpacingValueTT = azul_impl::css::OptionStyleLetterSpacingValue;
pub use AzOptionStyleLetterSpacingValueTT as AzOptionStyleLetterSpacingValue;
/// Destructor: Takes ownership of the `OptionStyleLetterSpacingValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_style_letter_spacing_value_delete(object: &mut AzOptionStyleLetterSpacingValue) { match object { azul_impl::css::OptionStyleLetterSpacingValue::None => { }, azul_impl::css::OptionStyleLetterSpacingValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_style_letter_spacing_value_deep_copy(object: &AzOptionStyleLetterSpacingValue) -> AzOptionStyleLetterSpacingValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_style_letter_spacing_value_fmt_debug(object: &AzOptionStyleLetterSpacingValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionStyleWordSpacingValue` struct
pub type AzOptionStyleWordSpacingValueTT = azul_impl::css::OptionStyleWordSpacingValue;
pub use AzOptionStyleWordSpacingValueTT as AzOptionStyleWordSpacingValue;
/// Destructor: Takes ownership of the `OptionStyleWordSpacingValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_style_word_spacing_value_delete(object: &mut AzOptionStyleWordSpacingValue) { match object { azul_impl::css::OptionStyleWordSpacingValue::None => { }, azul_impl::css::OptionStyleWordSpacingValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_style_word_spacing_value_deep_copy(object: &AzOptionStyleWordSpacingValue) -> AzOptionStyleWordSpacingValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_style_word_spacing_value_fmt_debug(object: &AzOptionStyleWordSpacingValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionStyleTabWidthValue` struct
pub type AzOptionStyleTabWidthValueTT = azul_impl::css::OptionStyleTabWidthValue;
pub use AzOptionStyleTabWidthValueTT as AzOptionStyleTabWidthValue;
/// Destructor: Takes ownership of the `OptionStyleTabWidthValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_style_tab_width_value_delete(object: &mut AzOptionStyleTabWidthValue) { match object { azul_impl::css::OptionStyleTabWidthValue::None => { }, azul_impl::css::OptionStyleTabWidthValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_style_tab_width_value_deep_copy(object: &AzOptionStyleTabWidthValue) -> AzOptionStyleTabWidthValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_style_tab_width_value_fmt_debug(object: &AzOptionStyleTabWidthValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionStyleCursorValue` struct
pub type AzOptionStyleCursorValueTT = azul_impl::css::OptionStyleCursorValue;
pub use AzOptionStyleCursorValueTT as AzOptionStyleCursorValue;
/// Destructor: Takes ownership of the `OptionStyleCursorValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_style_cursor_value_delete(object: &mut AzOptionStyleCursorValue) { match object { azul_impl::css::OptionStyleCursorValue::None => { }, azul_impl::css::OptionStyleCursorValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_style_cursor_value_deep_copy(object: &AzOptionStyleCursorValue) -> AzOptionStyleCursorValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_style_cursor_value_fmt_debug(object: &AzOptionStyleCursorValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionBoxShadowPreDisplayItemValue` struct
pub type AzOptionBoxShadowPreDisplayItemValueTT = azul_impl::css::OptionBoxShadowPreDisplayItemValue;
pub use AzOptionBoxShadowPreDisplayItemValueTT as AzOptionBoxShadowPreDisplayItemValue;
/// Destructor: Takes ownership of the `OptionBoxShadowPreDisplayItemValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_box_shadow_pre_display_item_value_delete(object: &mut AzOptionBoxShadowPreDisplayItemValue) { match object { azul_impl::css::OptionBoxShadowPreDisplayItemValue::None => { }, azul_impl::css::OptionBoxShadowPreDisplayItemValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_box_shadow_pre_display_item_value_deep_copy(object: &AzOptionBoxShadowPreDisplayItemValue) -> AzOptionBoxShadowPreDisplayItemValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_box_shadow_pre_display_item_value_fmt_debug(object: &AzOptionBoxShadowPreDisplayItemValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionStyleBorderTopColorValue` struct
pub type AzOptionStyleBorderTopColorValueTT = azul_impl::css::OptionStyleBorderTopColorValue;
pub use AzOptionStyleBorderTopColorValueTT as AzOptionStyleBorderTopColorValue;
/// Destructor: Takes ownership of the `OptionStyleBorderTopColorValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_style_border_top_color_value_delete(object: &mut AzOptionStyleBorderTopColorValue) { match object { azul_impl::css::OptionStyleBorderTopColorValue::None => { }, azul_impl::css::OptionStyleBorderTopColorValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_style_border_top_color_value_deep_copy(object: &AzOptionStyleBorderTopColorValue) -> AzOptionStyleBorderTopColorValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_style_border_top_color_value_fmt_debug(object: &AzOptionStyleBorderTopColorValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionStyleBorderLeftColorValue` struct
pub type AzOptionStyleBorderLeftColorValueTT = azul_impl::css::OptionStyleBorderLeftColorValue;
pub use AzOptionStyleBorderLeftColorValueTT as AzOptionStyleBorderLeftColorValue;
/// Destructor: Takes ownership of the `OptionStyleBorderLeftColorValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_style_border_left_color_value_delete(object: &mut AzOptionStyleBorderLeftColorValue) { match object { azul_impl::css::OptionStyleBorderLeftColorValue::None => { }, azul_impl::css::OptionStyleBorderLeftColorValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_style_border_left_color_value_deep_copy(object: &AzOptionStyleBorderLeftColorValue) -> AzOptionStyleBorderLeftColorValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_style_border_left_color_value_fmt_debug(object: &AzOptionStyleBorderLeftColorValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionStyleBorderRightColorValue` struct
pub type AzOptionStyleBorderRightColorValueTT = azul_impl::css::OptionStyleBorderRightColorValue;
pub use AzOptionStyleBorderRightColorValueTT as AzOptionStyleBorderRightColorValue;
/// Destructor: Takes ownership of the `OptionStyleBorderRightColorValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_style_border_right_color_value_delete(object: &mut AzOptionStyleBorderRightColorValue) { match object { azul_impl::css::OptionStyleBorderRightColorValue::None => { }, azul_impl::css::OptionStyleBorderRightColorValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_style_border_right_color_value_deep_copy(object: &AzOptionStyleBorderRightColorValue) -> AzOptionStyleBorderRightColorValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_style_border_right_color_value_fmt_debug(object: &AzOptionStyleBorderRightColorValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionStyleBorderBottomColorValue` struct
pub type AzOptionStyleBorderBottomColorValueTT = azul_impl::css::OptionStyleBorderBottomColorValue;
pub use AzOptionStyleBorderBottomColorValueTT as AzOptionStyleBorderBottomColorValue;
/// Destructor: Takes ownership of the `OptionStyleBorderBottomColorValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_style_border_bottom_color_value_delete(object: &mut AzOptionStyleBorderBottomColorValue) { match object { azul_impl::css::OptionStyleBorderBottomColorValue::None => { }, azul_impl::css::OptionStyleBorderBottomColorValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_style_border_bottom_color_value_deep_copy(object: &AzOptionStyleBorderBottomColorValue) -> AzOptionStyleBorderBottomColorValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_style_border_bottom_color_value_fmt_debug(object: &AzOptionStyleBorderBottomColorValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionStyleBorderTopStyleValue` struct
pub type AzOptionStyleBorderTopStyleValueTT = azul_impl::css::OptionStyleBorderTopStyleValue;
pub use AzOptionStyleBorderTopStyleValueTT as AzOptionStyleBorderTopStyleValue;
/// Destructor: Takes ownership of the `OptionStyleBorderTopStyleValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_style_border_top_style_value_delete(object: &mut AzOptionStyleBorderTopStyleValue) { match object { azul_impl::css::OptionStyleBorderTopStyleValue::None => { }, azul_impl::css::OptionStyleBorderTopStyleValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_style_border_top_style_value_deep_copy(object: &AzOptionStyleBorderTopStyleValue) -> AzOptionStyleBorderTopStyleValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_style_border_top_style_value_fmt_debug(object: &AzOptionStyleBorderTopStyleValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionStyleBorderLeftStyleValue` struct
pub type AzOptionStyleBorderLeftStyleValueTT = azul_impl::css::OptionStyleBorderLeftStyleValue;
pub use AzOptionStyleBorderLeftStyleValueTT as AzOptionStyleBorderLeftStyleValue;
/// Destructor: Takes ownership of the `OptionStyleBorderLeftStyleValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_style_border_left_style_value_delete(object: &mut AzOptionStyleBorderLeftStyleValue) { match object { azul_impl::css::OptionStyleBorderLeftStyleValue::None => { }, azul_impl::css::OptionStyleBorderLeftStyleValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_style_border_left_style_value_deep_copy(object: &AzOptionStyleBorderLeftStyleValue) -> AzOptionStyleBorderLeftStyleValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_style_border_left_style_value_fmt_debug(object: &AzOptionStyleBorderLeftStyleValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionStyleBorderRightStyleValue` struct
pub type AzOptionStyleBorderRightStyleValueTT = azul_impl::css::OptionStyleBorderRightStyleValue;
pub use AzOptionStyleBorderRightStyleValueTT as AzOptionStyleBorderRightStyleValue;
/// Destructor: Takes ownership of the `OptionStyleBorderRightStyleValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_style_border_right_style_value_delete(object: &mut AzOptionStyleBorderRightStyleValue) { match object { azul_impl::css::OptionStyleBorderRightStyleValue::None => { }, azul_impl::css::OptionStyleBorderRightStyleValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_style_border_right_style_value_deep_copy(object: &AzOptionStyleBorderRightStyleValue) -> AzOptionStyleBorderRightStyleValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_style_border_right_style_value_fmt_debug(object: &AzOptionStyleBorderRightStyleValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionStyleBorderBottomStyleValue` struct
pub type AzOptionStyleBorderBottomStyleValueTT = azul_impl::css::OptionStyleBorderBottomStyleValue;
pub use AzOptionStyleBorderBottomStyleValueTT as AzOptionStyleBorderBottomStyleValue;
/// Destructor: Takes ownership of the `OptionStyleBorderBottomStyleValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_style_border_bottom_style_value_delete(object: &mut AzOptionStyleBorderBottomStyleValue) { match object { azul_impl::css::OptionStyleBorderBottomStyleValue::None => { }, azul_impl::css::OptionStyleBorderBottomStyleValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_style_border_bottom_style_value_deep_copy(object: &AzOptionStyleBorderBottomStyleValue) -> AzOptionStyleBorderBottomStyleValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_style_border_bottom_style_value_fmt_debug(object: &AzOptionStyleBorderBottomStyleValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionStyleBorderTopLeftRadiusValue` struct
pub type AzOptionStyleBorderTopLeftRadiusValueTT = azul_impl::css::OptionStyleBorderTopLeftRadiusValue;
pub use AzOptionStyleBorderTopLeftRadiusValueTT as AzOptionStyleBorderTopLeftRadiusValue;
/// Destructor: Takes ownership of the `OptionStyleBorderTopLeftRadiusValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_style_border_top_left_radius_value_delete(object: &mut AzOptionStyleBorderTopLeftRadiusValue) { match object { azul_impl::css::OptionStyleBorderTopLeftRadiusValue::None => { }, azul_impl::css::OptionStyleBorderTopLeftRadiusValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_style_border_top_left_radius_value_deep_copy(object: &AzOptionStyleBorderTopLeftRadiusValue) -> AzOptionStyleBorderTopLeftRadiusValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_style_border_top_left_radius_value_fmt_debug(object: &AzOptionStyleBorderTopLeftRadiusValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionStyleBorderTopRightRadiusValue` struct
pub type AzOptionStyleBorderTopRightRadiusValueTT = azul_impl::css::OptionStyleBorderTopRightRadiusValue;
pub use AzOptionStyleBorderTopRightRadiusValueTT as AzOptionStyleBorderTopRightRadiusValue;
/// Destructor: Takes ownership of the `OptionStyleBorderTopRightRadiusValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_style_border_top_right_radius_value_delete(object: &mut AzOptionStyleBorderTopRightRadiusValue) { match object { azul_impl::css::OptionStyleBorderTopRightRadiusValue::None => { }, azul_impl::css::OptionStyleBorderTopRightRadiusValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_style_border_top_right_radius_value_deep_copy(object: &AzOptionStyleBorderTopRightRadiusValue) -> AzOptionStyleBorderTopRightRadiusValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_style_border_top_right_radius_value_fmt_debug(object: &AzOptionStyleBorderTopRightRadiusValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionStyleBorderBottomLeftRadiusValue` struct
pub type AzOptionStyleBorderBottomLeftRadiusValueTT = azul_impl::css::OptionStyleBorderBottomLeftRadiusValue;
pub use AzOptionStyleBorderBottomLeftRadiusValueTT as AzOptionStyleBorderBottomLeftRadiusValue;
/// Destructor: Takes ownership of the `OptionStyleBorderBottomLeftRadiusValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_style_border_bottom_left_radius_value_delete(object: &mut AzOptionStyleBorderBottomLeftRadiusValue) { match object { azul_impl::css::OptionStyleBorderBottomLeftRadiusValue::None => { }, azul_impl::css::OptionStyleBorderBottomLeftRadiusValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_style_border_bottom_left_radius_value_deep_copy(object: &AzOptionStyleBorderBottomLeftRadiusValue) -> AzOptionStyleBorderBottomLeftRadiusValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_style_border_bottom_left_radius_value_fmt_debug(object: &AzOptionStyleBorderBottomLeftRadiusValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionStyleBorderBottomRightRadiusValue` struct
pub type AzOptionStyleBorderBottomRightRadiusValueTT = azul_impl::css::OptionStyleBorderBottomRightRadiusValue;
pub use AzOptionStyleBorderBottomRightRadiusValueTT as AzOptionStyleBorderBottomRightRadiusValue;
/// Destructor: Takes ownership of the `OptionStyleBorderBottomRightRadiusValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_style_border_bottom_right_radius_value_delete(object: &mut AzOptionStyleBorderBottomRightRadiusValue) { match object { azul_impl::css::OptionStyleBorderBottomRightRadiusValue::None => { }, azul_impl::css::OptionStyleBorderBottomRightRadiusValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_style_border_bottom_right_radius_value_deep_copy(object: &AzOptionStyleBorderBottomRightRadiusValue) -> AzOptionStyleBorderBottomRightRadiusValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_style_border_bottom_right_radius_value_fmt_debug(object: &AzOptionStyleBorderBottomRightRadiusValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionLayoutDisplayValue` struct
pub type AzOptionLayoutDisplayValueTT = azul_impl::css::OptionLayoutDisplayValue;
pub use AzOptionLayoutDisplayValueTT as AzOptionLayoutDisplayValue;
/// Destructor: Takes ownership of the `OptionLayoutDisplayValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_layout_display_value_delete(object: &mut AzOptionLayoutDisplayValue) { match object { azul_impl::css::OptionLayoutDisplayValue::None => { }, azul_impl::css::OptionLayoutDisplayValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_layout_display_value_deep_copy(object: &AzOptionLayoutDisplayValue) -> AzOptionLayoutDisplayValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_layout_display_value_fmt_debug(object: &AzOptionLayoutDisplayValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionLayoutFloatValue` struct
pub type AzOptionLayoutFloatValueTT = azul_impl::css::OptionLayoutFloatValue;
pub use AzOptionLayoutFloatValueTT as AzOptionLayoutFloatValue;
/// Destructor: Takes ownership of the `OptionLayoutFloatValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_layout_float_value_delete(object: &mut AzOptionLayoutFloatValue) { match object { azul_impl::css::OptionLayoutFloatValue::None => { }, azul_impl::css::OptionLayoutFloatValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_layout_float_value_deep_copy(object: &AzOptionLayoutFloatValue) -> AzOptionLayoutFloatValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_layout_float_value_fmt_debug(object: &AzOptionLayoutFloatValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionLayoutBoxSizingValue` struct
pub type AzOptionLayoutBoxSizingValueTT = azul_impl::css::OptionLayoutBoxSizingValue;
pub use AzOptionLayoutBoxSizingValueTT as AzOptionLayoutBoxSizingValue;
/// Destructor: Takes ownership of the `OptionLayoutBoxSizingValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_layout_box_sizing_value_delete(object: &mut AzOptionLayoutBoxSizingValue) { match object { azul_impl::css::OptionLayoutBoxSizingValue::None => { }, azul_impl::css::OptionLayoutBoxSizingValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_layout_box_sizing_value_deep_copy(object: &AzOptionLayoutBoxSizingValue) -> AzOptionLayoutBoxSizingValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_layout_box_sizing_value_fmt_debug(object: &AzOptionLayoutBoxSizingValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionLayoutWidthValue` struct
pub type AzOptionLayoutWidthValueTT = azul_impl::css::OptionLayoutWidthValue;
pub use AzOptionLayoutWidthValueTT as AzOptionLayoutWidthValue;
/// Destructor: Takes ownership of the `OptionLayoutWidthValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_layout_width_value_delete(object: &mut AzOptionLayoutWidthValue) { match object { azul_impl::css::OptionLayoutWidthValue::None => { }, azul_impl::css::OptionLayoutWidthValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_layout_width_value_deep_copy(object: &AzOptionLayoutWidthValue) -> AzOptionLayoutWidthValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_layout_width_value_fmt_debug(object: &AzOptionLayoutWidthValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionLayoutHeightValue` struct
pub type AzOptionLayoutHeightValueTT = azul_impl::css::OptionLayoutHeightValue;
pub use AzOptionLayoutHeightValueTT as AzOptionLayoutHeightValue;
/// Destructor: Takes ownership of the `OptionLayoutHeightValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_layout_height_value_delete(object: &mut AzOptionLayoutHeightValue) { match object { azul_impl::css::OptionLayoutHeightValue::None => { }, azul_impl::css::OptionLayoutHeightValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_layout_height_value_deep_copy(object: &AzOptionLayoutHeightValue) -> AzOptionLayoutHeightValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_layout_height_value_fmt_debug(object: &AzOptionLayoutHeightValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionLayoutMinWidthValue` struct
pub type AzOptionLayoutMinWidthValueTT = azul_impl::css::OptionLayoutMinWidthValue;
pub use AzOptionLayoutMinWidthValueTT as AzOptionLayoutMinWidthValue;
/// Destructor: Takes ownership of the `OptionLayoutMinWidthValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_layout_min_width_value_delete(object: &mut AzOptionLayoutMinWidthValue) { match object { azul_impl::css::OptionLayoutMinWidthValue::None => { }, azul_impl::css::OptionLayoutMinWidthValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_layout_min_width_value_deep_copy(object: &AzOptionLayoutMinWidthValue) -> AzOptionLayoutMinWidthValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_layout_min_width_value_fmt_debug(object: &AzOptionLayoutMinWidthValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionLayoutMinHeightValue` struct
pub type AzOptionLayoutMinHeightValueTT = azul_impl::css::OptionLayoutMinHeightValue;
pub use AzOptionLayoutMinHeightValueTT as AzOptionLayoutMinHeightValue;
/// Destructor: Takes ownership of the `OptionLayoutMinHeightValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_layout_min_height_value_delete(object: &mut AzOptionLayoutMinHeightValue) { match object { azul_impl::css::OptionLayoutMinHeightValue::None => { }, azul_impl::css::OptionLayoutMinHeightValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_layout_min_height_value_deep_copy(object: &AzOptionLayoutMinHeightValue) -> AzOptionLayoutMinHeightValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_layout_min_height_value_fmt_debug(object: &AzOptionLayoutMinHeightValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionLayoutMaxWidthValue` struct
pub type AzOptionLayoutMaxWidthValueTT = azul_impl::css::OptionLayoutMaxWidthValue;
pub use AzOptionLayoutMaxWidthValueTT as AzOptionLayoutMaxWidthValue;
/// Destructor: Takes ownership of the `OptionLayoutMaxWidthValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_layout_max_width_value_delete(object: &mut AzOptionLayoutMaxWidthValue) { match object { azul_impl::css::OptionLayoutMaxWidthValue::None => { }, azul_impl::css::OptionLayoutMaxWidthValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_layout_max_width_value_deep_copy(object: &AzOptionLayoutMaxWidthValue) -> AzOptionLayoutMaxWidthValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_layout_max_width_value_fmt_debug(object: &AzOptionLayoutMaxWidthValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionLayoutMaxHeightValue` struct
pub type AzOptionLayoutMaxHeightValueTT = azul_impl::css::OptionLayoutMaxHeightValue;
pub use AzOptionLayoutMaxHeightValueTT as AzOptionLayoutMaxHeightValue;
/// Destructor: Takes ownership of the `OptionLayoutMaxHeightValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_layout_max_height_value_delete(object: &mut AzOptionLayoutMaxHeightValue) { match object { azul_impl::css::OptionLayoutMaxHeightValue::None => { }, azul_impl::css::OptionLayoutMaxHeightValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_layout_max_height_value_deep_copy(object: &AzOptionLayoutMaxHeightValue) -> AzOptionLayoutMaxHeightValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_layout_max_height_value_fmt_debug(object: &AzOptionLayoutMaxHeightValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionLayoutPositionValue` struct
pub type AzOptionLayoutPositionValueTT = azul_impl::css::OptionLayoutPositionValue;
pub use AzOptionLayoutPositionValueTT as AzOptionLayoutPositionValue;
/// Destructor: Takes ownership of the `OptionLayoutPositionValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_layout_position_value_delete(object: &mut AzOptionLayoutPositionValue) { match object { azul_impl::css::OptionLayoutPositionValue::None => { }, azul_impl::css::OptionLayoutPositionValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_layout_position_value_deep_copy(object: &AzOptionLayoutPositionValue) -> AzOptionLayoutPositionValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_layout_position_value_fmt_debug(object: &AzOptionLayoutPositionValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionLayoutTopValue` struct
pub type AzOptionLayoutTopValueTT = azul_impl::css::OptionLayoutTopValue;
pub use AzOptionLayoutTopValueTT as AzOptionLayoutTopValue;
/// Destructor: Takes ownership of the `OptionLayoutTopValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_layout_top_value_delete(object: &mut AzOptionLayoutTopValue) { match object { azul_impl::css::OptionLayoutTopValue::None => { }, azul_impl::css::OptionLayoutTopValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_layout_top_value_deep_copy(object: &AzOptionLayoutTopValue) -> AzOptionLayoutTopValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_layout_top_value_fmt_debug(object: &AzOptionLayoutTopValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionLayoutBottomValue` struct
pub type AzOptionLayoutBottomValueTT = azul_impl::css::OptionLayoutBottomValue;
pub use AzOptionLayoutBottomValueTT as AzOptionLayoutBottomValue;
/// Destructor: Takes ownership of the `OptionLayoutBottomValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_layout_bottom_value_delete(object: &mut AzOptionLayoutBottomValue) { match object { azul_impl::css::OptionLayoutBottomValue::None => { }, azul_impl::css::OptionLayoutBottomValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_layout_bottom_value_deep_copy(object: &AzOptionLayoutBottomValue) -> AzOptionLayoutBottomValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_layout_bottom_value_fmt_debug(object: &AzOptionLayoutBottomValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionLayoutRightValue` struct
pub type AzOptionLayoutRightValueTT = azul_impl::css::OptionLayoutRightValue;
pub use AzOptionLayoutRightValueTT as AzOptionLayoutRightValue;
/// Destructor: Takes ownership of the `OptionLayoutRightValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_layout_right_value_delete(object: &mut AzOptionLayoutRightValue) { match object { azul_impl::css::OptionLayoutRightValue::None => { }, azul_impl::css::OptionLayoutRightValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_layout_right_value_deep_copy(object: &AzOptionLayoutRightValue) -> AzOptionLayoutRightValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_layout_right_value_fmt_debug(object: &AzOptionLayoutRightValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionLayoutLeftValue` struct
pub type AzOptionLayoutLeftValueTT = azul_impl::css::OptionLayoutLeftValue;
pub use AzOptionLayoutLeftValueTT as AzOptionLayoutLeftValue;
/// Destructor: Takes ownership of the `OptionLayoutLeftValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_layout_left_value_delete(object: &mut AzOptionLayoutLeftValue) { match object { azul_impl::css::OptionLayoutLeftValue::None => { }, azul_impl::css::OptionLayoutLeftValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_layout_left_value_deep_copy(object: &AzOptionLayoutLeftValue) -> AzOptionLayoutLeftValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_layout_left_value_fmt_debug(object: &AzOptionLayoutLeftValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionLayoutPaddingTopValue` struct
pub type AzOptionLayoutPaddingTopValueTT = azul_impl::css::OptionLayoutPaddingTopValue;
pub use AzOptionLayoutPaddingTopValueTT as AzOptionLayoutPaddingTopValue;
/// Destructor: Takes ownership of the `OptionLayoutPaddingTopValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_layout_padding_top_value_delete(object: &mut AzOptionLayoutPaddingTopValue) { match object { azul_impl::css::OptionLayoutPaddingTopValue::None => { }, azul_impl::css::OptionLayoutPaddingTopValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_layout_padding_top_value_deep_copy(object: &AzOptionLayoutPaddingTopValue) -> AzOptionLayoutPaddingTopValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_layout_padding_top_value_fmt_debug(object: &AzOptionLayoutPaddingTopValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionLayoutPaddingBottomValue` struct
pub type AzOptionLayoutPaddingBottomValueTT = azul_impl::css::OptionLayoutPaddingBottomValue;
pub use AzOptionLayoutPaddingBottomValueTT as AzOptionLayoutPaddingBottomValue;
/// Destructor: Takes ownership of the `OptionLayoutPaddingBottomValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_layout_padding_bottom_value_delete(object: &mut AzOptionLayoutPaddingBottomValue) { match object { azul_impl::css::OptionLayoutPaddingBottomValue::None => { }, azul_impl::css::OptionLayoutPaddingBottomValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_layout_padding_bottom_value_deep_copy(object: &AzOptionLayoutPaddingBottomValue) -> AzOptionLayoutPaddingBottomValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_layout_padding_bottom_value_fmt_debug(object: &AzOptionLayoutPaddingBottomValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionLayoutPaddingLeftValue` struct
pub type AzOptionLayoutPaddingLeftValueTT = azul_impl::css::OptionLayoutPaddingLeftValue;
pub use AzOptionLayoutPaddingLeftValueTT as AzOptionLayoutPaddingLeftValue;
/// Destructor: Takes ownership of the `OptionLayoutPaddingLeftValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_layout_padding_left_value_delete(object: &mut AzOptionLayoutPaddingLeftValue) { match object { azul_impl::css::OptionLayoutPaddingLeftValue::None => { }, azul_impl::css::OptionLayoutPaddingLeftValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_layout_padding_left_value_deep_copy(object: &AzOptionLayoutPaddingLeftValue) -> AzOptionLayoutPaddingLeftValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_layout_padding_left_value_fmt_debug(object: &AzOptionLayoutPaddingLeftValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionLayoutPaddingRightValue` struct
pub type AzOptionLayoutPaddingRightValueTT = azul_impl::css::OptionLayoutPaddingRightValue;
pub use AzOptionLayoutPaddingRightValueTT as AzOptionLayoutPaddingRightValue;
/// Destructor: Takes ownership of the `OptionLayoutPaddingRightValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_layout_padding_right_value_delete(object: &mut AzOptionLayoutPaddingRightValue) { match object { azul_impl::css::OptionLayoutPaddingRightValue::None => { }, azul_impl::css::OptionLayoutPaddingRightValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_layout_padding_right_value_deep_copy(object: &AzOptionLayoutPaddingRightValue) -> AzOptionLayoutPaddingRightValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_layout_padding_right_value_fmt_debug(object: &AzOptionLayoutPaddingRightValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionLayoutMarginTopValue` struct
pub type AzOptionLayoutMarginTopValueTT = azul_impl::css::OptionLayoutMarginTopValue;
pub use AzOptionLayoutMarginTopValueTT as AzOptionLayoutMarginTopValue;
/// Destructor: Takes ownership of the `OptionLayoutMarginTopValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_layout_margin_top_value_delete(object: &mut AzOptionLayoutMarginTopValue) { match object { azul_impl::css::OptionLayoutMarginTopValue::None => { }, azul_impl::css::OptionLayoutMarginTopValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_layout_margin_top_value_deep_copy(object: &AzOptionLayoutMarginTopValue) -> AzOptionLayoutMarginTopValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_layout_margin_top_value_fmt_debug(object: &AzOptionLayoutMarginTopValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionLayoutMarginBottomValue` struct
pub type AzOptionLayoutMarginBottomValueTT = azul_impl::css::OptionLayoutMarginBottomValue;
pub use AzOptionLayoutMarginBottomValueTT as AzOptionLayoutMarginBottomValue;
/// Destructor: Takes ownership of the `OptionLayoutMarginBottomValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_layout_margin_bottom_value_delete(object: &mut AzOptionLayoutMarginBottomValue) { match object { azul_impl::css::OptionLayoutMarginBottomValue::None => { }, azul_impl::css::OptionLayoutMarginBottomValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_layout_margin_bottom_value_deep_copy(object: &AzOptionLayoutMarginBottomValue) -> AzOptionLayoutMarginBottomValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_layout_margin_bottom_value_fmt_debug(object: &AzOptionLayoutMarginBottomValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionLayoutMarginLeftValue` struct
pub type AzOptionLayoutMarginLeftValueTT = azul_impl::css::OptionLayoutMarginLeftValue;
pub use AzOptionLayoutMarginLeftValueTT as AzOptionLayoutMarginLeftValue;
/// Destructor: Takes ownership of the `OptionLayoutMarginLeftValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_layout_margin_left_value_delete(object: &mut AzOptionLayoutMarginLeftValue) { match object { azul_impl::css::OptionLayoutMarginLeftValue::None => { }, azul_impl::css::OptionLayoutMarginLeftValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_layout_margin_left_value_deep_copy(object: &AzOptionLayoutMarginLeftValue) -> AzOptionLayoutMarginLeftValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_layout_margin_left_value_fmt_debug(object: &AzOptionLayoutMarginLeftValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionLayoutMarginRightValue` struct
pub type AzOptionLayoutMarginRightValueTT = azul_impl::css::OptionLayoutMarginRightValue;
pub use AzOptionLayoutMarginRightValueTT as AzOptionLayoutMarginRightValue;
/// Destructor: Takes ownership of the `OptionLayoutMarginRightValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_layout_margin_right_value_delete(object: &mut AzOptionLayoutMarginRightValue) { match object { azul_impl::css::OptionLayoutMarginRightValue::None => { }, azul_impl::css::OptionLayoutMarginRightValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_layout_margin_right_value_deep_copy(object: &AzOptionLayoutMarginRightValue) -> AzOptionLayoutMarginRightValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_layout_margin_right_value_fmt_debug(object: &AzOptionLayoutMarginRightValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionStyleBorderTopWidthValue` struct
pub type AzOptionStyleBorderTopWidthValueTT = azul_impl::css::OptionStyleBorderTopWidthValue;
pub use AzOptionStyleBorderTopWidthValueTT as AzOptionStyleBorderTopWidthValue;
/// Destructor: Takes ownership of the `OptionStyleBorderTopWidthValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_style_border_top_width_value_delete(object: &mut AzOptionStyleBorderTopWidthValue) { match object { azul_impl::css::OptionStyleBorderTopWidthValue::None => { }, azul_impl::css::OptionStyleBorderTopWidthValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_style_border_top_width_value_deep_copy(object: &AzOptionStyleBorderTopWidthValue) -> AzOptionStyleBorderTopWidthValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_style_border_top_width_value_fmt_debug(object: &AzOptionStyleBorderTopWidthValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionStyleBorderLeftWidthValue` struct
pub type AzOptionStyleBorderLeftWidthValueTT = azul_impl::css::OptionStyleBorderLeftWidthValue;
pub use AzOptionStyleBorderLeftWidthValueTT as AzOptionStyleBorderLeftWidthValue;
/// Destructor: Takes ownership of the `OptionStyleBorderLeftWidthValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_style_border_left_width_value_delete(object: &mut AzOptionStyleBorderLeftWidthValue) { match object { azul_impl::css::OptionStyleBorderLeftWidthValue::None => { }, azul_impl::css::OptionStyleBorderLeftWidthValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_style_border_left_width_value_deep_copy(object: &AzOptionStyleBorderLeftWidthValue) -> AzOptionStyleBorderLeftWidthValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_style_border_left_width_value_fmt_debug(object: &AzOptionStyleBorderLeftWidthValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionStyleBorderRightWidthValue` struct
pub type AzOptionStyleBorderRightWidthValueTT = azul_impl::css::OptionStyleBorderRightWidthValue;
pub use AzOptionStyleBorderRightWidthValueTT as AzOptionStyleBorderRightWidthValue;
/// Destructor: Takes ownership of the `OptionStyleBorderRightWidthValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_style_border_right_width_value_delete(object: &mut AzOptionStyleBorderRightWidthValue) { match object { azul_impl::css::OptionStyleBorderRightWidthValue::None => { }, azul_impl::css::OptionStyleBorderRightWidthValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_style_border_right_width_value_deep_copy(object: &AzOptionStyleBorderRightWidthValue) -> AzOptionStyleBorderRightWidthValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_style_border_right_width_value_fmt_debug(object: &AzOptionStyleBorderRightWidthValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionStyleBorderBottomWidthValue` struct
pub type AzOptionStyleBorderBottomWidthValueTT = azul_impl::css::OptionStyleBorderBottomWidthValue;
pub use AzOptionStyleBorderBottomWidthValueTT as AzOptionStyleBorderBottomWidthValue;
/// Destructor: Takes ownership of the `OptionStyleBorderBottomWidthValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_style_border_bottom_width_value_delete(object: &mut AzOptionStyleBorderBottomWidthValue) { match object { azul_impl::css::OptionStyleBorderBottomWidthValue::None => { }, azul_impl::css::OptionStyleBorderBottomWidthValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_style_border_bottom_width_value_deep_copy(object: &AzOptionStyleBorderBottomWidthValue) -> AzOptionStyleBorderBottomWidthValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_style_border_bottom_width_value_fmt_debug(object: &AzOptionStyleBorderBottomWidthValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionOverflowValue` struct
pub type AzOptionOverflowValueTT = azul_impl::css::OptionOverflowValue;
pub use AzOptionOverflowValueTT as AzOptionOverflowValue;
/// Destructor: Takes ownership of the `OptionOverflowValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_overflow_value_delete(object: &mut AzOptionOverflowValue) { match object { azul_impl::css::OptionOverflowValue::None => { }, azul_impl::css::OptionOverflowValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_overflow_value_deep_copy(object: &AzOptionOverflowValue) -> AzOptionOverflowValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_overflow_value_fmt_debug(object: &AzOptionOverflowValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionLayoutDirectionValue` struct
pub type AzOptionLayoutDirectionValueTT = azul_impl::css::OptionLayoutDirectionValue;
pub use AzOptionLayoutDirectionValueTT as AzOptionLayoutDirectionValue;
/// Destructor: Takes ownership of the `OptionLayoutDirectionValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_layout_direction_value_delete(object: &mut AzOptionLayoutDirectionValue) { match object { azul_impl::css::OptionLayoutDirectionValue::None => { }, azul_impl::css::OptionLayoutDirectionValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_layout_direction_value_deep_copy(object: &AzOptionLayoutDirectionValue) -> AzOptionLayoutDirectionValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_layout_direction_value_fmt_debug(object: &AzOptionLayoutDirectionValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionLayoutWrapValue` struct
pub type AzOptionLayoutWrapValueTT = azul_impl::css::OptionLayoutWrapValue;
pub use AzOptionLayoutWrapValueTT as AzOptionLayoutWrapValue;
/// Destructor: Takes ownership of the `OptionLayoutWrapValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_layout_wrap_value_delete(object: &mut AzOptionLayoutWrapValue) { match object { azul_impl::css::OptionLayoutWrapValue::None => { }, azul_impl::css::OptionLayoutWrapValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_layout_wrap_value_deep_copy(object: &AzOptionLayoutWrapValue) -> AzOptionLayoutWrapValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_layout_wrap_value_fmt_debug(object: &AzOptionLayoutWrapValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionLayoutFlexGrowValue` struct
pub type AzOptionLayoutFlexGrowValueTT = azul_impl::css::OptionLayoutFlexGrowValue;
pub use AzOptionLayoutFlexGrowValueTT as AzOptionLayoutFlexGrowValue;
/// Destructor: Takes ownership of the `OptionLayoutFlexGrowValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_layout_flex_grow_value_delete(object: &mut AzOptionLayoutFlexGrowValue) { match object { azul_impl::css::OptionLayoutFlexGrowValue::None => { }, azul_impl::css::OptionLayoutFlexGrowValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_layout_flex_grow_value_deep_copy(object: &AzOptionLayoutFlexGrowValue) -> AzOptionLayoutFlexGrowValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_layout_flex_grow_value_fmt_debug(object: &AzOptionLayoutFlexGrowValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionLayoutFlexShrinkValue` struct
pub type AzOptionLayoutFlexShrinkValueTT = azul_impl::css::OptionLayoutFlexShrinkValue;
pub use AzOptionLayoutFlexShrinkValueTT as AzOptionLayoutFlexShrinkValue;
/// Destructor: Takes ownership of the `OptionLayoutFlexShrinkValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_layout_flex_shrink_value_delete(object: &mut AzOptionLayoutFlexShrinkValue) { match object { azul_impl::css::OptionLayoutFlexShrinkValue::None => { }, azul_impl::css::OptionLayoutFlexShrinkValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_layout_flex_shrink_value_deep_copy(object: &AzOptionLayoutFlexShrinkValue) -> AzOptionLayoutFlexShrinkValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_layout_flex_shrink_value_fmt_debug(object: &AzOptionLayoutFlexShrinkValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionLayoutJustifyContentValue` struct
pub type AzOptionLayoutJustifyContentValueTT = azul_impl::css::OptionLayoutJustifyContentValue;
pub use AzOptionLayoutJustifyContentValueTT as AzOptionLayoutJustifyContentValue;
/// Destructor: Takes ownership of the `OptionLayoutJustifyContentValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_layout_justify_content_value_delete(object: &mut AzOptionLayoutJustifyContentValue) { match object { azul_impl::css::OptionLayoutJustifyContentValue::None => { }, azul_impl::css::OptionLayoutJustifyContentValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_layout_justify_content_value_deep_copy(object: &AzOptionLayoutJustifyContentValue) -> AzOptionLayoutJustifyContentValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_layout_justify_content_value_fmt_debug(object: &AzOptionLayoutJustifyContentValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionLayoutAlignItemsValue` struct
pub type AzOptionLayoutAlignItemsValueTT = azul_impl::css::OptionLayoutAlignItemsValue;
pub use AzOptionLayoutAlignItemsValueTT as AzOptionLayoutAlignItemsValue;
/// Destructor: Takes ownership of the `OptionLayoutAlignItemsValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_layout_align_items_value_delete(object: &mut AzOptionLayoutAlignItemsValue) { match object { azul_impl::css::OptionLayoutAlignItemsValue::None => { }, azul_impl::css::OptionLayoutAlignItemsValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_layout_align_items_value_deep_copy(object: &AzOptionLayoutAlignItemsValue) -> AzOptionLayoutAlignItemsValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_layout_align_items_value_fmt_debug(object: &AzOptionLayoutAlignItemsValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionLayoutAlignContentValue` struct
pub type AzOptionLayoutAlignContentValueTT = azul_impl::css::OptionLayoutAlignContentValue;
pub use AzOptionLayoutAlignContentValueTT as AzOptionLayoutAlignContentValue;
/// Destructor: Takes ownership of the `OptionLayoutAlignContentValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_layout_align_content_value_delete(object: &mut AzOptionLayoutAlignContentValue) { match object { azul_impl::css::OptionLayoutAlignContentValue::None => { }, azul_impl::css::OptionLayoutAlignContentValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_layout_align_content_value_deep_copy(object: &AzOptionLayoutAlignContentValue) -> AzOptionLayoutAlignContentValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_layout_align_content_value_fmt_debug(object: &AzOptionLayoutAlignContentValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionTagId` struct
pub type AzOptionTagIdTT = azul_impl::styled_dom::OptionTagId;
pub use AzOptionTagIdTT as AzOptionTagId;
/// Destructor: Takes ownership of the `OptionTagId` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_tag_id_delete(object: &mut AzOptionTagId) { match object { azul_impl::styled_dom::OptionTagId::None => { }, azul_impl::styled_dom::OptionTagId::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_tag_id_deep_copy(object: &AzOptionTagId) -> AzOptionTagId { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_tag_id_fmt_debug(object: &AzOptionTagId) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionDuration` struct
pub type AzOptionDurationTT = azul_impl::task::OptionDuration;
pub use AzOptionDurationTT as AzOptionDuration;
/// Destructor: Takes ownership of the `OptionDuration` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_duration_delete(object: &mut AzOptionDuration) { match object { azul_impl::task::OptionDuration::None => { }, azul_impl::task::OptionDuration::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_duration_deep_copy(object: &AzOptionDuration) -> AzOptionDuration { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_duration_fmt_debug(object: &AzOptionDuration) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionInstantPtr` struct
pub type AzOptionInstantPtrTT = azul_impl::task::OptionInstantPtr;
pub use AzOptionInstantPtrTT as AzOptionInstantPtr;
/// Destructor: Takes ownership of the `OptionInstantPtr` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_instant_ptr_delete(object: &mut AzOptionInstantPtr) { match object { azul_impl::task::OptionInstantPtr::None => { }, azul_impl::task::OptionInstantPtr::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_instant_ptr_deep_copy(object: &AzOptionInstantPtr) -> AzOptionInstantPtr { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_instant_ptr_fmt_debug(object: &AzOptionInstantPtr) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionUsize` struct
pub type AzOptionUsizeTT = azul_impl::gl::OptionUsize;
pub use AzOptionUsizeTT as AzOptionUsize;
/// Destructor: Takes ownership of the `OptionUsize` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_usize_delete(object: &mut AzOptionUsize) { match object { azul_impl::gl::OptionUsize::None => { }, azul_impl::gl::OptionUsize::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_usize_deep_copy(object: &AzOptionUsize) -> AzOptionUsize { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_usize_fmt_debug(object: &AzOptionUsize) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionU8VecRef` struct
pub type AzOptionU8VecRefTT = azul_impl::gl::OptionU8VecRef;
pub use AzOptionU8VecRefTT as AzOptionU8VecRef;
/// Destructor: Takes ownership of the `OptionU8VecRef` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_u8_vec_ref_delete(object: &mut AzOptionU8VecRef) { match object { azul_impl::gl::OptionU8VecRef::None => { }, azul_impl::gl::OptionU8VecRef::Some(_) => { }, }
}
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_u8_vec_ref_fmt_debug(object: &AzOptionU8VecRef) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `ResultSvgSvgParseError` struct
pub type AzResultSvgSvgParseErrorTT = azul_impl::svg::ResultSvgSvgParseError;
pub use AzResultSvgSvgParseErrorTT as AzResultSvgSvgParseError;
/// Destructor: Takes ownership of the `ResultSvgSvgParseError` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_result_svg_svg_parse_error_delete(object: &mut AzResultSvgSvgParseError) { match object { azul_impl::svg::ResultSvgSvgParseError::Ok(_) => { }, azul_impl::svg::ResultSvgSvgParseError::Err(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_result_svg_svg_parse_error_deep_copy(object: &AzResultSvgSvgParseError) -> AzResultSvgSvgParseError { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_result_svg_svg_parse_error_fmt_debug(object: &AzResultSvgSvgParseError) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `SvgParseError` struct
pub type AzSvgParseErrorTT = azul_impl::svg::SvgParseError;
pub use AzSvgParseErrorTT as AzSvgParseError;
/// Destructor: Takes ownership of the `SvgParseError` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_svg_parse_error_delete(object: &mut AzSvgParseError) { match object { azul_impl::svg::SvgParseError::InvalidFileSuffix => { }, azul_impl::svg::SvgParseError::FileOpenFailed => { }, azul_impl::svg::SvgParseError::NotAnUtf8Str => { }, azul_impl::svg::SvgParseError::MalformedGZip => { }, azul_impl::svg::SvgParseError::InvalidSize => { }, azul_impl::svg::SvgParseError::ParsingFailed(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_svg_parse_error_deep_copy(object: &AzSvgParseError) -> AzSvgParseError { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_svg_parse_error_fmt_debug(object: &AzSvgParseError) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `XmlError` struct
pub type AzXmlErrorTT = azul_impl::xml::XmlError;
pub use AzXmlErrorTT as AzXmlError;
/// Destructor: Takes ownership of the `XmlError` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_xml_error_delete(object: &mut AzXmlError) { match object { azul_impl::xml::XmlError::InvalidXmlPrefixUri(_) => { }, azul_impl::xml::XmlError::UnexpectedXmlUri(_) => { }, azul_impl::xml::XmlError::UnexpectedXmlnsUri(_) => { }, azul_impl::xml::XmlError::InvalidElementNamePrefix(_) => { }, azul_impl::xml::XmlError::DuplicatedNamespace(_) => { }, azul_impl::xml::XmlError::UnknownNamespace(_) => { }, azul_impl::xml::XmlError::UnexpectedCloseTag(_) => { }, azul_impl::xml::XmlError::UnexpectedEntityCloseTag(_) => { }, azul_impl::xml::XmlError::UnknownEntityReference(_) => { }, azul_impl::xml::XmlError::MalformedEntityReference(_) => { }, azul_impl::xml::XmlError::EntityReferenceLoop(_) => { }, azul_impl::xml::XmlError::InvalidAttributeValue(_) => { }, azul_impl::xml::XmlError::DuplicatedAttribute(_) => { }, azul_impl::xml::XmlError::NoRootNode => { }, azul_impl::xml::XmlError::SizeLimit => { }, azul_impl::xml::XmlError::ParserError(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_xml_error_deep_copy(object: &AzXmlError) -> AzXmlError { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_xml_error_fmt_debug(object: &AzXmlError) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `DuplicatedNamespaceError` struct
pub type AzDuplicatedNamespaceErrorTT = azul_impl::xml::DuplicatedNamespaceError;
pub use AzDuplicatedNamespaceErrorTT as AzDuplicatedNamespaceError;
/// Destructor: Takes ownership of the `DuplicatedNamespaceError` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_duplicated_namespace_error_delete(object: &mut AzDuplicatedNamespaceError) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_duplicated_namespace_error_deep_copy(object: &AzDuplicatedNamespaceError) -> AzDuplicatedNamespaceError { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_duplicated_namespace_error_fmt_debug(object: &AzDuplicatedNamespaceError) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `UnknownNamespaceError` struct
pub type AzUnknownNamespaceErrorTT = azul_impl::xml::UnknownNamespaceError;
pub use AzUnknownNamespaceErrorTT as AzUnknownNamespaceError;
/// Destructor: Takes ownership of the `UnknownNamespaceError` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_unknown_namespace_error_delete(object: &mut AzUnknownNamespaceError) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_unknown_namespace_error_deep_copy(object: &AzUnknownNamespaceError) -> AzUnknownNamespaceError { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_unknown_namespace_error_fmt_debug(object: &AzUnknownNamespaceError) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `UnexpectedCloseTagError` struct
pub type AzUnexpectedCloseTagErrorTT = azul_impl::xml::UnexpectedCloseTagError;
pub use AzUnexpectedCloseTagErrorTT as AzUnexpectedCloseTagError;
/// Destructor: Takes ownership of the `UnexpectedCloseTagError` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_unexpected_close_tag_error_delete(object: &mut AzUnexpectedCloseTagError) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_unexpected_close_tag_error_deep_copy(object: &AzUnexpectedCloseTagError) -> AzUnexpectedCloseTagError { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_unexpected_close_tag_error_fmt_debug(object: &AzUnexpectedCloseTagError) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `UnknownEntityReferenceError` struct
pub type AzUnknownEntityReferenceErrorTT = azul_impl::xml::UnknownEntityReferenceError;
pub use AzUnknownEntityReferenceErrorTT as AzUnknownEntityReferenceError;
/// Destructor: Takes ownership of the `UnknownEntityReferenceError` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_unknown_entity_reference_error_delete(object: &mut AzUnknownEntityReferenceError) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_unknown_entity_reference_error_deep_copy(object: &AzUnknownEntityReferenceError) -> AzUnknownEntityReferenceError { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_unknown_entity_reference_error_fmt_debug(object: &AzUnknownEntityReferenceError) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `DuplicatedAttributeError` struct
pub type AzDuplicatedAttributeErrorTT = azul_impl::xml::DuplicatedAttributeError;
pub use AzDuplicatedAttributeErrorTT as AzDuplicatedAttributeError;
/// Destructor: Takes ownership of the `DuplicatedAttributeError` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_duplicated_attribute_error_delete(object: &mut AzDuplicatedAttributeError) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_duplicated_attribute_error_deep_copy(object: &AzDuplicatedAttributeError) -> AzDuplicatedAttributeError { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_duplicated_attribute_error_fmt_debug(object: &AzDuplicatedAttributeError) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `XmlParseError` struct
pub type AzXmlParseErrorTT = azul_impl::xml::XmlParseError;
pub use AzXmlParseErrorTT as AzXmlParseError;
/// Destructor: Takes ownership of the `XmlParseError` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_xml_parse_error_delete(object: &mut AzXmlParseError) { match object { azul_impl::xml::XmlParseError::InvalidDeclaration(_) => { }, azul_impl::xml::XmlParseError::InvalidComment(_) => { }, azul_impl::xml::XmlParseError::InvalidPI(_) => { }, azul_impl::xml::XmlParseError::InvalidDoctype(_) => { }, azul_impl::xml::XmlParseError::InvalidEntity(_) => { }, azul_impl::xml::XmlParseError::InvalidElement(_) => { }, azul_impl::xml::XmlParseError::InvalidAttribute(_) => { }, azul_impl::xml::XmlParseError::InvalidCdata(_) => { }, azul_impl::xml::XmlParseError::InvalidCharData(_) => { }, azul_impl::xml::XmlParseError::UnknownToken(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_xml_parse_error_deep_copy(object: &AzXmlParseError) -> AzXmlParseError { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_xml_parse_error_fmt_debug(object: &AzXmlParseError) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `XmlTextError` struct
pub type AzXmlTextErrorTT = azul_impl::xml::XmlTextError;
pub use AzXmlTextErrorTT as AzXmlTextError;
/// Destructor: Takes ownership of the `XmlTextError` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_xml_text_error_delete(object: &mut AzXmlTextError) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_xml_text_error_deep_copy(object: &AzXmlTextError) -> AzXmlTextError { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_xml_text_error_fmt_debug(object: &AzXmlTextError) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `XmlStreamError` struct
pub type AzXmlStreamErrorTT = azul_impl::xml::XmlStreamError;
pub use AzXmlStreamErrorTT as AzXmlStreamError;
/// Destructor: Takes ownership of the `XmlStreamError` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_xml_stream_error_delete(object: &mut AzXmlStreamError) { match object { azul_impl::xml::XmlStreamError::UnexpectedEndOfStream => { }, azul_impl::xml::XmlStreamError::InvalidName => { }, azul_impl::xml::XmlStreamError::NonXmlChar(_) => { }, azul_impl::xml::XmlStreamError::InvalidChar(_) => { }, azul_impl::xml::XmlStreamError::InvalidCharMultiple(_) => { }, azul_impl::xml::XmlStreamError::InvalidQuote(_) => { }, azul_impl::xml::XmlStreamError::InvalidSpace(_) => { }, azul_impl::xml::XmlStreamError::InvalidString(_) => { }, azul_impl::xml::XmlStreamError::InvalidReference => { }, azul_impl::xml::XmlStreamError::InvalidExternalID => { }, azul_impl::xml::XmlStreamError::InvalidCommentData => { }, azul_impl::xml::XmlStreamError::InvalidCommentEnd => { }, azul_impl::xml::XmlStreamError::InvalidCharacterData => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_xml_stream_error_deep_copy(object: &AzXmlStreamError) -> AzXmlStreamError { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_xml_stream_error_fmt_debug(object: &AzXmlStreamError) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `NonXmlCharError` struct
pub type AzNonXmlCharErrorTT = azul_impl::xml::NonXmlCharError;
pub use AzNonXmlCharErrorTT as AzNonXmlCharError;
/// Destructor: Takes ownership of the `NonXmlCharError` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_non_xml_char_error_delete(object: &mut AzNonXmlCharError) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_non_xml_char_error_deep_copy(object: &AzNonXmlCharError) -> AzNonXmlCharError { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_non_xml_char_error_fmt_debug(object: &AzNonXmlCharError) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `InvalidCharError` struct
pub type AzInvalidCharErrorTT = azul_impl::xml::InvalidCharError;
pub use AzInvalidCharErrorTT as AzInvalidCharError;
/// Destructor: Takes ownership of the `InvalidCharError` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_invalid_char_error_delete(object: &mut AzInvalidCharError) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_invalid_char_error_deep_copy(object: &AzInvalidCharError) -> AzInvalidCharError { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_invalid_char_error_fmt_debug(object: &AzInvalidCharError) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `InvalidCharMultipleError` struct
pub type AzInvalidCharMultipleErrorTT = azul_impl::xml::InvalidCharMultipleError;
pub use AzInvalidCharMultipleErrorTT as AzInvalidCharMultipleError;
/// Destructor: Takes ownership of the `InvalidCharMultipleError` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_invalid_char_multiple_error_delete(object: &mut AzInvalidCharMultipleError) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_invalid_char_multiple_error_deep_copy(object: &AzInvalidCharMultipleError) -> AzInvalidCharMultipleError { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_invalid_char_multiple_error_fmt_debug(object: &AzInvalidCharMultipleError) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `InvalidQuoteError` struct
pub type AzInvalidQuoteErrorTT = azul_impl::xml::InvalidQuoteError;
pub use AzInvalidQuoteErrorTT as AzInvalidQuoteError;
/// Destructor: Takes ownership of the `InvalidQuoteError` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_invalid_quote_error_delete(object: &mut AzInvalidQuoteError) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_invalid_quote_error_deep_copy(object: &AzInvalidQuoteError) -> AzInvalidQuoteError { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_invalid_quote_error_fmt_debug(object: &AzInvalidQuoteError) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `InvalidSpaceError` struct
pub type AzInvalidSpaceErrorTT = azul_impl::xml::InvalidSpaceError;
pub use AzInvalidSpaceErrorTT as AzInvalidSpaceError;
/// Destructor: Takes ownership of the `InvalidSpaceError` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_invalid_space_error_delete(object: &mut AzInvalidSpaceError) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_invalid_space_error_deep_copy(object: &AzInvalidSpaceError) -> AzInvalidSpaceError { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_invalid_space_error_fmt_debug(object: &AzInvalidSpaceError) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `InvalidStringError` struct
pub type AzInvalidStringErrorTT = azul_impl::xml::InvalidStringError;
pub use AzInvalidStringErrorTT as AzInvalidStringError;
/// Destructor: Takes ownership of the `InvalidStringError` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_invalid_string_error_delete(object: &mut AzInvalidStringError) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_invalid_string_error_deep_copy(object: &AzInvalidStringError) -> AzInvalidStringError { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_invalid_string_error_fmt_debug(object: &AzInvalidStringError) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `XmlTextPos` struct
pub type AzXmlTextPosTT = azul_impl::xml::XmlTextPos;
pub use AzXmlTextPosTT as AzXmlTextPos;
/// Destructor: Takes ownership of the `XmlTextPos` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_xml_text_pos_delete(object: &mut AzXmlTextPos) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_xml_text_pos_deep_copy(object: &AzXmlTextPos) -> AzXmlTextPos { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_xml_text_pos_fmt_debug(object: &AzXmlTextPos) -> AzString { format!("{:#?}", object).into() }

/// Pointer to rust-allocated `Box<Instant>` struct
pub type AzInstantPtrTT = azul_impl::task::AzInstantPtr;
pub use AzInstantPtrTT as AzInstantPtr;
/// Creates a new `Instant` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `Instant::now()` constructor.
#[no_mangle] pub extern "C" fn az_instant_ptr_now() -> AzInstantPtr { let object: std::time::Instant = std::time::Instant::now(); let ptr = Box::into_raw(Box::new(object)) as *mut c_void; AzInstantPtr { ptr } }
/// Destructor: Takes ownership of the `Instant` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_instant_ptr_delete(ptr: &mut AzInstantPtr) { let _ = unsafe { Box::<std::time::Instant>::from_raw(ptr.ptr  as *mut std::time::Instant) };}
/// (private): Downcasts the `AzInstantPtr` to a `Box<std::time::Instant>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_instant_ptr_downcast(ptr: AzInstantPtr) -> Box<std::time::Instant> {     unsafe { Box::<std::time::Instant>::from_raw(ptr.ptr  as *mut std::time::Instant) }}
/// (private): Downcasts the `AzInstantPtr` to a `&mut Box<std::time::Instant>` and runs the `func` closure on it
#[inline(always)] fn az_instant_ptr_downcast_refmut<P, F: FnOnce(&mut std::time::Instant) -> P>(ptr: &mut AzInstantPtr, func: F) -> P {     func(unsafe { &mut *(ptr.ptr as *mut std::time::Instant) })}
/// (private): Downcasts the `AzInstantPtr` to a `&Box<std::time::Instant>` and runs the `func` closure on it
#[inline(always)] fn az_instant_ptr_downcast_ref<P, F: FnOnce(&std::time::Instant) -> P>(ptr: &AzInstantPtr, func: F) -> P {     func(unsafe { &*(ptr.ptr as *const std::time::Instant) })}
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_instant_ptr_fmt_debug(object: &AzInstantPtr) -> AzString { az_instant_ptr_downcast_ref(object, |o| format!("{:#?}", o)).into() }

/// Re-export of rust-allocated (stack based) `Duration` struct
pub type AzDurationTT = azul_impl::task::AzDuration;
pub use AzDurationTT as AzDuration;
/// Destructor: Takes ownership of the `Duration` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_duration_delete(object: &mut AzDuration) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_duration_deep_copy(object: &AzDuration) -> AzDuration { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_duration_fmt_debug(object: &AzDuration) -> AzString { format!("{:#?}", object).into() }

/// Pointer to rust-allocated `Box<AppConfig>` struct
#[repr(C)] pub struct AzAppConfigPtr { ptr: *mut c_void }
/// Creates a new AppConfig with default values
#[no_mangle] pub extern "C" fn az_app_config_ptr_default() -> AzAppConfigPtr { let object: AppConfig = AppConfig::default(); let ptr = Box::into_raw(Box::new(object)) as *mut c_void; AzAppConfigPtr { ptr } }
/// Destructor: Takes ownership of the `AppConfig` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_app_config_ptr_delete(ptr: &mut AzAppConfigPtr) { let _ = unsafe { Box::<AppConfig>::from_raw(ptr.ptr  as *mut AppConfig) };}
/// (private): Downcasts the `AzAppConfigPtr` to a `Box<AppConfig>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_app_config_ptr_downcast(ptr: AzAppConfigPtr) -> Box<AppConfig> {     unsafe { Box::<AppConfig>::from_raw(ptr.ptr  as *mut AppConfig) }}
/// (private): Downcasts the `AzAppConfigPtr` to a `&mut Box<AppConfig>` and runs the `func` closure on it
#[inline(always)] fn az_app_config_ptr_downcast_refmut<P, F: FnOnce(&mut AppConfig) -> P>(ptr: &mut AzAppConfigPtr, func: F) -> P {     func(unsafe { &mut *(ptr.ptr as *mut AppConfig) })}
/// (private): Downcasts the `AzAppConfigPtr` to a `&Box<AppConfig>` and runs the `func` closure on it
#[inline(always)] fn az_app_config_ptr_downcast_ref<P, F: FnOnce(&AppConfig) -> P>(ptr: &AzAppConfigPtr, func: F) -> P {     func(unsafe { &*(ptr.ptr as *const AppConfig) })}
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_app_config_ptr_fmt_debug(object: &AzAppConfigPtr) -> AzString { az_app_config_ptr_downcast_ref(object, |o| format!("{:#?}", o)).into() }

/// Pointer to rust-allocated `Box<App>` struct
#[repr(C)] pub struct AzAppPtr { ptr: *mut c_void }
/// Creates a new App instance from the given `AppConfig`
#[no_mangle] pub extern "C" fn az_app_ptr_new(data: AzRefAny, config: AzAppConfigPtr) -> AzAppPtr { let object: App = App::new(data, *az_app_config_ptr_downcast(config)).unwrap(); let ptr = Box::into_raw(Box::new(object)) as *mut c_void; AzAppPtr { ptr } }
/// Runs the application. Due to platform restrictions (specifically `WinMain` on Windows), this function never returns.
#[no_mangle] pub extern "C" fn az_app_ptr_run(app: AzAppPtr, window: AzWindowCreateOptions) { az_app_ptr_downcast(app).run(window) }
/// Destructor: Takes ownership of the `App` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_app_ptr_delete(ptr: &mut AzAppPtr) { let _ = unsafe { Box::<App>::from_raw(ptr.ptr  as *mut App) };}
/// (private): Downcasts the `AzAppPtr` to a `Box<App>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_app_ptr_downcast(ptr: AzAppPtr) -> Box<App> {     unsafe { Box::<App>::from_raw(ptr.ptr  as *mut App) }}
/// (private): Downcasts the `AzAppPtr` to a `&mut Box<App>` and runs the `func` closure on it
#[inline(always)] fn az_app_ptr_downcast_refmut<P, F: FnOnce(&mut App) -> P>(ptr: &mut AzAppPtr, func: F) -> P {     func(unsafe { &mut *(ptr.ptr as *mut App) })}
/// (private): Downcasts the `AzAppPtr` to a `&Box<App>` and runs the `func` closure on it
#[inline(always)] fn az_app_ptr_downcast_ref<P, F: FnOnce(&App) -> P>(ptr: &AzAppPtr, func: F) -> P {     func(unsafe { &*(ptr.ptr as *const App) })}
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_app_ptr_fmt_debug(object: &AzAppPtr) -> AzString { az_app_ptr_downcast_ref(object, |o| format!("{:#?}", o)).into() }

/// Re-export of rust-allocated (stack based) `NodeId` struct
pub type AzNodeIdTT = azul_impl::styled_dom::AzNodeId;
pub use AzNodeIdTT as AzNodeId;
/// Destructor: Takes ownership of the `NodeId` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_node_id_delete(object: &mut AzNodeId) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_node_id_deep_copy(object: &AzNodeId) -> AzNodeId { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_node_id_fmt_debug(object: &AzNodeId) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `DomId` struct
pub type AzDomIdTT = azul_impl::styled_dom::DomId;
pub use AzDomIdTT as AzDomId;
/// Destructor: Takes ownership of the `DomId` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_dom_id_delete(object: &mut AzDomId) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_dom_id_deep_copy(object: &AzDomId) -> AzDomId { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_dom_id_fmt_debug(object: &AzDomId) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `DomNodeId` struct
pub type AzDomNodeIdTT = azul_impl::callbacks::DomNodeId;
pub use AzDomNodeIdTT as AzDomNodeId;
/// Destructor: Takes ownership of the `DomNodeId` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_dom_node_id_delete(object: &mut AzDomNodeId) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_dom_node_id_deep_copy(object: &AzDomNodeId) -> AzDomNodeId { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_dom_node_id_fmt_debug(object: &AzDomNodeId) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `HidpiAdjustedBounds` struct
pub type AzHidpiAdjustedBoundsTT = azul_impl::callbacks::HidpiAdjustedBounds;
pub use AzHidpiAdjustedBoundsTT as AzHidpiAdjustedBounds;
/// Returns the size of the bounds in logical units
#[no_mangle] pub extern "C" fn az_hidpi_adjusted_bounds_get_logical_size(hidpiadjustedbounds: &AzHidpiAdjustedBounds) -> AzLogicalSize { hidpiadjustedbounds.get_logical_size() }
/// Returns the size of the bounds in physical units
#[no_mangle] pub extern "C" fn az_hidpi_adjusted_bounds_get_physical_size(hidpiadjustedbounds: &AzHidpiAdjustedBounds) -> AzPhysicalSizeU32 { hidpiadjustedbounds.get_physical_size() }
/// Returns the hidpi factor of the bounds
#[no_mangle] pub extern "C" fn az_hidpi_adjusted_bounds_get_hidpi_factor(hidpiadjustedbounds: &AzHidpiAdjustedBounds) -> f32 { hidpiadjustedbounds.get_hidpi_factor() }
/// Destructor: Takes ownership of the `HidpiAdjustedBounds` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_hidpi_adjusted_bounds_delete(object: &mut AzHidpiAdjustedBounds) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_hidpi_adjusted_bounds_deep_copy(object: &AzHidpiAdjustedBounds) -> AzHidpiAdjustedBounds { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_hidpi_adjusted_bounds_fmt_debug(object: &AzHidpiAdjustedBounds) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutCallback` struct
pub type AzLayoutCallbackTT = azul_impl::callbacks::LayoutCallback;
pub use AzLayoutCallbackTT as AzLayoutCallback;
/// Destructor: Takes ownership of the `LayoutCallback` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_callback_delete(object: &mut AzLayoutCallback) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_callback_deep_copy(object: &AzLayoutCallback) -> AzLayoutCallback { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_callback_fmt_debug(object: &AzLayoutCallback) -> AzString { format!("{:#?}", object).into() }

/// The layout() callback fn
pub type AzLayoutCallbackType = extern "C" fn(&AzRefAny, AzLayoutInfo) -> AzStyledDom;
/// Re-export of rust-allocated (stack based) `Callback` struct
pub type AzCallbackTT = azul_impl::callbacks::Callback;
pub use AzCallbackTT as AzCallback;
/// Destructor: Takes ownership of the `Callback` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_callback_delete(object: &mut AzCallback) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_callback_deep_copy(object: &AzCallback) -> AzCallback { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_callback_fmt_debug(object: &AzCallback) -> AzString { format!("{:#?}", object).into() }

/// Defines the focus target for the next frame
pub type AzFocusTargetTT = azul_impl::callbacks::FocusTarget;
pub use AzFocusTargetTT as AzFocusTarget;
/// Destructor: Takes ownership of the `FocusTarget` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_focus_target_delete(object: &mut AzFocusTarget) { match object { azul_impl::callbacks::FocusTarget::Id(_) => { }, azul_impl::callbacks::FocusTarget::Path(_) => { }, azul_impl::callbacks::FocusTarget::PreviousFocusItem => { }, azul_impl::callbacks::FocusTarget::NextFocusItem => { }, azul_impl::callbacks::FocusTarget::NoFocus => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_focus_target_deep_copy(object: &AzFocusTarget) -> AzFocusTarget { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_focus_target_fmt_debug(object: &AzFocusTarget) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `FocusTargetPath` struct
pub type AzFocusTargetPathTT = azul_impl::callbacks::FocusTargetPath;
pub use AzFocusTargetPathTT as AzFocusTargetPath;
/// Destructor: Takes ownership of the `FocusTargetPath` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_focus_target_path_delete(object: &mut AzFocusTargetPath) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_focus_target_path_deep_copy(object: &AzFocusTargetPath) -> AzFocusTargetPath { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_focus_target_path_fmt_debug(object: &AzFocusTargetPath) -> AzString { format!("{:#?}", object).into() }

pub type AzCallbackReturn = AzUpdateScreen;
/// Callback for responding to window events
pub type AzCallbackType = extern "C" fn(&mut AzRefAny, AzCallbackInfo) -> AzCallbackReturn;
/// Re-export of rust-allocated (stack based) `CallbackInfo` struct
pub type AzCallbackInfoTT = azul_impl::callbacks::CallbackInfo;
pub use AzCallbackInfoTT as AzCallbackInfo;
/// Returns the `DomNodeId` of the element that the callback was attached to.
#[no_mangle] pub extern "C" fn az_callback_info_get_hit_node(callbackinfo: &AzCallbackInfo) -> AzDomNodeId { callbackinfo.get_hit_node() }
/// Returns the `LayoutPoint` of the cursor in the viewport (relative to the origin of the `Dom`). Set to `None` if the cursor is not in the current window.
#[no_mangle] pub extern "C" fn az_callback_info_get_cursor_relative_to_viewport(callbackinfo: &AzCallbackInfo) -> AzOptionLayoutPoint { callbackinfo.get_cursor_relative_to_viewport() }
/// Returns the `LayoutPoint` of the cursor in the viewport (relative to the origin of the `Dom`). Set to `None` if the cursor is not hovering over the current node.
#[no_mangle] pub extern "C" fn az_callback_info_get_cursor_relative_to_node(callbackinfo: &AzCallbackInfo) -> AzOptionLayoutPoint { callbackinfo.get_cursor_relative_to_node() }
/// Returns the parent `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid NodeId.
#[no_mangle] pub extern "C" fn az_callback_info_get_parent(callbackinfo: &AzCallbackInfo, node_id: AzDomNodeId) -> AzOptionDomNodeId { callbackinfo.get_parent(node_id).into() }
/// Returns the previous siblings `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid NodeId.
#[no_mangle] pub extern "C" fn az_callback_info_get_previous_sibling(callbackinfo: &AzCallbackInfo, node_id: AzDomNodeId) -> AzOptionDomNodeId { callbackinfo.get_previous_sibling(node_id).into() }
/// Returns the next siblings `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid NodeId.
#[no_mangle] pub extern "C" fn az_callback_info_get_next_sibling(callbackinfo: &AzCallbackInfo, node_id: AzDomNodeId) -> AzOptionDomNodeId { callbackinfo.get_next_sibling(node_id).into() }
/// Returns the next siblings `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid NodeId.
#[no_mangle] pub extern "C" fn az_callback_info_get_first_child(callbackinfo: &AzCallbackInfo, node_id: AzDomNodeId) -> AzOptionDomNodeId { callbackinfo.get_first_child(node_id).into() }
/// Returns the next siblings `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid NodeId.
#[no_mangle] pub extern "C" fn az_callback_info_get_last_child(callbackinfo: &AzCallbackInfo, node_id: AzDomNodeId) -> AzOptionDomNodeId { callbackinfo.get_last_child(node_id).into() }
/// Returns the `Dataset` of the given `DomNodeId`. Returns `None` on an invalid NodeId.
#[no_mangle] pub extern "C" fn az_callback_info_get_dataset(callbackinfo: &AzCallbackInfo, node_id: AzDomNodeId) -> AzOptionRefAny { callbackinfo.get_dataset(node_id).into() }
/// Returns a copy of the current windows `WindowState`.
#[no_mangle] pub extern "C" fn az_callback_info_get_window_state(callbackinfo: &AzCallbackInfo) -> AzWindowState { callbackinfo.get_window_state() }
/// Returns a copy of the internal `KeyboardState`. Same as `self.get_window_state().keyboard_state`
#[no_mangle] pub extern "C" fn az_callback_info_get_keyboard_state(callbackinfo: &AzCallbackInfo) -> AzKeyboardState { callbackinfo.get_keyboard_state() }
/// Returns a copy of the internal `MouseState`. Same as `self.get_window_state().mouse_state`
#[no_mangle] pub extern "C" fn az_callback_info_get_mouse_state(callbackinfo: &AzCallbackInfo) -> AzMouseState { callbackinfo.get_mouse_state() }
/// Returns a copy of the current windows `RawWindowHandle`.
#[no_mangle] pub extern "C" fn az_callback_info_get_current_window_handle(callbackinfo: &AzCallbackInfo) -> AzRawWindowHandle { callbackinfo.get_current_window_handle() }
/// Returns a **reference-counted copy** of the current windows `GlContextPtr`. You can use this to render OpenGL textures.
#[no_mangle] pub extern "C" fn az_callback_info_get_gl_context(callbackinfo: &AzCallbackInfo) -> AzGlContextPtr { callbackinfo.get_gl_context() }
/// Sets the new `WindowState` for the next frame. The window is updated after all callbacks are run.
#[no_mangle] pub extern "C" fn az_callback_info_set_window_state(callbackinfo: &mut AzCallbackInfo, new_state: AzWindowState) { callbackinfo.set_window_state(new_state); }
/// Sets the new `FocusTarget` for the next frame. Note that this will emit a `On::FocusLost` and `On::FocusReceived` event, if the focused node has changed.
#[no_mangle] pub extern "C" fn az_callback_info_set_focus(callbackinfo: &mut AzCallbackInfo, target: AzFocusTarget) { callbackinfo.set_focus(target); }
/// Sets a `CssProperty` on a given ndoe to its new value. If this property change affects the layout, this will automatically trigger a relayout and redraw of the screen.
#[no_mangle] pub extern "C" fn az_callback_info_set_css_property(callbackinfo: &mut AzCallbackInfo, node_id: AzDomNodeId, new_property: AzCssProperty) { callbackinfo.set_css_property(node_id, new_property);  }
/// Stops the propagation of the current callback event type to the parent. Events are bubbled from the inside out (children first, then parents), this event stops the propagation of the event to the parent.
#[no_mangle] pub extern "C" fn az_callback_info_stop_propagation(callbackinfo: &mut AzCallbackInfo) { callbackinfo.stop_propagation(); }
/// Spawns a new window with the given `WindowCreateOptions`.
#[no_mangle] pub extern "C" fn az_callback_info_create_window(callbackinfo: &mut AzCallbackInfo, new_window: AzWindowCreateOptions) { callbackinfo.create_window(new_window); }
/// Starts a new `Thread` to the runtime. See the documentation for `Thread` for more information.
#[no_mangle] pub extern "C" fn az_callback_info_start_thread(callbackinfo: &mut AzCallbackInfo, id: AzThreadId, thread_initialize_data: AzRefAny, writeback_data: AzRefAny, callback: AzThreadCallbackType) { callbackinfo.start_thread(id, thread_initialize_data, writeback_data, callback); }
/// Adds a new `Timer` to the runtime. See the documentation for `Timer` for more information.
#[no_mangle] pub extern "C" fn az_callback_info_start_timer(callbackinfo: &mut AzCallbackInfo, id: AzTimerId, timer: AzTimer) { callbackinfo.start_timer(id, timer); }
/// Destructor: Takes ownership of the `CallbackInfo` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_callback_info_delete(object: &mut AzCallbackInfo) { }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_callback_info_fmt_debug(object: &AzCallbackInfo) -> AzString { format!("{:#?}", object).into() }

/// Specifies if the screen should be updated after the callback function has returned
pub type AzUpdateScreenTT = azul_impl::callbacks::UpdateScreen;
pub use AzUpdateScreenTT as AzUpdateScreen;
/// Destructor: Takes ownership of the `UpdateScreen` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_update_screen_delete(object: &mut AzUpdateScreen) { match object { azul_impl::callbacks::UpdateScreen::DoNothing => { }, azul_impl::callbacks::UpdateScreen::RegenerateStyledDomForCurrentWindow => { }, azul_impl::callbacks::UpdateScreen::RegenerateStyledDomForAllWindows => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_update_screen_deep_copy(object: &AzUpdateScreen) -> AzUpdateScreen { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_update_screen_fmt_debug(object: &AzUpdateScreen) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `IFrameCallback` struct
pub type AzIFrameCallbackTT = azul_impl::callbacks::IFrameCallback;
pub use AzIFrameCallbackTT as AzIFrameCallback;
/// Destructor: Takes ownership of the `IFrameCallback` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_i_frame_callback_delete(object: &mut AzIFrameCallback) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_i_frame_callback_deep_copy(object: &AzIFrameCallback) -> AzIFrameCallback { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_i_frame_callback_fmt_debug(object: &AzIFrameCallback) -> AzString { format!("{:#?}", object).into() }

/// Callback for rendering iframes (infinite data structures that have to know how large they are rendered)
pub type AzIFrameCallbackType = extern "C" fn(&AzRefAny, AzIFrameCallbackInfo) -> AzIFrameCallbackReturn;
/// Re-export of rust-allocated (stack based) `IFrameCallbackInfo` struct
pub type AzIFrameCallbackInfoTT = azul_impl::callbacks::IFrameCallbackInfo;
pub use AzIFrameCallbackInfoTT as AzIFrameCallbackInfo;
/// Destructor: Takes ownership of the `IFrameCallbackInfo` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_i_frame_callback_info_delete(object: &mut AzIFrameCallbackInfo) { }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_i_frame_callback_info_fmt_debug(object: &AzIFrameCallbackInfo) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `IFrameCallbackReturn` struct
pub type AzIFrameCallbackReturnTT = azul_impl::callbacks::IFrameCallbackReturn;
pub use AzIFrameCallbackReturnTT as AzIFrameCallbackReturn;
/// Destructor: Takes ownership of the `IFrameCallbackReturn` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_i_frame_callback_return_delete(object: &mut AzIFrameCallbackReturn) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_i_frame_callback_return_deep_copy(object: &AzIFrameCallbackReturn) -> AzIFrameCallbackReturn { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_i_frame_callback_return_fmt_debug(object: &AzIFrameCallbackReturn) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `GlCallback` struct
pub type AzGlCallbackTT = azul_impl::callbacks::GlCallback;
pub use AzGlCallbackTT as AzGlCallback;
/// Destructor: Takes ownership of the `GlCallback` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_gl_callback_delete(object: &mut AzGlCallback) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_gl_callback_deep_copy(object: &AzGlCallback) -> AzGlCallback { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_gl_callback_fmt_debug(object: &AzGlCallback) -> AzString { format!("{:#?}", object).into() }

/// Callback for rendering to an OpenGL texture
pub type AzGlCallbackType = extern "C" fn(&AzRefAny, AzGlCallbackInfo) -> AzGlCallbackReturn;
/// Re-export of rust-allocated (stack based) `GlCallbackInfo` struct
pub type AzGlCallbackInfoTT = azul_impl::callbacks::GlCallbackInfo;
pub use AzGlCallbackInfoTT as AzGlCallbackInfo;
/// Returns a copy of the internal `GlContextPtr`
#[no_mangle] pub extern "C" fn az_gl_callback_info_get_gl_context(glcallbackinfo: &AzGlCallbackInfo) -> AzGlContextPtr { glcallbackinfo.get_gl_context() }
/// Destructor: Takes ownership of the `GlCallbackInfo` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_gl_callback_info_delete(object: &mut AzGlCallbackInfo) { }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_gl_callback_info_fmt_debug(object: &AzGlCallbackInfo) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `GlCallbackReturn` struct
pub type AzGlCallbackReturnTT = azul_impl::callbacks::GlCallbackReturn;
pub use AzGlCallbackReturnTT as AzGlCallbackReturn;
/// Destructor: Takes ownership of the `GlCallbackReturn` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_gl_callback_return_delete(object: &mut AzGlCallbackReturn) { }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_gl_callback_return_fmt_debug(object: &AzGlCallbackReturn) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `TimerCallback` struct
pub type AzTimerCallbackTT = azul_impl::callbacks::TimerCallback;
pub use AzTimerCallbackTT as AzTimerCallback;
/// Destructor: Takes ownership of the `TimerCallback` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_timer_callback_delete(object: &mut AzTimerCallback) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_timer_callback_deep_copy(object: &AzTimerCallback) -> AzTimerCallback { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_timer_callback_fmt_debug(object: &AzTimerCallback) -> AzString { format!("{:#?}", object).into() }

pub type AzTimerCallbackType = extern "C" fn(&mut AzRefAny, &mut AzRefAny, AzTimerCallbackInfo) -> AzTimerCallbackReturn;
/// Re-export of rust-allocated (stack based) `TimerCallbackInfo` struct
pub type AzTimerCallbackInfoTT = azul_impl::callbacks::TimerCallbackInfo;
pub use AzTimerCallbackInfoTT as AzTimerCallbackInfo;
/// Destructor: Takes ownership of the `TimerCallbackInfo` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_timer_callback_info_delete(object: &mut AzTimerCallbackInfo) { }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_timer_callback_info_fmt_debug(object: &AzTimerCallbackInfo) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `TimerCallbackReturn` struct
pub type AzTimerCallbackReturnTT = azul_impl::callbacks::TimerCallbackReturn;
pub use AzTimerCallbackReturnTT as AzTimerCallbackReturn;
/// Destructor: Takes ownership of the `TimerCallbackReturn` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_timer_callback_return_delete(object: &mut AzTimerCallbackReturn) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_timer_callback_return_deep_copy(object: &AzTimerCallbackReturn) -> AzTimerCallbackReturn { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_timer_callback_return_fmt_debug(object: &AzTimerCallbackReturn) -> AzString { format!("{:#?}", object).into() }

pub type AzWriteBackCallbackType = extern "C" fn(&mut AzRefAny, AzRefAny, AzCallbackInfo) -> AzUpdateScreen;
/// Re-export of rust-allocated (stack based) `WriteBackCallback` struct
pub type AzWriteBackCallbackTT = azul_impl::callbacks::WriteBackCallback;
pub use AzWriteBackCallbackTT as AzWriteBackCallback;
/// Destructor: Takes ownership of the `WriteBackCallback` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_write_back_callback_delete(object: &mut AzWriteBackCallback) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_write_back_callback_deep_copy(object: &AzWriteBackCallback) -> AzWriteBackCallback { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_write_back_callback_fmt_debug(object: &AzWriteBackCallback) -> AzString { format!("{:#?}", object).into() }

pub type AzThreadCallbackType = extern "C" fn(AzRefAny, AzThreadSender, AzThreadReceiver);
pub type AzRefAnyDestructorType = extern "C" fn(*const c_void);

/// Re-export of rust-allocated (stack based) `AtomicRefCount` struct
pub type AzAtomicRefCountTT = azul_impl::callbacks::AtomicRefCount;
pub use AzAtomicRefCountTT as AzAtomicRefCount;
/// Equivalent to the Rust `AtomicRefCount::can_be_shared()` function.
#[no_mangle] pub extern "C" fn az_atomic_ref_count_can_be_shared(atomicrefcount: &AzAtomicRefCount) -> bool { atomicrefcount.can_be_shared() }
/// Equivalent to the Rust `AtomicRefCount::can_be_shared_mut()` function.
#[no_mangle] pub extern "C" fn az_atomic_ref_count_can_be_shared_mut(atomicrefcount: &AzAtomicRefCount) -> bool { atomicrefcount.can_be_shared_mut() }
/// Equivalent to the Rust `AtomicRefCount::increase_ref()` function.
#[no_mangle] pub extern "C" fn az_atomic_ref_count_increase_ref(atomicrefcount: &mut AzAtomicRefCount) { atomicrefcount.increase_ref() }
/// Equivalent to the Rust `AtomicRefCount::decrease_ref()` function.
#[no_mangle] pub extern "C" fn az_atomic_ref_count_decrease_ref(atomicrefcount: &mut AzAtomicRefCount) { atomicrefcount.decrease_ref() }
/// Equivalent to the Rust `AtomicRefCount::increase_refmut()` function.
#[no_mangle] pub extern "C" fn az_atomic_ref_count_increase_refmut(atomicrefcount: &mut AzAtomicRefCount) { atomicrefcount.increase_refmut() }
/// Equivalent to the Rust `AtomicRefCount::decrease_refmut()` function.
#[no_mangle] pub extern "C" fn az_atomic_ref_count_decrease_refmut(atomicrefcount: &mut AzAtomicRefCount) { atomicrefcount.decrease_refmut() }
/// Destructor: Takes ownership of the `AtomicRefCount` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_atomic_ref_count_delete(object: &mut AzAtomicRefCount) { }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_atomic_ref_count_fmt_debug(object: &AzAtomicRefCount) -> AzString { format!("{:#?}", object).into() }

/// RefAny is a reference-counted, type-erased pointer, which stores a reference to a struct. `RefAny` can be up- and downcasted (this usually done via generics and can't be expressed in the Rust API)
pub type AzRefAnyTT = azul_impl::callbacks::RefAny;
pub use AzRefAnyTT as AzRefAny;
/// Creates a new `RefAny` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `RefAny::new_c()` constructor.
#[no_mangle] pub extern "C" fn az_ref_any_new_c(ptr: *const c_void, len: usize, type_id: u64, type_name: AzString, destructor: AzRefAnyDestructorType) -> AzRefAny { RefAny::new_c(ptr, len, type_id, type_name, destructor) }
/// Equivalent to the Rust `RefAny::is_type()` function.
#[no_mangle] pub extern "C" fn az_ref_any_is_type(refany: &AzRefAny, type_id: u64) -> bool { refany.is_type(type_id) }
/// Equivalent to the Rust `RefAny::get_type_name()` function.
#[no_mangle] pub extern "C" fn az_ref_any_get_type_name(refany: &AzRefAny) -> AzString { refany.get_type_name() }
/// Equivalent to the Rust `RefAny::can_be_shared()` function.
#[no_mangle] pub extern "C" fn az_ref_any_can_be_shared(refany: &AzRefAny) -> bool { refany.can_be_shared() }
/// Equivalent to the Rust `RefAny::can_be_shared_mut()` function.
#[no_mangle] pub extern "C" fn az_ref_any_can_be_shared_mut(refany: &AzRefAny) -> bool { refany.can_be_shared_mut() }
/// Equivalent to the Rust `RefAny::increase_ref()` function.
#[no_mangle] pub extern "C" fn az_ref_any_increase_ref(refany: &AzRefAny) { refany.increase_ref() }
/// Equivalent to the Rust `RefAny::decrease_ref()` function.
#[no_mangle] pub extern "C" fn az_ref_any_decrease_ref(refany: &AzRefAny) { refany.decrease_ref() }
/// Equivalent to the Rust `RefAny::increase_refmut()` function.
#[no_mangle] pub extern "C" fn az_ref_any_increase_refmut(refany: &AzRefAny) { refany.increase_refmut() }
/// Equivalent to the Rust `RefAny::decrease_refmut()` function.
#[no_mangle] pub extern "C" fn az_ref_any_decrease_refmut(refany: &AzRefAny) { refany.decrease_refmut() }
/// Destructor: Takes ownership of the `RefAny` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_ref_any_delete(object: &mut AzRefAny) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_ref_any_deep_copy(object: &AzRefAny) -> AzRefAny { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_ref_any_fmt_debug(object: &AzRefAny) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutInfo` struct
pub type AzLayoutInfoTT = azul_impl::callbacks::LayoutInfo;
pub use AzLayoutInfoTT as AzLayoutInfo;
/// Equivalent to the Rust `LayoutInfo::window_width_larger_than()` function.
#[no_mangle] pub extern "C" fn az_layout_info_window_width_larger_than(layoutinfo: &mut AzLayoutInfo, width: f32) -> bool { layoutinfo.window_width_larger_than(width) }
/// Equivalent to the Rust `LayoutInfo::window_width_smaller_than()` function.
#[no_mangle] pub extern "C" fn az_layout_info_window_width_smaller_than(layoutinfo: &mut AzLayoutInfo, width: f32) -> bool { layoutinfo.window_width_smaller_than(width) }
/// Equivalent to the Rust `LayoutInfo::window_height_larger_than()` function.
#[no_mangle] pub extern "C" fn az_layout_info_window_height_larger_than(layoutinfo: &mut AzLayoutInfo, width: f32) -> bool { layoutinfo.window_height_larger_than(width) }
/// Equivalent to the Rust `LayoutInfo::window_height_smaller_than()` function.
#[no_mangle] pub extern "C" fn az_layout_info_window_height_smaller_than(layoutinfo: &mut AzLayoutInfo, width: f32) -> bool { layoutinfo.window_height_smaller_than(width) }
/// Destructor: Takes ownership of the `LayoutInfo` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_info_delete(object: &mut AzLayoutInfo) { }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_info_fmt_debug(object: &AzLayoutInfo) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `CssRuleBlock` struct
pub type AzCssRuleBlockTT = azul_impl::css::CssRuleBlock;
pub use AzCssRuleBlockTT as AzCssRuleBlock;
/// Destructor: Takes ownership of the `CssRuleBlock` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_css_rule_block_delete(object: &mut AzCssRuleBlock) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_css_rule_block_deep_copy(object: &AzCssRuleBlock) -> AzCssRuleBlock { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_css_rule_block_fmt_debug(object: &AzCssRuleBlock) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `CssDeclaration` struct
pub type AzCssDeclarationTT = azul_impl::css::CssDeclaration;
pub use AzCssDeclarationTT as AzCssDeclaration;
/// Destructor: Takes ownership of the `CssDeclaration` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_css_declaration_delete(object: &mut AzCssDeclaration) { match object { azul_impl::css::CssDeclaration::Static(_) => { }, azul_impl::css::CssDeclaration::Dynamic(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_css_declaration_deep_copy(object: &AzCssDeclaration) -> AzCssDeclaration { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_css_declaration_fmt_debug(object: &AzCssDeclaration) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `DynamicCssProperty` struct
pub type AzDynamicCssPropertyTT = azul_impl::css::DynamicCssProperty;
pub use AzDynamicCssPropertyTT as AzDynamicCssProperty;
/// Destructor: Takes ownership of the `DynamicCssProperty` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_dynamic_css_property_delete(object: &mut AzDynamicCssProperty) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_dynamic_css_property_deep_copy(object: &AzDynamicCssProperty) -> AzDynamicCssProperty { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_dynamic_css_property_fmt_debug(object: &AzDynamicCssProperty) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `CssPath` struct
pub type AzCssPathTT = azul_impl::css::CssPath;
pub use AzCssPathTT as AzCssPath;
/// Destructor: Takes ownership of the `CssPath` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_css_path_delete(object: &mut AzCssPath) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_css_path_deep_copy(object: &AzCssPath) -> AzCssPath { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_css_path_fmt_debug(object: &AzCssPath) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `CssPathSelector` struct
pub type AzCssPathSelectorTT = azul_impl::css::CssPathSelector;
pub use AzCssPathSelectorTT as AzCssPathSelector;
/// Destructor: Takes ownership of the `CssPathSelector` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_css_path_selector_delete(object: &mut AzCssPathSelector) { match object { azul_impl::css::CssPathSelector::Global => { }, azul_impl::css::CssPathSelector::Type(_) => { }, azul_impl::css::CssPathSelector::Class(_) => { }, azul_impl::css::CssPathSelector::Id(_) => { }, azul_impl::css::CssPathSelector::PseudoSelector(_) => { }, azul_impl::css::CssPathSelector::DirectChildren => { }, azul_impl::css::CssPathSelector::Children => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_css_path_selector_deep_copy(object: &AzCssPathSelector) -> AzCssPathSelector { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_css_path_selector_fmt_debug(object: &AzCssPathSelector) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `NodeTypePath` struct
pub type AzNodeTypePathTT = azul_impl::css::NodeTypePath;
pub use AzNodeTypePathTT as AzNodeTypePath;
/// Destructor: Takes ownership of the `NodeTypePath` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_node_type_path_delete(object: &mut AzNodeTypePath) { match object { azul_impl::css::NodeTypePath::Body => { }, azul_impl::css::NodeTypePath::Div => { }, azul_impl::css::NodeTypePath::P => { }, azul_impl::css::NodeTypePath::Img => { }, azul_impl::css::NodeTypePath::Texture => { }, azul_impl::css::NodeTypePath::IFrame => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_node_type_path_deep_copy(object: &AzNodeTypePath) -> AzNodeTypePath { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_node_type_path_fmt_debug(object: &AzNodeTypePath) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `CssPathPseudoSelector` struct
pub type AzCssPathPseudoSelectorTT = azul_impl::css::CssPathPseudoSelector;
pub use AzCssPathPseudoSelectorTT as AzCssPathPseudoSelector;
/// Destructor: Takes ownership of the `CssPathPseudoSelector` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_css_path_pseudo_selector_delete(object: &mut AzCssPathPseudoSelector) { match object { azul_impl::css::CssPathPseudoSelector::First => { }, azul_impl::css::CssPathPseudoSelector::Last => { }, azul_impl::css::CssPathPseudoSelector::NthChild(_) => { }, azul_impl::css::CssPathPseudoSelector::Hover => { }, azul_impl::css::CssPathPseudoSelector::Active => { }, azul_impl::css::CssPathPseudoSelector::Focus => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_css_path_pseudo_selector_deep_copy(object: &AzCssPathPseudoSelector) -> AzCssPathPseudoSelector { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_css_path_pseudo_selector_fmt_debug(object: &AzCssPathPseudoSelector) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `CssNthChildSelector` struct
pub type AzCssNthChildSelectorTT = azul_impl::css::CssNthChildSelector;
pub use AzCssNthChildSelectorTT as AzCssNthChildSelector;
/// Destructor: Takes ownership of the `CssNthChildSelector` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_css_nth_child_selector_delete(object: &mut AzCssNthChildSelector) { match object { azul_impl::css::CssNthChildSelector::Number(_) => { }, azul_impl::css::CssNthChildSelector::Even => { }, azul_impl::css::CssNthChildSelector::Odd => { }, azul_impl::css::CssNthChildSelector::Pattern(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_css_nth_child_selector_deep_copy(object: &AzCssNthChildSelector) -> AzCssNthChildSelector { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_css_nth_child_selector_fmt_debug(object: &AzCssNthChildSelector) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `CssNthChildPattern` struct
pub type AzCssNthChildPatternTT = azul_impl::css::CssNthChildPattern;
pub use AzCssNthChildPatternTT as AzCssNthChildPattern;
/// Destructor: Takes ownership of the `CssNthChildPattern` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_css_nth_child_pattern_delete(object: &mut AzCssNthChildPattern) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_css_nth_child_pattern_deep_copy(object: &AzCssNthChildPattern) -> AzCssNthChildPattern { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_css_nth_child_pattern_fmt_debug(object: &AzCssNthChildPattern) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `Stylesheet` struct
pub type AzStylesheetTT = azul_impl::css::Stylesheet;
pub use AzStylesheetTT as AzStylesheet;
/// Destructor: Takes ownership of the `Stylesheet` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_stylesheet_delete(object: &mut AzStylesheet) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_stylesheet_deep_copy(object: &AzStylesheet) -> AzStylesheet { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_stylesheet_fmt_debug(object: &AzStylesheet) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `Css` struct
pub type AzCssTT = azul_impl::css::Css;
pub use AzCssTT as AzCss;
/// Returns an empty CSS style
#[no_mangle] pub extern "C" fn az_css_empty() -> AzCss { AzCss::empty() }
/// Returns a CSS style parsed from a `String`
#[no_mangle] pub extern "C" fn az_css_from_string(s: AzString) -> AzCss { css::from_str(s.as_str()).unwrap() }
/// Destructor: Takes ownership of the `Css` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_css_delete(object: &mut AzCss) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_css_deep_copy(object: &AzCss) -> AzCss { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_css_fmt_debug(object: &AzCss) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `ColorU` struct
pub type AzColorUTT = azul_impl::css::ColorU;
pub use AzColorUTT as AzColorU;
/// Destructor: Takes ownership of the `ColorU` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_color_u_delete(object: &mut AzColorU) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_color_u_deep_copy(object: &AzColorU) -> AzColorU { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_color_u_fmt_debug(object: &AzColorU) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `SizeMetric` struct
pub type AzSizeMetricTT = azul_impl::css::SizeMetric;
pub use AzSizeMetricTT as AzSizeMetric;
/// Destructor: Takes ownership of the `SizeMetric` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_size_metric_delete(object: &mut AzSizeMetric) { match object { azul_impl::css::SizeMetric::Px => { }, azul_impl::css::SizeMetric::Pt => { }, azul_impl::css::SizeMetric::Em => { }, azul_impl::css::SizeMetric::Percent => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_size_metric_deep_copy(object: &AzSizeMetric) -> AzSizeMetric { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_size_metric_fmt_debug(object: &AzSizeMetric) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `FloatValue` struct
pub type AzFloatValueTT = azul_impl::css::FloatValue;
pub use AzFloatValueTT as AzFloatValue;
/// Destructor: Takes ownership of the `FloatValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_float_value_delete(object: &mut AzFloatValue) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_float_value_deep_copy(object: &AzFloatValue) -> AzFloatValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_float_value_fmt_debug(object: &AzFloatValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `PixelValue` struct
pub type AzPixelValueTT = azul_impl::css::PixelValue;
pub use AzPixelValueTT as AzPixelValue;
/// Destructor: Takes ownership of the `PixelValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_pixel_value_delete(object: &mut AzPixelValue) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_pixel_value_deep_copy(object: &AzPixelValue) -> AzPixelValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_pixel_value_fmt_debug(object: &AzPixelValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `PixelValueNoPercent` struct
pub type AzPixelValueNoPercentTT = azul_impl::css::PixelValueNoPercent;
pub use AzPixelValueNoPercentTT as AzPixelValueNoPercent;
/// Destructor: Takes ownership of the `PixelValueNoPercent` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_pixel_value_no_percent_delete(object: &mut AzPixelValueNoPercent) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_pixel_value_no_percent_deep_copy(object: &AzPixelValueNoPercent) -> AzPixelValueNoPercent { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_pixel_value_no_percent_fmt_debug(object: &AzPixelValueNoPercent) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `BoxShadowClipMode` struct
pub type AzBoxShadowClipModeTT = azul_impl::css::BoxShadowClipMode;
pub use AzBoxShadowClipModeTT as AzBoxShadowClipMode;
/// Destructor: Takes ownership of the `BoxShadowClipMode` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_box_shadow_clip_mode_delete(object: &mut AzBoxShadowClipMode) { match object { azul_impl::css::BoxShadowClipMode::Outset => { }, azul_impl::css::BoxShadowClipMode::Inset => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_box_shadow_clip_mode_deep_copy(object: &AzBoxShadowClipMode) -> AzBoxShadowClipMode { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_box_shadow_clip_mode_fmt_debug(object: &AzBoxShadowClipMode) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `BoxShadowPreDisplayItem` struct
pub type AzBoxShadowPreDisplayItemTT = azul_impl::css::BoxShadowPreDisplayItem;
pub use AzBoxShadowPreDisplayItemTT as AzBoxShadowPreDisplayItem;
/// Destructor: Takes ownership of the `BoxShadowPreDisplayItem` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_box_shadow_pre_display_item_delete(object: &mut AzBoxShadowPreDisplayItem) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_box_shadow_pre_display_item_deep_copy(object: &AzBoxShadowPreDisplayItem) -> AzBoxShadowPreDisplayItem { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_box_shadow_pre_display_item_fmt_debug(object: &AzBoxShadowPreDisplayItem) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutAlignContent` struct
pub type AzLayoutAlignContentTT = azul_impl::css::LayoutAlignContent;
pub use AzLayoutAlignContentTT as AzLayoutAlignContent;
/// Destructor: Takes ownership of the `LayoutAlignContent` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_align_content_delete(object: &mut AzLayoutAlignContent) { match object { azul_impl::css::LayoutAlignContent::Stretch => { }, azul_impl::css::LayoutAlignContent::Center => { }, azul_impl::css::LayoutAlignContent::Start => { }, azul_impl::css::LayoutAlignContent::End => { }, azul_impl::css::LayoutAlignContent::SpaceBetween => { }, azul_impl::css::LayoutAlignContent::SpaceAround => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_align_content_deep_copy(object: &AzLayoutAlignContent) -> AzLayoutAlignContent { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_align_content_fmt_debug(object: &AzLayoutAlignContent) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutAlignItems` struct
pub type AzLayoutAlignItemsTT = azul_impl::css::LayoutAlignItems;
pub use AzLayoutAlignItemsTT as AzLayoutAlignItems;
/// Destructor: Takes ownership of the `LayoutAlignItems` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_align_items_delete(object: &mut AzLayoutAlignItems) { match object { azul_impl::css::LayoutAlignItems::Stretch => { }, azul_impl::css::LayoutAlignItems::Center => { }, azul_impl::css::LayoutAlignItems::Start => { }, azul_impl::css::LayoutAlignItems::End => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_align_items_deep_copy(object: &AzLayoutAlignItems) -> AzLayoutAlignItems { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_align_items_fmt_debug(object: &AzLayoutAlignItems) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutBottom` struct
pub type AzLayoutBottomTT = azul_impl::css::LayoutBottom;
pub use AzLayoutBottomTT as AzLayoutBottom;
/// Destructor: Takes ownership of the `LayoutBottom` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_bottom_delete(object: &mut AzLayoutBottom) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_bottom_deep_copy(object: &AzLayoutBottom) -> AzLayoutBottom { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_bottom_fmt_debug(object: &AzLayoutBottom) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutBoxSizing` struct
pub type AzLayoutBoxSizingTT = azul_impl::css::LayoutBoxSizing;
pub use AzLayoutBoxSizingTT as AzLayoutBoxSizing;
/// Destructor: Takes ownership of the `LayoutBoxSizing` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_box_sizing_delete(object: &mut AzLayoutBoxSizing) { match object { azul_impl::css::LayoutBoxSizing::ContentBox => { }, azul_impl::css::LayoutBoxSizing::BorderBox => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_box_sizing_deep_copy(object: &AzLayoutBoxSizing) -> AzLayoutBoxSizing { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_box_sizing_fmt_debug(object: &AzLayoutBoxSizing) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutDirection` struct
pub type AzLayoutDirectionTT = azul_impl::css::LayoutDirection;
pub use AzLayoutDirectionTT as AzLayoutDirection;
/// Destructor: Takes ownership of the `LayoutDirection` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_direction_delete(object: &mut AzLayoutDirection) { match object { azul_impl::css::LayoutDirection::Row => { }, azul_impl::css::LayoutDirection::RowReverse => { }, azul_impl::css::LayoutDirection::Column => { }, azul_impl::css::LayoutDirection::ColumnReverse => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_direction_deep_copy(object: &AzLayoutDirection) -> AzLayoutDirection { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_direction_fmt_debug(object: &AzLayoutDirection) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutDisplay` struct
pub type AzLayoutDisplayTT = azul_impl::css::LayoutDisplay;
pub use AzLayoutDisplayTT as AzLayoutDisplay;
/// Destructor: Takes ownership of the `LayoutDisplay` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_display_delete(object: &mut AzLayoutDisplay) { match object { azul_impl::css::LayoutDisplay::Flex => { }, azul_impl::css::LayoutDisplay::Block => { }, azul_impl::css::LayoutDisplay::InlineBlock => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_display_deep_copy(object: &AzLayoutDisplay) -> AzLayoutDisplay { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_display_fmt_debug(object: &AzLayoutDisplay) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutFlexGrow` struct
pub type AzLayoutFlexGrowTT = azul_impl::css::LayoutFlexGrow;
pub use AzLayoutFlexGrowTT as AzLayoutFlexGrow;
/// Destructor: Takes ownership of the `LayoutFlexGrow` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_flex_grow_delete(object: &mut AzLayoutFlexGrow) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_flex_grow_deep_copy(object: &AzLayoutFlexGrow) -> AzLayoutFlexGrow { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_flex_grow_fmt_debug(object: &AzLayoutFlexGrow) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutFlexShrink` struct
pub type AzLayoutFlexShrinkTT = azul_impl::css::LayoutFlexShrink;
pub use AzLayoutFlexShrinkTT as AzLayoutFlexShrink;
/// Destructor: Takes ownership of the `LayoutFlexShrink` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_flex_shrink_delete(object: &mut AzLayoutFlexShrink) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_flex_shrink_deep_copy(object: &AzLayoutFlexShrink) -> AzLayoutFlexShrink { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_flex_shrink_fmt_debug(object: &AzLayoutFlexShrink) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutFloat` struct
pub type AzLayoutFloatTT = azul_impl::css::LayoutFloat;
pub use AzLayoutFloatTT as AzLayoutFloat;
/// Destructor: Takes ownership of the `LayoutFloat` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_float_delete(object: &mut AzLayoutFloat) { match object { azul_impl::css::LayoutFloat::Left => { }, azul_impl::css::LayoutFloat::Right => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_float_deep_copy(object: &AzLayoutFloat) -> AzLayoutFloat { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_float_fmt_debug(object: &AzLayoutFloat) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutHeight` struct
pub type AzLayoutHeightTT = azul_impl::css::LayoutHeight;
pub use AzLayoutHeightTT as AzLayoutHeight;
/// Destructor: Takes ownership of the `LayoutHeight` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_height_delete(object: &mut AzLayoutHeight) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_height_deep_copy(object: &AzLayoutHeight) -> AzLayoutHeight { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_height_fmt_debug(object: &AzLayoutHeight) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutJustifyContent` struct
pub type AzLayoutJustifyContentTT = azul_impl::css::LayoutJustifyContent;
pub use AzLayoutJustifyContentTT as AzLayoutJustifyContent;
/// Destructor: Takes ownership of the `LayoutJustifyContent` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_justify_content_delete(object: &mut AzLayoutJustifyContent) { match object { azul_impl::css::LayoutJustifyContent::Start => { }, azul_impl::css::LayoutJustifyContent::End => { }, azul_impl::css::LayoutJustifyContent::Center => { }, azul_impl::css::LayoutJustifyContent::SpaceBetween => { }, azul_impl::css::LayoutJustifyContent::SpaceAround => { }, azul_impl::css::LayoutJustifyContent::SpaceEvenly => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_justify_content_deep_copy(object: &AzLayoutJustifyContent) -> AzLayoutJustifyContent { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_justify_content_fmt_debug(object: &AzLayoutJustifyContent) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutLeft` struct
pub type AzLayoutLeftTT = azul_impl::css::LayoutLeft;
pub use AzLayoutLeftTT as AzLayoutLeft;
/// Destructor: Takes ownership of the `LayoutLeft` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_left_delete(object: &mut AzLayoutLeft) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_left_deep_copy(object: &AzLayoutLeft) -> AzLayoutLeft { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_left_fmt_debug(object: &AzLayoutLeft) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutMarginBottom` struct
pub type AzLayoutMarginBottomTT = azul_impl::css::LayoutMarginBottom;
pub use AzLayoutMarginBottomTT as AzLayoutMarginBottom;
/// Destructor: Takes ownership of the `LayoutMarginBottom` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_margin_bottom_delete(object: &mut AzLayoutMarginBottom) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_margin_bottom_deep_copy(object: &AzLayoutMarginBottom) -> AzLayoutMarginBottom { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_margin_bottom_fmt_debug(object: &AzLayoutMarginBottom) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutMarginLeft` struct
pub type AzLayoutMarginLeftTT = azul_impl::css::LayoutMarginLeft;
pub use AzLayoutMarginLeftTT as AzLayoutMarginLeft;
/// Destructor: Takes ownership of the `LayoutMarginLeft` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_margin_left_delete(object: &mut AzLayoutMarginLeft) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_margin_left_deep_copy(object: &AzLayoutMarginLeft) -> AzLayoutMarginLeft { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_margin_left_fmt_debug(object: &AzLayoutMarginLeft) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutMarginRight` struct
pub type AzLayoutMarginRightTT = azul_impl::css::LayoutMarginRight;
pub use AzLayoutMarginRightTT as AzLayoutMarginRight;
/// Destructor: Takes ownership of the `LayoutMarginRight` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_margin_right_delete(object: &mut AzLayoutMarginRight) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_margin_right_deep_copy(object: &AzLayoutMarginRight) -> AzLayoutMarginRight { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_margin_right_fmt_debug(object: &AzLayoutMarginRight) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutMarginTop` struct
pub type AzLayoutMarginTopTT = azul_impl::css::LayoutMarginTop;
pub use AzLayoutMarginTopTT as AzLayoutMarginTop;
/// Destructor: Takes ownership of the `LayoutMarginTop` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_margin_top_delete(object: &mut AzLayoutMarginTop) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_margin_top_deep_copy(object: &AzLayoutMarginTop) -> AzLayoutMarginTop { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_margin_top_fmt_debug(object: &AzLayoutMarginTop) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutMaxHeight` struct
pub type AzLayoutMaxHeightTT = azul_impl::css::LayoutMaxHeight;
pub use AzLayoutMaxHeightTT as AzLayoutMaxHeight;
/// Destructor: Takes ownership of the `LayoutMaxHeight` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_max_height_delete(object: &mut AzLayoutMaxHeight) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_max_height_deep_copy(object: &AzLayoutMaxHeight) -> AzLayoutMaxHeight { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_max_height_fmt_debug(object: &AzLayoutMaxHeight) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutMaxWidth` struct
pub type AzLayoutMaxWidthTT = azul_impl::css::LayoutMaxWidth;
pub use AzLayoutMaxWidthTT as AzLayoutMaxWidth;
/// Destructor: Takes ownership of the `LayoutMaxWidth` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_max_width_delete(object: &mut AzLayoutMaxWidth) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_max_width_deep_copy(object: &AzLayoutMaxWidth) -> AzLayoutMaxWidth { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_max_width_fmt_debug(object: &AzLayoutMaxWidth) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutMinHeight` struct
pub type AzLayoutMinHeightTT = azul_impl::css::LayoutMinHeight;
pub use AzLayoutMinHeightTT as AzLayoutMinHeight;
/// Destructor: Takes ownership of the `LayoutMinHeight` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_min_height_delete(object: &mut AzLayoutMinHeight) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_min_height_deep_copy(object: &AzLayoutMinHeight) -> AzLayoutMinHeight { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_min_height_fmt_debug(object: &AzLayoutMinHeight) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutMinWidth` struct
pub type AzLayoutMinWidthTT = azul_impl::css::LayoutMinWidth;
pub use AzLayoutMinWidthTT as AzLayoutMinWidth;
/// Destructor: Takes ownership of the `LayoutMinWidth` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_min_width_delete(object: &mut AzLayoutMinWidth) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_min_width_deep_copy(object: &AzLayoutMinWidth) -> AzLayoutMinWidth { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_min_width_fmt_debug(object: &AzLayoutMinWidth) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutPaddingBottom` struct
pub type AzLayoutPaddingBottomTT = azul_impl::css::LayoutPaddingBottom;
pub use AzLayoutPaddingBottomTT as AzLayoutPaddingBottom;
/// Destructor: Takes ownership of the `LayoutPaddingBottom` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_padding_bottom_delete(object: &mut AzLayoutPaddingBottom) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_padding_bottom_deep_copy(object: &AzLayoutPaddingBottom) -> AzLayoutPaddingBottom { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_padding_bottom_fmt_debug(object: &AzLayoutPaddingBottom) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutPaddingLeft` struct
pub type AzLayoutPaddingLeftTT = azul_impl::css::LayoutPaddingLeft;
pub use AzLayoutPaddingLeftTT as AzLayoutPaddingLeft;
/// Destructor: Takes ownership of the `LayoutPaddingLeft` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_padding_left_delete(object: &mut AzLayoutPaddingLeft) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_padding_left_deep_copy(object: &AzLayoutPaddingLeft) -> AzLayoutPaddingLeft { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_padding_left_fmt_debug(object: &AzLayoutPaddingLeft) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutPaddingRight` struct
pub type AzLayoutPaddingRightTT = azul_impl::css::LayoutPaddingRight;
pub use AzLayoutPaddingRightTT as AzLayoutPaddingRight;
/// Destructor: Takes ownership of the `LayoutPaddingRight` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_padding_right_delete(object: &mut AzLayoutPaddingRight) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_padding_right_deep_copy(object: &AzLayoutPaddingRight) -> AzLayoutPaddingRight { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_padding_right_fmt_debug(object: &AzLayoutPaddingRight) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutPaddingTop` struct
pub type AzLayoutPaddingTopTT = azul_impl::css::LayoutPaddingTop;
pub use AzLayoutPaddingTopTT as AzLayoutPaddingTop;
/// Destructor: Takes ownership of the `LayoutPaddingTop` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_padding_top_delete(object: &mut AzLayoutPaddingTop) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_padding_top_deep_copy(object: &AzLayoutPaddingTop) -> AzLayoutPaddingTop { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_padding_top_fmt_debug(object: &AzLayoutPaddingTop) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutPosition` struct
pub type AzLayoutPositionTT = azul_impl::css::LayoutPosition;
pub use AzLayoutPositionTT as AzLayoutPosition;
/// Destructor: Takes ownership of the `LayoutPosition` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_position_delete(object: &mut AzLayoutPosition) { match object { azul_impl::css::LayoutPosition::Static => { }, azul_impl::css::LayoutPosition::Relative => { }, azul_impl::css::LayoutPosition::Absolute => { }, azul_impl::css::LayoutPosition::Fixed => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_position_deep_copy(object: &AzLayoutPosition) -> AzLayoutPosition { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_position_fmt_debug(object: &AzLayoutPosition) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutRight` struct
pub type AzLayoutRightTT = azul_impl::css::LayoutRight;
pub use AzLayoutRightTT as AzLayoutRight;
/// Destructor: Takes ownership of the `LayoutRight` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_right_delete(object: &mut AzLayoutRight) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_right_deep_copy(object: &AzLayoutRight) -> AzLayoutRight { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_right_fmt_debug(object: &AzLayoutRight) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutTop` struct
pub type AzLayoutTopTT = azul_impl::css::LayoutTop;
pub use AzLayoutTopTT as AzLayoutTop;
/// Destructor: Takes ownership of the `LayoutTop` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_top_delete(object: &mut AzLayoutTop) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_top_deep_copy(object: &AzLayoutTop) -> AzLayoutTop { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_top_fmt_debug(object: &AzLayoutTop) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutWidth` struct
pub type AzLayoutWidthTT = azul_impl::css::LayoutWidth;
pub use AzLayoutWidthTT as AzLayoutWidth;
/// Destructor: Takes ownership of the `LayoutWidth` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_width_delete(object: &mut AzLayoutWidth) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_width_deep_copy(object: &AzLayoutWidth) -> AzLayoutWidth { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_width_fmt_debug(object: &AzLayoutWidth) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutWrap` struct
pub type AzLayoutWrapTT = azul_impl::css::LayoutWrap;
pub use AzLayoutWrapTT as AzLayoutWrap;
/// Destructor: Takes ownership of the `LayoutWrap` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_wrap_delete(object: &mut AzLayoutWrap) { match object { azul_impl::css::LayoutWrap::Wrap => { }, azul_impl::css::LayoutWrap::NoWrap => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_wrap_deep_copy(object: &AzLayoutWrap) -> AzLayoutWrap { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_wrap_fmt_debug(object: &AzLayoutWrap) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `Overflow` struct
pub type AzOverflowTT = azul_impl::css::Overflow;
pub use AzOverflowTT as AzOverflow;
/// Destructor: Takes ownership of the `Overflow` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_overflow_delete(object: &mut AzOverflow) { match object { azul_impl::css::Overflow::Scroll => { }, azul_impl::css::Overflow::Auto => { }, azul_impl::css::Overflow::Hidden => { }, azul_impl::css::Overflow::Visible => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_overflow_deep_copy(object: &AzOverflow) -> AzOverflow { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_overflow_fmt_debug(object: &AzOverflow) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `PercentageValue` struct
pub type AzPercentageValueTT = azul_impl::css::PercentageValue;
pub use AzPercentageValueTT as AzPercentageValue;
/// Destructor: Takes ownership of the `PercentageValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_percentage_value_delete(object: &mut AzPercentageValue) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_percentage_value_deep_copy(object: &AzPercentageValue) -> AzPercentageValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_percentage_value_fmt_debug(object: &AzPercentageValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `GradientStopPre` struct
pub type AzGradientStopPreTT = azul_impl::css::GradientStopPre;
pub use AzGradientStopPreTT as AzGradientStopPre;
/// Destructor: Takes ownership of the `GradientStopPre` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_gradient_stop_pre_delete(object: &mut AzGradientStopPre) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_gradient_stop_pre_deep_copy(object: &AzGradientStopPre) -> AzGradientStopPre { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_gradient_stop_pre_fmt_debug(object: &AzGradientStopPre) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `DirectionCorner` struct
pub type AzDirectionCornerTT = azul_impl::css::DirectionCorner;
pub use AzDirectionCornerTT as AzDirectionCorner;
/// Destructor: Takes ownership of the `DirectionCorner` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_direction_corner_delete(object: &mut AzDirectionCorner) { match object { azul_impl::css::DirectionCorner::Right => { }, azul_impl::css::DirectionCorner::Left => { }, azul_impl::css::DirectionCorner::Top => { }, azul_impl::css::DirectionCorner::Bottom => { }, azul_impl::css::DirectionCorner::TopRight => { }, azul_impl::css::DirectionCorner::TopLeft => { }, azul_impl::css::DirectionCorner::BottomRight => { }, azul_impl::css::DirectionCorner::BottomLeft => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_direction_corner_deep_copy(object: &AzDirectionCorner) -> AzDirectionCorner { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_direction_corner_fmt_debug(object: &AzDirectionCorner) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `DirectionCorners` struct
pub type AzDirectionCornersTT = azul_impl::css::DirectionCorners;
pub use AzDirectionCornersTT as AzDirectionCorners;
/// Destructor: Takes ownership of the `DirectionCorners` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_direction_corners_delete(object: &mut AzDirectionCorners) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_direction_corners_deep_copy(object: &AzDirectionCorners) -> AzDirectionCorners { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_direction_corners_fmt_debug(object: &AzDirectionCorners) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `Direction` struct
pub type AzDirectionTT = azul_impl::css::Direction;
pub use AzDirectionTT as AzDirection;
/// Destructor: Takes ownership of the `Direction` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_direction_delete(object: &mut AzDirection) { match object { azul_impl::css::Direction::Angle(_) => { }, azul_impl::css::Direction::FromTo(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_direction_deep_copy(object: &AzDirection) -> AzDirection { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_direction_fmt_debug(object: &AzDirection) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `ExtendMode` struct
pub type AzExtendModeTT = azul_impl::css::ExtendMode;
pub use AzExtendModeTT as AzExtendMode;
/// Destructor: Takes ownership of the `ExtendMode` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_extend_mode_delete(object: &mut AzExtendMode) { match object { azul_impl::css::ExtendMode::Clamp => { }, azul_impl::css::ExtendMode::Repeat => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_extend_mode_deep_copy(object: &AzExtendMode) -> AzExtendMode { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_extend_mode_fmt_debug(object: &AzExtendMode) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LinearGradient` struct
pub type AzLinearGradientTT = azul_impl::css::LinearGradient;
pub use AzLinearGradientTT as AzLinearGradient;
/// Destructor: Takes ownership of the `LinearGradient` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_linear_gradient_delete(object: &mut AzLinearGradient) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_linear_gradient_deep_copy(object: &AzLinearGradient) -> AzLinearGradient { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_linear_gradient_fmt_debug(object: &AzLinearGradient) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `Shape` struct
pub type AzShapeTT = azul_impl::css::Shape;
pub use AzShapeTT as AzShape;
/// Destructor: Takes ownership of the `Shape` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_shape_delete(object: &mut AzShape) { match object { azul_impl::css::Shape::Ellipse => { }, azul_impl::css::Shape::Circle => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_shape_deep_copy(object: &AzShape) -> AzShape { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_shape_fmt_debug(object: &AzShape) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `RadialGradient` struct
pub type AzRadialGradientTT = azul_impl::css::RadialGradient;
pub use AzRadialGradientTT as AzRadialGradient;
/// Destructor: Takes ownership of the `RadialGradient` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_radial_gradient_delete(object: &mut AzRadialGradient) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_radial_gradient_deep_copy(object: &AzRadialGradient) -> AzRadialGradient { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_radial_gradient_fmt_debug(object: &AzRadialGradient) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `CssImageId` struct
pub type AzCssImageIdTT = azul_impl::css::CssImageId;
pub use AzCssImageIdTT as AzCssImageId;
/// Destructor: Takes ownership of the `CssImageId` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_css_image_id_delete(object: &mut AzCssImageId) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_css_image_id_deep_copy(object: &AzCssImageId) -> AzCssImageId { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_css_image_id_fmt_debug(object: &AzCssImageId) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBackgroundContent` struct
pub type AzStyleBackgroundContentTT = azul_impl::css::StyleBackgroundContent;
pub use AzStyleBackgroundContentTT as AzStyleBackgroundContent;
/// Destructor: Takes ownership of the `StyleBackgroundContent` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_background_content_delete(object: &mut AzStyleBackgroundContent) { match object { azul_impl::css::StyleBackgroundContent::LinearGradient(_) => { }, azul_impl::css::StyleBackgroundContent::RadialGradient(_) => { }, azul_impl::css::StyleBackgroundContent::Image(_) => { }, azul_impl::css::StyleBackgroundContent::Color(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_background_content_deep_copy(object: &AzStyleBackgroundContent) -> AzStyleBackgroundContent { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_background_content_fmt_debug(object: &AzStyleBackgroundContent) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `BackgroundPositionHorizontal` struct
pub type AzBackgroundPositionHorizontalTT = azul_impl::css::BackgroundPositionHorizontal;
pub use AzBackgroundPositionHorizontalTT as AzBackgroundPositionHorizontal;
/// Destructor: Takes ownership of the `BackgroundPositionHorizontal` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_background_position_horizontal_delete(object: &mut AzBackgroundPositionHorizontal) { match object { azul_impl::css::BackgroundPositionHorizontal::Left => { }, azul_impl::css::BackgroundPositionHorizontal::Center => { }, azul_impl::css::BackgroundPositionHorizontal::Right => { }, azul_impl::css::BackgroundPositionHorizontal::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_background_position_horizontal_deep_copy(object: &AzBackgroundPositionHorizontal) -> AzBackgroundPositionHorizontal { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_background_position_horizontal_fmt_debug(object: &AzBackgroundPositionHorizontal) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `BackgroundPositionVertical` struct
pub type AzBackgroundPositionVerticalTT = azul_impl::css::BackgroundPositionVertical;
pub use AzBackgroundPositionVerticalTT as AzBackgroundPositionVertical;
/// Destructor: Takes ownership of the `BackgroundPositionVertical` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_background_position_vertical_delete(object: &mut AzBackgroundPositionVertical) { match object { azul_impl::css::BackgroundPositionVertical::Top => { }, azul_impl::css::BackgroundPositionVertical::Center => { }, azul_impl::css::BackgroundPositionVertical::Bottom => { }, azul_impl::css::BackgroundPositionVertical::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_background_position_vertical_deep_copy(object: &AzBackgroundPositionVertical) -> AzBackgroundPositionVertical { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_background_position_vertical_fmt_debug(object: &AzBackgroundPositionVertical) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBackgroundPosition` struct
pub type AzStyleBackgroundPositionTT = azul_impl::css::StyleBackgroundPosition;
pub use AzStyleBackgroundPositionTT as AzStyleBackgroundPosition;
/// Destructor: Takes ownership of the `StyleBackgroundPosition` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_background_position_delete(object: &mut AzStyleBackgroundPosition) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_background_position_deep_copy(object: &AzStyleBackgroundPosition) -> AzStyleBackgroundPosition { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_background_position_fmt_debug(object: &AzStyleBackgroundPosition) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBackgroundRepeat` struct
pub type AzStyleBackgroundRepeatTT = azul_impl::css::StyleBackgroundRepeat;
pub use AzStyleBackgroundRepeatTT as AzStyleBackgroundRepeat;
/// Destructor: Takes ownership of the `StyleBackgroundRepeat` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_background_repeat_delete(object: &mut AzStyleBackgroundRepeat) { match object { azul_impl::css::StyleBackgroundRepeat::NoRepeat => { }, azul_impl::css::StyleBackgroundRepeat::Repeat => { }, azul_impl::css::StyleBackgroundRepeat::RepeatX => { }, azul_impl::css::StyleBackgroundRepeat::RepeatY => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_background_repeat_deep_copy(object: &AzStyleBackgroundRepeat) -> AzStyleBackgroundRepeat { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_background_repeat_fmt_debug(object: &AzStyleBackgroundRepeat) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBackgroundSize` struct
pub type AzStyleBackgroundSizeTT = azul_impl::css::StyleBackgroundSize;
pub use AzStyleBackgroundSizeTT as AzStyleBackgroundSize;
/// Destructor: Takes ownership of the `StyleBackgroundSize` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_background_size_delete(object: &mut AzStyleBackgroundSize) { match object { azul_impl::css::StyleBackgroundSize::ExactSize(_) => { }, azul_impl::css::StyleBackgroundSize::Contain => { }, azul_impl::css::StyleBackgroundSize::Cover => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_background_size_deep_copy(object: &AzStyleBackgroundSize) -> AzStyleBackgroundSize { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_background_size_fmt_debug(object: &AzStyleBackgroundSize) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderBottomColor` struct
pub type AzStyleBorderBottomColorTT = azul_impl::css::StyleBorderBottomColor;
pub use AzStyleBorderBottomColorTT as AzStyleBorderBottomColor;
/// Destructor: Takes ownership of the `StyleBorderBottomColor` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_bottom_color_delete(object: &mut AzStyleBorderBottomColor) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_bottom_color_deep_copy(object: &AzStyleBorderBottomColor) -> AzStyleBorderBottomColor { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_bottom_color_fmt_debug(object: &AzStyleBorderBottomColor) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderBottomLeftRadius` struct
pub type AzStyleBorderBottomLeftRadiusTT = azul_impl::css::StyleBorderBottomLeftRadius;
pub use AzStyleBorderBottomLeftRadiusTT as AzStyleBorderBottomLeftRadius;
/// Destructor: Takes ownership of the `StyleBorderBottomLeftRadius` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_bottom_left_radius_delete(object: &mut AzStyleBorderBottomLeftRadius) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_bottom_left_radius_deep_copy(object: &AzStyleBorderBottomLeftRadius) -> AzStyleBorderBottomLeftRadius { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_bottom_left_radius_fmt_debug(object: &AzStyleBorderBottomLeftRadius) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderBottomRightRadius` struct
pub type AzStyleBorderBottomRightRadiusTT = azul_impl::css::StyleBorderBottomRightRadius;
pub use AzStyleBorderBottomRightRadiusTT as AzStyleBorderBottomRightRadius;
/// Destructor: Takes ownership of the `StyleBorderBottomRightRadius` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_bottom_right_radius_delete(object: &mut AzStyleBorderBottomRightRadius) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_bottom_right_radius_deep_copy(object: &AzStyleBorderBottomRightRadius) -> AzStyleBorderBottomRightRadius { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_bottom_right_radius_fmt_debug(object: &AzStyleBorderBottomRightRadius) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `BorderStyle` struct
pub type AzBorderStyleTT = azul_impl::css::BorderStyle;
pub use AzBorderStyleTT as AzBorderStyle;
/// Destructor: Takes ownership of the `BorderStyle` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_border_style_delete(object: &mut AzBorderStyle) { match object { azul_impl::css::BorderStyle::None => { }, azul_impl::css::BorderStyle::Solid => { }, azul_impl::css::BorderStyle::Double => { }, azul_impl::css::BorderStyle::Dotted => { }, azul_impl::css::BorderStyle::Dashed => { }, azul_impl::css::BorderStyle::Hidden => { }, azul_impl::css::BorderStyle::Groove => { }, azul_impl::css::BorderStyle::Ridge => { }, azul_impl::css::BorderStyle::Inset => { }, azul_impl::css::BorderStyle::Outset => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_border_style_deep_copy(object: &AzBorderStyle) -> AzBorderStyle { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_border_style_fmt_debug(object: &AzBorderStyle) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderBottomStyle` struct
pub type AzStyleBorderBottomStyleTT = azul_impl::css::StyleBorderBottomStyle;
pub use AzStyleBorderBottomStyleTT as AzStyleBorderBottomStyle;
/// Destructor: Takes ownership of the `StyleBorderBottomStyle` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_bottom_style_delete(object: &mut AzStyleBorderBottomStyle) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_bottom_style_deep_copy(object: &AzStyleBorderBottomStyle) -> AzStyleBorderBottomStyle { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_bottom_style_fmt_debug(object: &AzStyleBorderBottomStyle) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderBottomWidth` struct
pub type AzStyleBorderBottomWidthTT = azul_impl::css::StyleBorderBottomWidth;
pub use AzStyleBorderBottomWidthTT as AzStyleBorderBottomWidth;
/// Destructor: Takes ownership of the `StyleBorderBottomWidth` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_bottom_width_delete(object: &mut AzStyleBorderBottomWidth) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_bottom_width_deep_copy(object: &AzStyleBorderBottomWidth) -> AzStyleBorderBottomWidth { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_bottom_width_fmt_debug(object: &AzStyleBorderBottomWidth) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderLeftColor` struct
pub type AzStyleBorderLeftColorTT = azul_impl::css::StyleBorderLeftColor;
pub use AzStyleBorderLeftColorTT as AzStyleBorderLeftColor;
/// Destructor: Takes ownership of the `StyleBorderLeftColor` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_left_color_delete(object: &mut AzStyleBorderLeftColor) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_left_color_deep_copy(object: &AzStyleBorderLeftColor) -> AzStyleBorderLeftColor { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_left_color_fmt_debug(object: &AzStyleBorderLeftColor) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderLeftStyle` struct
pub type AzStyleBorderLeftStyleTT = azul_impl::css::StyleBorderLeftStyle;
pub use AzStyleBorderLeftStyleTT as AzStyleBorderLeftStyle;
/// Destructor: Takes ownership of the `StyleBorderLeftStyle` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_left_style_delete(object: &mut AzStyleBorderLeftStyle) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_left_style_deep_copy(object: &AzStyleBorderLeftStyle) -> AzStyleBorderLeftStyle { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_left_style_fmt_debug(object: &AzStyleBorderLeftStyle) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderLeftWidth` struct
pub type AzStyleBorderLeftWidthTT = azul_impl::css::StyleBorderLeftWidth;
pub use AzStyleBorderLeftWidthTT as AzStyleBorderLeftWidth;
/// Destructor: Takes ownership of the `StyleBorderLeftWidth` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_left_width_delete(object: &mut AzStyleBorderLeftWidth) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_left_width_deep_copy(object: &AzStyleBorderLeftWidth) -> AzStyleBorderLeftWidth { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_left_width_fmt_debug(object: &AzStyleBorderLeftWidth) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderRightColor` struct
pub type AzStyleBorderRightColorTT = azul_impl::css::StyleBorderRightColor;
pub use AzStyleBorderRightColorTT as AzStyleBorderRightColor;
/// Destructor: Takes ownership of the `StyleBorderRightColor` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_right_color_delete(object: &mut AzStyleBorderRightColor) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_right_color_deep_copy(object: &AzStyleBorderRightColor) -> AzStyleBorderRightColor { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_right_color_fmt_debug(object: &AzStyleBorderRightColor) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderRightStyle` struct
pub type AzStyleBorderRightStyleTT = azul_impl::css::StyleBorderRightStyle;
pub use AzStyleBorderRightStyleTT as AzStyleBorderRightStyle;
/// Destructor: Takes ownership of the `StyleBorderRightStyle` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_right_style_delete(object: &mut AzStyleBorderRightStyle) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_right_style_deep_copy(object: &AzStyleBorderRightStyle) -> AzStyleBorderRightStyle { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_right_style_fmt_debug(object: &AzStyleBorderRightStyle) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderRightWidth` struct
pub type AzStyleBorderRightWidthTT = azul_impl::css::StyleBorderRightWidth;
pub use AzStyleBorderRightWidthTT as AzStyleBorderRightWidth;
/// Destructor: Takes ownership of the `StyleBorderRightWidth` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_right_width_delete(object: &mut AzStyleBorderRightWidth) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_right_width_deep_copy(object: &AzStyleBorderRightWidth) -> AzStyleBorderRightWidth { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_right_width_fmt_debug(object: &AzStyleBorderRightWidth) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderTopColor` struct
pub type AzStyleBorderTopColorTT = azul_impl::css::StyleBorderTopColor;
pub use AzStyleBorderTopColorTT as AzStyleBorderTopColor;
/// Destructor: Takes ownership of the `StyleBorderTopColor` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_top_color_delete(object: &mut AzStyleBorderTopColor) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_top_color_deep_copy(object: &AzStyleBorderTopColor) -> AzStyleBorderTopColor { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_top_color_fmt_debug(object: &AzStyleBorderTopColor) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderTopLeftRadius` struct
pub type AzStyleBorderTopLeftRadiusTT = azul_impl::css::StyleBorderTopLeftRadius;
pub use AzStyleBorderTopLeftRadiusTT as AzStyleBorderTopLeftRadius;
/// Destructor: Takes ownership of the `StyleBorderTopLeftRadius` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_top_left_radius_delete(object: &mut AzStyleBorderTopLeftRadius) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_top_left_radius_deep_copy(object: &AzStyleBorderTopLeftRadius) -> AzStyleBorderTopLeftRadius { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_top_left_radius_fmt_debug(object: &AzStyleBorderTopLeftRadius) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderTopRightRadius` struct
pub type AzStyleBorderTopRightRadiusTT = azul_impl::css::StyleBorderTopRightRadius;
pub use AzStyleBorderTopRightRadiusTT as AzStyleBorderTopRightRadius;
/// Destructor: Takes ownership of the `StyleBorderTopRightRadius` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_top_right_radius_delete(object: &mut AzStyleBorderTopRightRadius) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_top_right_radius_deep_copy(object: &AzStyleBorderTopRightRadius) -> AzStyleBorderTopRightRadius { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_top_right_radius_fmt_debug(object: &AzStyleBorderTopRightRadius) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderTopStyle` struct
pub type AzStyleBorderTopStyleTT = azul_impl::css::StyleBorderTopStyle;
pub use AzStyleBorderTopStyleTT as AzStyleBorderTopStyle;
/// Destructor: Takes ownership of the `StyleBorderTopStyle` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_top_style_delete(object: &mut AzStyleBorderTopStyle) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_top_style_deep_copy(object: &AzStyleBorderTopStyle) -> AzStyleBorderTopStyle { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_top_style_fmt_debug(object: &AzStyleBorderTopStyle) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderTopWidth` struct
pub type AzStyleBorderTopWidthTT = azul_impl::css::StyleBorderTopWidth;
pub use AzStyleBorderTopWidthTT as AzStyleBorderTopWidth;
/// Destructor: Takes ownership of the `StyleBorderTopWidth` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_top_width_delete(object: &mut AzStyleBorderTopWidth) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_top_width_deep_copy(object: &AzStyleBorderTopWidth) -> AzStyleBorderTopWidth { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_top_width_fmt_debug(object: &AzStyleBorderTopWidth) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleCursor` struct
pub type AzStyleCursorTT = azul_impl::css::StyleCursor;
pub use AzStyleCursorTT as AzStyleCursor;
/// Destructor: Takes ownership of the `StyleCursor` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_cursor_delete(object: &mut AzStyleCursor) { match object { azul_impl::css::StyleCursor::Alias => { }, azul_impl::css::StyleCursor::AllScroll => { }, azul_impl::css::StyleCursor::Cell => { }, azul_impl::css::StyleCursor::ColResize => { }, azul_impl::css::StyleCursor::ContextMenu => { }, azul_impl::css::StyleCursor::Copy => { }, azul_impl::css::StyleCursor::Crosshair => { }, azul_impl::css::StyleCursor::Default => { }, azul_impl::css::StyleCursor::EResize => { }, azul_impl::css::StyleCursor::EwResize => { }, azul_impl::css::StyleCursor::Grab => { }, azul_impl::css::StyleCursor::Grabbing => { }, azul_impl::css::StyleCursor::Help => { }, azul_impl::css::StyleCursor::Move => { }, azul_impl::css::StyleCursor::NResize => { }, azul_impl::css::StyleCursor::NsResize => { }, azul_impl::css::StyleCursor::NeswResize => { }, azul_impl::css::StyleCursor::NwseResize => { }, azul_impl::css::StyleCursor::Pointer => { }, azul_impl::css::StyleCursor::Progress => { }, azul_impl::css::StyleCursor::RowResize => { }, azul_impl::css::StyleCursor::SResize => { }, azul_impl::css::StyleCursor::SeResize => { }, azul_impl::css::StyleCursor::Text => { }, azul_impl::css::StyleCursor::Unset => { }, azul_impl::css::StyleCursor::VerticalText => { }, azul_impl::css::StyleCursor::WResize => { }, azul_impl::css::StyleCursor::Wait => { }, azul_impl::css::StyleCursor::ZoomIn => { }, azul_impl::css::StyleCursor::ZoomOut => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_cursor_deep_copy(object: &AzStyleCursor) -> AzStyleCursor { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_cursor_fmt_debug(object: &AzStyleCursor) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleFontFamily` struct
pub type AzStyleFontFamilyTT = azul_impl::css::StyleFontFamily;
pub use AzStyleFontFamilyTT as AzStyleFontFamily;
/// Destructor: Takes ownership of the `StyleFontFamily` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_font_family_delete(object: &mut AzStyleFontFamily) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_font_family_deep_copy(object: &AzStyleFontFamily) -> AzStyleFontFamily { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_font_family_fmt_debug(object: &AzStyleFontFamily) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleFontSize` struct
pub type AzStyleFontSizeTT = azul_impl::css::StyleFontSize;
pub use AzStyleFontSizeTT as AzStyleFontSize;
/// Destructor: Takes ownership of the `StyleFontSize` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_font_size_delete(object: &mut AzStyleFontSize) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_font_size_deep_copy(object: &AzStyleFontSize) -> AzStyleFontSize { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_font_size_fmt_debug(object: &AzStyleFontSize) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleLetterSpacing` struct
pub type AzStyleLetterSpacingTT = azul_impl::css::StyleLetterSpacing;
pub use AzStyleLetterSpacingTT as AzStyleLetterSpacing;
/// Destructor: Takes ownership of the `StyleLetterSpacing` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_letter_spacing_delete(object: &mut AzStyleLetterSpacing) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_letter_spacing_deep_copy(object: &AzStyleLetterSpacing) -> AzStyleLetterSpacing { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_letter_spacing_fmt_debug(object: &AzStyleLetterSpacing) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleLineHeight` struct
pub type AzStyleLineHeightTT = azul_impl::css::StyleLineHeight;
pub use AzStyleLineHeightTT as AzStyleLineHeight;
/// Destructor: Takes ownership of the `StyleLineHeight` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_line_height_delete(object: &mut AzStyleLineHeight) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_line_height_deep_copy(object: &AzStyleLineHeight) -> AzStyleLineHeight { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_line_height_fmt_debug(object: &AzStyleLineHeight) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleTabWidth` struct
pub type AzStyleTabWidthTT = azul_impl::css::StyleTabWidth;
pub use AzStyleTabWidthTT as AzStyleTabWidth;
/// Destructor: Takes ownership of the `StyleTabWidth` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_tab_width_delete(object: &mut AzStyleTabWidth) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_tab_width_deep_copy(object: &AzStyleTabWidth) -> AzStyleTabWidth { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_tab_width_fmt_debug(object: &AzStyleTabWidth) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleOpacity` struct
pub type AzStyleOpacityTT = azul_impl::css::StyleOpacity;
pub use AzStyleOpacityTT as AzStyleOpacity;
/// Destructor: Takes ownership of the `StyleOpacity` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_opacity_delete(object: &mut AzStyleOpacity) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_opacity_deep_copy(object: &AzStyleOpacity) -> AzStyleOpacity { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_opacity_fmt_debug(object: &AzStyleOpacity) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleTransformOrigin` struct
pub type AzStyleTransformOriginTT = azul_impl::css::StyleTransformOrigin;
pub use AzStyleTransformOriginTT as AzStyleTransformOrigin;
/// Destructor: Takes ownership of the `StyleTransformOrigin` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_transform_origin_delete(object: &mut AzStyleTransformOrigin) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_transform_origin_deep_copy(object: &AzStyleTransformOrigin) -> AzStyleTransformOrigin { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_transform_origin_fmt_debug(object: &AzStyleTransformOrigin) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StylePerspectiveOrigin` struct
pub type AzStylePerspectiveOriginTT = azul_impl::css::StyleTransformOrigin;
pub use AzStylePerspectiveOriginTT as AzStylePerspectiveOrigin;
/// Destructor: Takes ownership of the `StylePerspectiveOrigin` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_perspective_origin_delete(object: &mut AzStylePerspectiveOrigin) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_perspective_origin_deep_copy(object: &AzStylePerspectiveOrigin) -> AzStylePerspectiveOrigin { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_perspective_origin_fmt_debug(object: &AzStylePerspectiveOrigin) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBackfaceVisibility` struct
pub type AzStyleBackfaceVisibilityTT = azul_impl::css::StyleBackfaceVisibility;
pub use AzStyleBackfaceVisibilityTT as AzStyleBackfaceVisibility;
/// Destructor: Takes ownership of the `StyleBackfaceVisibility` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_backface_visibility_delete(object: &mut AzStyleBackfaceVisibility) { match object { azul_impl::css::StyleBackfaceVisibility::Hidden => { }, azul_impl::css::StyleBackfaceVisibility::Visible => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_backface_visibility_deep_copy(object: &AzStyleBackfaceVisibility) -> AzStyleBackfaceVisibility { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_backface_visibility_fmt_debug(object: &AzStyleBackfaceVisibility) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleTransform` struct
pub type AzStyleTransformTT = azul_impl::css::StyleTransform;
pub use AzStyleTransformTT as AzStyleTransform;
/// Destructor: Takes ownership of the `StyleTransform` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_transform_delete(object: &mut AzStyleTransform) { match object { azul_impl::css::StyleTransform::Matrix(_) => { }, azul_impl::css::StyleTransform::Matrix3D(_) => { }, azul_impl::css::StyleTransform::Translate(_) => { }, azul_impl::css::StyleTransform::Translate3D(_) => { }, azul_impl::css::StyleTransform::TranslateX(_) => { }, azul_impl::css::StyleTransform::TranslateY(_) => { }, azul_impl::css::StyleTransform::TranslateZ(_) => { }, azul_impl::css::StyleTransform::Rotate(_) => { }, azul_impl::css::StyleTransform::Rotate3D(_) => { }, azul_impl::css::StyleTransform::RotateX(_) => { }, azul_impl::css::StyleTransform::RotateY(_) => { }, azul_impl::css::StyleTransform::RotateZ(_) => { }, azul_impl::css::StyleTransform::Scale(_) => { }, azul_impl::css::StyleTransform::Scale3D(_) => { }, azul_impl::css::StyleTransform::ScaleX(_) => { }, azul_impl::css::StyleTransform::ScaleY(_) => { }, azul_impl::css::StyleTransform::ScaleZ(_) => { }, azul_impl::css::StyleTransform::Skew(_) => { }, azul_impl::css::StyleTransform::SkewX(_) => { }, azul_impl::css::StyleTransform::SkewY(_) => { }, azul_impl::css::StyleTransform::Perspective(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_transform_deep_copy(object: &AzStyleTransform) -> AzStyleTransform { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_transform_fmt_debug(object: &AzStyleTransform) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleTransformMatrix2D` struct
pub type AzStyleTransformMatrix2DTT = azul_impl::css::StyleTransformMatrix2D;
pub use AzStyleTransformMatrix2DTT as AzStyleTransformMatrix2D;
/// Destructor: Takes ownership of the `StyleTransformMatrix2D` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_transform_matrix2_d_delete(object: &mut AzStyleTransformMatrix2D) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_transform_matrix2_d_deep_copy(object: &AzStyleTransformMatrix2D) -> AzStyleTransformMatrix2D { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_transform_matrix2_d_fmt_debug(object: &AzStyleTransformMatrix2D) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleTransformMatrix3D` struct
pub type AzStyleTransformMatrix3DTT = azul_impl::css::StyleTransformMatrix3D;
pub use AzStyleTransformMatrix3DTT as AzStyleTransformMatrix3D;
/// Destructor: Takes ownership of the `StyleTransformMatrix3D` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_transform_matrix3_d_delete(object: &mut AzStyleTransformMatrix3D) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_transform_matrix3_d_deep_copy(object: &AzStyleTransformMatrix3D) -> AzStyleTransformMatrix3D { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_transform_matrix3_d_fmt_debug(object: &AzStyleTransformMatrix3D) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleTransformTranslate2D` struct
pub type AzStyleTransformTranslate2DTT = azul_impl::css::StyleTransformTranslate2D;
pub use AzStyleTransformTranslate2DTT as AzStyleTransformTranslate2D;
/// Destructor: Takes ownership of the `StyleTransformTranslate2D` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_transform_translate2_d_delete(object: &mut AzStyleTransformTranslate2D) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_transform_translate2_d_deep_copy(object: &AzStyleTransformTranslate2D) -> AzStyleTransformTranslate2D { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_transform_translate2_d_fmt_debug(object: &AzStyleTransformTranslate2D) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleTransformTranslate3D` struct
pub type AzStyleTransformTranslate3DTT = azul_impl::css::StyleTransformTranslate3D;
pub use AzStyleTransformTranslate3DTT as AzStyleTransformTranslate3D;
/// Destructor: Takes ownership of the `StyleTransformTranslate3D` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_transform_translate3_d_delete(object: &mut AzStyleTransformTranslate3D) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_transform_translate3_d_deep_copy(object: &AzStyleTransformTranslate3D) -> AzStyleTransformTranslate3D { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_transform_translate3_d_fmt_debug(object: &AzStyleTransformTranslate3D) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleTransformRotate3D` struct
pub type AzStyleTransformRotate3DTT = azul_impl::css::StyleTransformRotate3D;
pub use AzStyleTransformRotate3DTT as AzStyleTransformRotate3D;
/// Destructor: Takes ownership of the `StyleTransformRotate3D` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_transform_rotate3_d_delete(object: &mut AzStyleTransformRotate3D) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_transform_rotate3_d_deep_copy(object: &AzStyleTransformRotate3D) -> AzStyleTransformRotate3D { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_transform_rotate3_d_fmt_debug(object: &AzStyleTransformRotate3D) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleTransformScale2D` struct
pub type AzStyleTransformScale2DTT = azul_impl::css::StyleTransformScale2D;
pub use AzStyleTransformScale2DTT as AzStyleTransformScale2D;
/// Destructor: Takes ownership of the `StyleTransformScale2D` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_transform_scale2_d_delete(object: &mut AzStyleTransformScale2D) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_transform_scale2_d_deep_copy(object: &AzStyleTransformScale2D) -> AzStyleTransformScale2D { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_transform_scale2_d_fmt_debug(object: &AzStyleTransformScale2D) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleTransformScale3D` struct
pub type AzStyleTransformScale3DTT = azul_impl::css::StyleTransformScale3D;
pub use AzStyleTransformScale3DTT as AzStyleTransformScale3D;
/// Destructor: Takes ownership of the `StyleTransformScale3D` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_transform_scale3_d_delete(object: &mut AzStyleTransformScale3D) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_transform_scale3_d_deep_copy(object: &AzStyleTransformScale3D) -> AzStyleTransformScale3D { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_transform_scale3_d_fmt_debug(object: &AzStyleTransformScale3D) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleTransformSkew2D` struct
pub type AzStyleTransformSkew2DTT = azul_impl::css::StyleTransformSkew2D;
pub use AzStyleTransformSkew2DTT as AzStyleTransformSkew2D;
/// Destructor: Takes ownership of the `StyleTransformSkew2D` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_transform_skew2_d_delete(object: &mut AzStyleTransformSkew2D) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_transform_skew2_d_deep_copy(object: &AzStyleTransformSkew2D) -> AzStyleTransformSkew2D { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_transform_skew2_d_fmt_debug(object: &AzStyleTransformSkew2D) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleTextAlignmentHorz` struct
pub type AzStyleTextAlignmentHorzTT = azul_impl::css::StyleTextAlignmentHorz;
pub use AzStyleTextAlignmentHorzTT as AzStyleTextAlignmentHorz;
/// Destructor: Takes ownership of the `StyleTextAlignmentHorz` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_text_alignment_horz_delete(object: &mut AzStyleTextAlignmentHorz) { match object { azul_impl::css::StyleTextAlignmentHorz::Left => { }, azul_impl::css::StyleTextAlignmentHorz::Center => { }, azul_impl::css::StyleTextAlignmentHorz::Right => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_text_alignment_horz_deep_copy(object: &AzStyleTextAlignmentHorz) -> AzStyleTextAlignmentHorz { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_text_alignment_horz_fmt_debug(object: &AzStyleTextAlignmentHorz) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleTextColor` struct
pub type AzStyleTextColorTT = azul_impl::css::StyleTextColor;
pub use AzStyleTextColorTT as AzStyleTextColor;
/// Destructor: Takes ownership of the `StyleTextColor` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_text_color_delete(object: &mut AzStyleTextColor) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_text_color_deep_copy(object: &AzStyleTextColor) -> AzStyleTextColor { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_text_color_fmt_debug(object: &AzStyleTextColor) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleWordSpacing` struct
pub type AzStyleWordSpacingTT = azul_impl::css::StyleWordSpacing;
pub use AzStyleWordSpacingTT as AzStyleWordSpacing;
/// Destructor: Takes ownership of the `StyleWordSpacing` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_word_spacing_delete(object: &mut AzStyleWordSpacing) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_word_spacing_deep_copy(object: &AzStyleWordSpacing) -> AzStyleWordSpacing { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_word_spacing_fmt_debug(object: &AzStyleWordSpacing) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `BoxShadowPreDisplayItemValue` struct
pub type AzBoxShadowPreDisplayItemValueTT = azul_impl::css::CssPropertyValue::<BoxShadowPreDisplayItem>;
pub use AzBoxShadowPreDisplayItemValueTT as AzBoxShadowPreDisplayItemValue;
/// Destructor: Takes ownership of the `BoxShadowPreDisplayItemValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_box_shadow_pre_display_item_value_delete(object: &mut AzBoxShadowPreDisplayItemValue) { match object { azul_impl::css::CssPropertyValue::<BoxShadowPreDisplayItem>::Auto => { }, azul_impl::css::CssPropertyValue::<BoxShadowPreDisplayItem>::None => { }, azul_impl::css::CssPropertyValue::<BoxShadowPreDisplayItem>::Inherit => { }, azul_impl::css::CssPropertyValue::<BoxShadowPreDisplayItem>::Initial => { }, azul_impl::css::CssPropertyValue::<BoxShadowPreDisplayItem>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_box_shadow_pre_display_item_value_deep_copy(object: &AzBoxShadowPreDisplayItemValue) -> AzBoxShadowPreDisplayItemValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_box_shadow_pre_display_item_value_fmt_debug(object: &AzBoxShadowPreDisplayItemValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutAlignContentValue` struct
pub type AzLayoutAlignContentValueTT = azul_impl::css::CssPropertyValue::<LayoutAlignContent>;
pub use AzLayoutAlignContentValueTT as AzLayoutAlignContentValue;
/// Destructor: Takes ownership of the `LayoutAlignContentValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_align_content_value_delete(object: &mut AzLayoutAlignContentValue) { match object { azul_impl::css::CssPropertyValue::<LayoutAlignContent>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutAlignContent>::None => { }, azul_impl::css::CssPropertyValue::<LayoutAlignContent>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutAlignContent>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutAlignContent>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_align_content_value_deep_copy(object: &AzLayoutAlignContentValue) -> AzLayoutAlignContentValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_align_content_value_fmt_debug(object: &AzLayoutAlignContentValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutAlignItemsValue` struct
pub type AzLayoutAlignItemsValueTT = azul_impl::css::CssPropertyValue::<LayoutAlignItems>;
pub use AzLayoutAlignItemsValueTT as AzLayoutAlignItemsValue;
/// Destructor: Takes ownership of the `LayoutAlignItemsValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_align_items_value_delete(object: &mut AzLayoutAlignItemsValue) { match object { azul_impl::css::CssPropertyValue::<LayoutAlignItems>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutAlignItems>::None => { }, azul_impl::css::CssPropertyValue::<LayoutAlignItems>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutAlignItems>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutAlignItems>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_align_items_value_deep_copy(object: &AzLayoutAlignItemsValue) -> AzLayoutAlignItemsValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_align_items_value_fmt_debug(object: &AzLayoutAlignItemsValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutBottomValue` struct
pub type AzLayoutBottomValueTT = azul_impl::css::CssPropertyValue::<LayoutBottom>;
pub use AzLayoutBottomValueTT as AzLayoutBottomValue;
/// Destructor: Takes ownership of the `LayoutBottomValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_bottom_value_delete(object: &mut AzLayoutBottomValue) { match object { azul_impl::css::CssPropertyValue::<LayoutBottom>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutBottom>::None => { }, azul_impl::css::CssPropertyValue::<LayoutBottom>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutBottom>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutBottom>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_bottom_value_deep_copy(object: &AzLayoutBottomValue) -> AzLayoutBottomValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_bottom_value_fmt_debug(object: &AzLayoutBottomValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutBoxSizingValue` struct
pub type AzLayoutBoxSizingValueTT = azul_impl::css::CssPropertyValue::<LayoutBoxSizing>;
pub use AzLayoutBoxSizingValueTT as AzLayoutBoxSizingValue;
/// Destructor: Takes ownership of the `LayoutBoxSizingValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_box_sizing_value_delete(object: &mut AzLayoutBoxSizingValue) { match object { azul_impl::css::CssPropertyValue::<LayoutBoxSizing>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutBoxSizing>::None => { }, azul_impl::css::CssPropertyValue::<LayoutBoxSizing>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutBoxSizing>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutBoxSizing>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_box_sizing_value_deep_copy(object: &AzLayoutBoxSizingValue) -> AzLayoutBoxSizingValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_box_sizing_value_fmt_debug(object: &AzLayoutBoxSizingValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutDirectionValue` struct
pub type AzLayoutDirectionValueTT = azul_impl::css::CssPropertyValue::<LayoutDirection>;
pub use AzLayoutDirectionValueTT as AzLayoutDirectionValue;
/// Destructor: Takes ownership of the `LayoutDirectionValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_direction_value_delete(object: &mut AzLayoutDirectionValue) { match object { azul_impl::css::CssPropertyValue::<LayoutDirection>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutDirection>::None => { }, azul_impl::css::CssPropertyValue::<LayoutDirection>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutDirection>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutDirection>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_direction_value_deep_copy(object: &AzLayoutDirectionValue) -> AzLayoutDirectionValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_direction_value_fmt_debug(object: &AzLayoutDirectionValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutDisplayValue` struct
pub type AzLayoutDisplayValueTT = azul_impl::css::CssPropertyValue::<LayoutDisplay>;
pub use AzLayoutDisplayValueTT as AzLayoutDisplayValue;
/// Destructor: Takes ownership of the `LayoutDisplayValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_display_value_delete(object: &mut AzLayoutDisplayValue) { match object { azul_impl::css::CssPropertyValue::<LayoutDisplay>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutDisplay>::None => { }, azul_impl::css::CssPropertyValue::<LayoutDisplay>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutDisplay>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutDisplay>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_display_value_deep_copy(object: &AzLayoutDisplayValue) -> AzLayoutDisplayValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_display_value_fmt_debug(object: &AzLayoutDisplayValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutFlexGrowValue` struct
pub type AzLayoutFlexGrowValueTT = azul_impl::css::CssPropertyValue::<LayoutFlexGrow>;
pub use AzLayoutFlexGrowValueTT as AzLayoutFlexGrowValue;
/// Destructor: Takes ownership of the `LayoutFlexGrowValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_flex_grow_value_delete(object: &mut AzLayoutFlexGrowValue) { match object { azul_impl::css::CssPropertyValue::<LayoutFlexGrow>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutFlexGrow>::None => { }, azul_impl::css::CssPropertyValue::<LayoutFlexGrow>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutFlexGrow>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutFlexGrow>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_flex_grow_value_deep_copy(object: &AzLayoutFlexGrowValue) -> AzLayoutFlexGrowValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_flex_grow_value_fmt_debug(object: &AzLayoutFlexGrowValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutFlexShrinkValue` struct
pub type AzLayoutFlexShrinkValueTT = azul_impl::css::CssPropertyValue::<LayoutFlexShrink>;
pub use AzLayoutFlexShrinkValueTT as AzLayoutFlexShrinkValue;
/// Destructor: Takes ownership of the `LayoutFlexShrinkValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_flex_shrink_value_delete(object: &mut AzLayoutFlexShrinkValue) { match object { azul_impl::css::CssPropertyValue::<LayoutFlexShrink>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutFlexShrink>::None => { }, azul_impl::css::CssPropertyValue::<LayoutFlexShrink>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutFlexShrink>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutFlexShrink>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_flex_shrink_value_deep_copy(object: &AzLayoutFlexShrinkValue) -> AzLayoutFlexShrinkValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_flex_shrink_value_fmt_debug(object: &AzLayoutFlexShrinkValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutFloatValue` struct
pub type AzLayoutFloatValueTT = azul_impl::css::CssPropertyValue::<LayoutFloat>;
pub use AzLayoutFloatValueTT as AzLayoutFloatValue;
/// Destructor: Takes ownership of the `LayoutFloatValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_float_value_delete(object: &mut AzLayoutFloatValue) { match object { azul_impl::css::CssPropertyValue::<LayoutFloat>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutFloat>::None => { }, azul_impl::css::CssPropertyValue::<LayoutFloat>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutFloat>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutFloat>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_float_value_deep_copy(object: &AzLayoutFloatValue) -> AzLayoutFloatValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_float_value_fmt_debug(object: &AzLayoutFloatValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutHeightValue` struct
pub type AzLayoutHeightValueTT = azul_impl::css::CssPropertyValue::<LayoutHeight>;
pub use AzLayoutHeightValueTT as AzLayoutHeightValue;
/// Destructor: Takes ownership of the `LayoutHeightValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_height_value_delete(object: &mut AzLayoutHeightValue) { match object { azul_impl::css::CssPropertyValue::<LayoutHeight>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutHeight>::None => { }, azul_impl::css::CssPropertyValue::<LayoutHeight>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutHeight>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutHeight>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_height_value_deep_copy(object: &AzLayoutHeightValue) -> AzLayoutHeightValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_height_value_fmt_debug(object: &AzLayoutHeightValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutJustifyContentValue` struct
pub type AzLayoutJustifyContentValueTT = azul_impl::css::CssPropertyValue::<LayoutJustifyContent>;
pub use AzLayoutJustifyContentValueTT as AzLayoutJustifyContentValue;
/// Destructor: Takes ownership of the `LayoutJustifyContentValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_justify_content_value_delete(object: &mut AzLayoutJustifyContentValue) { match object { azul_impl::css::CssPropertyValue::<LayoutJustifyContent>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutJustifyContent>::None => { }, azul_impl::css::CssPropertyValue::<LayoutJustifyContent>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutJustifyContent>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutJustifyContent>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_justify_content_value_deep_copy(object: &AzLayoutJustifyContentValue) -> AzLayoutJustifyContentValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_justify_content_value_fmt_debug(object: &AzLayoutJustifyContentValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutLeftValue` struct
pub type AzLayoutLeftValueTT = azul_impl::css::CssPropertyValue::<LayoutLeft>;
pub use AzLayoutLeftValueTT as AzLayoutLeftValue;
/// Destructor: Takes ownership of the `LayoutLeftValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_left_value_delete(object: &mut AzLayoutLeftValue) { match object { azul_impl::css::CssPropertyValue::<LayoutLeft>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutLeft>::None => { }, azul_impl::css::CssPropertyValue::<LayoutLeft>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutLeft>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutLeft>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_left_value_deep_copy(object: &AzLayoutLeftValue) -> AzLayoutLeftValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_left_value_fmt_debug(object: &AzLayoutLeftValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutMarginBottomValue` struct
pub type AzLayoutMarginBottomValueTT = azul_impl::css::CssPropertyValue::<LayoutMarginBottom>;
pub use AzLayoutMarginBottomValueTT as AzLayoutMarginBottomValue;
/// Destructor: Takes ownership of the `LayoutMarginBottomValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_margin_bottom_value_delete(object: &mut AzLayoutMarginBottomValue) { match object { azul_impl::css::CssPropertyValue::<LayoutMarginBottom>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutMarginBottom>::None => { }, azul_impl::css::CssPropertyValue::<LayoutMarginBottom>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutMarginBottom>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutMarginBottom>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_margin_bottom_value_deep_copy(object: &AzLayoutMarginBottomValue) -> AzLayoutMarginBottomValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_margin_bottom_value_fmt_debug(object: &AzLayoutMarginBottomValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutMarginLeftValue` struct
pub type AzLayoutMarginLeftValueTT = azul_impl::css::CssPropertyValue::<LayoutMarginLeft>;
pub use AzLayoutMarginLeftValueTT as AzLayoutMarginLeftValue;
/// Destructor: Takes ownership of the `LayoutMarginLeftValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_margin_left_value_delete(object: &mut AzLayoutMarginLeftValue) { match object { azul_impl::css::CssPropertyValue::<LayoutMarginLeft>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutMarginLeft>::None => { }, azul_impl::css::CssPropertyValue::<LayoutMarginLeft>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutMarginLeft>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutMarginLeft>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_margin_left_value_deep_copy(object: &AzLayoutMarginLeftValue) -> AzLayoutMarginLeftValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_margin_left_value_fmt_debug(object: &AzLayoutMarginLeftValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutMarginRightValue` struct
pub type AzLayoutMarginRightValueTT = azul_impl::css::CssPropertyValue::<LayoutMarginRight>;
pub use AzLayoutMarginRightValueTT as AzLayoutMarginRightValue;
/// Destructor: Takes ownership of the `LayoutMarginRightValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_margin_right_value_delete(object: &mut AzLayoutMarginRightValue) { match object { azul_impl::css::CssPropertyValue::<LayoutMarginRight>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutMarginRight>::None => { }, azul_impl::css::CssPropertyValue::<LayoutMarginRight>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutMarginRight>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutMarginRight>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_margin_right_value_deep_copy(object: &AzLayoutMarginRightValue) -> AzLayoutMarginRightValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_margin_right_value_fmt_debug(object: &AzLayoutMarginRightValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutMarginTopValue` struct
pub type AzLayoutMarginTopValueTT = azul_impl::css::CssPropertyValue::<LayoutMarginTop>;
pub use AzLayoutMarginTopValueTT as AzLayoutMarginTopValue;
/// Destructor: Takes ownership of the `LayoutMarginTopValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_margin_top_value_delete(object: &mut AzLayoutMarginTopValue) { match object { azul_impl::css::CssPropertyValue::<LayoutMarginTop>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutMarginTop>::None => { }, azul_impl::css::CssPropertyValue::<LayoutMarginTop>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutMarginTop>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutMarginTop>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_margin_top_value_deep_copy(object: &AzLayoutMarginTopValue) -> AzLayoutMarginTopValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_margin_top_value_fmt_debug(object: &AzLayoutMarginTopValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutMaxHeightValue` struct
pub type AzLayoutMaxHeightValueTT = azul_impl::css::CssPropertyValue::<LayoutMaxHeight>;
pub use AzLayoutMaxHeightValueTT as AzLayoutMaxHeightValue;
/// Destructor: Takes ownership of the `LayoutMaxHeightValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_max_height_value_delete(object: &mut AzLayoutMaxHeightValue) { match object { azul_impl::css::CssPropertyValue::<LayoutMaxHeight>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutMaxHeight>::None => { }, azul_impl::css::CssPropertyValue::<LayoutMaxHeight>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutMaxHeight>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutMaxHeight>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_max_height_value_deep_copy(object: &AzLayoutMaxHeightValue) -> AzLayoutMaxHeightValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_max_height_value_fmt_debug(object: &AzLayoutMaxHeightValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutMaxWidthValue` struct
pub type AzLayoutMaxWidthValueTT = azul_impl::css::CssPropertyValue::<LayoutMaxWidth>;
pub use AzLayoutMaxWidthValueTT as AzLayoutMaxWidthValue;
/// Destructor: Takes ownership of the `LayoutMaxWidthValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_max_width_value_delete(object: &mut AzLayoutMaxWidthValue) { match object { azul_impl::css::CssPropertyValue::<LayoutMaxWidth>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutMaxWidth>::None => { }, azul_impl::css::CssPropertyValue::<LayoutMaxWidth>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutMaxWidth>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutMaxWidth>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_max_width_value_deep_copy(object: &AzLayoutMaxWidthValue) -> AzLayoutMaxWidthValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_max_width_value_fmt_debug(object: &AzLayoutMaxWidthValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutMinHeightValue` struct
pub type AzLayoutMinHeightValueTT = azul_impl::css::CssPropertyValue::<LayoutMinHeight>;
pub use AzLayoutMinHeightValueTT as AzLayoutMinHeightValue;
/// Destructor: Takes ownership of the `LayoutMinHeightValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_min_height_value_delete(object: &mut AzLayoutMinHeightValue) { match object { azul_impl::css::CssPropertyValue::<LayoutMinHeight>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutMinHeight>::None => { }, azul_impl::css::CssPropertyValue::<LayoutMinHeight>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutMinHeight>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutMinHeight>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_min_height_value_deep_copy(object: &AzLayoutMinHeightValue) -> AzLayoutMinHeightValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_min_height_value_fmt_debug(object: &AzLayoutMinHeightValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutMinWidthValue` struct
pub type AzLayoutMinWidthValueTT = azul_impl::css::CssPropertyValue::<LayoutMinWidth>;
pub use AzLayoutMinWidthValueTT as AzLayoutMinWidthValue;
/// Destructor: Takes ownership of the `LayoutMinWidthValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_min_width_value_delete(object: &mut AzLayoutMinWidthValue) { match object { azul_impl::css::CssPropertyValue::<LayoutMinWidth>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutMinWidth>::None => { }, azul_impl::css::CssPropertyValue::<LayoutMinWidth>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutMinWidth>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutMinWidth>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_min_width_value_deep_copy(object: &AzLayoutMinWidthValue) -> AzLayoutMinWidthValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_min_width_value_fmt_debug(object: &AzLayoutMinWidthValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutPaddingBottomValue` struct
pub type AzLayoutPaddingBottomValueTT = azul_impl::css::CssPropertyValue::<LayoutPaddingBottom>;
pub use AzLayoutPaddingBottomValueTT as AzLayoutPaddingBottomValue;
/// Destructor: Takes ownership of the `LayoutPaddingBottomValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_padding_bottom_value_delete(object: &mut AzLayoutPaddingBottomValue) { match object { azul_impl::css::CssPropertyValue::<LayoutPaddingBottom>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutPaddingBottom>::None => { }, azul_impl::css::CssPropertyValue::<LayoutPaddingBottom>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutPaddingBottom>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutPaddingBottom>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_padding_bottom_value_deep_copy(object: &AzLayoutPaddingBottomValue) -> AzLayoutPaddingBottomValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_padding_bottom_value_fmt_debug(object: &AzLayoutPaddingBottomValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutPaddingLeftValue` struct
pub type AzLayoutPaddingLeftValueTT = azul_impl::css::CssPropertyValue::<LayoutPaddingLeft>;
pub use AzLayoutPaddingLeftValueTT as AzLayoutPaddingLeftValue;
/// Destructor: Takes ownership of the `LayoutPaddingLeftValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_padding_left_value_delete(object: &mut AzLayoutPaddingLeftValue) { match object { azul_impl::css::CssPropertyValue::<LayoutPaddingLeft>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutPaddingLeft>::None => { }, azul_impl::css::CssPropertyValue::<LayoutPaddingLeft>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutPaddingLeft>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutPaddingLeft>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_padding_left_value_deep_copy(object: &AzLayoutPaddingLeftValue) -> AzLayoutPaddingLeftValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_padding_left_value_fmt_debug(object: &AzLayoutPaddingLeftValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutPaddingRightValue` struct
pub type AzLayoutPaddingRightValueTT = azul_impl::css::CssPropertyValue::<LayoutPaddingRight>;
pub use AzLayoutPaddingRightValueTT as AzLayoutPaddingRightValue;
/// Destructor: Takes ownership of the `LayoutPaddingRightValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_padding_right_value_delete(object: &mut AzLayoutPaddingRightValue) { match object { azul_impl::css::CssPropertyValue::<LayoutPaddingRight>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutPaddingRight>::None => { }, azul_impl::css::CssPropertyValue::<LayoutPaddingRight>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutPaddingRight>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutPaddingRight>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_padding_right_value_deep_copy(object: &AzLayoutPaddingRightValue) -> AzLayoutPaddingRightValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_padding_right_value_fmt_debug(object: &AzLayoutPaddingRightValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutPaddingTopValue` struct
pub type AzLayoutPaddingTopValueTT = azul_impl::css::CssPropertyValue::<LayoutPaddingTop>;
pub use AzLayoutPaddingTopValueTT as AzLayoutPaddingTopValue;
/// Destructor: Takes ownership of the `LayoutPaddingTopValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_padding_top_value_delete(object: &mut AzLayoutPaddingTopValue) { match object { azul_impl::css::CssPropertyValue::<LayoutPaddingTop>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutPaddingTop>::None => { }, azul_impl::css::CssPropertyValue::<LayoutPaddingTop>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutPaddingTop>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutPaddingTop>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_padding_top_value_deep_copy(object: &AzLayoutPaddingTopValue) -> AzLayoutPaddingTopValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_padding_top_value_fmt_debug(object: &AzLayoutPaddingTopValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutPositionValue` struct
pub type AzLayoutPositionValueTT = azul_impl::css::CssPropertyValue::<LayoutPosition>;
pub use AzLayoutPositionValueTT as AzLayoutPositionValue;
/// Destructor: Takes ownership of the `LayoutPositionValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_position_value_delete(object: &mut AzLayoutPositionValue) { match object { azul_impl::css::CssPropertyValue::<LayoutPosition>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutPosition>::None => { }, azul_impl::css::CssPropertyValue::<LayoutPosition>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutPosition>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutPosition>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_position_value_deep_copy(object: &AzLayoutPositionValue) -> AzLayoutPositionValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_position_value_fmt_debug(object: &AzLayoutPositionValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutRightValue` struct
pub type AzLayoutRightValueTT = azul_impl::css::CssPropertyValue::<LayoutRight>;
pub use AzLayoutRightValueTT as AzLayoutRightValue;
/// Destructor: Takes ownership of the `LayoutRightValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_right_value_delete(object: &mut AzLayoutRightValue) { match object { azul_impl::css::CssPropertyValue::<LayoutRight>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutRight>::None => { }, azul_impl::css::CssPropertyValue::<LayoutRight>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutRight>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutRight>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_right_value_deep_copy(object: &AzLayoutRightValue) -> AzLayoutRightValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_right_value_fmt_debug(object: &AzLayoutRightValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutTopValue` struct
pub type AzLayoutTopValueTT = azul_impl::css::CssPropertyValue::<LayoutTop>;
pub use AzLayoutTopValueTT as AzLayoutTopValue;
/// Destructor: Takes ownership of the `LayoutTopValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_top_value_delete(object: &mut AzLayoutTopValue) { match object { azul_impl::css::CssPropertyValue::<LayoutTop>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutTop>::None => { }, azul_impl::css::CssPropertyValue::<LayoutTop>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutTop>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutTop>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_top_value_deep_copy(object: &AzLayoutTopValue) -> AzLayoutTopValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_top_value_fmt_debug(object: &AzLayoutTopValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutWidthValue` struct
pub type AzLayoutWidthValueTT = azul_impl::css::CssPropertyValue::<LayoutWidth>;
pub use AzLayoutWidthValueTT as AzLayoutWidthValue;
/// Destructor: Takes ownership of the `LayoutWidthValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_width_value_delete(object: &mut AzLayoutWidthValue) { match object { azul_impl::css::CssPropertyValue::<LayoutWidth>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutWidth>::None => { }, azul_impl::css::CssPropertyValue::<LayoutWidth>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutWidth>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutWidth>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_width_value_deep_copy(object: &AzLayoutWidthValue) -> AzLayoutWidthValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_width_value_fmt_debug(object: &AzLayoutWidthValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutWrapValue` struct
pub type AzLayoutWrapValueTT = azul_impl::css::CssPropertyValue::<LayoutWrap>;
pub use AzLayoutWrapValueTT as AzLayoutWrapValue;
/// Destructor: Takes ownership of the `LayoutWrapValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_wrap_value_delete(object: &mut AzLayoutWrapValue) { match object { azul_impl::css::CssPropertyValue::<LayoutWrap>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutWrap>::None => { }, azul_impl::css::CssPropertyValue::<LayoutWrap>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutWrap>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutWrap>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_wrap_value_deep_copy(object: &AzLayoutWrapValue) -> AzLayoutWrapValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_wrap_value_fmt_debug(object: &AzLayoutWrapValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OverflowValue` struct
pub type AzOverflowValueTT = azul_impl::css::CssPropertyValue::<Overflow>;
pub use AzOverflowValueTT as AzOverflowValue;
/// Destructor: Takes ownership of the `OverflowValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_overflow_value_delete(object: &mut AzOverflowValue) { match object { azul_impl::css::CssPropertyValue::<Overflow>::Auto => { }, azul_impl::css::CssPropertyValue::<Overflow>::None => { }, azul_impl::css::CssPropertyValue::<Overflow>::Inherit => { }, azul_impl::css::CssPropertyValue::<Overflow>::Initial => { }, azul_impl::css::CssPropertyValue::<Overflow>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_overflow_value_deep_copy(object: &AzOverflowValue) -> AzOverflowValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_overflow_value_fmt_debug(object: &AzOverflowValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBackgroundContentValue` struct
pub type AzStyleBackgroundContentValueTT = azul_impl::css::CssPropertyValue::<StyleBackgroundContent>;
pub use AzStyleBackgroundContentValueTT as AzStyleBackgroundContentValue;
/// Destructor: Takes ownership of the `StyleBackgroundContentValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_background_content_value_delete(object: &mut AzStyleBackgroundContentValue) { match object { azul_impl::css::CssPropertyValue::<StyleBackgroundContent>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleBackgroundContent>::None => { }, azul_impl::css::CssPropertyValue::<StyleBackgroundContent>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleBackgroundContent>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleBackgroundContent>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_background_content_value_deep_copy(object: &AzStyleBackgroundContentValue) -> AzStyleBackgroundContentValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_background_content_value_fmt_debug(object: &AzStyleBackgroundContentValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBackgroundPositionValue` struct
pub type AzStyleBackgroundPositionValueTT = azul_impl::css::CssPropertyValue::<StyleBackgroundPosition>;
pub use AzStyleBackgroundPositionValueTT as AzStyleBackgroundPositionValue;
/// Destructor: Takes ownership of the `StyleBackgroundPositionValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_background_position_value_delete(object: &mut AzStyleBackgroundPositionValue) { match object { azul_impl::css::CssPropertyValue::<StyleBackgroundPosition>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleBackgroundPosition>::None => { }, azul_impl::css::CssPropertyValue::<StyleBackgroundPosition>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleBackgroundPosition>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleBackgroundPosition>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_background_position_value_deep_copy(object: &AzStyleBackgroundPositionValue) -> AzStyleBackgroundPositionValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_background_position_value_fmt_debug(object: &AzStyleBackgroundPositionValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBackgroundRepeatValue` struct
pub type AzStyleBackgroundRepeatValueTT = azul_impl::css::CssPropertyValue::<StyleBackgroundRepeat>;
pub use AzStyleBackgroundRepeatValueTT as AzStyleBackgroundRepeatValue;
/// Destructor: Takes ownership of the `StyleBackgroundRepeatValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_background_repeat_value_delete(object: &mut AzStyleBackgroundRepeatValue) { match object { azul_impl::css::CssPropertyValue::<StyleBackgroundRepeat>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleBackgroundRepeat>::None => { }, azul_impl::css::CssPropertyValue::<StyleBackgroundRepeat>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleBackgroundRepeat>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleBackgroundRepeat>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_background_repeat_value_deep_copy(object: &AzStyleBackgroundRepeatValue) -> AzStyleBackgroundRepeatValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_background_repeat_value_fmt_debug(object: &AzStyleBackgroundRepeatValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBackgroundSizeValue` struct
pub type AzStyleBackgroundSizeValueTT = azul_impl::css::CssPropertyValue::<StyleBackgroundSize>;
pub use AzStyleBackgroundSizeValueTT as AzStyleBackgroundSizeValue;
/// Destructor: Takes ownership of the `StyleBackgroundSizeValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_background_size_value_delete(object: &mut AzStyleBackgroundSizeValue) { match object { azul_impl::css::CssPropertyValue::<StyleBackgroundSize>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleBackgroundSize>::None => { }, azul_impl::css::CssPropertyValue::<StyleBackgroundSize>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleBackgroundSize>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleBackgroundSize>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_background_size_value_deep_copy(object: &AzStyleBackgroundSizeValue) -> AzStyleBackgroundSizeValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_background_size_value_fmt_debug(object: &AzStyleBackgroundSizeValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderBottomColorValue` struct
pub type AzStyleBorderBottomColorValueTT = azul_impl::css::CssPropertyValue::<StyleBorderBottomColor>;
pub use AzStyleBorderBottomColorValueTT as AzStyleBorderBottomColorValue;
/// Destructor: Takes ownership of the `StyleBorderBottomColorValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_bottom_color_value_delete(object: &mut AzStyleBorderBottomColorValue) { match object { azul_impl::css::CssPropertyValue::<StyleBorderBottomColor>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleBorderBottomColor>::None => { }, azul_impl::css::CssPropertyValue::<StyleBorderBottomColor>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleBorderBottomColor>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleBorderBottomColor>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_bottom_color_value_deep_copy(object: &AzStyleBorderBottomColorValue) -> AzStyleBorderBottomColorValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_bottom_color_value_fmt_debug(object: &AzStyleBorderBottomColorValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderBottomLeftRadiusValue` struct
pub type AzStyleBorderBottomLeftRadiusValueTT = azul_impl::css::CssPropertyValue::<StyleBorderBottomLeftRadius>;
pub use AzStyleBorderBottomLeftRadiusValueTT as AzStyleBorderBottomLeftRadiusValue;
/// Destructor: Takes ownership of the `StyleBorderBottomLeftRadiusValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_bottom_left_radius_value_delete(object: &mut AzStyleBorderBottomLeftRadiusValue) { match object { azul_impl::css::CssPropertyValue::<StyleBorderBottomLeftRadius>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleBorderBottomLeftRadius>::None => { }, azul_impl::css::CssPropertyValue::<StyleBorderBottomLeftRadius>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleBorderBottomLeftRadius>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleBorderBottomLeftRadius>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_bottom_left_radius_value_deep_copy(object: &AzStyleBorderBottomLeftRadiusValue) -> AzStyleBorderBottomLeftRadiusValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_bottom_left_radius_value_fmt_debug(object: &AzStyleBorderBottomLeftRadiusValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderBottomRightRadiusValue` struct
pub type AzStyleBorderBottomRightRadiusValueTT = azul_impl::css::CssPropertyValue::<StyleBorderBottomRightRadius>;
pub use AzStyleBorderBottomRightRadiusValueTT as AzStyleBorderBottomRightRadiusValue;
/// Destructor: Takes ownership of the `StyleBorderBottomRightRadiusValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_bottom_right_radius_value_delete(object: &mut AzStyleBorderBottomRightRadiusValue) { match object { azul_impl::css::CssPropertyValue::<StyleBorderBottomRightRadius>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleBorderBottomRightRadius>::None => { }, azul_impl::css::CssPropertyValue::<StyleBorderBottomRightRadius>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleBorderBottomRightRadius>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleBorderBottomRightRadius>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_bottom_right_radius_value_deep_copy(object: &AzStyleBorderBottomRightRadiusValue) -> AzStyleBorderBottomRightRadiusValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_bottom_right_radius_value_fmt_debug(object: &AzStyleBorderBottomRightRadiusValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderBottomStyleValue` struct
pub type AzStyleBorderBottomStyleValueTT = azul_impl::css::CssPropertyValue::<StyleBorderBottomStyle>;
pub use AzStyleBorderBottomStyleValueTT as AzStyleBorderBottomStyleValue;
/// Destructor: Takes ownership of the `StyleBorderBottomStyleValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_bottom_style_value_delete(object: &mut AzStyleBorderBottomStyleValue) { match object { azul_impl::css::CssPropertyValue::<StyleBorderBottomStyle>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleBorderBottomStyle>::None => { }, azul_impl::css::CssPropertyValue::<StyleBorderBottomStyle>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleBorderBottomStyle>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleBorderBottomStyle>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_bottom_style_value_deep_copy(object: &AzStyleBorderBottomStyleValue) -> AzStyleBorderBottomStyleValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_bottom_style_value_fmt_debug(object: &AzStyleBorderBottomStyleValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderBottomWidthValue` struct
pub type AzStyleBorderBottomWidthValueTT = azul_impl::css::CssPropertyValue::<StyleBorderBottomWidth>;
pub use AzStyleBorderBottomWidthValueTT as AzStyleBorderBottomWidthValue;
/// Destructor: Takes ownership of the `StyleBorderBottomWidthValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_bottom_width_value_delete(object: &mut AzStyleBorderBottomWidthValue) { match object { azul_impl::css::CssPropertyValue::<StyleBorderBottomWidth>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleBorderBottomWidth>::None => { }, azul_impl::css::CssPropertyValue::<StyleBorderBottomWidth>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleBorderBottomWidth>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleBorderBottomWidth>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_bottom_width_value_deep_copy(object: &AzStyleBorderBottomWidthValue) -> AzStyleBorderBottomWidthValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_bottom_width_value_fmt_debug(object: &AzStyleBorderBottomWidthValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderLeftColorValue` struct
pub type AzStyleBorderLeftColorValueTT = azul_impl::css::CssPropertyValue::<StyleBorderLeftColor>;
pub use AzStyleBorderLeftColorValueTT as AzStyleBorderLeftColorValue;
/// Destructor: Takes ownership of the `StyleBorderLeftColorValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_left_color_value_delete(object: &mut AzStyleBorderLeftColorValue) { match object { azul_impl::css::CssPropertyValue::<StyleBorderLeftColor>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleBorderLeftColor>::None => { }, azul_impl::css::CssPropertyValue::<StyleBorderLeftColor>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleBorderLeftColor>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleBorderLeftColor>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_left_color_value_deep_copy(object: &AzStyleBorderLeftColorValue) -> AzStyleBorderLeftColorValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_left_color_value_fmt_debug(object: &AzStyleBorderLeftColorValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderLeftStyleValue` struct
pub type AzStyleBorderLeftStyleValueTT = azul_impl::css::CssPropertyValue::<StyleBorderLeftStyle>;
pub use AzStyleBorderLeftStyleValueTT as AzStyleBorderLeftStyleValue;
/// Destructor: Takes ownership of the `StyleBorderLeftStyleValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_left_style_value_delete(object: &mut AzStyleBorderLeftStyleValue) { match object { azul_impl::css::CssPropertyValue::<StyleBorderLeftStyle>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleBorderLeftStyle>::None => { }, azul_impl::css::CssPropertyValue::<StyleBorderLeftStyle>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleBorderLeftStyle>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleBorderLeftStyle>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_left_style_value_deep_copy(object: &AzStyleBorderLeftStyleValue) -> AzStyleBorderLeftStyleValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_left_style_value_fmt_debug(object: &AzStyleBorderLeftStyleValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderLeftWidthValue` struct
pub type AzStyleBorderLeftWidthValueTT = azul_impl::css::CssPropertyValue::<StyleBorderLeftWidth>;
pub use AzStyleBorderLeftWidthValueTT as AzStyleBorderLeftWidthValue;
/// Destructor: Takes ownership of the `StyleBorderLeftWidthValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_left_width_value_delete(object: &mut AzStyleBorderLeftWidthValue) { match object { azul_impl::css::CssPropertyValue::<StyleBorderLeftWidth>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleBorderLeftWidth>::None => { }, azul_impl::css::CssPropertyValue::<StyleBorderLeftWidth>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleBorderLeftWidth>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleBorderLeftWidth>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_left_width_value_deep_copy(object: &AzStyleBorderLeftWidthValue) -> AzStyleBorderLeftWidthValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_left_width_value_fmt_debug(object: &AzStyleBorderLeftWidthValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderRightColorValue` struct
pub type AzStyleBorderRightColorValueTT = azul_impl::css::CssPropertyValue::<StyleBorderRightColor>;
pub use AzStyleBorderRightColorValueTT as AzStyleBorderRightColorValue;
/// Destructor: Takes ownership of the `StyleBorderRightColorValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_right_color_value_delete(object: &mut AzStyleBorderRightColorValue) { match object { azul_impl::css::CssPropertyValue::<StyleBorderRightColor>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleBorderRightColor>::None => { }, azul_impl::css::CssPropertyValue::<StyleBorderRightColor>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleBorderRightColor>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleBorderRightColor>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_right_color_value_deep_copy(object: &AzStyleBorderRightColorValue) -> AzStyleBorderRightColorValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_right_color_value_fmt_debug(object: &AzStyleBorderRightColorValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderRightStyleValue` struct
pub type AzStyleBorderRightStyleValueTT = azul_impl::css::CssPropertyValue::<StyleBorderRightStyle>;
pub use AzStyleBorderRightStyleValueTT as AzStyleBorderRightStyleValue;
/// Destructor: Takes ownership of the `StyleBorderRightStyleValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_right_style_value_delete(object: &mut AzStyleBorderRightStyleValue) { match object { azul_impl::css::CssPropertyValue::<StyleBorderRightStyle>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleBorderRightStyle>::None => { }, azul_impl::css::CssPropertyValue::<StyleBorderRightStyle>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleBorderRightStyle>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleBorderRightStyle>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_right_style_value_deep_copy(object: &AzStyleBorderRightStyleValue) -> AzStyleBorderRightStyleValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_right_style_value_fmt_debug(object: &AzStyleBorderRightStyleValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderRightWidthValue` struct
pub type AzStyleBorderRightWidthValueTT = azul_impl::css::CssPropertyValue::<StyleBorderRightWidth>;
pub use AzStyleBorderRightWidthValueTT as AzStyleBorderRightWidthValue;
/// Destructor: Takes ownership of the `StyleBorderRightWidthValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_right_width_value_delete(object: &mut AzStyleBorderRightWidthValue) { match object { azul_impl::css::CssPropertyValue::<StyleBorderRightWidth>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleBorderRightWidth>::None => { }, azul_impl::css::CssPropertyValue::<StyleBorderRightWidth>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleBorderRightWidth>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleBorderRightWidth>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_right_width_value_deep_copy(object: &AzStyleBorderRightWidthValue) -> AzStyleBorderRightWidthValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_right_width_value_fmt_debug(object: &AzStyleBorderRightWidthValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderTopColorValue` struct
pub type AzStyleBorderTopColorValueTT = azul_impl::css::CssPropertyValue::<StyleBorderTopColor>;
pub use AzStyleBorderTopColorValueTT as AzStyleBorderTopColorValue;
/// Destructor: Takes ownership of the `StyleBorderTopColorValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_top_color_value_delete(object: &mut AzStyleBorderTopColorValue) { match object { azul_impl::css::CssPropertyValue::<StyleBorderTopColor>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleBorderTopColor>::None => { }, azul_impl::css::CssPropertyValue::<StyleBorderTopColor>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleBorderTopColor>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleBorderTopColor>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_top_color_value_deep_copy(object: &AzStyleBorderTopColorValue) -> AzStyleBorderTopColorValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_top_color_value_fmt_debug(object: &AzStyleBorderTopColorValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderTopLeftRadiusValue` struct
pub type AzStyleBorderTopLeftRadiusValueTT = azul_impl::css::CssPropertyValue::<StyleBorderTopLeftRadius>;
pub use AzStyleBorderTopLeftRadiusValueTT as AzStyleBorderTopLeftRadiusValue;
/// Destructor: Takes ownership of the `StyleBorderTopLeftRadiusValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_top_left_radius_value_delete(object: &mut AzStyleBorderTopLeftRadiusValue) { match object { azul_impl::css::CssPropertyValue::<StyleBorderTopLeftRadius>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleBorderTopLeftRadius>::None => { }, azul_impl::css::CssPropertyValue::<StyleBorderTopLeftRadius>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleBorderTopLeftRadius>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleBorderTopLeftRadius>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_top_left_radius_value_deep_copy(object: &AzStyleBorderTopLeftRadiusValue) -> AzStyleBorderTopLeftRadiusValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_top_left_radius_value_fmt_debug(object: &AzStyleBorderTopLeftRadiusValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderTopRightRadiusValue` struct
pub type AzStyleBorderTopRightRadiusValueTT = azul_impl::css::CssPropertyValue::<StyleBorderTopRightRadius>;
pub use AzStyleBorderTopRightRadiusValueTT as AzStyleBorderTopRightRadiusValue;
/// Destructor: Takes ownership of the `StyleBorderTopRightRadiusValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_top_right_radius_value_delete(object: &mut AzStyleBorderTopRightRadiusValue) { match object { azul_impl::css::CssPropertyValue::<StyleBorderTopRightRadius>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleBorderTopRightRadius>::None => { }, azul_impl::css::CssPropertyValue::<StyleBorderTopRightRadius>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleBorderTopRightRadius>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleBorderTopRightRadius>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_top_right_radius_value_deep_copy(object: &AzStyleBorderTopRightRadiusValue) -> AzStyleBorderTopRightRadiusValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_top_right_radius_value_fmt_debug(object: &AzStyleBorderTopRightRadiusValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderTopStyleValue` struct
pub type AzStyleBorderTopStyleValueTT = azul_impl::css::CssPropertyValue::<StyleBorderTopStyle>;
pub use AzStyleBorderTopStyleValueTT as AzStyleBorderTopStyleValue;
/// Destructor: Takes ownership of the `StyleBorderTopStyleValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_top_style_value_delete(object: &mut AzStyleBorderTopStyleValue) { match object { azul_impl::css::CssPropertyValue::<StyleBorderTopStyle>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleBorderTopStyle>::None => { }, azul_impl::css::CssPropertyValue::<StyleBorderTopStyle>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleBorderTopStyle>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleBorderTopStyle>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_top_style_value_deep_copy(object: &AzStyleBorderTopStyleValue) -> AzStyleBorderTopStyleValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_top_style_value_fmt_debug(object: &AzStyleBorderTopStyleValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderTopWidthValue` struct
pub type AzStyleBorderTopWidthValueTT = azul_impl::css::CssPropertyValue::<StyleBorderTopWidth>;
pub use AzStyleBorderTopWidthValueTT as AzStyleBorderTopWidthValue;
/// Destructor: Takes ownership of the `StyleBorderTopWidthValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_top_width_value_delete(object: &mut AzStyleBorderTopWidthValue) { match object { azul_impl::css::CssPropertyValue::<StyleBorderTopWidth>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleBorderTopWidth>::None => { }, azul_impl::css::CssPropertyValue::<StyleBorderTopWidth>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleBorderTopWidth>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleBorderTopWidth>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_top_width_value_deep_copy(object: &AzStyleBorderTopWidthValue) -> AzStyleBorderTopWidthValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_top_width_value_fmt_debug(object: &AzStyleBorderTopWidthValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleCursorValue` struct
pub type AzStyleCursorValueTT = azul_impl::css::CssPropertyValue::<StyleCursor>;
pub use AzStyleCursorValueTT as AzStyleCursorValue;
/// Destructor: Takes ownership of the `StyleCursorValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_cursor_value_delete(object: &mut AzStyleCursorValue) { match object { azul_impl::css::CssPropertyValue::<StyleCursor>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleCursor>::None => { }, azul_impl::css::CssPropertyValue::<StyleCursor>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleCursor>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleCursor>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_cursor_value_deep_copy(object: &AzStyleCursorValue) -> AzStyleCursorValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_cursor_value_fmt_debug(object: &AzStyleCursorValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleFontFamilyValue` struct
pub type AzStyleFontFamilyValueTT = azul_impl::css::CssPropertyValue::<StyleFontFamily>;
pub use AzStyleFontFamilyValueTT as AzStyleFontFamilyValue;
/// Destructor: Takes ownership of the `StyleFontFamilyValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_font_family_value_delete(object: &mut AzStyleFontFamilyValue) { match object { azul_impl::css::CssPropertyValue::<StyleFontFamily>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleFontFamily>::None => { }, azul_impl::css::CssPropertyValue::<StyleFontFamily>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleFontFamily>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleFontFamily>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_font_family_value_deep_copy(object: &AzStyleFontFamilyValue) -> AzStyleFontFamilyValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_font_family_value_fmt_debug(object: &AzStyleFontFamilyValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleFontSizeValue` struct
pub type AzStyleFontSizeValueTT = azul_impl::css::CssPropertyValue::<StyleFontSize>;
pub use AzStyleFontSizeValueTT as AzStyleFontSizeValue;
/// Destructor: Takes ownership of the `StyleFontSizeValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_font_size_value_delete(object: &mut AzStyleFontSizeValue) { match object { azul_impl::css::CssPropertyValue::<StyleFontSize>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleFontSize>::None => { }, azul_impl::css::CssPropertyValue::<StyleFontSize>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleFontSize>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleFontSize>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_font_size_value_deep_copy(object: &AzStyleFontSizeValue) -> AzStyleFontSizeValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_font_size_value_fmt_debug(object: &AzStyleFontSizeValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleLetterSpacingValue` struct
pub type AzStyleLetterSpacingValueTT = azul_impl::css::CssPropertyValue::<StyleLetterSpacing>;
pub use AzStyleLetterSpacingValueTT as AzStyleLetterSpacingValue;
/// Destructor: Takes ownership of the `StyleLetterSpacingValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_letter_spacing_value_delete(object: &mut AzStyleLetterSpacingValue) { match object { azul_impl::css::CssPropertyValue::<StyleLetterSpacing>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleLetterSpacing>::None => { }, azul_impl::css::CssPropertyValue::<StyleLetterSpacing>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleLetterSpacing>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleLetterSpacing>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_letter_spacing_value_deep_copy(object: &AzStyleLetterSpacingValue) -> AzStyleLetterSpacingValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_letter_spacing_value_fmt_debug(object: &AzStyleLetterSpacingValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleLineHeightValue` struct
pub type AzStyleLineHeightValueTT = azul_impl::css::CssPropertyValue::<StyleLineHeight>;
pub use AzStyleLineHeightValueTT as AzStyleLineHeightValue;
/// Destructor: Takes ownership of the `StyleLineHeightValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_line_height_value_delete(object: &mut AzStyleLineHeightValue) { match object { azul_impl::css::CssPropertyValue::<StyleLineHeight>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleLineHeight>::None => { }, azul_impl::css::CssPropertyValue::<StyleLineHeight>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleLineHeight>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleLineHeight>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_line_height_value_deep_copy(object: &AzStyleLineHeightValue) -> AzStyleLineHeightValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_line_height_value_fmt_debug(object: &AzStyleLineHeightValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleTabWidthValue` struct
pub type AzStyleTabWidthValueTT = azul_impl::css::CssPropertyValue::<StyleTabWidth>;
pub use AzStyleTabWidthValueTT as AzStyleTabWidthValue;
/// Destructor: Takes ownership of the `StyleTabWidthValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_tab_width_value_delete(object: &mut AzStyleTabWidthValue) { match object { azul_impl::css::CssPropertyValue::<StyleTabWidth>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleTabWidth>::None => { }, azul_impl::css::CssPropertyValue::<StyleTabWidth>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleTabWidth>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleTabWidth>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_tab_width_value_deep_copy(object: &AzStyleTabWidthValue) -> AzStyleTabWidthValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_tab_width_value_fmt_debug(object: &AzStyleTabWidthValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleTextAlignmentHorzValue` struct
pub type AzStyleTextAlignmentHorzValueTT = azul_impl::css::CssPropertyValue::<StyleTextAlignmentHorz>;
pub use AzStyleTextAlignmentHorzValueTT as AzStyleTextAlignmentHorzValue;
/// Destructor: Takes ownership of the `StyleTextAlignmentHorzValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_text_alignment_horz_value_delete(object: &mut AzStyleTextAlignmentHorzValue) { match object { azul_impl::css::CssPropertyValue::<StyleTextAlignmentHorz>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleTextAlignmentHorz>::None => { }, azul_impl::css::CssPropertyValue::<StyleTextAlignmentHorz>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleTextAlignmentHorz>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleTextAlignmentHorz>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_text_alignment_horz_value_deep_copy(object: &AzStyleTextAlignmentHorzValue) -> AzStyleTextAlignmentHorzValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_text_alignment_horz_value_fmt_debug(object: &AzStyleTextAlignmentHorzValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleTextColorValue` struct
pub type AzStyleTextColorValueTT = azul_impl::css::CssPropertyValue::<StyleTextColor>;
pub use AzStyleTextColorValueTT as AzStyleTextColorValue;
/// Destructor: Takes ownership of the `StyleTextColorValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_text_color_value_delete(object: &mut AzStyleTextColorValue) { match object { azul_impl::css::CssPropertyValue::<StyleTextColor>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleTextColor>::None => { }, azul_impl::css::CssPropertyValue::<StyleTextColor>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleTextColor>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleTextColor>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_text_color_value_deep_copy(object: &AzStyleTextColorValue) -> AzStyleTextColorValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_text_color_value_fmt_debug(object: &AzStyleTextColorValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleWordSpacingValue` struct
pub type AzStyleWordSpacingValueTT = azul_impl::css::CssPropertyValue::<StyleWordSpacing>;
pub use AzStyleWordSpacingValueTT as AzStyleWordSpacingValue;
/// Destructor: Takes ownership of the `StyleWordSpacingValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_word_spacing_value_delete(object: &mut AzStyleWordSpacingValue) { match object { azul_impl::css::CssPropertyValue::<StyleWordSpacing>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleWordSpacing>::None => { }, azul_impl::css::CssPropertyValue::<StyleWordSpacing>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleWordSpacing>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleWordSpacing>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_word_spacing_value_deep_copy(object: &AzStyleWordSpacingValue) -> AzStyleWordSpacingValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_word_spacing_value_fmt_debug(object: &AzStyleWordSpacingValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleOpacityValue` struct
pub type AzStyleOpacityValueTT = azul_impl::css::CssPropertyValue::<StyleOpacity>;
pub use AzStyleOpacityValueTT as AzStyleOpacityValue;
/// Destructor: Takes ownership of the `StyleOpacityValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_opacity_value_delete(object: &mut AzStyleOpacityValue) { match object { azul_impl::css::CssPropertyValue::<StyleOpacity>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleOpacity>::None => { }, azul_impl::css::CssPropertyValue::<StyleOpacity>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleOpacity>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleOpacity>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_opacity_value_deep_copy(object: &AzStyleOpacityValue) -> AzStyleOpacityValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_opacity_value_fmt_debug(object: &AzStyleOpacityValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleTransformVecValue` struct
pub type AzStyleTransformVecValueTT = azul_impl::css::CssPropertyValue::<StyleTransformVec>;
pub use AzStyleTransformVecValueTT as AzStyleTransformVecValue;
/// Destructor: Takes ownership of the `StyleTransformVecValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_transform_vec_value_delete(object: &mut AzStyleTransformVecValue) { match object { azul_impl::css::CssPropertyValue::<StyleTransformVec>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleTransformVec>::None => { }, azul_impl::css::CssPropertyValue::<StyleTransformVec>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleTransformVec>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleTransformVec>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_transform_vec_value_deep_copy(object: &AzStyleTransformVecValue) -> AzStyleTransformVecValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_transform_vec_value_fmt_debug(object: &AzStyleTransformVecValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleTransformOriginValue` struct
pub type AzStyleTransformOriginValueTT = azul_impl::css::CssPropertyValue::<StyleTransformOrigin>;
pub use AzStyleTransformOriginValueTT as AzStyleTransformOriginValue;
/// Destructor: Takes ownership of the `StyleTransformOriginValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_transform_origin_value_delete(object: &mut AzStyleTransformOriginValue) { match object { azul_impl::css::CssPropertyValue::<StyleTransformOrigin>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleTransformOrigin>::None => { }, azul_impl::css::CssPropertyValue::<StyleTransformOrigin>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleTransformOrigin>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleTransformOrigin>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_transform_origin_value_deep_copy(object: &AzStyleTransformOriginValue) -> AzStyleTransformOriginValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_transform_origin_value_fmt_debug(object: &AzStyleTransformOriginValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StylePerspectiveOriginValue` struct
pub type AzStylePerspectiveOriginValueTT = azul_impl::css::CssPropertyValue::<StylePerspectiveOrigin>;
pub use AzStylePerspectiveOriginValueTT as AzStylePerspectiveOriginValue;
/// Destructor: Takes ownership of the `StylePerspectiveOriginValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_perspective_origin_value_delete(object: &mut AzStylePerspectiveOriginValue) { match object { azul_impl::css::CssPropertyValue::<StylePerspectiveOrigin>::Auto => { }, azul_impl::css::CssPropertyValue::<StylePerspectiveOrigin>::None => { }, azul_impl::css::CssPropertyValue::<StylePerspectiveOrigin>::Inherit => { }, azul_impl::css::CssPropertyValue::<StylePerspectiveOrigin>::Initial => { }, azul_impl::css::CssPropertyValue::<StylePerspectiveOrigin>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_perspective_origin_value_deep_copy(object: &AzStylePerspectiveOriginValue) -> AzStylePerspectiveOriginValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_perspective_origin_value_fmt_debug(object: &AzStylePerspectiveOriginValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBackfaceVisibilityValue` struct
pub type AzStyleBackfaceVisibilityValueTT = azul_impl::css::CssPropertyValue::<StyleBackfaceVisibility>;
pub use AzStyleBackfaceVisibilityValueTT as AzStyleBackfaceVisibilityValue;
/// Destructor: Takes ownership of the `StyleBackfaceVisibilityValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_backface_visibility_value_delete(object: &mut AzStyleBackfaceVisibilityValue) { match object { azul_impl::css::CssPropertyValue::<StyleBackfaceVisibility>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleBackfaceVisibility>::None => { }, azul_impl::css::CssPropertyValue::<StyleBackfaceVisibility>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleBackfaceVisibility>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleBackfaceVisibility>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_backface_visibility_value_deep_copy(object: &AzStyleBackfaceVisibilityValue) -> AzStyleBackfaceVisibilityValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_backface_visibility_value_fmt_debug(object: &AzStyleBackfaceVisibilityValue) -> AzString { format!("{:#?}", object).into() }

/// Parsed CSS key-value pair
pub type AzCssPropertyTT = azul_impl::css::CssProperty;
pub use AzCssPropertyTT as AzCssProperty;
/// Destructor: Takes ownership of the `CssProperty` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_css_property_delete(object: &mut AzCssProperty) { match object { azul_impl::css::CssProperty::TextColor(_) => { }, azul_impl::css::CssProperty::FontSize(_) => { }, azul_impl::css::CssProperty::FontFamily(_) => { }, azul_impl::css::CssProperty::TextAlign(_) => { }, azul_impl::css::CssProperty::LetterSpacing(_) => { }, azul_impl::css::CssProperty::LineHeight(_) => { }, azul_impl::css::CssProperty::WordSpacing(_) => { }, azul_impl::css::CssProperty::TabWidth(_) => { }, azul_impl::css::CssProperty::Cursor(_) => { }, azul_impl::css::CssProperty::Display(_) => { }, azul_impl::css::CssProperty::Float(_) => { }, azul_impl::css::CssProperty::BoxSizing(_) => { }, azul_impl::css::CssProperty::Width(_) => { }, azul_impl::css::CssProperty::Height(_) => { }, azul_impl::css::CssProperty::MinWidth(_) => { }, azul_impl::css::CssProperty::MinHeight(_) => { }, azul_impl::css::CssProperty::MaxWidth(_) => { }, azul_impl::css::CssProperty::MaxHeight(_) => { }, azul_impl::css::CssProperty::Position(_) => { }, azul_impl::css::CssProperty::Top(_) => { }, azul_impl::css::CssProperty::Right(_) => { }, azul_impl::css::CssProperty::Left(_) => { }, azul_impl::css::CssProperty::Bottom(_) => { }, azul_impl::css::CssProperty::FlexWrap(_) => { }, azul_impl::css::CssProperty::FlexDirection(_) => { }, azul_impl::css::CssProperty::FlexGrow(_) => { }, azul_impl::css::CssProperty::FlexShrink(_) => { }, azul_impl::css::CssProperty::JustifyContent(_) => { }, azul_impl::css::CssProperty::AlignItems(_) => { }, azul_impl::css::CssProperty::AlignContent(_) => { }, azul_impl::css::CssProperty::BackgroundContent(_) => { }, azul_impl::css::CssProperty::BackgroundPosition(_) => { }, azul_impl::css::CssProperty::BackgroundSize(_) => { }, azul_impl::css::CssProperty::BackgroundRepeat(_) => { }, azul_impl::css::CssProperty::OverflowX(_) => { }, azul_impl::css::CssProperty::OverflowY(_) => { }, azul_impl::css::CssProperty::PaddingTop(_) => { }, azul_impl::css::CssProperty::PaddingLeft(_) => { }, azul_impl::css::CssProperty::PaddingRight(_) => { }, azul_impl::css::CssProperty::PaddingBottom(_) => { }, azul_impl::css::CssProperty::MarginTop(_) => { }, azul_impl::css::CssProperty::MarginLeft(_) => { }, azul_impl::css::CssProperty::MarginRight(_) => { }, azul_impl::css::CssProperty::MarginBottom(_) => { }, azul_impl::css::CssProperty::BorderTopLeftRadius(_) => { }, azul_impl::css::CssProperty::BorderTopRightRadius(_) => { }, azul_impl::css::CssProperty::BorderBottomLeftRadius(_) => { }, azul_impl::css::CssProperty::BorderBottomRightRadius(_) => { }, azul_impl::css::CssProperty::BorderTopColor(_) => { }, azul_impl::css::CssProperty::BorderRightColor(_) => { }, azul_impl::css::CssProperty::BorderLeftColor(_) => { }, azul_impl::css::CssProperty::BorderBottomColor(_) => { }, azul_impl::css::CssProperty::BorderTopStyle(_) => { }, azul_impl::css::CssProperty::BorderRightStyle(_) => { }, azul_impl::css::CssProperty::BorderLeftStyle(_) => { }, azul_impl::css::CssProperty::BorderBottomStyle(_) => { }, azul_impl::css::CssProperty::BorderTopWidth(_) => { }, azul_impl::css::CssProperty::BorderRightWidth(_) => { }, azul_impl::css::CssProperty::BorderLeftWidth(_) => { }, azul_impl::css::CssProperty::BorderBottomWidth(_) => { }, azul_impl::css::CssProperty::BoxShadowLeft(_) => { }, azul_impl::css::CssProperty::BoxShadowRight(_) => { }, azul_impl::css::CssProperty::BoxShadowTop(_) => { }, azul_impl::css::CssProperty::BoxShadowBottom(_) => { }, azul_impl::css::CssProperty::Opacity(_) => { }, azul_impl::css::CssProperty::Transform(_) => { }, azul_impl::css::CssProperty::TransformOrigin(_) => { }, azul_impl::css::CssProperty::PerspectiveOrigin(_) => { }, azul_impl::css::CssProperty::BackfaceVisibility(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_css_property_deep_copy(object: &AzCssProperty) -> AzCssProperty { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_css_property_fmt_debug(object: &AzCssProperty) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `Node` struct
pub type AzNodeTT = azul_impl::styled_dom::AzNode;
pub use AzNodeTT as AzNode;
/// Destructor: Takes ownership of the `Node` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_node_delete(object: &mut AzNode) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_node_deep_copy(object: &AzNode) -> AzNode { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_node_fmt_debug(object: &AzNode) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `CascadeInfo` struct
pub type AzCascadeInfoTT = azul_impl::style::CascadeInfo;
pub use AzCascadeInfoTT as AzCascadeInfo;
/// Destructor: Takes ownership of the `CascadeInfo` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_cascade_info_delete(object: &mut AzCascadeInfo) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_cascade_info_deep_copy(object: &AzCascadeInfo) -> AzCascadeInfo { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_cascade_info_fmt_debug(object: &AzCascadeInfo) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `RectStyle` struct
pub type AzRectStyleTT = azul_impl::css::RectStyle;
pub use AzRectStyleTT as AzRectStyle;
/// Destructor: Takes ownership of the `RectStyle` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_rect_style_delete(object: &mut AzRectStyle) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_rect_style_deep_copy(object: &AzRectStyle) -> AzRectStyle { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_rect_style_fmt_debug(object: &AzRectStyle) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `RectLayout` struct
pub type AzRectLayoutTT = azul_impl::css::RectLayout;
pub use AzRectLayoutTT as AzRectLayout;
/// Destructor: Takes ownership of the `RectLayout` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_rect_layout_delete(object: &mut AzRectLayout) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_rect_layout_deep_copy(object: &AzRectLayout) -> AzRectLayout { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_rect_layout_fmt_debug(object: &AzRectLayout) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `CascadedCssPropertyWithSource` struct
pub type AzCascadedCssPropertyWithSourceTT = azul_impl::styled_dom::CascadedCssPropertyWithSource;
pub use AzCascadedCssPropertyWithSourceTT as AzCascadedCssPropertyWithSource;
/// Destructor: Takes ownership of the `CascadedCssPropertyWithSource` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_cascaded_css_property_with_source_delete(object: &mut AzCascadedCssPropertyWithSource) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_cascaded_css_property_with_source_deep_copy(object: &AzCascadedCssPropertyWithSource) -> AzCascadedCssPropertyWithSource { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_cascaded_css_property_with_source_fmt_debug(object: &AzCascadedCssPropertyWithSource) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `CssPropertySource` struct
pub type AzCssPropertySourceTT = azul_impl::styled_dom::CssPropertySource;
pub use AzCssPropertySourceTT as AzCssPropertySource;
/// Destructor: Takes ownership of the `CssPropertySource` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_css_property_source_delete(object: &mut AzCssPropertySource) { match object { azul_impl::styled_dom::CssPropertySource::Css(_) => { }, azul_impl::styled_dom::CssPropertySource::Inline => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_css_property_source_deep_copy(object: &AzCssPropertySource) -> AzCssPropertySource { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_css_property_source_fmt_debug(object: &AzCssPropertySource) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyledNodeState` struct
pub type AzStyledNodeStateTT = azul_impl::styled_dom::StyledNodeState;
pub use AzStyledNodeStateTT as AzStyledNodeState;
/// Destructor: Takes ownership of the `StyledNodeState` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_styled_node_state_delete(object: &mut AzStyledNodeState) { match object { azul_impl::styled_dom::StyledNodeState::Uninitialized => { }, azul_impl::styled_dom::StyledNodeState::Normal => { }, azul_impl::styled_dom::StyledNodeState::Hover => { }, azul_impl::styled_dom::StyledNodeState::Active => { }, azul_impl::styled_dom::StyledNodeState::Focused => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_styled_node_state_deep_copy(object: &AzStyledNodeState) -> AzStyledNodeState { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_styled_node_state_fmt_debug(object: &AzStyledNodeState) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyledNode` struct
pub type AzStyledNodeTT = azul_impl::styled_dom::StyledNode;
pub use AzStyledNodeTT as AzStyledNode;
/// Destructor: Takes ownership of the `StyledNode` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_styled_node_delete(object: &mut AzStyledNode) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_styled_node_deep_copy(object: &AzStyledNode) -> AzStyledNode { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_styled_node_fmt_debug(object: &AzStyledNode) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `TagId` struct
pub type AzTagIdTT = azul_impl::styled_dom::AzTagId;
pub use AzTagIdTT as AzTagId;
/// Destructor: Takes ownership of the `TagId` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_tag_id_delete(object: &mut AzTagId) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_tag_id_deep_copy(object: &AzTagId) -> AzTagId { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_tag_id_fmt_debug(object: &AzTagId) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `TagIdToNodeIdMapping` struct
pub type AzTagIdToNodeIdMappingTT = azul_impl::styled_dom::TagIdToNodeIdMapping;
pub use AzTagIdToNodeIdMappingTT as AzTagIdToNodeIdMapping;
/// Destructor: Takes ownership of the `TagIdToNodeIdMapping` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_tag_id_to_node_id_mapping_delete(object: &mut AzTagIdToNodeIdMapping) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_tag_id_to_node_id_mapping_deep_copy(object: &AzTagIdToNodeIdMapping) -> AzTagIdToNodeIdMapping { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_tag_id_to_node_id_mapping_fmt_debug(object: &AzTagIdToNodeIdMapping) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `ParentWithNodeDepth` struct
pub type AzParentWithNodeDepthTT = azul_impl::styled_dom::ParentWithNodeDepth;
pub use AzParentWithNodeDepthTT as AzParentWithNodeDepth;
/// Destructor: Takes ownership of the `ParentWithNodeDepth` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_parent_with_node_depth_delete(object: &mut AzParentWithNodeDepth) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_parent_with_node_depth_deep_copy(object: &AzParentWithNodeDepth) -> AzParentWithNodeDepth { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_parent_with_node_depth_fmt_debug(object: &AzParentWithNodeDepth) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `ContentGroup` struct
pub type AzContentGroupTT = azul_impl::styled_dom::ContentGroup;
pub use AzContentGroupTT as AzContentGroup;
/// Destructor: Takes ownership of the `ContentGroup` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_content_group_delete(object: &mut AzContentGroup) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_content_group_deep_copy(object: &AzContentGroup) -> AzContentGroup { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_content_group_fmt_debug(object: &AzContentGroup) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyledDom` struct
pub type AzStyledDomTT = azul_impl::styled_dom::StyledDom;
pub use AzStyledDomTT as AzStyledDom;
/// Styles a `Dom` with the given `Css`, returning the `StyledDom` - complexity `O(count(dom_nodes) * count(css_blocks))`: make sure that the `Dom` and the `Css` are as small as possible, use inline CSS if the performance isn't good enough
#[no_mangle] pub extern "C" fn az_styled_dom_new(dom: AzDom, css: AzCss) -> AzStyledDom { AzStyledDom::new(dom, css) }
/// Appends an already styled list of DOM nodes to the current `dom.root` - complexity `O(count(dom.dom_nodes))`
#[no_mangle] pub extern "C" fn az_styled_dom_append(styleddom: &mut AzStyledDom, dom: AzStyledDom) { styleddom.append(dom); }
/// Destructor: Takes ownership of the `StyledDom` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_styled_dom_delete(object: &mut AzStyledDom) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_styled_dom_deep_copy(object: &AzStyledDom) -> AzStyledDom { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_styled_dom_fmt_debug(object: &AzStyledDom) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `Dom` struct
pub type AzDomTT = azul_impl::dom::Dom;
pub use AzDomTT as AzDom;
/// Creates a new node with the given `NodeType`
#[no_mangle] pub extern "C" fn az_dom_new(node_type: AzNodeType) -> AzDom { Dom::new(node_type) }
/// Creates a new `div` node
#[no_mangle] pub extern "C" fn az_dom_div() -> AzDom { Dom::div() }
/// Creates a new `body` node
#[no_mangle] pub extern "C" fn az_dom_body() -> AzDom { Dom::body() }
/// Creates a new `p` node with a given `String` as the text contents
#[no_mangle] pub extern "C" fn az_dom_label(text: AzString) -> AzDom { Dom::label(text) }
/// Creates a new `p` node from a (cached) text referenced by a `TextId`
#[no_mangle] pub extern "C" fn az_dom_text(text_id: AzTextId) -> AzDom { Dom::text(text_id) }
/// Creates a new `img` node from a (cached) text referenced by a `ImageId`
#[no_mangle] pub extern "C" fn az_dom_image(image_id: AzImageId) -> AzDom { Dom::image(image_id) }
/// Creates a new node which will render an OpenGL texture after the layout step is finished. See the documentation for [GlCallback]() for more info about OpenGL rendering callbacks.
#[no_mangle] pub extern "C" fn az_dom_gl_texture(data: AzRefAny, callback: AzGlCallbackType) -> AzDom { Dom::gl_texture(callback, data) }
/// Creates a new node with a callback that will return a `Dom` after being layouted. See the documentation for [IFrameCallback]() for more info about iframe callbacks.
#[no_mangle] pub extern "C" fn az_dom_iframe(data: AzRefAny, callback: AzIFrameCallbackType) -> AzDom { Dom::iframe(callback, data) }
/// Adds a CSS ID (`#something`) to the DOM node
#[no_mangle] pub extern "C" fn az_dom_add_id(dom: &mut AzDom, id: AzString) { dom.add_id(id); }
/// Same as [`Dom::add_id`](#method.add_id), but as a builder method
#[no_mangle] pub extern "C" fn az_dom_with_id(mut dom: AzDom, id: AzString) -> AzDom { az_dom_add_id(&mut dom, id); dom }
/// Same as calling [`Dom::add_id`](#method.add_id) for each CSS ID, but this function **replaces** all current CSS IDs
#[no_mangle] pub extern "C" fn az_dom_set_ids(dom: &mut AzDom, ids: AzStringVec) { dom.set_ids(ids); }
/// Same as [`Dom::set_ids`](#method.set_ids), but as a builder method
#[no_mangle] pub extern "C" fn az_dom_with_ids(mut dom: AzDom, ids: AzStringVec) -> AzDom { az_dom_set_ids(&mut dom, ids); dom }
/// Adds a CSS class (`.something`) to the DOM node
#[no_mangle] pub extern "C" fn az_dom_add_class(dom: &mut AzDom, class: AzString) { dom.add_class(class); }
/// Same as [`Dom::add_class`](#method.add_class), but as a builder method
#[no_mangle] pub extern "C" fn az_dom_with_class(mut dom: AzDom, class: AzString) -> AzDom { az_dom_add_class(&mut dom, class); dom }
/// Same as calling [`Dom::add_class`](#method.add_class) for each class, but this function **replaces** all current classes
#[no_mangle] pub extern "C" fn az_dom_set_classes(dom: &mut AzDom, classes: AzStringVec) { dom.set_classes(classes); }
/// Same as [`Dom::set_classes`](#method.set_classes), but as a builder method
#[no_mangle] pub extern "C" fn az_dom_with_classes(mut dom: AzDom, classes: AzStringVec) -> AzDom { az_dom_set_classes(&mut dom, classes); dom }
/// Adds a [`Callback`](callbacks/type.Callback) that acts on the `data` the `event` happens
#[no_mangle] pub extern "C" fn az_dom_add_callback(dom: &mut AzDom, event: AzEventFilter, data: AzRefAny, callback: AzCallbackType) { dom.add_callback(event, callback, data); }
/// Same as [`Dom::add_callback`](#method.add_callback), but as a builder method
#[no_mangle] pub extern "C" fn az_dom_with_callback(mut dom: AzDom, event: AzEventFilter, data: AzRefAny, callback: AzCallbackType) -> AzDom { az_dom_add_callback(&mut dom, event, data, callback); dom }
/// Adds a dataset to the `Dom` root
#[no_mangle] pub extern "C" fn az_dom_set_dataset(dom: &mut AzDom, data: AzRefAny) { dom.set_dataset(data); }
/// Same as [`Dom::set_dataset`](#method.set_dataset), but as a builder method
#[no_mangle] pub extern "C" fn az_dom_with_dataset(mut dom: AzDom, data: AzRefAny) -> AzDom { az_dom_set_dataset(&mut dom, data); dom }
/// Overrides the CSS property of this DOM node with a value (for example `"width = 200px"`)
#[no_mangle] pub extern "C" fn az_dom_add_inline_css(dom: &mut AzDom, prop: AzCssProperty) { dom.add_inline_css(prop); }
/// Same as [`Dom::add_inline_css`](#method.add_inline_css), but as a builder method
#[no_mangle] pub extern "C" fn az_dom_with_inline_css(mut dom: AzDom, prop: AzCssProperty) -> AzDom { az_dom_add_inline_css(&mut dom, prop); dom }
/// Overrides the CSS property of this DOM node with a value (for example `"width = 200px"`)
#[no_mangle] pub extern "C" fn az_dom_add_inline_hover_css(dom: &mut AzDom, prop: AzCssProperty) { dom.add_inline_hover_css(prop); }
/// Same as [`Dom::add_inline_hover_css`](#method.add_inline_hover_css), but as a builder method
#[no_mangle] pub extern "C" fn az_dom_with_inline_hover_css(mut dom: AzDom, prop: AzCssProperty) -> AzDom { az_dom_add_inline_hover_css(&mut dom, prop); dom }
/// Overrides the CSS property of this DOM node with a value (for example `"width = 200px"`)
#[no_mangle] pub extern "C" fn az_dom_add_inline_active_css(dom: &mut AzDom, prop: AzCssProperty) { dom.add_inline_active_css(prop); }
/// Same as [`Dom::add_inline_active_css`](#method.add_inline_active_css), but as a builder method
#[no_mangle] pub extern "C" fn az_dom_with_inline_active_css(mut dom: AzDom, prop: AzCssProperty) -> AzDom { az_dom_add_inline_active_css(&mut dom, prop); dom }
/// Overrides the CSS property of this DOM node with a value (for example `"width = 200px"`)
#[no_mangle] pub extern "C" fn az_dom_add_inline_focus_css(dom: &mut AzDom, prop: AzCssProperty) { dom.add_inline_focus_css(prop); }
/// Same as [`Dom::add_inline_focus_css`](#method.add_inline_active_css), but as a builder method
#[no_mangle] pub extern "C" fn az_dom_with_inline_focus_css(mut dom: AzDom, prop: AzCssProperty) -> AzDom { az_dom_add_inline_focus_css(&mut dom, prop); dom }
/// Sets the `is_draggable` attribute of this DOM node (default: false)
#[no_mangle] pub extern "C" fn az_dom_set_is_draggable(dom: &mut AzDom, is_draggable: bool) { dom.set_is_draggable(is_draggable); }
/// Same as [`Dom::set_clip_mask`](#method.set_clip_mask), but as a builder method
#[no_mangle] pub extern "C" fn az_dom_with_clip_mask(mut dom: AzDom, clip_mask: AzOptionImageMask) -> AzDom { az_dom_set_clip_mask(&mut dom, clip_mask); dom }
/// Sets the `clip_mask` attribute of this DOM node (default: None)
#[no_mangle] pub extern "C" fn az_dom_set_clip_mask(dom: &mut AzDom, clip_mask: AzOptionImageMask) { dom.set_clip_mask(clip_mask); }
/// Same as [`Dom::set_is_draggable`](#method.set_is_draggable), but as a builder method
#[no_mangle] pub extern "C" fn az_dom_is_draggable(mut dom: AzDom, is_draggable: bool) -> AzDom { az_dom_set_is_draggable(&mut dom, is_draggable); dom }
/// Sets the `tabindex` attribute of this DOM node (makes an element focusable - default: None)
#[no_mangle] pub extern "C" fn az_dom_set_tab_index(dom: &mut AzDom, tab_index: AzOptionTabIndex) { dom.set_tab_index(tab_index); }
/// Same as [`Dom::set_tab_index`](#method.set_tab_index), but as a builder method
#[no_mangle] pub extern "C" fn az_dom_with_tab_index(mut dom: AzDom, tab_index: AzOptionTabIndex) -> AzDom { az_dom_set_tab_index(&mut dom, tab_index); dom }
/// Reparents another `Dom` to be the child node of this `Dom`
#[no_mangle] pub extern "C" fn az_dom_add_child(dom: &mut AzDom, child: AzDom) { dom.add_child(child); }
/// Same as [`Dom::add_child`](#method.add_child), but as a builder method
#[no_mangle] pub extern "C" fn az_dom_with_child(mut dom: AzDom, child: AzDom) -> AzDom { az_dom_add_child(&mut dom, child); dom }
/// Returns the HTML String for this DOM
#[no_mangle] pub extern "C" fn az_dom_get_html_string(dom: &AzDom) -> AzString { dom.get_html_string().into() }
/// Destructor: Takes ownership of the `Dom` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_dom_delete(object: &mut AzDom) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_dom_deep_copy(object: &AzDom) -> AzDom { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_dom_fmt_debug(object: &AzDom) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `GlTextureNode` struct
pub type AzGlTextureNodeTT = azul_impl::dom::GlTextureNode;
pub use AzGlTextureNodeTT as AzGlTextureNode;
/// Destructor: Takes ownership of the `GlTextureNode` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_gl_texture_node_delete(object: &mut AzGlTextureNode) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_gl_texture_node_deep_copy(object: &AzGlTextureNode) -> AzGlTextureNode { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_gl_texture_node_fmt_debug(object: &AzGlTextureNode) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `IFrameNode` struct
pub type AzIFrameNodeTT = azul_impl::dom::IFrameNode;
pub use AzIFrameNodeTT as AzIFrameNode;
/// Destructor: Takes ownership of the `IFrameNode` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_i_frame_node_delete(object: &mut AzIFrameNode) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_i_frame_node_deep_copy(object: &AzIFrameNode) -> AzIFrameNode { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_i_frame_node_fmt_debug(object: &AzIFrameNode) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `CallbackData` struct
pub type AzCallbackDataTT = azul_impl::dom::CallbackData;
pub use AzCallbackDataTT as AzCallbackData;
/// Destructor: Takes ownership of the `CallbackData` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_callback_data_delete(object: &mut AzCallbackData) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_callback_data_deep_copy(object: &AzCallbackData) -> AzCallbackData { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_callback_data_fmt_debug(object: &AzCallbackData) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `ImageMask` struct
pub type AzImageMaskTT = azul_impl::dom::ImageMask;
pub use AzImageMaskTT as AzImageMask;
/// Destructor: Takes ownership of the `ImageMask` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_image_mask_delete(object: &mut AzImageMask) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_image_mask_deep_copy(object: &AzImageMask) -> AzImageMask { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_image_mask_fmt_debug(object: &AzImageMask) -> AzString { format!("{:#?}", object).into() }

/// Represents one single DOM node (node type, classes, ids and callbacks are stored here)
pub type AzNodeDataTT = azul_impl::dom::NodeData;
pub use AzNodeDataTT as AzNodeData;
/// Creates a new node without any classes or ids from a NodeType
#[no_mangle] pub extern "C" fn az_node_data_new(node_type: AzNodeType) -> AzNodeData { NodeData::new(node_type) }
/// Creates a new `div` node
#[no_mangle] pub extern "C" fn az_node_data_div() -> AzNodeData { NodeData::div() }
/// Creates a new `body` node
#[no_mangle] pub extern "C" fn az_node_data_body() -> AzNodeData { NodeData::body() }
/// Creates a new `p` node with a given `String` as the text contents
#[no_mangle] pub extern "C" fn az_node_data_label(text: AzString) -> AzNodeData { NodeData::label(text) }
/// Creates a new `p` node from a (cached) text referenced by a `TextId`
#[no_mangle] pub extern "C" fn az_node_data_text(text_id: AzTextId) -> AzNodeData { NodeData::text(text_id) }
/// Creates a new `img` node from a (cached) text referenced by a `ImageId`
#[no_mangle] pub extern "C" fn az_node_data_image(image_id: AzImageId) -> AzNodeData { NodeData::image(image_id) }
/// Creates a new node which will render an OpenGL texture after the layout step is finished. See the documentation for [GlCallback]() for more info about OpenGL rendering callbacks.
#[no_mangle] pub extern "C" fn az_node_data_gl_texture(data: AzRefAny, callback: AzGlCallbackType) -> AzNodeData { NodeData::gl_texture(callback, data) }
/// Creates a `NodeData` with a callback that will return a `Dom` after being layouted. See the documentation for [IFrameCallback]() for more info about iframe callbacks.
#[no_mangle] pub extern "C" fn az_node_data_iframe(data: AzRefAny, callback: AzIFrameCallbackType) -> AzNodeData { NodeData::iframe(callback, data) }
/// Creates a default (div) node without any classes
#[no_mangle] pub extern "C" fn az_node_data_default() -> AzNodeData { NodeData::default() }
/// Adds a CSS ID (`#something`) to the `NodeData`
#[no_mangle] pub extern "C" fn az_node_data_add_id(nodedata: &mut AzNodeData, id: AzString) { nodedata.add_id(id); }
/// Same as [`NodeData::add_id`](#method.add_id), but as a builder method
#[no_mangle] pub extern "C" fn az_node_data_with_id(mut nodedata: AzNodeData, id: AzString) -> AzNodeData { az_node_data_add_id(&mut nodedata, id); nodedata }
/// Same as calling [`NodeData::add_id`](#method.add_id) for each CSS ID, but this function **replaces** all current CSS IDs
#[no_mangle] pub extern "C" fn az_node_data_set_ids(nodedata: &mut AzNodeData, ids: AzStringVec) { nodedata.set_ids(ids); }
/// Same as [`NodeData::set_ids`](#method.set_ids), but as a builder method
#[no_mangle] pub extern "C" fn az_node_data_with_ids(mut nodedata: AzNodeData, ids: AzStringVec) -> AzNodeData { az_node_data_set_ids(&mut nodedata, ids); nodedata }
/// Adds a CSS class (`.something`) to the `NodeData`
#[no_mangle] pub extern "C" fn az_node_data_add_class(nodedata: &mut AzNodeData, class: AzString) { nodedata.add_class(class); }
/// Same as [`NodeData::add_class`](#method.add_class), but as a builder method
#[no_mangle] pub extern "C" fn az_node_data_with_class(mut nodedata: AzNodeData, class: AzString) -> AzNodeData { az_node_data_add_class(&mut nodedata, class); nodedata }
/// Same as calling [`NodeData::add_class`](#method.add_class) for each class, but this function **replaces** all current classes
#[no_mangle] pub extern "C" fn az_node_data_set_classes(nodedata: &mut AzNodeData, classes: AzStringVec) { nodedata.set_classes(classes); }
/// Same as [`NodeData::set_classes`](#method.set_classes), but as a builder method
#[no_mangle] pub extern "C" fn az_node_data_with_classes(mut nodedata: AzNodeData, classes: AzStringVec) -> AzNodeData { az_node_data_set_classes(&mut nodedata, classes); nodedata }
/// Adds a dataset to the `NodeData`
#[no_mangle] pub extern "C" fn az_node_data_add_dataset(nodedata: &mut AzNodeData, data: AzRefAny) { nodedata.add_dataset(data); }
/// Same as [`NodeData::add_dataset`](#method.add_dataset), but as a builder method
#[no_mangle] pub extern "C" fn az_node_data_with_dataset(mut nodedata: AzNodeData, data: AzRefAny) -> AzNodeData { az_node_data_add_dataset(&mut nodedata, data); nodedata }
/// Adds a [`Callback`](callbacks/type.Callback) that acts on the `data` the `event` happens
#[no_mangle] pub extern "C" fn az_node_data_add_callback(nodedata: &mut AzNodeData, event: AzEventFilter, data: AzRefAny, callback: AzCallbackType) { nodedata.add_callback(event, callback, data); }
/// Same as [`NodeData::add_callback`](#method.add_callback), but as a builder method
#[no_mangle] pub extern "C" fn az_node_data_with_callback(mut nodedata: AzNodeData, event: AzEventFilter, data: AzRefAny, callback: AzCallbackType) -> AzNodeData { az_node_data_add_callback(&mut nodedata, event, data, callback); nodedata }
/// Overrides the CSS property of this `NodeData` node with a value (for example `"width = 200px"`)
#[no_mangle] pub extern "C" fn az_node_data_add_inline_css(nodedata: &mut AzNodeData, prop: AzCssProperty) { nodedata.add_inline_css(prop); }
/// Same as [`NodeData::add_inline_focus_css`](#method.add_inline_focus_css), but as a builder method
#[no_mangle] pub extern "C" fn az_node_data_with_inline_css(mut nodedata: AzNodeData, prop: AzCssProperty) -> AzNodeData { az_node_data_add_inline_focus_css(&mut nodedata, prop); nodedata }
/// Overrides the CSS property of this `NodeData` node with a value (for example `"width = 200px"`)
#[no_mangle] pub extern "C" fn az_node_data_add_inline_hover_css(nodedata: &mut AzNodeData, prop: AzCssProperty) { nodedata.add_inline_hover_css(prop); }
/// Overrides the CSS property of this `NodeData` node with a value (for example `"width = 200px"`)
#[no_mangle] pub extern "C" fn az_node_data_add_inline_active_css(nodedata: &mut AzNodeData, prop: AzCssProperty) { nodedata.add_inline_active_css(prop); }
/// Overrides the CSS property of this `NodeData` node with a value (for example `"width = 200px"`)
#[no_mangle] pub extern "C" fn az_node_data_add_inline_focus_css(nodedata: &mut AzNodeData, prop: AzCssProperty) { nodedata.add_inline_focus_css(prop); }
/// Same as [`NodeData::set_clip_mask`](#method.set_clip_mask), but as a builder method
#[no_mangle] pub extern "C" fn az_node_data_with_clip_mask(mut nodedata: AzNodeData, clip_mask: AzOptionImageMask) -> AzNodeData { az_node_data_set_clip_mask(&mut nodedata, clip_mask); nodedata }
/// Sets the `clip_mask` attribute of this `NodeData` (default: None)
#[no_mangle] pub extern "C" fn az_node_data_set_clip_mask(nodedata: &mut AzNodeData, clip_mask: AzOptionImageMask) { nodedata.set_clip_mask(clip_mask); }
/// Sets the `is_draggable` attribute of this `NodeData` (default: false)
#[no_mangle] pub extern "C" fn az_node_data_set_is_draggable(nodedata: &mut AzNodeData, is_draggable: bool) { nodedata.set_is_draggable(is_draggable); }
/// Same as [`NodeData::set_is_draggable`](#method.set_is_draggable), but as a builder method
#[no_mangle] pub extern "C" fn az_node_data_is_draggable(mut nodedata: AzNodeData, is_draggable: bool) -> AzNodeData { az_node_data_set_is_draggable(&mut nodedata, is_draggable); nodedata }
/// Sets the `tabindex` attribute of this `NodeData` (makes an element focusable - default: None)
#[no_mangle] pub extern "C" fn az_node_data_set_tab_index(nodedata: &mut AzNodeData, tab_index: AzOptionTabIndex) { nodedata.set_tab_index(tab_index); }
/// Same as [`NodeData::set_tab_index`](#method.set_tab_index), but as a builder method
#[no_mangle] pub extern "C" fn az_node_data_with_tab_index(mut nodedata: AzNodeData, tab_index: AzOptionTabIndex) -> AzNodeData { az_node_data_set_tab_index(&mut nodedata, tab_index); nodedata }
/// Destructor: Takes ownership of the `NodeData` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_node_data_delete(object: &mut AzNodeData) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_node_data_deep_copy(object: &AzNodeData) -> AzNodeData { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_node_data_fmt_debug(object: &AzNodeData) -> AzString { format!("{:#?}", object).into() }

/// List of core DOM node types built-into by `azul`
pub type AzNodeTypeTT = azul_impl::dom::NodeType;
pub use AzNodeTypeTT as AzNodeType;
/// Destructor: Takes ownership of the `NodeType` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_node_type_delete(object: &mut AzNodeType) { match object { azul_impl::dom::NodeType::Div => { }, azul_impl::dom::NodeType::Body => { }, azul_impl::dom::NodeType::Label(_) => { }, azul_impl::dom::NodeType::Text(_) => { }, azul_impl::dom::NodeType::Image(_) => { }, azul_impl::dom::NodeType::GlTexture(_) => { }, azul_impl::dom::NodeType::IFrame(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_node_type_deep_copy(object: &AzNodeType) -> AzNodeType { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_node_type_fmt_debug(object: &AzNodeType) -> AzString { format!("{:#?}", object).into() }

/// When to call a callback action - `On::MouseOver`, `On::MouseOut`, etc.
pub type AzOnTT = azul_impl::dom::On;
pub use AzOnTT as AzOn;
/// Converts the `On` shorthand into a `EventFilter`
#[no_mangle] pub extern "C" fn az_on_into_event_filter(on: AzOn) -> AzEventFilter { on.into() }
/// Destructor: Takes ownership of the `On` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_on_delete(object: &mut AzOn) { match object { azul_impl::dom::On::MouseOver => { }, azul_impl::dom::On::MouseDown => { }, azul_impl::dom::On::LeftMouseDown => { }, azul_impl::dom::On::MiddleMouseDown => { }, azul_impl::dom::On::RightMouseDown => { }, azul_impl::dom::On::MouseUp => { }, azul_impl::dom::On::LeftMouseUp => { }, azul_impl::dom::On::MiddleMouseUp => { }, azul_impl::dom::On::RightMouseUp => { }, azul_impl::dom::On::MouseEnter => { }, azul_impl::dom::On::MouseLeave => { }, azul_impl::dom::On::Scroll => { }, azul_impl::dom::On::TextInput => { }, azul_impl::dom::On::VirtualKeyDown => { }, azul_impl::dom::On::VirtualKeyUp => { }, azul_impl::dom::On::HoveredFile => { }, azul_impl::dom::On::DroppedFile => { }, azul_impl::dom::On::HoveredFileCancelled => { }, azul_impl::dom::On::FocusReceived => { }, azul_impl::dom::On::FocusLost => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_on_deep_copy(object: &AzOn) -> AzOn { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_on_fmt_debug(object: &AzOn) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `EventFilter` struct
pub type AzEventFilterTT = azul_impl::dom::EventFilter;
pub use AzEventFilterTT as AzEventFilter;
/// Destructor: Takes ownership of the `EventFilter` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_event_filter_delete(object: &mut AzEventFilter) { match object { azul_impl::dom::EventFilter::Hover(_) => { }, azul_impl::dom::EventFilter::Not(_) => { }, azul_impl::dom::EventFilter::Focus(_) => { }, azul_impl::dom::EventFilter::Window(_) => { }, azul_impl::dom::EventFilter::Component(_) => { }, azul_impl::dom::EventFilter::Application(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_event_filter_deep_copy(object: &AzEventFilter) -> AzEventFilter { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_event_filter_fmt_debug(object: &AzEventFilter) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `HoverEventFilter` struct
pub type AzHoverEventFilterTT = azul_impl::dom::HoverEventFilter;
pub use AzHoverEventFilterTT as AzHoverEventFilter;
/// Destructor: Takes ownership of the `HoverEventFilter` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_hover_event_filter_delete(object: &mut AzHoverEventFilter) { match object { azul_impl::dom::HoverEventFilter::MouseOver => { }, azul_impl::dom::HoverEventFilter::MouseDown => { }, azul_impl::dom::HoverEventFilter::LeftMouseDown => { }, azul_impl::dom::HoverEventFilter::RightMouseDown => { }, azul_impl::dom::HoverEventFilter::MiddleMouseDown => { }, azul_impl::dom::HoverEventFilter::MouseUp => { }, azul_impl::dom::HoverEventFilter::LeftMouseUp => { }, azul_impl::dom::HoverEventFilter::RightMouseUp => { }, azul_impl::dom::HoverEventFilter::MiddleMouseUp => { }, azul_impl::dom::HoverEventFilter::MouseEnter => { }, azul_impl::dom::HoverEventFilter::MouseLeave => { }, azul_impl::dom::HoverEventFilter::Scroll => { }, azul_impl::dom::HoverEventFilter::ScrollStart => { }, azul_impl::dom::HoverEventFilter::ScrollEnd => { }, azul_impl::dom::HoverEventFilter::TextInput => { }, azul_impl::dom::HoverEventFilter::VirtualKeyDown => { }, azul_impl::dom::HoverEventFilter::VirtualKeyUp => { }, azul_impl::dom::HoverEventFilter::HoveredFile => { }, azul_impl::dom::HoverEventFilter::DroppedFile => { }, azul_impl::dom::HoverEventFilter::HoveredFileCancelled => { }, azul_impl::dom::HoverEventFilter::TouchStart => { }, azul_impl::dom::HoverEventFilter::TouchMove => { }, azul_impl::dom::HoverEventFilter::TouchEnd => { }, azul_impl::dom::HoverEventFilter::TouchCancel => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_hover_event_filter_deep_copy(object: &AzHoverEventFilter) -> AzHoverEventFilter { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_hover_event_filter_fmt_debug(object: &AzHoverEventFilter) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `FocusEventFilter` struct
pub type AzFocusEventFilterTT = azul_impl::dom::FocusEventFilter;
pub use AzFocusEventFilterTT as AzFocusEventFilter;
/// Destructor: Takes ownership of the `FocusEventFilter` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_focus_event_filter_delete(object: &mut AzFocusEventFilter) { match object { azul_impl::dom::FocusEventFilter::MouseOver => { }, azul_impl::dom::FocusEventFilter::MouseDown => { }, azul_impl::dom::FocusEventFilter::LeftMouseDown => { }, azul_impl::dom::FocusEventFilter::RightMouseDown => { }, azul_impl::dom::FocusEventFilter::MiddleMouseDown => { }, azul_impl::dom::FocusEventFilter::MouseUp => { }, azul_impl::dom::FocusEventFilter::LeftMouseUp => { }, azul_impl::dom::FocusEventFilter::RightMouseUp => { }, azul_impl::dom::FocusEventFilter::MiddleMouseUp => { }, azul_impl::dom::FocusEventFilter::MouseEnter => { }, azul_impl::dom::FocusEventFilter::MouseLeave => { }, azul_impl::dom::FocusEventFilter::Scroll => { }, azul_impl::dom::FocusEventFilter::ScrollStart => { }, azul_impl::dom::FocusEventFilter::ScrollEnd => { }, azul_impl::dom::FocusEventFilter::TextInput => { }, azul_impl::dom::FocusEventFilter::VirtualKeyDown => { }, azul_impl::dom::FocusEventFilter::VirtualKeyUp => { }, azul_impl::dom::FocusEventFilter::FocusReceived => { }, azul_impl::dom::FocusEventFilter::FocusLost => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_focus_event_filter_deep_copy(object: &AzFocusEventFilter) -> AzFocusEventFilter { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_focus_event_filter_fmt_debug(object: &AzFocusEventFilter) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `NotEventFilter` struct
pub type AzNotEventFilterTT = azul_impl::dom::NotEventFilter;
pub use AzNotEventFilterTT as AzNotEventFilter;
/// Destructor: Takes ownership of the `NotEventFilter` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_not_event_filter_delete(object: &mut AzNotEventFilter) { match object { azul_impl::dom::NotEventFilter::Hover(_) => { }, azul_impl::dom::NotEventFilter::Focus(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_not_event_filter_deep_copy(object: &AzNotEventFilter) -> AzNotEventFilter { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_not_event_filter_fmt_debug(object: &AzNotEventFilter) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `WindowEventFilter` struct
pub type AzWindowEventFilterTT = azul_impl::dom::WindowEventFilter;
pub use AzWindowEventFilterTT as AzWindowEventFilter;
/// Destructor: Takes ownership of the `WindowEventFilter` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_window_event_filter_delete(object: &mut AzWindowEventFilter) { match object { azul_impl::dom::WindowEventFilter::MouseOver => { }, azul_impl::dom::WindowEventFilter::MouseDown => { }, azul_impl::dom::WindowEventFilter::LeftMouseDown => { }, azul_impl::dom::WindowEventFilter::RightMouseDown => { }, azul_impl::dom::WindowEventFilter::MiddleMouseDown => { }, azul_impl::dom::WindowEventFilter::MouseUp => { }, azul_impl::dom::WindowEventFilter::LeftMouseUp => { }, azul_impl::dom::WindowEventFilter::RightMouseUp => { }, azul_impl::dom::WindowEventFilter::MiddleMouseUp => { }, azul_impl::dom::WindowEventFilter::MouseEnter => { }, azul_impl::dom::WindowEventFilter::MouseLeave => { }, azul_impl::dom::WindowEventFilter::Scroll => { }, azul_impl::dom::WindowEventFilter::ScrollStart => { }, azul_impl::dom::WindowEventFilter::ScrollEnd => { }, azul_impl::dom::WindowEventFilter::TextInput => { }, azul_impl::dom::WindowEventFilter::VirtualKeyDown => { }, azul_impl::dom::WindowEventFilter::VirtualKeyUp => { }, azul_impl::dom::WindowEventFilter::HoveredFile => { }, azul_impl::dom::WindowEventFilter::DroppedFile => { }, azul_impl::dom::WindowEventFilter::HoveredFileCancelled => { }, azul_impl::dom::WindowEventFilter::Resized => { }, azul_impl::dom::WindowEventFilter::Moved => { }, azul_impl::dom::WindowEventFilter::TouchStart => { }, azul_impl::dom::WindowEventFilter::TouchMove => { }, azul_impl::dom::WindowEventFilter::TouchEnd => { }, azul_impl::dom::WindowEventFilter::TouchCancel => { }, azul_impl::dom::WindowEventFilter::FocusReceived => { }, azul_impl::dom::WindowEventFilter::FocusLost => { }, azul_impl::dom::WindowEventFilter::CloseRequested => { }, azul_impl::dom::WindowEventFilter::ThemeChanged => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_window_event_filter_deep_copy(object: &AzWindowEventFilter) -> AzWindowEventFilter { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_window_event_filter_fmt_debug(object: &AzWindowEventFilter) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `ComponentEventFilter` struct
pub type AzComponentEventFilterTT = azul_impl::dom::ComponentEventFilter;
pub use AzComponentEventFilterTT as AzComponentEventFilter;
/// Destructor: Takes ownership of the `ComponentEventFilter` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_component_event_filter_delete(object: &mut AzComponentEventFilter) { match object { azul_impl::dom::ComponentEventFilter::AfterMount => { }, azul_impl::dom::ComponentEventFilter::BeforeUnmount => { }, azul_impl::dom::ComponentEventFilter::NodeResized => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_component_event_filter_deep_copy(object: &AzComponentEventFilter) -> AzComponentEventFilter { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_component_event_filter_fmt_debug(object: &AzComponentEventFilter) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `ApplicationEventFilter` struct
pub type AzApplicationEventFilterTT = azul_impl::dom::ApplicationEventFilter;
pub use AzApplicationEventFilterTT as AzApplicationEventFilter;
/// Destructor: Takes ownership of the `ApplicationEventFilter` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_application_event_filter_delete(object: &mut AzApplicationEventFilter) { match object { azul_impl::dom::ApplicationEventFilter::DeviceConnected => { }, azul_impl::dom::ApplicationEventFilter::DeviceDisconnected => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_application_event_filter_deep_copy(object: &AzApplicationEventFilter) -> AzApplicationEventFilter { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_application_event_filter_fmt_debug(object: &AzApplicationEventFilter) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `TabIndex` struct
pub type AzTabIndexTT = azul_impl::dom::TabIndex;
pub use AzTabIndexTT as AzTabIndex;
/// Destructor: Takes ownership of the `TabIndex` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_tab_index_delete(object: &mut AzTabIndex) { match object { azul_impl::dom::TabIndex::Auto => { }, azul_impl::dom::TabIndex::OverrideInParent(_) => { }, azul_impl::dom::TabIndex::NoKeyboardFocus => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_tab_index_deep_copy(object: &AzTabIndex) -> AzTabIndex { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_tab_index_fmt_debug(object: &AzTabIndex) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `GlShaderPrecisionFormatReturn` struct
pub type AzGlShaderPrecisionFormatReturnTT = azul_impl::gl::GlShaderPrecisionFormatReturn;
pub use AzGlShaderPrecisionFormatReturnTT as AzGlShaderPrecisionFormatReturn;
/// Destructor: Takes ownership of the `GlShaderPrecisionFormatReturn` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_gl_shader_precision_format_return_delete(object: &mut AzGlShaderPrecisionFormatReturn) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_gl_shader_precision_format_return_deep_copy(object: &AzGlShaderPrecisionFormatReturn) -> AzGlShaderPrecisionFormatReturn { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_gl_shader_precision_format_return_fmt_debug(object: &AzGlShaderPrecisionFormatReturn) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `VertexAttributeType` struct
pub type AzVertexAttributeTypeTT = azul_impl::gl::VertexAttributeType;
pub use AzVertexAttributeTypeTT as AzVertexAttributeType;
/// Destructor: Takes ownership of the `VertexAttributeType` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_vertex_attribute_type_delete(object: &mut AzVertexAttributeType) { match object { azul_impl::gl::VertexAttributeType::Float => { }, azul_impl::gl::VertexAttributeType::Double => { }, azul_impl::gl::VertexAttributeType::UnsignedByte => { }, azul_impl::gl::VertexAttributeType::UnsignedShort => { }, azul_impl::gl::VertexAttributeType::UnsignedInt => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_vertex_attribute_type_deep_copy(object: &AzVertexAttributeType) -> AzVertexAttributeType { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_vertex_attribute_type_fmt_debug(object: &AzVertexAttributeType) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `VertexAttribute` struct
pub type AzVertexAttributeTT = azul_impl::gl::VertexAttribute;
pub use AzVertexAttributeTT as AzVertexAttribute;
/// Destructor: Takes ownership of the `VertexAttribute` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_vertex_attribute_delete(object: &mut AzVertexAttribute) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_vertex_attribute_deep_copy(object: &AzVertexAttribute) -> AzVertexAttribute { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_vertex_attribute_fmt_debug(object: &AzVertexAttribute) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `VertexLayout` struct
pub type AzVertexLayoutTT = azul_impl::gl::VertexLayout;
pub use AzVertexLayoutTT as AzVertexLayout;
/// Destructor: Takes ownership of the `VertexLayout` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_vertex_layout_delete(object: &mut AzVertexLayout) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_vertex_layout_deep_copy(object: &AzVertexLayout) -> AzVertexLayout { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_vertex_layout_fmt_debug(object: &AzVertexLayout) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `VertexArrayObject` struct
pub type AzVertexArrayObjectTT = azul_impl::gl::VertexArrayObject;
pub use AzVertexArrayObjectTT as AzVertexArrayObject;
/// Destructor: Takes ownership of the `VertexArrayObject` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_vertex_array_object_delete(object: &mut AzVertexArrayObject) { }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_vertex_array_object_fmt_debug(object: &AzVertexArrayObject) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `IndexBufferFormat` struct
pub type AzIndexBufferFormatTT = azul_impl::gl::IndexBufferFormat;
pub use AzIndexBufferFormatTT as AzIndexBufferFormat;
/// Destructor: Takes ownership of the `IndexBufferFormat` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_index_buffer_format_delete(object: &mut AzIndexBufferFormat) { match object { azul_impl::gl::IndexBufferFormat::Points => { }, azul_impl::gl::IndexBufferFormat::Lines => { }, azul_impl::gl::IndexBufferFormat::LineStrip => { }, azul_impl::gl::IndexBufferFormat::Triangles => { }, azul_impl::gl::IndexBufferFormat::TriangleStrip => { }, azul_impl::gl::IndexBufferFormat::TriangleFan => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_index_buffer_format_deep_copy(object: &AzIndexBufferFormat) -> AzIndexBufferFormat { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_index_buffer_format_fmt_debug(object: &AzIndexBufferFormat) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `VertexBuffer` struct
pub type AzVertexBufferTT = azul_impl::gl::VertexBuffer;
pub use AzVertexBufferTT as AzVertexBuffer;
/// Destructor: Takes ownership of the `VertexBuffer` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_vertex_buffer_delete(object: &mut AzVertexBuffer) { }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_vertex_buffer_fmt_debug(object: &AzVertexBuffer) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `GlType` struct
pub type AzGlTypeTT = azul_impl::gl::AzGlType;
pub use AzGlTypeTT as AzGlType;
/// Destructor: Takes ownership of the `GlType` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_gl_type_delete(object: &mut AzGlType) { match object { azul_impl::gl::AzGlType::Gl => { }, azul_impl::gl::AzGlType::Gles => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_gl_type_deep_copy(object: &AzGlType) -> AzGlType { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_gl_type_fmt_debug(object: &AzGlType) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `DebugMessage` struct
pub type AzDebugMessageTT = azul_impl::gl::AzDebugMessage;
pub use AzDebugMessageTT as AzDebugMessage;
/// Destructor: Takes ownership of the `DebugMessage` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_debug_message_delete(object: &mut AzDebugMessage) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_debug_message_deep_copy(object: &AzDebugMessage) -> AzDebugMessage { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_debug_message_fmt_debug(object: &AzDebugMessage) -> AzString { format!("{:#?}", object).into() }

/// C-ABI stable reexport of `&[u8]`
pub type AzU8VecRefTT = azul_impl::gl::U8VecRef;
pub use AzU8VecRefTT as AzU8VecRef;
/// Destructor: Takes ownership of the `U8VecRef` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_u8_vec_ref_delete(object: &mut AzU8VecRef) { }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_u8_vec_ref_fmt_debug(object: &AzU8VecRef) -> AzString { format!("{:#?}", object).into() }

/// C-ABI stable reexport of `&mut [u8]`
pub type AzU8VecRefMutTT = azul_impl::gl::U8VecRefMut;
pub use AzU8VecRefMutTT as AzU8VecRefMut;
/// Destructor: Takes ownership of the `U8VecRefMut` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_u8_vec_ref_mut_delete(object: &mut AzU8VecRefMut) { }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_u8_vec_ref_mut_fmt_debug(object: &AzU8VecRefMut) -> AzString { format!("{:#?}", object).into() }

/// C-ABI stable reexport of `&[f32]`
pub type AzF32VecRefTT = azul_impl::gl::F32VecRef;
pub use AzF32VecRefTT as AzF32VecRef;
/// Destructor: Takes ownership of the `F32VecRef` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_f32_vec_ref_delete(object: &mut AzF32VecRef) { }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_f32_vec_ref_fmt_debug(object: &AzF32VecRef) -> AzString { format!("{:#?}", object).into() }

/// C-ABI stable reexport of `&[i32]`
pub type AzI32VecRefTT = azul_impl::gl::I32VecRef;
pub use AzI32VecRefTT as AzI32VecRef;
/// Destructor: Takes ownership of the `I32VecRef` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_i32_vec_ref_delete(object: &mut AzI32VecRef) { }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_i32_vec_ref_fmt_debug(object: &AzI32VecRef) -> AzString { format!("{:#?}", object).into() }

/// C-ABI stable reexport of `&[GLuint]` aka `&[u32]`
pub type AzGLuintVecRefTT = azul_impl::gl::GLuintVecRef;
pub use AzGLuintVecRefTT as AzGLuintVecRef;
/// Destructor: Takes ownership of the `GLuintVecRef` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_g_luint_vec_ref_delete(object: &mut AzGLuintVecRef) { }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_g_luint_vec_ref_fmt_debug(object: &AzGLuintVecRef) -> AzString { format!("{:#?}", object).into() }

/// C-ABI stable reexport of `&[GLenum]` aka `&[u32]`
pub type AzGLenumVecRefTT = azul_impl::gl::GLenumVecRef;
pub use AzGLenumVecRefTT as AzGLenumVecRef;
/// Destructor: Takes ownership of the `GLenumVecRef` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_g_lenum_vec_ref_delete(object: &mut AzGLenumVecRef) { }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_g_lenum_vec_ref_fmt_debug(object: &AzGLenumVecRef) -> AzString { format!("{:#?}", object).into() }

/// C-ABI stable reexport of `&mut [GLint]` aka `&mut [i32]`
pub type AzGLintVecRefMutTT = azul_impl::gl::GLintVecRefMut;
pub use AzGLintVecRefMutTT as AzGLintVecRefMut;
/// Destructor: Takes ownership of the `GLintVecRefMut` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_g_lint_vec_ref_mut_delete(object: &mut AzGLintVecRefMut) { }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_g_lint_vec_ref_mut_fmt_debug(object: &AzGLintVecRefMut) -> AzString { format!("{:#?}", object).into() }

/// C-ABI stable reexport of `&mut [GLint64]` aka `&mut [i64]`
pub type AzGLint64VecRefMutTT = azul_impl::gl::GLint64VecRefMut;
pub use AzGLint64VecRefMutTT as AzGLint64VecRefMut;
/// Destructor: Takes ownership of the `GLint64VecRefMut` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_g_lint64_vec_ref_mut_delete(object: &mut AzGLint64VecRefMut) { }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_g_lint64_vec_ref_mut_fmt_debug(object: &AzGLint64VecRefMut) -> AzString { format!("{:#?}", object).into() }

/// C-ABI stable reexport of `&mut [GLboolean]` aka `&mut [u8]`
pub type AzGLbooleanVecRefMutTT = azul_impl::gl::GLbooleanVecRefMut;
pub use AzGLbooleanVecRefMutTT as AzGLbooleanVecRefMut;
/// Destructor: Takes ownership of the `GLbooleanVecRefMut` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_g_lboolean_vec_ref_mut_delete(object: &mut AzGLbooleanVecRefMut) { }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_g_lboolean_vec_ref_mut_fmt_debug(object: &AzGLbooleanVecRefMut) -> AzString { format!("{:#?}", object).into() }

/// C-ABI stable reexport of `&mut [GLfloat]` aka `&mut [f32]`
pub type AzGLfloatVecRefMutTT = azul_impl::gl::GLfloatVecRefMut;
pub use AzGLfloatVecRefMutTT as AzGLfloatVecRefMut;
/// Destructor: Takes ownership of the `GLfloatVecRefMut` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_g_lfloat_vec_ref_mut_delete(object: &mut AzGLfloatVecRefMut) { }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_g_lfloat_vec_ref_mut_fmt_debug(object: &AzGLfloatVecRefMut) -> AzString { format!("{:#?}", object).into() }

/// C-ABI stable reexport of `&[Refstr]` aka `&mut [&str]`
pub type AzRefstrVecRefTT = azul_impl::gl::RefstrVecRef;
pub use AzRefstrVecRefTT as AzRefstrVecRef;
/// Destructor: Takes ownership of the `RefstrVecRef` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_refstr_vec_ref_delete(object: &mut AzRefstrVecRef) { }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_refstr_vec_ref_fmt_debug(object: &AzRefstrVecRef) -> AzString { format!("{:#?}", object).into() }

/// C-ABI stable reexport of `&str`
pub type AzRefstrTT = azul_impl::gl::Refstr;
pub use AzRefstrTT as AzRefstr;
/// Destructor: Takes ownership of the `Refstr` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_refstr_delete(object: &mut AzRefstr) { }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_refstr_fmt_debug(object: &AzRefstr) -> AzString { format!("{:#?}", object).into() }

/// C-ABI stable reexport of `(U8Vec, u32)`
pub type AzGetProgramBinaryReturnTT = azul_impl::gl::GetProgramBinaryReturn;
pub use AzGetProgramBinaryReturnTT as AzGetProgramBinaryReturn;
/// Destructor: Takes ownership of the `GetProgramBinaryReturn` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_get_program_binary_return_delete(object: &mut AzGetProgramBinaryReturn) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_get_program_binary_return_deep_copy(object: &AzGetProgramBinaryReturn) -> AzGetProgramBinaryReturn { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_get_program_binary_return_fmt_debug(object: &AzGetProgramBinaryReturn) -> AzString { format!("{:#?}", object).into() }

/// C-ABI stable reexport of `(i32, u32, AzString)`
pub type AzGetActiveAttribReturnTT = azul_impl::gl::GetActiveAttribReturn;
pub use AzGetActiveAttribReturnTT as AzGetActiveAttribReturn;
/// Destructor: Takes ownership of the `GetActiveAttribReturn` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_get_active_attrib_return_delete(object: &mut AzGetActiveAttribReturn) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_get_active_attrib_return_deep_copy(object: &AzGetActiveAttribReturn) -> AzGetActiveAttribReturn { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_get_active_attrib_return_fmt_debug(object: &AzGetActiveAttribReturn) -> AzString { format!("{:#?}", object).into() }

/// C-ABI stable reexport of `*const gleam::gl::GLsync`
pub type AzGLsyncPtrTT = azul_impl::gl::GLsyncPtr;
pub use AzGLsyncPtrTT as AzGLsyncPtr;
/// Destructor: Takes ownership of the `GLsyncPtr` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_g_lsync_ptr_delete(object: &mut AzGLsyncPtr) { }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_g_lsync_ptr_fmt_debug(object: &AzGLsyncPtr) -> AzString { format!("{:#?}", object).into() }

/// C-ABI stable reexport of `(i32, u32, AzString)`
pub type AzGetActiveUniformReturnTT = azul_impl::gl::GetActiveUniformReturn;
pub use AzGetActiveUniformReturnTT as AzGetActiveUniformReturn;
/// Destructor: Takes ownership of the `GetActiveUniformReturn` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_get_active_uniform_return_delete(object: &mut AzGetActiveUniformReturn) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_get_active_uniform_return_deep_copy(object: &AzGetActiveUniformReturn) -> AzGetActiveUniformReturn { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_get_active_uniform_return_fmt_debug(object: &AzGetActiveUniformReturn) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `GlContextPtr` struct
pub type AzGlContextPtrTT = azul_impl::gl::GlContextPtr;
pub use AzGlContextPtrTT as AzGlContextPtr;
/// Equivalent to the Rust `GlContextPtr::get_type()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_type(glcontextptr: &AzGlContextPtr) -> AzGlType { glcontextptr.get_type() }
/// Equivalent to the Rust `GlContextPtr::buffer_data_untyped()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_buffer_data_untyped(glcontextptr: &AzGlContextPtr, target: u32, size: isize, data: *const c_void, usage: u32) { glcontextptr.buffer_data_untyped(target, size, data, usage) }
/// Equivalent to the Rust `GlContextPtr::buffer_sub_data_untyped()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_buffer_sub_data_untyped(glcontextptr: &AzGlContextPtr, target: u32, offset: isize, size: isize, data: *const c_void) { glcontextptr.buffer_sub_data_untyped(target, offset, size, data) }
/// Equivalent to the Rust `GlContextPtr::map_buffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_map_buffer(glcontextptr: &AzGlContextPtr, target: u32, access: u32) -> *mut c_void { glcontextptr.map_buffer(target, access) }
/// Equivalent to the Rust `GlContextPtr::map_buffer_range()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_map_buffer_range(glcontextptr: &AzGlContextPtr, target: u32, offset: isize, length: isize, access: u32) -> *mut c_void { glcontextptr.map_buffer_range(target, offset, length, access) }
/// Equivalent to the Rust `GlContextPtr::unmap_buffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_unmap_buffer(glcontextptr: &AzGlContextPtr, target: u32) -> u8 { glcontextptr.unmap_buffer(target) }
/// Equivalent to the Rust `GlContextPtr::tex_buffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_tex_buffer(glcontextptr: &AzGlContextPtr, target: u32, internal_format: u32, buffer: u32) { glcontextptr.tex_buffer(target, internal_format, buffer) }
/// Equivalent to the Rust `GlContextPtr::shader_source()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_shader_source(glcontextptr: &AzGlContextPtr, shader: u32, strings: AzStringVec) { glcontextptr.shader_source(shader, strings) }
/// Equivalent to the Rust `GlContextPtr::read_buffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_read_buffer(glcontextptr: &AzGlContextPtr, mode: u32) { glcontextptr.read_buffer(mode) }
/// Equivalent to the Rust `GlContextPtr::read_pixels_into_buffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_read_pixels_into_buffer(glcontextptr: &AzGlContextPtr, x: i32, y: i32, width: i32, height: i32, format: u32, pixel_type: u32, dst_buffer: AzU8VecRefMut) { glcontextptr.read_pixels_into_buffer(x, y, width, height, format, pixel_type, dst_buffer) }
/// Equivalent to the Rust `GlContextPtr::read_pixels()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_read_pixels(glcontextptr: &AzGlContextPtr, x: i32, y: i32, width: i32, height: i32, format: u32, pixel_type: u32) -> AzU8Vec { glcontextptr.read_pixels(x, y, width, height, format, pixel_type) }
/// Equivalent to the Rust `GlContextPtr::read_pixels_into_pbo()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_read_pixels_into_pbo(glcontextptr: &AzGlContextPtr, x: i32, y: i32, width: i32, height: i32, format: u32, pixel_type: u32) { glcontextptr.read_pixels_into_pbo(x, y, width, height, format, pixel_type) }
/// Equivalent to the Rust `GlContextPtr::sample_coverage()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_sample_coverage(glcontextptr: &AzGlContextPtr, value: f32, invert: bool) { glcontextptr.sample_coverage(value, invert) }
/// Equivalent to the Rust `GlContextPtr::polygon_offset()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_polygon_offset(glcontextptr: &AzGlContextPtr, factor: f32, units: f32) { glcontextptr.polygon_offset(factor, units) }
/// Equivalent to the Rust `GlContextPtr::pixel_store_i()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_pixel_store_i(glcontextptr: &AzGlContextPtr, name: u32, param: i32) { glcontextptr.pixel_store_i(name, param) }
/// Equivalent to the Rust `GlContextPtr::gen_buffers()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_gen_buffers(glcontextptr: &AzGlContextPtr, n: i32) -> AzGLuintVec { glcontextptr.gen_buffers(n) }
/// Equivalent to the Rust `GlContextPtr::gen_renderbuffers()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_gen_renderbuffers(glcontextptr: &AzGlContextPtr, n: i32) -> AzGLuintVec { glcontextptr.gen_renderbuffers(n) }
/// Equivalent to the Rust `GlContextPtr::gen_framebuffers()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_gen_framebuffers(glcontextptr: &AzGlContextPtr, n: i32) -> AzGLuintVec { glcontextptr.gen_framebuffers(n) }
/// Equivalent to the Rust `GlContextPtr::gen_textures()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_gen_textures(glcontextptr: &AzGlContextPtr, n: i32) -> AzGLuintVec { glcontextptr.gen_textures(n) }
/// Equivalent to the Rust `GlContextPtr::gen_vertex_arrays()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_gen_vertex_arrays(glcontextptr: &AzGlContextPtr, n: i32) -> AzGLuintVec { glcontextptr.gen_vertex_arrays(n) }
/// Equivalent to the Rust `GlContextPtr::gen_queries()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_gen_queries(glcontextptr: &AzGlContextPtr, n: i32) -> AzGLuintVec { glcontextptr.gen_queries(n) }
/// Equivalent to the Rust `GlContextPtr::begin_query()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_begin_query(glcontextptr: &AzGlContextPtr, target: u32, id: u32) { glcontextptr.begin_query(target, id) }
/// Equivalent to the Rust `GlContextPtr::end_query()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_end_query(glcontextptr: &AzGlContextPtr, target: u32) { glcontextptr.end_query(target) }
/// Equivalent to the Rust `GlContextPtr::query_counter()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_query_counter(glcontextptr: &AzGlContextPtr, id: u32, target: u32) { glcontextptr.query_counter(id, target) }
/// Equivalent to the Rust `GlContextPtr::get_query_object_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_query_object_iv(glcontextptr: &AzGlContextPtr, id: u32, pname: u32) -> i32 { glcontextptr.get_query_object_iv(id, pname) }
/// Equivalent to the Rust `GlContextPtr::get_query_object_uiv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_query_object_uiv(glcontextptr: &AzGlContextPtr, id: u32, pname: u32) -> u32 { glcontextptr.get_query_object_uiv(id, pname) }
/// Equivalent to the Rust `GlContextPtr::get_query_object_i64v()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_query_object_i64v(glcontextptr: &AzGlContextPtr, id: u32, pname: u32) -> i64 { glcontextptr.get_query_object_i64v(id, pname) }
/// Equivalent to the Rust `GlContextPtr::get_query_object_ui64v()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_query_object_ui64v(glcontextptr: &AzGlContextPtr, id: u32, pname: u32) -> u64 { glcontextptr.get_query_object_ui64v(id, pname) }
/// Equivalent to the Rust `GlContextPtr::delete_queries()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_delete_queries(glcontextptr: &AzGlContextPtr, queries: AzGLuintVecRef) { glcontextptr.delete_queries(queries) }
/// Equivalent to the Rust `GlContextPtr::delete_vertex_arrays()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_delete_vertex_arrays(glcontextptr: &AzGlContextPtr, vertex_arrays: AzGLuintVecRef) { glcontextptr.delete_vertex_arrays(vertex_arrays) }
/// Equivalent to the Rust `GlContextPtr::delete_buffers()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_delete_buffers(glcontextptr: &AzGlContextPtr, buffers: AzGLuintVecRef) { glcontextptr.delete_buffers(buffers) }
/// Equivalent to the Rust `GlContextPtr::delete_renderbuffers()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_delete_renderbuffers(glcontextptr: &AzGlContextPtr, renderbuffers: AzGLuintVecRef) { glcontextptr.delete_renderbuffers(renderbuffers) }
/// Equivalent to the Rust `GlContextPtr::delete_framebuffers()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_delete_framebuffers(glcontextptr: &AzGlContextPtr, framebuffers: AzGLuintVecRef) { glcontextptr.delete_framebuffers(framebuffers) }
/// Equivalent to the Rust `GlContextPtr::delete_textures()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_delete_textures(glcontextptr: &AzGlContextPtr, textures: AzGLuintVecRef) { glcontextptr.delete_textures(textures) }
/// Equivalent to the Rust `GlContextPtr::framebuffer_renderbuffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_framebuffer_renderbuffer(glcontextptr: &AzGlContextPtr, target: u32, attachment: u32, renderbuffertarget: u32, renderbuffer: u32) { glcontextptr.framebuffer_renderbuffer(target, attachment, renderbuffertarget, renderbuffer) }
/// Equivalent to the Rust `GlContextPtr::renderbuffer_storage()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_renderbuffer_storage(glcontextptr: &AzGlContextPtr, target: u32, internalformat: u32, width: i32, height: i32) { glcontextptr.renderbuffer_storage(target, internalformat, width, height) }
/// Equivalent to the Rust `GlContextPtr::depth_func()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_depth_func(glcontextptr: &AzGlContextPtr, func: u32) { glcontextptr.depth_func(func) }
/// Equivalent to the Rust `GlContextPtr::active_texture()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_active_texture(glcontextptr: &AzGlContextPtr, texture: u32) { glcontextptr.active_texture(texture) }
/// Equivalent to the Rust `GlContextPtr::attach_shader()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_attach_shader(glcontextptr: &AzGlContextPtr, program: u32, shader: u32) { glcontextptr.attach_shader(program, shader) }
/// Equivalent to the Rust `GlContextPtr::bind_attrib_location()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_bind_attrib_location(glcontextptr: &AzGlContextPtr, program: u32, index: u32, name: AzRefstr) { glcontextptr.bind_attrib_location(program, index, name) }
/// Equivalent to the Rust `GlContextPtr::get_uniform_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_uniform_iv(glcontextptr: &AzGlContextPtr, program: u32, location: i32, result: AzGLintVecRefMut) { glcontextptr.get_uniform_iv(program, location, result) }
/// Equivalent to the Rust `GlContextPtr::get_uniform_fv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_uniform_fv(glcontextptr: &AzGlContextPtr, program: u32, location: i32, result: AzGLfloatVecRefMut) { glcontextptr.get_uniform_fv(program, location, result) }
/// Equivalent to the Rust `GlContextPtr::get_uniform_block_index()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_uniform_block_index(glcontextptr: &AzGlContextPtr, program: u32, name: AzRefstr) -> u32 { glcontextptr.get_uniform_block_index(program, name) }
/// Equivalent to the Rust `GlContextPtr::get_uniform_indices()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_uniform_indices(glcontextptr: &AzGlContextPtr, program: u32, names: AzRefstrVecRef) -> AzGLuintVec { glcontextptr.get_uniform_indices(program, names) }
/// Equivalent to the Rust `GlContextPtr::bind_buffer_base()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_bind_buffer_base(glcontextptr: &AzGlContextPtr, target: u32, index: u32, buffer: u32) { glcontextptr.bind_buffer_base(target, index, buffer) }
/// Equivalent to the Rust `GlContextPtr::bind_buffer_range()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_bind_buffer_range(glcontextptr: &AzGlContextPtr, target: u32, index: u32, buffer: u32, offset: isize, size: isize) { glcontextptr.bind_buffer_range(target, index, buffer, offset, size) }
/// Equivalent to the Rust `GlContextPtr::uniform_block_binding()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_block_binding(glcontextptr: &AzGlContextPtr, program: u32, uniform_block_index: u32, uniform_block_binding: u32) { glcontextptr.uniform_block_binding(program, uniform_block_index, uniform_block_binding) }
/// Equivalent to the Rust `GlContextPtr::bind_buffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_bind_buffer(glcontextptr: &AzGlContextPtr, target: u32, buffer: u32) { glcontextptr.bind_buffer(target, buffer) }
/// Equivalent to the Rust `GlContextPtr::bind_vertex_array()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_bind_vertex_array(glcontextptr: &AzGlContextPtr, vao: u32) { glcontextptr.bind_vertex_array(vao) }
/// Equivalent to the Rust `GlContextPtr::bind_renderbuffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_bind_renderbuffer(glcontextptr: &AzGlContextPtr, target: u32, renderbuffer: u32) { glcontextptr.bind_renderbuffer(target, renderbuffer) }
/// Equivalent to the Rust `GlContextPtr::bind_framebuffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_bind_framebuffer(glcontextptr: &AzGlContextPtr, target: u32, framebuffer: u32) { glcontextptr.bind_framebuffer(target, framebuffer) }
/// Equivalent to the Rust `GlContextPtr::bind_texture()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_bind_texture(glcontextptr: &AzGlContextPtr, target: u32, texture: u32) { glcontextptr.bind_texture(target, texture) }
/// Equivalent to the Rust `GlContextPtr::draw_buffers()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_draw_buffers(glcontextptr: &AzGlContextPtr, bufs: AzGLenumVecRef) { glcontextptr.draw_buffers(bufs) }
/// Equivalent to the Rust `GlContextPtr::tex_image_2d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_tex_image_2d(glcontextptr: &AzGlContextPtr, target: u32, level: i32, internal_format: i32, width: i32, height: i32, border: i32, format: u32, ty: u32, opt_data: AzOptionU8VecRef) { glcontextptr.tex_image_2d(target, level, internal_format, width, height, border, format, ty, opt_data) }
/// Equivalent to the Rust `GlContextPtr::compressed_tex_image_2d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_compressed_tex_image_2d(glcontextptr: &AzGlContextPtr, target: u32, level: i32, internal_format: u32, width: i32, height: i32, border: i32, data: AzU8VecRef) { glcontextptr.compressed_tex_image_2d(target, level, internal_format, width, height, border, data) }
/// Equivalent to the Rust `GlContextPtr::compressed_tex_sub_image_2d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_compressed_tex_sub_image_2d(glcontextptr: &AzGlContextPtr, target: u32, level: i32, xoffset: i32, yoffset: i32, width: i32, height: i32, format: u32, data: AzU8VecRef) { glcontextptr.compressed_tex_sub_image_2d(target, level, xoffset, yoffset, width, height, format, data) }
/// Equivalent to the Rust `GlContextPtr::tex_image_3d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_tex_image_3d(glcontextptr: &AzGlContextPtr, target: u32, level: i32, internal_format: i32, width: i32, height: i32, depth: i32, border: i32, format: u32, ty: u32, opt_data: AzOptionU8VecRef) { glcontextptr.tex_image_3d(target, level, internal_format, width, height, depth, border, format, ty, opt_data) }
/// Equivalent to the Rust `GlContextPtr::copy_tex_image_2d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_copy_tex_image_2d(glcontextptr: &AzGlContextPtr, target: u32, level: i32, internal_format: u32, x: i32, y: i32, width: i32, height: i32, border: i32) { glcontextptr.copy_tex_image_2d(target, level, internal_format, x, y, width, height, border) }
/// Equivalent to the Rust `GlContextPtr::copy_tex_sub_image_2d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_copy_tex_sub_image_2d(glcontextptr: &AzGlContextPtr, target: u32, level: i32, xoffset: i32, yoffset: i32, x: i32, y: i32, width: i32, height: i32) { glcontextptr.copy_tex_sub_image_2d(target, level, xoffset, yoffset, x, y, width, height) }
/// Equivalent to the Rust `GlContextPtr::copy_tex_sub_image_3d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_copy_tex_sub_image_3d(glcontextptr: &AzGlContextPtr, target: u32, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, x: i32, y: i32, width: i32, height: i32) { glcontextptr.copy_tex_sub_image_3d(target, level, xoffset, yoffset, zoffset, x, y, width, height) }
/// Equivalent to the Rust `GlContextPtr::tex_sub_image_2d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_tex_sub_image_2d(glcontextptr: &AzGlContextPtr, target: u32, level: i32, xoffset: i32, yoffset: i32, width: i32, height: i32, format: u32, ty: u32, data: AzU8VecRef) { glcontextptr.tex_sub_image_2d(target, level, xoffset, yoffset, width, height, format, ty, data) }
/// Equivalent to the Rust `GlContextPtr::tex_sub_image_2d_pbo()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_tex_sub_image_2d_pbo(glcontextptr: &AzGlContextPtr, target: u32, level: i32, xoffset: i32, yoffset: i32, width: i32, height: i32, format: u32, ty: u32, offset: usize) { glcontextptr.tex_sub_image_2d_pbo(target, level, xoffset, yoffset, width, height, format, ty, offset) }
/// Equivalent to the Rust `GlContextPtr::tex_sub_image_3d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_tex_sub_image_3d(glcontextptr: &AzGlContextPtr, target: u32, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32, height: i32, depth: i32, format: u32, ty: u32, data: AzU8VecRef) { glcontextptr.tex_sub_image_3d(target, level, xoffset, yoffset, zoffset, width, height, depth, format, ty, data) }
/// Equivalent to the Rust `GlContextPtr::tex_sub_image_3d_pbo()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_tex_sub_image_3d_pbo(glcontextptr: &AzGlContextPtr, target: u32, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32, height: i32, depth: i32, format: u32, ty: u32, offset: usize) { glcontextptr.tex_sub_image_3d_pbo(target, level, xoffset, yoffset, zoffset, width, height, depth, format, ty, offset) }
/// Equivalent to the Rust `GlContextPtr::tex_storage_2d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_tex_storage_2d(glcontextptr: &AzGlContextPtr, target: u32, levels: i32, internal_format: u32, width: i32, height: i32) { glcontextptr.tex_storage_2d(target, levels, internal_format, width, height) }
/// Equivalent to the Rust `GlContextPtr::tex_storage_3d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_tex_storage_3d(glcontextptr: &AzGlContextPtr, target: u32, levels: i32, internal_format: u32, width: i32, height: i32, depth: i32) { glcontextptr.tex_storage_3d(target, levels, internal_format, width, height, depth) }
/// Equivalent to the Rust `GlContextPtr::get_tex_image_into_buffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_tex_image_into_buffer(glcontextptr: &AzGlContextPtr, target: u32, level: i32, format: u32, ty: u32, output: AzU8VecRefMut) { glcontextptr.get_tex_image_into_buffer(target, level, format, ty, output) }
/// Equivalent to the Rust `GlContextPtr::copy_image_sub_data()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_copy_image_sub_data(glcontextptr: &AzGlContextPtr, src_name: u32, src_target: u32, src_level: i32, src_x: i32, src_y: i32, src_z: i32, dst_name: u32, dst_target: u32, dst_level: i32, dst_x: i32, dst_y: i32, dst_z: i32, src_width: i32, src_height: i32, src_depth: i32) { glcontextptr.copy_image_sub_data(src_name, src_target, src_level, src_x, src_y, src_z, dst_name, dst_target, dst_level, dst_x, dst_y, dst_z, src_width, src_height, src_depth) }
/// Equivalent to the Rust `GlContextPtr::invalidate_framebuffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_invalidate_framebuffer(glcontextptr: &AzGlContextPtr, target: u32, attachments: AzGLenumVecRef) { glcontextptr.invalidate_framebuffer(target, attachments) }
/// Equivalent to the Rust `GlContextPtr::invalidate_sub_framebuffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_invalidate_sub_framebuffer(glcontextptr: &AzGlContextPtr, target: u32, attachments: AzGLenumVecRef, xoffset: i32, yoffset: i32, width: i32, height: i32) { glcontextptr.invalidate_sub_framebuffer(target, attachments, xoffset, yoffset, width, height) }
/// Equivalent to the Rust `GlContextPtr::get_integer_v()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_integer_v(glcontextptr: &AzGlContextPtr, name: u32, result: AzGLintVecRefMut) { glcontextptr.get_integer_v(name, result) }
/// Equivalent to the Rust `GlContextPtr::get_integer_64v()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_integer_64v(glcontextptr: &AzGlContextPtr, name: u32, result: AzGLint64VecRefMut) { glcontextptr.get_integer_64v(name, result) }
/// Equivalent to the Rust `GlContextPtr::get_integer_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_integer_iv(glcontextptr: &AzGlContextPtr, name: u32, index: u32, result: AzGLintVecRefMut) { glcontextptr.get_integer_iv(name, index, result) }
/// Equivalent to the Rust `GlContextPtr::get_integer_64iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_integer_64iv(glcontextptr: &AzGlContextPtr, name: u32, index: u32, result: AzGLint64VecRefMut) { glcontextptr.get_integer_64iv(name, index, result) }
/// Equivalent to the Rust `GlContextPtr::get_boolean_v()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_boolean_v(glcontextptr: &AzGlContextPtr, name: u32, result: AzGLbooleanVecRefMut) { glcontextptr.get_boolean_v(name, result) }
/// Equivalent to the Rust `GlContextPtr::get_float_v()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_float_v(glcontextptr: &AzGlContextPtr, name: u32, result: AzGLfloatVecRefMut) { glcontextptr.get_float_v(name, result) }
/// Equivalent to the Rust `GlContextPtr::get_framebuffer_attachment_parameter_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_framebuffer_attachment_parameter_iv(glcontextptr: &AzGlContextPtr, target: u32, attachment: u32, pname: u32) -> i32 { glcontextptr.get_framebuffer_attachment_parameter_iv(target, attachment, pname) }
/// Equivalent to the Rust `GlContextPtr::get_renderbuffer_parameter_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_renderbuffer_parameter_iv(glcontextptr: &AzGlContextPtr, target: u32, pname: u32) -> i32 { glcontextptr.get_renderbuffer_parameter_iv(target, pname) }
/// Equivalent to the Rust `GlContextPtr::get_tex_parameter_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_tex_parameter_iv(glcontextptr: &AzGlContextPtr, target: u32, name: u32) -> i32 { glcontextptr.get_tex_parameter_iv(target, name) }
/// Equivalent to the Rust `GlContextPtr::get_tex_parameter_fv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_tex_parameter_fv(glcontextptr: &AzGlContextPtr, target: u32, name: u32) -> f32 { glcontextptr.get_tex_parameter_fv(target, name) }
/// Equivalent to the Rust `GlContextPtr::tex_parameter_i()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_tex_parameter_i(glcontextptr: &AzGlContextPtr, target: u32, pname: u32, param: i32) { glcontextptr.tex_parameter_i(target, pname, param) }
/// Equivalent to the Rust `GlContextPtr::tex_parameter_f()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_tex_parameter_f(glcontextptr: &AzGlContextPtr, target: u32, pname: u32, param: f32) { glcontextptr.tex_parameter_f(target, pname, param) }
/// Equivalent to the Rust `GlContextPtr::framebuffer_texture_2d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_framebuffer_texture_2d(glcontextptr: &AzGlContextPtr, target: u32, attachment: u32, textarget: u32, texture: u32, level: i32) { glcontextptr.framebuffer_texture_2d(target, attachment, textarget, texture, level) }
/// Equivalent to the Rust `GlContextPtr::framebuffer_texture_layer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_framebuffer_texture_layer(glcontextptr: &AzGlContextPtr, target: u32, attachment: u32, texture: u32, level: i32, layer: i32) { glcontextptr.framebuffer_texture_layer(target, attachment, texture, level, layer) }
/// Equivalent to the Rust `GlContextPtr::blit_framebuffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_blit_framebuffer(glcontextptr: &AzGlContextPtr, src_x0: i32, src_y0: i32, src_x1: i32, src_y1: i32, dst_x0: i32, dst_y0: i32, dst_x1: i32, dst_y1: i32, mask: u32, filter: u32) { glcontextptr.blit_framebuffer(src_x0, src_y0, src_x1, src_y1, dst_x0, dst_y0, dst_x1, dst_y1, mask, filter) }
/// Equivalent to the Rust `GlContextPtr::vertex_attrib_4f()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_vertex_attrib_4f(glcontextptr: &AzGlContextPtr, index: u32, x: f32, y: f32, z: f32, w: f32) { glcontextptr.vertex_attrib_4f(index, x, y, z, w) }
/// Equivalent to the Rust `GlContextPtr::vertex_attrib_pointer_f32()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_vertex_attrib_pointer_f32(glcontextptr: &AzGlContextPtr, index: u32, size: i32, normalized: bool, stride: i32, offset: u32) { glcontextptr.vertex_attrib_pointer_f32(index, size, normalized, stride, offset) }
/// Equivalent to the Rust `GlContextPtr::vertex_attrib_pointer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_vertex_attrib_pointer(glcontextptr: &AzGlContextPtr, index: u32, size: i32, type_: u32, normalized: bool, stride: i32, offset: u32) { glcontextptr.vertex_attrib_pointer(index, size, type_, normalized, stride, offset) }
/// Equivalent to the Rust `GlContextPtr::vertex_attrib_i_pointer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_vertex_attrib_i_pointer(glcontextptr: &AzGlContextPtr, index: u32, size: i32, type_: u32, stride: i32, offset: u32) { glcontextptr.vertex_attrib_i_pointer(index, size, type_, stride, offset) }
/// Equivalent to the Rust `GlContextPtr::vertex_attrib_divisor()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_vertex_attrib_divisor(glcontextptr: &AzGlContextPtr, index: u32, divisor: u32) { glcontextptr.vertex_attrib_divisor(index, divisor) }
/// Equivalent to the Rust `GlContextPtr::viewport()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_viewport(glcontextptr: &AzGlContextPtr, x: i32, y: i32, width: i32, height: i32) { glcontextptr.viewport(x, y, width, height) }
/// Equivalent to the Rust `GlContextPtr::scissor()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_scissor(glcontextptr: &AzGlContextPtr, x: i32, y: i32, width: i32, height: i32) { glcontextptr.scissor(x, y, width, height) }
/// Equivalent to the Rust `GlContextPtr::line_width()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_line_width(glcontextptr: &AzGlContextPtr, width: f32) { glcontextptr.line_width(width) }
/// Equivalent to the Rust `GlContextPtr::use_program()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_use_program(glcontextptr: &AzGlContextPtr, program: u32) { glcontextptr.use_program(program) }
/// Equivalent to the Rust `GlContextPtr::validate_program()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_validate_program(glcontextptr: &AzGlContextPtr, program: u32) { glcontextptr.validate_program(program) }
/// Equivalent to the Rust `GlContextPtr::draw_arrays()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_draw_arrays(glcontextptr: &AzGlContextPtr, mode: u32, first: i32, count: i32) { glcontextptr.draw_arrays(mode, first, count) }
/// Equivalent to the Rust `GlContextPtr::draw_arrays_instanced()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_draw_arrays_instanced(glcontextptr: &AzGlContextPtr, mode: u32, first: i32, count: i32, primcount: i32) { glcontextptr.draw_arrays_instanced(mode, first, count, primcount) }
/// Equivalent to the Rust `GlContextPtr::draw_elements()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_draw_elements(glcontextptr: &AzGlContextPtr, mode: u32, count: i32, element_type: u32, indices_offset: u32) { glcontextptr.draw_elements(mode, count, element_type, indices_offset) }
/// Equivalent to the Rust `GlContextPtr::draw_elements_instanced()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_draw_elements_instanced(glcontextptr: &AzGlContextPtr, mode: u32, count: i32, element_type: u32, indices_offset: u32, primcount: i32) { glcontextptr.draw_elements_instanced(mode, count, element_type, indices_offset, primcount) }
/// Equivalent to the Rust `GlContextPtr::blend_color()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_blend_color(glcontextptr: &AzGlContextPtr, r: f32, g: f32, b: f32, a: f32) { glcontextptr.blend_color(r, g, b, a) }
/// Equivalent to the Rust `GlContextPtr::blend_func()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_blend_func(glcontextptr: &AzGlContextPtr, sfactor: u32, dfactor: u32) { glcontextptr.blend_func(sfactor, dfactor) }
/// Equivalent to the Rust `GlContextPtr::blend_func_separate()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_blend_func_separate(glcontextptr: &AzGlContextPtr, src_rgb: u32, dest_rgb: u32, src_alpha: u32, dest_alpha: u32) { glcontextptr.blend_func_separate(src_rgb, dest_rgb, src_alpha, dest_alpha) }
/// Equivalent to the Rust `GlContextPtr::blend_equation()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_blend_equation(glcontextptr: &AzGlContextPtr, mode: u32) { glcontextptr.blend_equation(mode) }
/// Equivalent to the Rust `GlContextPtr::blend_equation_separate()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_blend_equation_separate(glcontextptr: &AzGlContextPtr, mode_rgb: u32, mode_alpha: u32) { glcontextptr.blend_equation_separate(mode_rgb, mode_alpha) }
/// Equivalent to the Rust `GlContextPtr::color_mask()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_color_mask(glcontextptr: &AzGlContextPtr, r: bool, g: bool, b: bool, a: bool) { glcontextptr.color_mask(r, g, b, a) }
/// Equivalent to the Rust `GlContextPtr::cull_face()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_cull_face(glcontextptr: &AzGlContextPtr, mode: u32) { glcontextptr.cull_face(mode) }
/// Equivalent to the Rust `GlContextPtr::front_face()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_front_face(glcontextptr: &AzGlContextPtr, mode: u32) { glcontextptr.front_face(mode) }
/// Equivalent to the Rust `GlContextPtr::enable()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_enable(glcontextptr: &AzGlContextPtr, cap: u32) { glcontextptr.enable(cap) }
/// Equivalent to the Rust `GlContextPtr::disable()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_disable(glcontextptr: &AzGlContextPtr, cap: u32) { glcontextptr.disable(cap) }
/// Equivalent to the Rust `GlContextPtr::hint()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_hint(glcontextptr: &AzGlContextPtr, param_name: u32, param_val: u32) { glcontextptr.hint(param_name, param_val) }
/// Equivalent to the Rust `GlContextPtr::is_enabled()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_is_enabled(glcontextptr: &AzGlContextPtr, cap: u32) -> u8 { glcontextptr.is_enabled(cap) }
/// Equivalent to the Rust `GlContextPtr::is_shader()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_is_shader(glcontextptr: &AzGlContextPtr, shader: u32) -> u8 { glcontextptr.is_shader(shader) }
/// Equivalent to the Rust `GlContextPtr::is_texture()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_is_texture(glcontextptr: &AzGlContextPtr, texture: u32) -> u8 { glcontextptr.is_texture(texture) }
/// Equivalent to the Rust `GlContextPtr::is_framebuffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_is_framebuffer(glcontextptr: &AzGlContextPtr, framebuffer: u32) -> u8 { glcontextptr.is_framebuffer(framebuffer) }
/// Equivalent to the Rust `GlContextPtr::is_renderbuffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_is_renderbuffer(glcontextptr: &AzGlContextPtr, renderbuffer: u32) -> u8 { glcontextptr.is_renderbuffer(renderbuffer) }
/// Equivalent to the Rust `GlContextPtr::check_frame_buffer_status()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_check_frame_buffer_status(glcontextptr: &AzGlContextPtr, target: u32) -> u32 { glcontextptr.check_frame_buffer_status(target) }
/// Equivalent to the Rust `GlContextPtr::enable_vertex_attrib_array()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_enable_vertex_attrib_array(glcontextptr: &AzGlContextPtr, index: u32) { glcontextptr.enable_vertex_attrib_array(index) }
/// Equivalent to the Rust `GlContextPtr::disable_vertex_attrib_array()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_disable_vertex_attrib_array(glcontextptr: &AzGlContextPtr, index: u32) { glcontextptr.disable_vertex_attrib_array(index) }
/// Equivalent to the Rust `GlContextPtr::uniform_1f()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_1f(glcontextptr: &AzGlContextPtr, location: i32, v0: f32) { glcontextptr.uniform_1f(location, v0) }
/// Equivalent to the Rust `GlContextPtr::uniform_1fv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_1fv(glcontextptr: &AzGlContextPtr, location: i32, values: AzF32VecRef) { glcontextptr.uniform_1fv(location, values) }
/// Equivalent to the Rust `GlContextPtr::uniform_1i()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_1i(glcontextptr: &AzGlContextPtr, location: i32, v0: i32) { glcontextptr.uniform_1i(location, v0) }
/// Equivalent to the Rust `GlContextPtr::uniform_1iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_1iv(glcontextptr: &AzGlContextPtr, location: i32, values: AzI32VecRef) { glcontextptr.uniform_1iv(location, values) }
/// Equivalent to the Rust `GlContextPtr::uniform_1ui()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_1ui(glcontextptr: &AzGlContextPtr, location: i32, v0: u32) { glcontextptr.uniform_1ui(location, v0) }
/// Equivalent to the Rust `GlContextPtr::uniform_2f()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_2f(glcontextptr: &AzGlContextPtr, location: i32, v0: f32, v1: f32) { glcontextptr.uniform_2f(location, v0, v1) }
/// Equivalent to the Rust `GlContextPtr::uniform_2fv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_2fv(glcontextptr: &AzGlContextPtr, location: i32, values: AzF32VecRef) { glcontextptr.uniform_2fv(location, values) }
/// Equivalent to the Rust `GlContextPtr::uniform_2i()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_2i(glcontextptr: &AzGlContextPtr, location: i32, v0: i32, v1: i32) { glcontextptr.uniform_2i(location, v0, v1) }
/// Equivalent to the Rust `GlContextPtr::uniform_2iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_2iv(glcontextptr: &AzGlContextPtr, location: i32, values: AzI32VecRef) { glcontextptr.uniform_2iv(location, values) }
/// Equivalent to the Rust `GlContextPtr::uniform_2ui()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_2ui(glcontextptr: &AzGlContextPtr, location: i32, v0: u32, v1: u32) { glcontextptr.uniform_2ui(location, v0, v1) }
/// Equivalent to the Rust `GlContextPtr::uniform_3f()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_3f(glcontextptr: &AzGlContextPtr, location: i32, v0: f32, v1: f32, v2: f32) { glcontextptr.uniform_3f(location, v0, v1, v2) }
/// Equivalent to the Rust `GlContextPtr::uniform_3fv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_3fv(glcontextptr: &AzGlContextPtr, location: i32, values: AzF32VecRef) { glcontextptr.uniform_3fv(location, values) }
/// Equivalent to the Rust `GlContextPtr::uniform_3i()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_3i(glcontextptr: &AzGlContextPtr, location: i32, v0: i32, v1: i32, v2: i32) { glcontextptr.uniform_3i(location, v0, v1, v2) }
/// Equivalent to the Rust `GlContextPtr::uniform_3iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_3iv(glcontextptr: &AzGlContextPtr, location: i32, values: AzI32VecRef) { glcontextptr.uniform_3iv(location, values) }
/// Equivalent to the Rust `GlContextPtr::uniform_3ui()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_3ui(glcontextptr: &AzGlContextPtr, location: i32, v0: u32, v1: u32, v2: u32) { glcontextptr.uniform_3ui(location, v0, v1, v2) }
/// Equivalent to the Rust `GlContextPtr::uniform_4f()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_4f(glcontextptr: &AzGlContextPtr, location: i32, x: f32, y: f32, z: f32, w: f32) { glcontextptr.uniform_4f(location, x, y, z, w) }
/// Equivalent to the Rust `GlContextPtr::uniform_4i()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_4i(glcontextptr: &AzGlContextPtr, location: i32, x: i32, y: i32, z: i32, w: i32) { glcontextptr.uniform_4i(location, x, y, z, w) }
/// Equivalent to the Rust `GlContextPtr::uniform_4iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_4iv(glcontextptr: &AzGlContextPtr, location: i32, values: AzI32VecRef) { glcontextptr.uniform_4iv(location, values) }
/// Equivalent to the Rust `GlContextPtr::uniform_4ui()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_4ui(glcontextptr: &AzGlContextPtr, location: i32, x: u32, y: u32, z: u32, w: u32) { glcontextptr.uniform_4ui(location, x, y, z, w) }
/// Equivalent to the Rust `GlContextPtr::uniform_4fv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_4fv(glcontextptr: &AzGlContextPtr, location: i32, values: AzF32VecRef) { glcontextptr.uniform_4fv(location, values) }
/// Equivalent to the Rust `GlContextPtr::uniform_matrix_2fv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_matrix_2fv(glcontextptr: &AzGlContextPtr, location: i32, transpose: bool, value: AzF32VecRef) { glcontextptr.uniform_matrix_2fv(location, transpose, value) }
/// Equivalent to the Rust `GlContextPtr::uniform_matrix_3fv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_matrix_3fv(glcontextptr: &AzGlContextPtr, location: i32, transpose: bool, value: AzF32VecRef) { glcontextptr.uniform_matrix_3fv(location, transpose, value) }
/// Equivalent to the Rust `GlContextPtr::uniform_matrix_4fv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_matrix_4fv(glcontextptr: &AzGlContextPtr, location: i32, transpose: bool, value: AzF32VecRef) { glcontextptr.uniform_matrix_4fv(location, transpose, value) }
/// Equivalent to the Rust `GlContextPtr::depth_mask()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_depth_mask(glcontextptr: &AzGlContextPtr, flag: bool) { glcontextptr.depth_mask(flag) }
/// Equivalent to the Rust `GlContextPtr::depth_range()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_depth_range(glcontextptr: &AzGlContextPtr, near: f64, far: f64) { glcontextptr.depth_range(near, far) }
/// Equivalent to the Rust `GlContextPtr::get_active_attrib()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_active_attrib(glcontextptr: &AzGlContextPtr, program: u32, index: u32) -> AzGetActiveAttribReturn { glcontextptr.get_active_attrib(program, index) }
/// Equivalent to the Rust `GlContextPtr::get_active_uniform()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_active_uniform(glcontextptr: &AzGlContextPtr, program: u32, index: u32) -> AzGetActiveUniformReturn { glcontextptr.get_active_uniform(program, index) }
/// Equivalent to the Rust `GlContextPtr::get_active_uniforms_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_active_uniforms_iv(glcontextptr: &AzGlContextPtr, program: u32, indices: AzGLuintVec, pname: u32) -> AzGLintVec { glcontextptr.get_active_uniforms_iv(program, indices, pname) }
/// Equivalent to the Rust `GlContextPtr::get_active_uniform_block_i()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_active_uniform_block_i(glcontextptr: &AzGlContextPtr, program: u32, index: u32, pname: u32) -> i32 { glcontextptr.get_active_uniform_block_i(program, index, pname) }
/// Equivalent to the Rust `GlContextPtr::get_active_uniform_block_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_active_uniform_block_iv(glcontextptr: &AzGlContextPtr, program: u32, index: u32, pname: u32) -> AzGLintVec { glcontextptr.get_active_uniform_block_iv(program, index, pname) }
/// Equivalent to the Rust `GlContextPtr::get_active_uniform_block_name()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_active_uniform_block_name(glcontextptr: &AzGlContextPtr, program: u32, index: u32) -> AzString { glcontextptr.get_active_uniform_block_name(program, index) }
/// Equivalent to the Rust `GlContextPtr::get_attrib_location()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_attrib_location(glcontextptr: &AzGlContextPtr, program: u32, name: AzRefstr) -> i32 { glcontextptr.get_attrib_location(program, name) }
/// Equivalent to the Rust `GlContextPtr::get_frag_data_location()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_frag_data_location(glcontextptr: &AzGlContextPtr, program: u32, name: AzRefstr) -> i32 { glcontextptr.get_frag_data_location(program, name) }
/// Equivalent to the Rust `GlContextPtr::get_uniform_location()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_uniform_location(glcontextptr: &AzGlContextPtr, program: u32, name: AzRefstr) -> i32 { glcontextptr.get_uniform_location(program, name) }
/// Equivalent to the Rust `GlContextPtr::get_program_info_log()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_program_info_log(glcontextptr: &AzGlContextPtr, program: u32) -> AzString { glcontextptr.get_program_info_log(program) }
/// Equivalent to the Rust `GlContextPtr::get_program_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_program_iv(glcontextptr: &AzGlContextPtr, program: u32, pname: u32, result: AzGLintVecRefMut) { glcontextptr.get_program_iv(program, pname, result) }
/// Equivalent to the Rust `GlContextPtr::get_program_binary()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_program_binary(glcontextptr: &AzGlContextPtr, program: u32) -> AzGetProgramBinaryReturn { glcontextptr.get_program_binary(program) }
/// Equivalent to the Rust `GlContextPtr::program_binary()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_program_binary(glcontextptr: &AzGlContextPtr, program: u32, format: u32, binary: AzU8VecRef) { glcontextptr.program_binary(program, format, binary) }
/// Equivalent to the Rust `GlContextPtr::program_parameter_i()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_program_parameter_i(glcontextptr: &AzGlContextPtr, program: u32, pname: u32, value: i32) { glcontextptr.program_parameter_i(program, pname, value) }
/// Equivalent to the Rust `GlContextPtr::get_vertex_attrib_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_vertex_attrib_iv(glcontextptr: &AzGlContextPtr, index: u32, pname: u32, result: AzGLintVecRefMut) { glcontextptr.get_vertex_attrib_iv(index, pname, result) }
/// Equivalent to the Rust `GlContextPtr::get_vertex_attrib_fv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_vertex_attrib_fv(glcontextptr: &AzGlContextPtr, index: u32, pname: u32, result: AzGLfloatVecRefMut) { glcontextptr.get_vertex_attrib_fv(index, pname, result) }
/// Equivalent to the Rust `GlContextPtr::get_vertex_attrib_pointer_v()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_vertex_attrib_pointer_v(glcontextptr: &AzGlContextPtr, index: u32, pname: u32) -> isize { glcontextptr.get_vertex_attrib_pointer_v(index, pname) }
/// Equivalent to the Rust `GlContextPtr::get_buffer_parameter_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_buffer_parameter_iv(glcontextptr: &AzGlContextPtr, target: u32, pname: u32) -> i32 { glcontextptr.get_buffer_parameter_iv(target, pname) }
/// Equivalent to the Rust `GlContextPtr::get_shader_info_log()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_shader_info_log(glcontextptr: &AzGlContextPtr, shader: u32) -> AzString { glcontextptr.get_shader_info_log(shader) }
/// Equivalent to the Rust `GlContextPtr::get_string()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_string(glcontextptr: &AzGlContextPtr, which: u32) -> AzString { glcontextptr.get_string(which) }
/// Equivalent to the Rust `GlContextPtr::get_string_i()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_string_i(glcontextptr: &AzGlContextPtr, which: u32, index: u32) -> AzString { glcontextptr.get_string_i(which, index) }
/// Equivalent to the Rust `GlContextPtr::get_shader_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_shader_iv(glcontextptr: &AzGlContextPtr, shader: u32, pname: u32, result: AzGLintVecRefMut) { glcontextptr.get_shader_iv(shader, pname, result) }
/// Equivalent to the Rust `GlContextPtr::get_shader_precision_format()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_shader_precision_format(glcontextptr: &AzGlContextPtr, shader_type: u32, precision_type: u32) -> AzGlShaderPrecisionFormatReturn { glcontextptr.get_shader_precision_format(shader_type, precision_type) }
/// Equivalent to the Rust `GlContextPtr::compile_shader()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_compile_shader(glcontextptr: &AzGlContextPtr, shader: u32) { glcontextptr.compile_shader(shader) }
/// Equivalent to the Rust `GlContextPtr::create_program()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_create_program(glcontextptr: &AzGlContextPtr) -> u32 { glcontextptr.create_program() }
/// Equivalent to the Rust `GlContextPtr::delete_program()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_delete_program(glcontextptr: &AzGlContextPtr, program: u32) { glcontextptr.delete_program(program) }
/// Equivalent to the Rust `GlContextPtr::create_shader()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_create_shader(glcontextptr: &AzGlContextPtr, shader_type: u32) -> u32 { glcontextptr.create_shader(shader_type) }
/// Equivalent to the Rust `GlContextPtr::delete_shader()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_delete_shader(glcontextptr: &AzGlContextPtr, shader: u32) { glcontextptr.delete_shader(shader) }
/// Equivalent to the Rust `GlContextPtr::detach_shader()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_detach_shader(glcontextptr: &AzGlContextPtr, program: u32, shader: u32) { glcontextptr.detach_shader(program, shader) }
/// Equivalent to the Rust `GlContextPtr::link_program()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_link_program(glcontextptr: &AzGlContextPtr, program: u32) { glcontextptr.link_program(program) }
/// Equivalent to the Rust `GlContextPtr::clear_color()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_clear_color(glcontextptr: &AzGlContextPtr, r: f32, g: f32, b: f32, a: f32) { glcontextptr.clear_color(r, g, b, a) }
/// Equivalent to the Rust `GlContextPtr::clear()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_clear(glcontextptr: &AzGlContextPtr, buffer_mask: u32) { glcontextptr.clear(buffer_mask) }
/// Equivalent to the Rust `GlContextPtr::clear_depth()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_clear_depth(glcontextptr: &AzGlContextPtr, depth: f64) { glcontextptr.clear_depth(depth) }
/// Equivalent to the Rust `GlContextPtr::clear_stencil()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_clear_stencil(glcontextptr: &AzGlContextPtr, s: i32) { glcontextptr.clear_stencil(s) }
/// Equivalent to the Rust `GlContextPtr::flush()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_flush(glcontextptr: &AzGlContextPtr) { glcontextptr.flush() }
/// Equivalent to the Rust `GlContextPtr::finish()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_finish(glcontextptr: &AzGlContextPtr) { glcontextptr.finish() }
/// Equivalent to the Rust `GlContextPtr::get_error()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_error(glcontextptr: &AzGlContextPtr) -> u32 { glcontextptr.get_error() }
/// Equivalent to the Rust `GlContextPtr::stencil_mask()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_stencil_mask(glcontextptr: &AzGlContextPtr, mask: u32) { glcontextptr.stencil_mask(mask) }
/// Equivalent to the Rust `GlContextPtr::stencil_mask_separate()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_stencil_mask_separate(glcontextptr: &AzGlContextPtr, face: u32, mask: u32) { glcontextptr.stencil_mask_separate(face, mask) }
/// Equivalent to the Rust `GlContextPtr::stencil_func()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_stencil_func(glcontextptr: &AzGlContextPtr, func: u32, ref_: i32, mask: u32) { glcontextptr.stencil_func(func, ref_, mask) }
/// Equivalent to the Rust `GlContextPtr::stencil_func_separate()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_stencil_func_separate(glcontextptr: &AzGlContextPtr, face: u32, func: u32, ref_: i32, mask: u32) { glcontextptr.stencil_func_separate(face, func, ref_, mask) }
/// Equivalent to the Rust `GlContextPtr::stencil_op()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_stencil_op(glcontextptr: &AzGlContextPtr, sfail: u32, dpfail: u32, dppass: u32) { glcontextptr.stencil_op(sfail, dpfail, dppass) }
/// Equivalent to the Rust `GlContextPtr::stencil_op_separate()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_stencil_op_separate(glcontextptr: &AzGlContextPtr, face: u32, sfail: u32, dpfail: u32, dppass: u32) { glcontextptr.stencil_op_separate(face, sfail, dpfail, dppass) }
/// Equivalent to the Rust `GlContextPtr::egl_image_target_texture2d_oes()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_egl_image_target_texture2d_oes(glcontextptr: &AzGlContextPtr, target: u32, image: *const c_void) { glcontextptr.egl_image_target_texture2d_oes(target, image) }
/// Equivalent to the Rust `GlContextPtr::generate_mipmap()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_generate_mipmap(glcontextptr: &AzGlContextPtr, target: u32) { glcontextptr.generate_mipmap(target) }
/// Equivalent to the Rust `GlContextPtr::insert_event_marker_ext()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_insert_event_marker_ext(glcontextptr: &AzGlContextPtr, message: AzRefstr) { glcontextptr.insert_event_marker_ext(message) }
/// Equivalent to the Rust `GlContextPtr::push_group_marker_ext()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_push_group_marker_ext(glcontextptr: &AzGlContextPtr, message: AzRefstr) { glcontextptr.push_group_marker_ext(message) }
/// Equivalent to the Rust `GlContextPtr::pop_group_marker_ext()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_pop_group_marker_ext(glcontextptr: &AzGlContextPtr) { glcontextptr.pop_group_marker_ext() }
/// Equivalent to the Rust `GlContextPtr::debug_message_insert_khr()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_debug_message_insert_khr(glcontextptr: &AzGlContextPtr, source: u32, type_: u32, id: u32, severity: u32, message: AzRefstr) { glcontextptr.debug_message_insert_khr(source, type_, id, severity, message) }
/// Equivalent to the Rust `GlContextPtr::push_debug_group_khr()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_push_debug_group_khr(glcontextptr: &AzGlContextPtr, source: u32, id: u32, message: AzRefstr) { glcontextptr.push_debug_group_khr(source, id, message) }
/// Equivalent to the Rust `GlContextPtr::pop_debug_group_khr()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_pop_debug_group_khr(glcontextptr: &AzGlContextPtr) { glcontextptr.pop_debug_group_khr() }
/// Equivalent to the Rust `GlContextPtr::fence_sync()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_fence_sync(glcontextptr: &AzGlContextPtr, condition: u32, flags: u32) -> AzGLsyncPtr { glcontextptr.fence_sync(condition, flags) }
/// Equivalent to the Rust `GlContextPtr::client_wait_sync()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_client_wait_sync(glcontextptr: &AzGlContextPtr, sync: AzGLsyncPtr, flags: u32, timeout: u64) { glcontextptr.client_wait_sync(sync, flags, timeout) }
/// Equivalent to the Rust `GlContextPtr::wait_sync()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_wait_sync(glcontextptr: &AzGlContextPtr, sync: AzGLsyncPtr, flags: u32, timeout: u64) { glcontextptr.wait_sync(sync, flags, timeout) }
/// Equivalent to the Rust `GlContextPtr::delete_sync()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_delete_sync(glcontextptr: &AzGlContextPtr, sync: AzGLsyncPtr) { glcontextptr.delete_sync(sync) }
/// Equivalent to the Rust `GlContextPtr::texture_range_apple()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_texture_range_apple(glcontextptr: &AzGlContextPtr, target: u32, data: AzU8VecRef) { glcontextptr.texture_range_apple(target, data) }
/// Equivalent to the Rust `GlContextPtr::gen_fences_apple()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_gen_fences_apple(glcontextptr: &AzGlContextPtr, n: i32) -> AzGLuintVec { glcontextptr.gen_fences_apple(n) }
/// Equivalent to the Rust `GlContextPtr::delete_fences_apple()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_delete_fences_apple(glcontextptr: &AzGlContextPtr, fences: AzGLuintVecRef) { glcontextptr.delete_fences_apple(fences) }
/// Equivalent to the Rust `GlContextPtr::set_fence_apple()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_set_fence_apple(glcontextptr: &AzGlContextPtr, fence: u32) { glcontextptr.set_fence_apple(fence) }
/// Equivalent to the Rust `GlContextPtr::finish_fence_apple()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_finish_fence_apple(glcontextptr: &AzGlContextPtr, fence: u32) { glcontextptr.finish_fence_apple(fence) }
/// Equivalent to the Rust `GlContextPtr::test_fence_apple()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_test_fence_apple(glcontextptr: &AzGlContextPtr, fence: u32) { glcontextptr.test_fence_apple(fence) }
/// Equivalent to the Rust `GlContextPtr::test_object_apple()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_test_object_apple(glcontextptr: &AzGlContextPtr, object: u32, name: u32) -> u8 { glcontextptr.test_object_apple(object, name) }
/// Equivalent to the Rust `GlContextPtr::finish_object_apple()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_finish_object_apple(glcontextptr: &AzGlContextPtr, object: u32, name: u32) { glcontextptr.finish_object_apple(object, name) }
/// Equivalent to the Rust `GlContextPtr::get_frag_data_index()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_frag_data_index(glcontextptr: &AzGlContextPtr, program: u32, name: AzRefstr) -> i32 { glcontextptr.get_frag_data_index(program, name) }
/// Equivalent to the Rust `GlContextPtr::blend_barrier_khr()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_blend_barrier_khr(glcontextptr: &AzGlContextPtr) { glcontextptr.blend_barrier_khr() }
/// Equivalent to the Rust `GlContextPtr::bind_frag_data_location_indexed()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_bind_frag_data_location_indexed(glcontextptr: &AzGlContextPtr, program: u32, color_number: u32, index: u32, name: AzRefstr) { glcontextptr.bind_frag_data_location_indexed(program, color_number, index, name) }
/// Equivalent to the Rust `GlContextPtr::get_debug_messages()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_debug_messages(glcontextptr: &AzGlContextPtr) -> AzDebugMessageVec { glcontextptr.get_debug_messages() }
/// Equivalent to the Rust `GlContextPtr::provoking_vertex_angle()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_provoking_vertex_angle(glcontextptr: &AzGlContextPtr, mode: u32) { glcontextptr.provoking_vertex_angle(mode) }
/// Equivalent to the Rust `GlContextPtr::gen_vertex_arrays_apple()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_gen_vertex_arrays_apple(glcontextptr: &AzGlContextPtr, n: i32) -> AzGLuintVec { glcontextptr.gen_vertex_arrays_apple(n) }
/// Equivalent to the Rust `GlContextPtr::bind_vertex_array_apple()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_bind_vertex_array_apple(glcontextptr: &AzGlContextPtr, vao: u32) { glcontextptr.bind_vertex_array_apple(vao) }
/// Equivalent to the Rust `GlContextPtr::delete_vertex_arrays_apple()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_delete_vertex_arrays_apple(glcontextptr: &AzGlContextPtr, vertex_arrays: AzGLuintVecRef) { glcontextptr.delete_vertex_arrays_apple(vertex_arrays) }
/// Equivalent to the Rust `GlContextPtr::copy_texture_chromium()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_copy_texture_chromium(glcontextptr: &AzGlContextPtr, source_id: u32, source_level: i32, dest_target: u32, dest_id: u32, dest_level: i32, internal_format: i32, dest_type: u32, unpack_flip_y: u8, unpack_premultiply_alpha: u8, unpack_unmultiply_alpha: u8) { glcontextptr.copy_texture_chromium(source_id, source_level, dest_target, dest_id, dest_level, internal_format, dest_type, unpack_flip_y, unpack_premultiply_alpha, unpack_unmultiply_alpha) }
/// Equivalent to the Rust `GlContextPtr::copy_sub_texture_chromium()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_copy_sub_texture_chromium(glcontextptr: &AzGlContextPtr, source_id: u32, source_level: i32, dest_target: u32, dest_id: u32, dest_level: i32, x_offset: i32, y_offset: i32, x: i32, y: i32, width: i32, height: i32, unpack_flip_y: u8, unpack_premultiply_alpha: u8, unpack_unmultiply_alpha: u8) { glcontextptr.copy_sub_texture_chromium(source_id, source_level, dest_target, dest_id, dest_level, x_offset, y_offset, x, y, width, height, unpack_flip_y, unpack_premultiply_alpha, unpack_unmultiply_alpha) }
/// Equivalent to the Rust `GlContextPtr::egl_image_target_renderbuffer_storage_oes()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_egl_image_target_renderbuffer_storage_oes(glcontextptr: &AzGlContextPtr, target: u32, image: *const c_void) { glcontextptr.egl_image_target_renderbuffer_storage_oes(target, image) }
/// Equivalent to the Rust `GlContextPtr::copy_texture_3d_angle()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_copy_texture_3d_angle(glcontextptr: &AzGlContextPtr, source_id: u32, source_level: i32, dest_target: u32, dest_id: u32, dest_level: i32, internal_format: i32, dest_type: u32, unpack_flip_y: u8, unpack_premultiply_alpha: u8, unpack_unmultiply_alpha: u8) { glcontextptr.copy_texture_3d_angle(source_id, source_level, dest_target, dest_id, dest_level, internal_format, dest_type, unpack_flip_y, unpack_premultiply_alpha, unpack_unmultiply_alpha) }
/// Equivalent to the Rust `GlContextPtr::copy_sub_texture_3d_angle()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_copy_sub_texture_3d_angle(glcontextptr: &AzGlContextPtr, source_id: u32, source_level: i32, dest_target: u32, dest_id: u32, dest_level: i32, x_offset: i32, y_offset: i32, z_offset: i32, x: i32, y: i32, z: i32, width: i32, height: i32, depth: i32, unpack_flip_y: u8, unpack_premultiply_alpha: u8, unpack_unmultiply_alpha: u8) { glcontextptr.copy_sub_texture_3d_angle(source_id, source_level, dest_target, dest_id, dest_level, x_offset, y_offset, z_offset, x, y, z, width, height, depth, unpack_flip_y, unpack_premultiply_alpha, unpack_unmultiply_alpha) }
/// Destructor: Takes ownership of the `GlContextPtr` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_gl_context_ptr_delete(object: &mut AzGlContextPtr) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_gl_context_ptr_deep_copy(object: &AzGlContextPtr) -> AzGlContextPtr { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_gl_context_ptr_fmt_debug(object: &AzGlContextPtr) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `Texture` struct
pub type AzTextureTT = azul_impl::gl::Texture;
pub use AzTextureTT as AzTexture;
/// Destructor: Takes ownership of the `Texture` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_texture_delete(object: &mut AzTexture) { }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_texture_fmt_debug(object: &AzTexture) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `TextureFlags` struct
pub type AzTextureFlagsTT = azul_impl::gl::TextureFlags;
pub use AzTextureFlagsTT as AzTextureFlags;
/// Default texture flags (not opaque, not a video texture)
#[no_mangle] pub extern "C" fn az_texture_flags_default() -> AzTextureFlags { TextureFlags::default() }
/// Destructor: Takes ownership of the `TextureFlags` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_texture_flags_delete(object: &mut AzTextureFlags) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_texture_flags_deep_copy(object: &AzTextureFlags) -> AzTextureFlags { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_texture_flags_fmt_debug(object: &AzTextureFlags) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `TextId` struct
pub type AzTextIdTT = azul_impl::resources::TextId;
pub use AzTextIdTT as AzTextId;
/// Creates a new, unique `TextId`
#[no_mangle] pub extern "C" fn az_text_id_new() -> AzTextId { TextId::new() }
/// Destructor: Takes ownership of the `TextId` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_text_id_delete(object: &mut AzTextId) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_text_id_deep_copy(object: &AzTextId) -> AzTextId { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_text_id_fmt_debug(object: &AzTextId) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `ImageId` struct
pub type AzImageIdTT = azul_impl::resources::ImageId;
pub use AzImageIdTT as AzImageId;
/// Creates a new, unique `ImageId`
#[no_mangle] pub extern "C" fn az_image_id_new() -> AzImageId { ImageId::new() }
/// Destructor: Takes ownership of the `ImageId` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_image_id_delete(object: &mut AzImageId) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_image_id_deep_copy(object: &AzImageId) -> AzImageId { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_image_id_fmt_debug(object: &AzImageId) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `FontId` struct
pub type AzFontIdTT = azul_impl::resources::FontId;
pub use AzFontIdTT as AzFontId;
/// Creates a new, unique `FontId`
#[no_mangle] pub extern "C" fn az_font_id_new() -> AzFontId { FontId::new() }
/// Destructor: Takes ownership of the `FontId` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_font_id_delete(object: &mut AzFontId) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_font_id_deep_copy(object: &AzFontId) -> AzFontId { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_font_id_fmt_debug(object: &AzFontId) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `ImageSource` struct
pub type AzImageSourceTT = azul_impl::resources::ImageSource;
pub use AzImageSourceTT as AzImageSource;
/// Destructor: Takes ownership of the `ImageSource` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_image_source_delete(object: &mut AzImageSource) { match object { azul_impl::resources::ImageSource::Embedded(_) => { }, azul_impl::resources::ImageSource::File(_) => { }, azul_impl::resources::ImageSource::Raw(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_image_source_deep_copy(object: &AzImageSource) -> AzImageSource { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_image_source_fmt_debug(object: &AzImageSource) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `FontSource` struct
pub type AzFontSourceTT = azul_impl::resources::FontSource;
pub use AzFontSourceTT as AzFontSource;
/// Destructor: Takes ownership of the `FontSource` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_font_source_delete(object: &mut AzFontSource) { match object { azul_impl::resources::FontSource::Embedded(_) => { }, azul_impl::resources::FontSource::File(_) => { }, azul_impl::resources::FontSource::System(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_font_source_deep_copy(object: &AzFontSource) -> AzFontSource { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_font_source_fmt_debug(object: &AzFontSource) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `RawImage` struct
pub type AzRawImageTT = azul_impl::resources::RawImage;
pub use AzRawImageTT as AzRawImage;
/// Creates a new `RawImage` by loading the decoded bytes
#[no_mangle] pub extern "C" fn az_raw_image_new(decoded_pixels: AzU8Vec, width: usize, height: usize, data_format: AzRawImageFormat) -> AzRawImage { RawImage { pixels: decoded_pixels, width, height, data_format: data_format } }
/// Destructor: Takes ownership of the `RawImage` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_raw_image_delete(object: &mut AzRawImage) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_raw_image_deep_copy(object: &AzRawImage) -> AzRawImage { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_raw_image_fmt_debug(object: &AzRawImage) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `RawImageFormat` struct
pub type AzRawImageFormatTT = azul_impl::resources::RawImageFormat;
pub use AzRawImageFormatTT as AzRawImageFormat;
/// Destructor: Takes ownership of the `RawImageFormat` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_raw_image_format_delete(object: &mut AzRawImageFormat) { match object { azul_impl::resources::RawImageFormat::R8 => { }, azul_impl::resources::RawImageFormat::R16 => { }, azul_impl::resources::RawImageFormat::RG16 => { }, azul_impl::resources::RawImageFormat::BGRA8 => { }, azul_impl::resources::RawImageFormat::RGBAF32 => { }, azul_impl::resources::RawImageFormat::RG8 => { }, azul_impl::resources::RawImageFormat::RGBAI32 => { }, azul_impl::resources::RawImageFormat::RGBA8 => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_raw_image_format_deep_copy(object: &AzRawImageFormat) -> AzRawImageFormat { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_raw_image_format_fmt_debug(object: &AzRawImageFormat) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `SvgMultiPolygon` struct
pub type AzSvgMultiPolygonTT = azul_impl::svg::SvgMultiPolygon;
pub use AzSvgMultiPolygonTT as AzSvgMultiPolygon;
/// Destructor: Takes ownership of the `SvgMultiPolygon` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_svg_multi_polygon_delete(object: &mut AzSvgMultiPolygon) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_svg_multi_polygon_deep_copy(object: &AzSvgMultiPolygon) -> AzSvgMultiPolygon { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_svg_multi_polygon_fmt_debug(object: &AzSvgMultiPolygon) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `SvgNode` struct
pub type AzSvgNodeTT = azul_impl::svg::SvgNode;
pub use AzSvgNodeTT as AzSvgNode;
/// Destructor: Takes ownership of the `SvgNode` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_svg_node_delete(object: &mut AzSvgNode) { match object { azul_impl::svg::SvgNode::MultiPolygonCollection(_) => { }, azul_impl::svg::SvgNode::MultiPolygon(_) => { }, azul_impl::svg::SvgNode::Path(_) => { }, azul_impl::svg::SvgNode::Circle(_) => { }, azul_impl::svg::SvgNode::Rect(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_svg_node_deep_copy(object: &AzSvgNode) -> AzSvgNode { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_svg_node_fmt_debug(object: &AzSvgNode) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `SvgStyledNode` struct
pub type AzSvgStyledNodeTT = azul_impl::svg::SvgStyledNode;
pub use AzSvgStyledNodeTT as AzSvgStyledNode;
/// Destructor: Takes ownership of the `SvgStyledNode` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_svg_styled_node_delete(object: &mut AzSvgStyledNode) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_svg_styled_node_deep_copy(object: &AzSvgStyledNode) -> AzSvgStyledNode { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_svg_styled_node_fmt_debug(object: &AzSvgStyledNode) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `SvgCircle` struct
pub type AzSvgCircleTT = azul_impl::svg::SvgCircle;
pub use AzSvgCircleTT as AzSvgCircle;
/// Destructor: Takes ownership of the `SvgCircle` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_svg_circle_delete(object: &mut AzSvgCircle) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_svg_circle_deep_copy(object: &AzSvgCircle) -> AzSvgCircle { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_svg_circle_fmt_debug(object: &AzSvgCircle) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `SvgPath` struct
pub type AzSvgPathTT = azul_impl::svg::SvgPath;
pub use AzSvgPathTT as AzSvgPath;
/// Destructor: Takes ownership of the `SvgPath` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_svg_path_delete(object: &mut AzSvgPath) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_svg_path_deep_copy(object: &AzSvgPath) -> AzSvgPath { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_svg_path_fmt_debug(object: &AzSvgPath) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `SvgPathElement` struct
pub type AzSvgPathElementTT = azul_impl::svg::SvgPathElement;
pub use AzSvgPathElementTT as AzSvgPathElement;
/// Destructor: Takes ownership of the `SvgPathElement` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_svg_path_element_delete(object: &mut AzSvgPathElement) { match object { azul_impl::svg::SvgPathElement::Line(_) => { }, azul_impl::svg::SvgPathElement::QuadraticCurve(_) => { }, azul_impl::svg::SvgPathElement::CubicCurve(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_svg_path_element_deep_copy(object: &AzSvgPathElement) -> AzSvgPathElement { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_svg_path_element_fmt_debug(object: &AzSvgPathElement) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `SvgLine` struct
pub type AzSvgLineTT = azul_impl::svg::SvgLine;
pub use AzSvgLineTT as AzSvgLine;
/// Destructor: Takes ownership of the `SvgLine` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_svg_line_delete(object: &mut AzSvgLine) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_svg_line_deep_copy(object: &AzSvgLine) -> AzSvgLine { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_svg_line_fmt_debug(object: &AzSvgLine) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `SvgPoint` struct
pub type AzSvgPointTT = azul_impl::svg::SvgPoint;
pub use AzSvgPointTT as AzSvgPoint;
/// Destructor: Takes ownership of the `SvgPoint` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_svg_point_delete(object: &mut AzSvgPoint) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_svg_point_deep_copy(object: &AzSvgPoint) -> AzSvgPoint { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_svg_point_fmt_debug(object: &AzSvgPoint) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `SvgVertex` struct
pub type AzSvgVertexTT = azul_impl::svg::SvgVertex;
pub use AzSvgVertexTT as AzSvgVertex;
/// Destructor: Takes ownership of the `SvgVertex` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_svg_vertex_delete(object: &mut AzSvgVertex) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_svg_vertex_deep_copy(object: &AzSvgVertex) -> AzSvgVertex { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_svg_vertex_fmt_debug(object: &AzSvgVertex) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `SvgQuadraticCurve` struct
pub type AzSvgQuadraticCurveTT = azul_impl::svg::SvgQuadraticCurve;
pub use AzSvgQuadraticCurveTT as AzSvgQuadraticCurve;
/// Destructor: Takes ownership of the `SvgQuadraticCurve` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_svg_quadratic_curve_delete(object: &mut AzSvgQuadraticCurve) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_svg_quadratic_curve_deep_copy(object: &AzSvgQuadraticCurve) -> AzSvgQuadraticCurve { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_svg_quadratic_curve_fmt_debug(object: &AzSvgQuadraticCurve) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `SvgCubicCurve` struct
pub type AzSvgCubicCurveTT = azul_impl::svg::SvgCubicCurve;
pub use AzSvgCubicCurveTT as AzSvgCubicCurve;
/// Destructor: Takes ownership of the `SvgCubicCurve` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_svg_cubic_curve_delete(object: &mut AzSvgCubicCurve) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_svg_cubic_curve_deep_copy(object: &AzSvgCubicCurve) -> AzSvgCubicCurve { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_svg_cubic_curve_fmt_debug(object: &AzSvgCubicCurve) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `SvgRect` struct
pub type AzSvgRectTT = azul_impl::svg::SvgRect;
pub use AzSvgRectTT as AzSvgRect;
/// Destructor: Takes ownership of the `SvgRect` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_svg_rect_delete(object: &mut AzSvgRect) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_svg_rect_deep_copy(object: &AzSvgRect) -> AzSvgRect { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_svg_rect_fmt_debug(object: &AzSvgRect) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `TesselatedCPUSvgNode` struct
pub type AzTesselatedCPUSvgNodeTT = azul_impl::svg::TesselatedCPUSvgNode;
pub use AzTesselatedCPUSvgNodeTT as AzTesselatedCPUSvgNode;
/// Destructor: Takes ownership of the `TesselatedCPUSvgNode` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_tesselated_cpu_svg_node_delete(object: &mut AzTesselatedCPUSvgNode) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_tesselated_cpu_svg_node_deep_copy(object: &AzTesselatedCPUSvgNode) -> AzTesselatedCPUSvgNode { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_tesselated_cpu_svg_node_fmt_debug(object: &AzTesselatedCPUSvgNode) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `TesselatedGPUSvgNode` struct
pub type AzTesselatedGPUSvgNodeTT = azul_impl::svg::TesselatedGPUSvgNode;
pub use AzTesselatedGPUSvgNodeTT as AzTesselatedGPUSvgNode;
/// Destructor: Takes ownership of the `TesselatedGPUSvgNode` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_tesselated_gpu_svg_node_delete(object: &mut AzTesselatedGPUSvgNode) { }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_tesselated_gpu_svg_node_fmt_debug(object: &AzTesselatedGPUSvgNode) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `SvgLineCap` struct
pub type AzSvgLineCapTT = azul_impl::svg::SvgLineCap;
pub use AzSvgLineCapTT as AzSvgLineCap;
/// Destructor: Takes ownership of the `SvgLineCap` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_svg_line_cap_delete(object: &mut AzSvgLineCap) { match object { azul_impl::svg::SvgLineCap::Butt => { }, azul_impl::svg::SvgLineCap::Square => { }, azul_impl::svg::SvgLineCap::Round => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_svg_line_cap_deep_copy(object: &AzSvgLineCap) -> AzSvgLineCap { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_svg_line_cap_fmt_debug(object: &AzSvgLineCap) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `SvgParseOptions` struct
pub type AzSvgParseOptionsTT = azul_impl::svg::SvgParseOptions;
pub use AzSvgParseOptionsTT as AzSvgParseOptions;
/// Creates a new `SvgParseOptions` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `SvgParseOptions::default()` constructor.
#[no_mangle] pub extern "C" fn az_svg_parse_options_default() -> AzSvgParseOptions { AzSvgParseOptions::default() }
/// Destructor: Takes ownership of the `SvgParseOptions` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_svg_parse_options_delete(object: &mut AzSvgParseOptions) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_svg_parse_options_deep_copy(object: &AzSvgParseOptions) -> AzSvgParseOptions { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_svg_parse_options_fmt_debug(object: &AzSvgParseOptions) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `ShapeRendering` struct
pub type AzShapeRenderingTT = azul_impl::svg::ShapeRendering;
pub use AzShapeRenderingTT as AzShapeRendering;
/// Destructor: Takes ownership of the `ShapeRendering` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_shape_rendering_delete(object: &mut AzShapeRendering) { match object { azul_impl::svg::ShapeRendering::OptimizeSpeed => { }, azul_impl::svg::ShapeRendering::CrispEdges => { }, azul_impl::svg::ShapeRendering::GeometricPrecision => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_shape_rendering_deep_copy(object: &AzShapeRendering) -> AzShapeRendering { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_shape_rendering_fmt_debug(object: &AzShapeRendering) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `TextRendering` struct
pub type AzTextRenderingTT = azul_impl::svg::TextRendering;
pub use AzTextRenderingTT as AzTextRendering;
/// Destructor: Takes ownership of the `TextRendering` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_text_rendering_delete(object: &mut AzTextRendering) { match object { azul_impl::svg::TextRendering::OptimizeSpeed => { }, azul_impl::svg::TextRendering::OptimizeLegibility => { }, azul_impl::svg::TextRendering::GeometricPrecision => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_text_rendering_deep_copy(object: &AzTextRendering) -> AzTextRendering { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_text_rendering_fmt_debug(object: &AzTextRendering) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `ImageRendering` struct
pub type AzImageRenderingTT = azul_impl::svg::ImageRendering;
pub use AzImageRenderingTT as AzImageRendering;
/// Destructor: Takes ownership of the `ImageRendering` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_image_rendering_delete(object: &mut AzImageRendering) { match object { azul_impl::svg::ImageRendering::OptimizeQuality => { }, azul_impl::svg::ImageRendering::OptimizeSpeed => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_image_rendering_deep_copy(object: &AzImageRendering) -> AzImageRendering { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_image_rendering_fmt_debug(object: &AzImageRendering) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `FontDatabase` struct
pub type AzFontDatabaseTT = azul_impl::svg::FontDatabase;
pub use AzFontDatabaseTT as AzFontDatabase;
/// Destructor: Takes ownership of the `FontDatabase` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_font_database_delete(object: &mut AzFontDatabase) { match object { azul_impl::svg::FontDatabase::Empty => { }, azul_impl::svg::FontDatabase::System => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_font_database_deep_copy(object: &AzFontDatabase) -> AzFontDatabase { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_font_database_fmt_debug(object: &AzFontDatabase) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `SvgRenderOptions` struct
pub type AzSvgRenderOptionsTT = azul_impl::svg::SvgRenderOptions;
pub use AzSvgRenderOptionsTT as AzSvgRenderOptions;
/// Creates a new `SvgRenderOptions` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `SvgRenderOptions::default()` constructor.
#[no_mangle] pub extern "C" fn az_svg_render_options_default() -> AzSvgRenderOptions { AzSvgRenderOptions::default() }
/// Destructor: Takes ownership of the `SvgRenderOptions` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_svg_render_options_delete(object: &mut AzSvgRenderOptions) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_svg_render_options_deep_copy(object: &AzSvgRenderOptions) -> AzSvgRenderOptions { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_svg_render_options_fmt_debug(object: &AzSvgRenderOptions) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `SvgFitTo` struct
pub type AzSvgFitToTT = azul_impl::svg::SvgFitTo;
pub use AzSvgFitToTT as AzSvgFitTo;
/// Destructor: Takes ownership of the `SvgFitTo` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_svg_fit_to_delete(object: &mut AzSvgFitTo) { match object { azul_impl::svg::SvgFitTo::Original => { }, azul_impl::svg::SvgFitTo::Width(_) => { }, azul_impl::svg::SvgFitTo::Height(_) => { }, azul_impl::svg::SvgFitTo::Zoom(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_svg_fit_to_deep_copy(object: &AzSvgFitTo) -> AzSvgFitTo { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_svg_fit_to_fmt_debug(object: &AzSvgFitTo) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `Svg` struct
pub type AzSvgTT = azul_impl::svg::Svg;
pub use AzSvgTT as AzSvg;
/// Creates a new `Svg` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `Svg::parse()` constructor.
#[no_mangle] pub extern "C" fn az_svg_parse(svg_bytes: AzU8VecRef, parse_options: AzSvgParseOptions) -> AzResultSvgSvgParseError { azul_impl::svg::Svg::parse(svg_bytes.as_slice(), parse_options).into() }
/// Destructor: Takes ownership of the `Svg` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_svg_delete(object: &mut AzSvg) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_svg_deep_copy(object: &AzSvg) -> AzSvg { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_svg_fmt_debug(object: &AzSvg) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `SvgXmlNode` struct
pub type AzSvgXmlNodeTT = azul_impl::svg::SvgXmlNode;
pub use AzSvgXmlNodeTT as AzSvgXmlNode;
/// Destructor: Takes ownership of the `SvgXmlNode` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_svg_xml_node_delete(object: &mut AzSvgXmlNode) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_svg_xml_node_deep_copy(object: &AzSvgXmlNode) -> AzSvgXmlNode { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_svg_xml_node_fmt_debug(object: &AzSvgXmlNode) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `SvgLineJoin` struct
pub type AzSvgLineJoinTT = azul_impl::svg::SvgLineJoin;
pub use AzSvgLineJoinTT as AzSvgLineJoin;
/// Destructor: Takes ownership of the `SvgLineJoin` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_svg_line_join_delete(object: &mut AzSvgLineJoin) { match object { azul_impl::svg::SvgLineJoin::Miter => { }, azul_impl::svg::SvgLineJoin::MiterClip => { }, azul_impl::svg::SvgLineJoin::Round => { }, azul_impl::svg::SvgLineJoin::Bevel => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_svg_line_join_deep_copy(object: &AzSvgLineJoin) -> AzSvgLineJoin { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_svg_line_join_fmt_debug(object: &AzSvgLineJoin) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `SvgDashPattern` struct
pub type AzSvgDashPatternTT = azul_impl::svg::SvgDashPattern;
pub use AzSvgDashPatternTT as AzSvgDashPattern;
/// Destructor: Takes ownership of the `SvgDashPattern` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_svg_dash_pattern_delete(object: &mut AzSvgDashPattern) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_svg_dash_pattern_deep_copy(object: &AzSvgDashPattern) -> AzSvgDashPattern { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_svg_dash_pattern_fmt_debug(object: &AzSvgDashPattern) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `SvgStyle` struct
pub type AzSvgStyleTT = azul_impl::svg::SvgStyle;
pub use AzSvgStyleTT as AzSvgStyle;
/// Destructor: Takes ownership of the `SvgStyle` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_svg_style_delete(object: &mut AzSvgStyle) { match object { azul_impl::svg::SvgStyle::Fill(_) => { }, azul_impl::svg::SvgStyle::Stroke(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_svg_style_deep_copy(object: &AzSvgStyle) -> AzSvgStyle { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_svg_style_fmt_debug(object: &AzSvgStyle) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `SvgFillStyle` struct
pub type AzSvgFillStyleTT = azul_impl::svg::SvgFillStyle;
pub use AzSvgFillStyleTT as AzSvgFillStyle;
/// Destructor: Takes ownership of the `SvgFillStyle` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_svg_fill_style_delete(object: &mut AzSvgFillStyle) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_svg_fill_style_deep_copy(object: &AzSvgFillStyle) -> AzSvgFillStyle { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_svg_fill_style_fmt_debug(object: &AzSvgFillStyle) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `SvgStrokeStyle` struct
pub type AzSvgStrokeStyleTT = azul_impl::svg::SvgStrokeStyle;
pub use AzSvgStrokeStyleTT as AzSvgStrokeStyle;
/// Destructor: Takes ownership of the `SvgStrokeStyle` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_svg_stroke_style_delete(object: &mut AzSvgStrokeStyle) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_svg_stroke_style_deep_copy(object: &AzSvgStrokeStyle) -> AzSvgStrokeStyle { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_svg_stroke_style_fmt_debug(object: &AzSvgStrokeStyle) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `SvgNodeId` struct
pub type AzSvgNodeIdTT = azul_impl::resources::SvgNodeId;
pub use AzSvgNodeIdTT as AzSvgNodeId;
/// Destructor: Takes ownership of the `SvgNodeId` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_svg_node_id_delete(object: &mut AzSvgNodeId) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_svg_node_id_deep_copy(object: &AzSvgNodeId) -> AzSvgNodeId { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_svg_node_id_fmt_debug(object: &AzSvgNodeId) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `TimerId` struct
pub type AzTimerIdTT = azul_impl::task::TimerId;
pub use AzTimerIdTT as AzTimerId;
/// Destructor: Takes ownership of the `TimerId` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_timer_id_delete(object: &mut AzTimerId) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_timer_id_deep_copy(object: &AzTimerId) -> AzTimerId { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_timer_id_fmt_debug(object: &AzTimerId) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `Timer` struct
pub type AzTimerTT = azul_impl::task::Timer;
pub use AzTimerTT as AzTimer;
/// Destructor: Takes ownership of the `Timer` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_timer_delete(object: &mut AzTimer) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_timer_deep_copy(object: &AzTimer) -> AzTimer { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_timer_fmt_debug(object: &AzTimer) -> AzString { format!("{:#?}", object).into() }

/// Should a timer terminate or not - used to remove active timers
pub type AzTerminateTimerTT = azul_impl::task::TerminateTimer;
pub use AzTerminateTimerTT as AzTerminateTimer;
/// Destructor: Takes ownership of the `TerminateTimer` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_terminate_timer_delete(object: &mut AzTerminateTimer) { match object { azul_impl::task::TerminateTimer::Terminate => { }, azul_impl::task::TerminateTimer::Continue => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_terminate_timer_deep_copy(object: &AzTerminateTimer) -> AzTerminateTimer { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_terminate_timer_fmt_debug(object: &AzTerminateTimer) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `ThreadSender` struct
pub type AzThreadSenderTT = azul_impl::task::ThreadSender;
pub use AzThreadSenderTT as AzThreadSender;
/// Equivalent to the Rust `ThreadSender::send()` function.
#[no_mangle] pub extern "C" fn az_thread_sender_send(threadsender: &mut AzThreadSender, msg: AzThreadReceiveMsg) -> bool { threadsender.send(msg) }
/// Destructor: Takes ownership of the `ThreadSender` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_thread_sender_delete(object: &mut AzThreadSender) { }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_thread_sender_fmt_debug(object: &AzThreadSender) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `ThreadReceiver` struct
pub type AzThreadReceiverTT = azul_impl::task::ThreadReceiver;
pub use AzThreadReceiverTT as AzThreadReceiver;
/// Equivalent to the Rust `ThreadReceiver::receive()` function.
#[no_mangle] pub extern "C" fn az_thread_receiver_receive(threadreceiver: &mut AzThreadReceiver) -> AzOptionThreadSendMsg { threadreceiver.recv().into() }
/// Destructor: Takes ownership of the `ThreadReceiver` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_thread_receiver_delete(object: &mut AzThreadReceiver) { }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_thread_receiver_fmt_debug(object: &AzThreadReceiver) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `ThreadSendMsg` struct
pub type AzThreadSendMsgTT = azul_impl::task::ThreadSendMsg;
pub use AzThreadSendMsgTT as AzThreadSendMsg;
/// Destructor: Takes ownership of the `ThreadSendMsg` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_thread_send_msg_delete(object: &mut AzThreadSendMsg) { match object { azul_impl::task::ThreadSendMsg::TerminateThread => { }, azul_impl::task::ThreadSendMsg::Tick => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_thread_send_msg_deep_copy(object: &AzThreadSendMsg) -> AzThreadSendMsg { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_thread_send_msg_fmt_debug(object: &AzThreadSendMsg) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `ThreadReceiveMsg` struct
pub type AzThreadReceiveMsgTT = azul_impl::task::ThreadReceiveMsg;
pub use AzThreadReceiveMsgTT as AzThreadReceiveMsg;
/// Destructor: Takes ownership of the `ThreadReceiveMsg` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_thread_receive_msg_delete(object: &mut AzThreadReceiveMsg) { match object { azul_impl::task::ThreadReceiveMsg::WriteBack(_) => { }, azul_impl::task::ThreadReceiveMsg::Update(_) => { }, }
}
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_thread_receive_msg_fmt_debug(object: &AzThreadReceiveMsg) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `ThreadWriteBackMsg` struct
pub type AzThreadWriteBackMsgTT = azul_impl::task::ThreadWriteBackMsg;
pub use AzThreadWriteBackMsgTT as AzThreadWriteBackMsg;
/// Destructor: Takes ownership of the `ThreadWriteBackMsg` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_thread_write_back_msg_delete(object: &mut AzThreadWriteBackMsg) { }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_thread_write_back_msg_fmt_debug(object: &AzThreadWriteBackMsg) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `ThreadId` struct
pub type AzThreadIdTT = azul_impl::task::ThreadId;
pub use AzThreadIdTT as AzThreadId;
/// Destructor: Takes ownership of the `ThreadId` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_thread_id_delete(object: &mut AzThreadId) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_thread_id_deep_copy(object: &AzThreadId) -> AzThreadId { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_thread_id_fmt_debug(object: &AzThreadId) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutPoint` struct
pub type AzLayoutPointTT = azul_impl::css::LayoutPoint;
pub use AzLayoutPointTT as AzLayoutPoint;
/// Destructor: Takes ownership of the `LayoutPoint` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_point_delete(object: &mut AzLayoutPoint) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_point_deep_copy(object: &AzLayoutPoint) -> AzLayoutPoint { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_point_fmt_debug(object: &AzLayoutPoint) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutSize` struct
pub type AzLayoutSizeTT = azul_impl::css::LayoutSize;
pub use AzLayoutSizeTT as AzLayoutSize;
/// Destructor: Takes ownership of the `LayoutSize` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_size_delete(object: &mut AzLayoutSize) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_size_deep_copy(object: &AzLayoutSize) -> AzLayoutSize { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_size_fmt_debug(object: &AzLayoutSize) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutRect` struct
pub type AzLayoutRectTT = azul_impl::css::LayoutRect;
pub use AzLayoutRectTT as AzLayoutRect;
/// Destructor: Takes ownership of the `LayoutRect` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_rect_delete(object: &mut AzLayoutRect) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_rect_deep_copy(object: &AzLayoutRect) -> AzLayoutRect { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_rect_fmt_debug(object: &AzLayoutRect) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `RawWindowHandle` struct
pub type AzRawWindowHandleTT = azul_impl::window::RawWindowHandle;
pub use AzRawWindowHandleTT as AzRawWindowHandle;
/// Destructor: Takes ownership of the `RawWindowHandle` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_raw_window_handle_delete(object: &mut AzRawWindowHandle) { match object { azul_impl::window::RawWindowHandle::IOS(_) => { }, azul_impl::window::RawWindowHandle::MacOS(_) => { }, azul_impl::window::RawWindowHandle::Xlib(_) => { }, azul_impl::window::RawWindowHandle::Xcb(_) => { }, azul_impl::window::RawWindowHandle::Wayland(_) => { }, azul_impl::window::RawWindowHandle::Windows(_) => { }, azul_impl::window::RawWindowHandle::Web(_) => { }, azul_impl::window::RawWindowHandle::Android(_) => { }, azul_impl::window::RawWindowHandle::Unsupported => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_raw_window_handle_deep_copy(object: &AzRawWindowHandle) -> AzRawWindowHandle { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_raw_window_handle_fmt_debug(object: &AzRawWindowHandle) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `IOSHandle` struct
pub type AzIOSHandleTT = azul_impl::window::IOSHandle;
pub use AzIOSHandleTT as AzIOSHandle;
/// Destructor: Takes ownership of the `IOSHandle` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_ios_handle_delete(object: &mut AzIOSHandle) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_ios_handle_deep_copy(object: &AzIOSHandle) -> AzIOSHandle { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_ios_handle_fmt_debug(object: &AzIOSHandle) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `MacOSHandle` struct
pub type AzMacOSHandleTT = azul_impl::window::MacOSHandle;
pub use AzMacOSHandleTT as AzMacOSHandle;
/// Destructor: Takes ownership of the `MacOSHandle` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_mac_os_handle_delete(object: &mut AzMacOSHandle) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_mac_os_handle_deep_copy(object: &AzMacOSHandle) -> AzMacOSHandle { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_mac_os_handle_fmt_debug(object: &AzMacOSHandle) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `XlibHandle` struct
pub type AzXlibHandleTT = azul_impl::window::XlibHandle;
pub use AzXlibHandleTT as AzXlibHandle;
/// Destructor: Takes ownership of the `XlibHandle` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_xlib_handle_delete(object: &mut AzXlibHandle) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_xlib_handle_deep_copy(object: &AzXlibHandle) -> AzXlibHandle { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_xlib_handle_fmt_debug(object: &AzXlibHandle) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `XcbHandle` struct
pub type AzXcbHandleTT = azul_impl::window::XcbHandle;
pub use AzXcbHandleTT as AzXcbHandle;
/// Destructor: Takes ownership of the `XcbHandle` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_xcb_handle_delete(object: &mut AzXcbHandle) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_xcb_handle_deep_copy(object: &AzXcbHandle) -> AzXcbHandle { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_xcb_handle_fmt_debug(object: &AzXcbHandle) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `WaylandHandle` struct
pub type AzWaylandHandleTT = azul_impl::window::WaylandHandle;
pub use AzWaylandHandleTT as AzWaylandHandle;
/// Destructor: Takes ownership of the `WaylandHandle` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_wayland_handle_delete(object: &mut AzWaylandHandle) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_wayland_handle_deep_copy(object: &AzWaylandHandle) -> AzWaylandHandle { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_wayland_handle_fmt_debug(object: &AzWaylandHandle) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `WindowsHandle` struct
pub type AzWindowsHandleTT = azul_impl::window::WindowsHandle;
pub use AzWindowsHandleTT as AzWindowsHandle;
/// Destructor: Takes ownership of the `WindowsHandle` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_windows_handle_delete(object: &mut AzWindowsHandle) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_windows_handle_deep_copy(object: &AzWindowsHandle) -> AzWindowsHandle { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_windows_handle_fmt_debug(object: &AzWindowsHandle) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `WebHandle` struct
pub type AzWebHandleTT = azul_impl::window::WebHandle;
pub use AzWebHandleTT as AzWebHandle;
/// Destructor: Takes ownership of the `WebHandle` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_web_handle_delete(object: &mut AzWebHandle) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_web_handle_deep_copy(object: &AzWebHandle) -> AzWebHandle { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_web_handle_fmt_debug(object: &AzWebHandle) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `AndroidHandle` struct
pub type AzAndroidHandleTT = azul_impl::window::AndroidHandle;
pub use AzAndroidHandleTT as AzAndroidHandle;
/// Destructor: Takes ownership of the `AndroidHandle` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_android_handle_delete(object: &mut AzAndroidHandle) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_android_handle_deep_copy(object: &AzAndroidHandle) -> AzAndroidHandle { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_android_handle_fmt_debug(object: &AzAndroidHandle) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `TaskBarIcon` struct
pub type AzTaskBarIconTT = azul_impl::window::TaskBarIcon;
pub use AzTaskBarIconTT as AzTaskBarIcon;
/// Destructor: Takes ownership of the `TaskBarIcon` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_task_bar_icon_delete(object: &mut AzTaskBarIcon) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_task_bar_icon_deep_copy(object: &AzTaskBarIcon) -> AzTaskBarIcon { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_task_bar_icon_fmt_debug(object: &AzTaskBarIcon) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `XWindowType` struct
pub type AzXWindowTypeTT = azul_impl::window::XWindowType;
pub use AzXWindowTypeTT as AzXWindowType;
/// Destructor: Takes ownership of the `XWindowType` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_x_window_type_delete(object: &mut AzXWindowType) { match object { azul_impl::window::XWindowType::Desktop => { }, azul_impl::window::XWindowType::Dock => { }, azul_impl::window::XWindowType::Toolbar => { }, azul_impl::window::XWindowType::Menu => { }, azul_impl::window::XWindowType::Utility => { }, azul_impl::window::XWindowType::Splash => { }, azul_impl::window::XWindowType::Dialog => { }, azul_impl::window::XWindowType::DropdownMenu => { }, azul_impl::window::XWindowType::PopupMenu => { }, azul_impl::window::XWindowType::Tooltip => { }, azul_impl::window::XWindowType::Notification => { }, azul_impl::window::XWindowType::Combo => { }, azul_impl::window::XWindowType::Dnd => { }, azul_impl::window::XWindowType::Normal => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_x_window_type_deep_copy(object: &AzXWindowType) -> AzXWindowType { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_x_window_type_fmt_debug(object: &AzXWindowType) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `PhysicalPositionI32` struct
pub type AzPhysicalPositionI32TT = azul_impl::window::PhysicalPosition<i32>;
pub use AzPhysicalPositionI32TT as AzPhysicalPositionI32;
/// Destructor: Takes ownership of the `PhysicalPositionI32` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_physical_position_i32_delete(object: &mut AzPhysicalPositionI32) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_physical_position_i32_deep_copy(object: &AzPhysicalPositionI32) -> AzPhysicalPositionI32 { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_physical_position_i32_fmt_debug(object: &AzPhysicalPositionI32) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `PhysicalSizeU32` struct
pub type AzPhysicalSizeU32TT = azul_impl::window::PhysicalSize<u32>;
pub use AzPhysicalSizeU32TT as AzPhysicalSizeU32;
/// Destructor: Takes ownership of the `PhysicalSizeU32` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_physical_size_u32_delete(object: &mut AzPhysicalSizeU32) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_physical_size_u32_deep_copy(object: &AzPhysicalSizeU32) -> AzPhysicalSizeU32 { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_physical_size_u32_fmt_debug(object: &AzPhysicalSizeU32) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LogicalPosition` struct
pub type AzLogicalPositionTT = azul_impl::window::LogicalPosition;
pub use AzLogicalPositionTT as AzLogicalPosition;
/// Destructor: Takes ownership of the `LogicalPosition` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_logical_position_delete(object: &mut AzLogicalPosition) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_logical_position_deep_copy(object: &AzLogicalPosition) -> AzLogicalPosition { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_logical_position_fmt_debug(object: &AzLogicalPosition) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LogicalRect` struct
pub type AzLogicalRectTT = azul_impl::window::LogicalRect;
pub use AzLogicalRectTT as AzLogicalRect;
/// Destructor: Takes ownership of the `LogicalRect` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_logical_rect_delete(object: &mut AzLogicalRect) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_logical_rect_deep_copy(object: &AzLogicalRect) -> AzLogicalRect { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_logical_rect_fmt_debug(object: &AzLogicalRect) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `IconKey` struct
pub type AzIconKeyTT = azul_impl::window::IconKey;
pub use AzIconKeyTT as AzIconKey;
/// Destructor: Takes ownership of the `IconKey` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_icon_key_delete(object: &mut AzIconKey) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_icon_key_deep_copy(object: &AzIconKey) -> AzIconKey { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_icon_key_fmt_debug(object: &AzIconKey) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `SmallWindowIconBytes` struct
pub type AzSmallWindowIconBytesTT = azul_impl::window::SmallWindowIconBytes;
pub use AzSmallWindowIconBytesTT as AzSmallWindowIconBytes;
/// Destructor: Takes ownership of the `SmallWindowIconBytes` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_small_window_icon_bytes_delete(object: &mut AzSmallWindowIconBytes) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_small_window_icon_bytes_deep_copy(object: &AzSmallWindowIconBytes) -> AzSmallWindowIconBytes { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_small_window_icon_bytes_fmt_debug(object: &AzSmallWindowIconBytes) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LargeWindowIconBytes` struct
pub type AzLargeWindowIconBytesTT = azul_impl::window::LargeWindowIconBytes;
pub use AzLargeWindowIconBytesTT as AzLargeWindowIconBytes;
/// Destructor: Takes ownership of the `LargeWindowIconBytes` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_large_window_icon_bytes_delete(object: &mut AzLargeWindowIconBytes) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_large_window_icon_bytes_deep_copy(object: &AzLargeWindowIconBytes) -> AzLargeWindowIconBytes { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_large_window_icon_bytes_fmt_debug(object: &AzLargeWindowIconBytes) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `WindowIcon` struct
pub type AzWindowIconTT = azul_impl::window::WindowIcon;
pub use AzWindowIconTT as AzWindowIcon;
/// Destructor: Takes ownership of the `WindowIcon` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_window_icon_delete(object: &mut AzWindowIcon) { match object { azul_impl::window::WindowIcon::Small(_) => { }, azul_impl::window::WindowIcon::Large(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_window_icon_deep_copy(object: &AzWindowIcon) -> AzWindowIcon { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_window_icon_fmt_debug(object: &AzWindowIcon) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `VirtualKeyCode` struct
pub type AzVirtualKeyCodeTT = azul_impl::window::VirtualKeyCode;
pub use AzVirtualKeyCodeTT as AzVirtualKeyCode;
/// Destructor: Takes ownership of the `VirtualKeyCode` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_virtual_key_code_delete(object: &mut AzVirtualKeyCode) { match object { azul_impl::window::VirtualKeyCode::Key1 => { }, azul_impl::window::VirtualKeyCode::Key2 => { }, azul_impl::window::VirtualKeyCode::Key3 => { }, azul_impl::window::VirtualKeyCode::Key4 => { }, azul_impl::window::VirtualKeyCode::Key5 => { }, azul_impl::window::VirtualKeyCode::Key6 => { }, azul_impl::window::VirtualKeyCode::Key7 => { }, azul_impl::window::VirtualKeyCode::Key8 => { }, azul_impl::window::VirtualKeyCode::Key9 => { }, azul_impl::window::VirtualKeyCode::Key0 => { }, azul_impl::window::VirtualKeyCode::A => { }, azul_impl::window::VirtualKeyCode::B => { }, azul_impl::window::VirtualKeyCode::C => { }, azul_impl::window::VirtualKeyCode::D => { }, azul_impl::window::VirtualKeyCode::E => { }, azul_impl::window::VirtualKeyCode::F => { }, azul_impl::window::VirtualKeyCode::G => { }, azul_impl::window::VirtualKeyCode::H => { }, azul_impl::window::VirtualKeyCode::I => { }, azul_impl::window::VirtualKeyCode::J => { }, azul_impl::window::VirtualKeyCode::K => { }, azul_impl::window::VirtualKeyCode::L => { }, azul_impl::window::VirtualKeyCode::M => { }, azul_impl::window::VirtualKeyCode::N => { }, azul_impl::window::VirtualKeyCode::O => { }, azul_impl::window::VirtualKeyCode::P => { }, azul_impl::window::VirtualKeyCode::Q => { }, azul_impl::window::VirtualKeyCode::R => { }, azul_impl::window::VirtualKeyCode::S => { }, azul_impl::window::VirtualKeyCode::T => { }, azul_impl::window::VirtualKeyCode::U => { }, azul_impl::window::VirtualKeyCode::V => { }, azul_impl::window::VirtualKeyCode::W => { }, azul_impl::window::VirtualKeyCode::X => { }, azul_impl::window::VirtualKeyCode::Y => { }, azul_impl::window::VirtualKeyCode::Z => { }, azul_impl::window::VirtualKeyCode::Escape => { }, azul_impl::window::VirtualKeyCode::F1 => { }, azul_impl::window::VirtualKeyCode::F2 => { }, azul_impl::window::VirtualKeyCode::F3 => { }, azul_impl::window::VirtualKeyCode::F4 => { }, azul_impl::window::VirtualKeyCode::F5 => { }, azul_impl::window::VirtualKeyCode::F6 => { }, azul_impl::window::VirtualKeyCode::F7 => { }, azul_impl::window::VirtualKeyCode::F8 => { }, azul_impl::window::VirtualKeyCode::F9 => { }, azul_impl::window::VirtualKeyCode::F10 => { }, azul_impl::window::VirtualKeyCode::F11 => { }, azul_impl::window::VirtualKeyCode::F12 => { }, azul_impl::window::VirtualKeyCode::F13 => { }, azul_impl::window::VirtualKeyCode::F14 => { }, azul_impl::window::VirtualKeyCode::F15 => { }, azul_impl::window::VirtualKeyCode::F16 => { }, azul_impl::window::VirtualKeyCode::F17 => { }, azul_impl::window::VirtualKeyCode::F18 => { }, azul_impl::window::VirtualKeyCode::F19 => { }, azul_impl::window::VirtualKeyCode::F20 => { }, azul_impl::window::VirtualKeyCode::F21 => { }, azul_impl::window::VirtualKeyCode::F22 => { }, azul_impl::window::VirtualKeyCode::F23 => { }, azul_impl::window::VirtualKeyCode::F24 => { }, azul_impl::window::VirtualKeyCode::Snapshot => { }, azul_impl::window::VirtualKeyCode::Scroll => { }, azul_impl::window::VirtualKeyCode::Pause => { }, azul_impl::window::VirtualKeyCode::Insert => { }, azul_impl::window::VirtualKeyCode::Home => { }, azul_impl::window::VirtualKeyCode::Delete => { }, azul_impl::window::VirtualKeyCode::End => { }, azul_impl::window::VirtualKeyCode::PageDown => { }, azul_impl::window::VirtualKeyCode::PageUp => { }, azul_impl::window::VirtualKeyCode::Left => { }, azul_impl::window::VirtualKeyCode::Up => { }, azul_impl::window::VirtualKeyCode::Right => { }, azul_impl::window::VirtualKeyCode::Down => { }, azul_impl::window::VirtualKeyCode::Back => { }, azul_impl::window::VirtualKeyCode::Return => { }, azul_impl::window::VirtualKeyCode::Space => { }, azul_impl::window::VirtualKeyCode::Compose => { }, azul_impl::window::VirtualKeyCode::Caret => { }, azul_impl::window::VirtualKeyCode::Numlock => { }, azul_impl::window::VirtualKeyCode::Numpad0 => { }, azul_impl::window::VirtualKeyCode::Numpad1 => { }, azul_impl::window::VirtualKeyCode::Numpad2 => { }, azul_impl::window::VirtualKeyCode::Numpad3 => { }, azul_impl::window::VirtualKeyCode::Numpad4 => { }, azul_impl::window::VirtualKeyCode::Numpad5 => { }, azul_impl::window::VirtualKeyCode::Numpad6 => { }, azul_impl::window::VirtualKeyCode::Numpad7 => { }, azul_impl::window::VirtualKeyCode::Numpad8 => { }, azul_impl::window::VirtualKeyCode::Numpad9 => { }, azul_impl::window::VirtualKeyCode::NumpadAdd => { }, azul_impl::window::VirtualKeyCode::NumpadDivide => { }, azul_impl::window::VirtualKeyCode::NumpadDecimal => { }, azul_impl::window::VirtualKeyCode::NumpadComma => { }, azul_impl::window::VirtualKeyCode::NumpadEnter => { }, azul_impl::window::VirtualKeyCode::NumpadEquals => { }, azul_impl::window::VirtualKeyCode::NumpadMultiply => { }, azul_impl::window::VirtualKeyCode::NumpadSubtract => { }, azul_impl::window::VirtualKeyCode::AbntC1 => { }, azul_impl::window::VirtualKeyCode::AbntC2 => { }, azul_impl::window::VirtualKeyCode::Apostrophe => { }, azul_impl::window::VirtualKeyCode::Apps => { }, azul_impl::window::VirtualKeyCode::Asterisk => { }, azul_impl::window::VirtualKeyCode::At => { }, azul_impl::window::VirtualKeyCode::Ax => { }, azul_impl::window::VirtualKeyCode::Backslash => { }, azul_impl::window::VirtualKeyCode::Calculator => { }, azul_impl::window::VirtualKeyCode::Capital => { }, azul_impl::window::VirtualKeyCode::Colon => { }, azul_impl::window::VirtualKeyCode::Comma => { }, azul_impl::window::VirtualKeyCode::Convert => { }, azul_impl::window::VirtualKeyCode::Equals => { }, azul_impl::window::VirtualKeyCode::Grave => { }, azul_impl::window::VirtualKeyCode::Kana => { }, azul_impl::window::VirtualKeyCode::Kanji => { }, azul_impl::window::VirtualKeyCode::LAlt => { }, azul_impl::window::VirtualKeyCode::LBracket => { }, azul_impl::window::VirtualKeyCode::LControl => { }, azul_impl::window::VirtualKeyCode::LShift => { }, azul_impl::window::VirtualKeyCode::LWin => { }, azul_impl::window::VirtualKeyCode::Mail => { }, azul_impl::window::VirtualKeyCode::MediaSelect => { }, azul_impl::window::VirtualKeyCode::MediaStop => { }, azul_impl::window::VirtualKeyCode::Minus => { }, azul_impl::window::VirtualKeyCode::Mute => { }, azul_impl::window::VirtualKeyCode::MyComputer => { }, azul_impl::window::VirtualKeyCode::NavigateForward => { }, azul_impl::window::VirtualKeyCode::NavigateBackward => { }, azul_impl::window::VirtualKeyCode::NextTrack => { }, azul_impl::window::VirtualKeyCode::NoConvert => { }, azul_impl::window::VirtualKeyCode::OEM102 => { }, azul_impl::window::VirtualKeyCode::Period => { }, azul_impl::window::VirtualKeyCode::PlayPause => { }, azul_impl::window::VirtualKeyCode::Plus => { }, azul_impl::window::VirtualKeyCode::Power => { }, azul_impl::window::VirtualKeyCode::PrevTrack => { }, azul_impl::window::VirtualKeyCode::RAlt => { }, azul_impl::window::VirtualKeyCode::RBracket => { }, azul_impl::window::VirtualKeyCode::RControl => { }, azul_impl::window::VirtualKeyCode::RShift => { }, azul_impl::window::VirtualKeyCode::RWin => { }, azul_impl::window::VirtualKeyCode::Semicolon => { }, azul_impl::window::VirtualKeyCode::Slash => { }, azul_impl::window::VirtualKeyCode::Sleep => { }, azul_impl::window::VirtualKeyCode::Stop => { }, azul_impl::window::VirtualKeyCode::Sysrq => { }, azul_impl::window::VirtualKeyCode::Tab => { }, azul_impl::window::VirtualKeyCode::Underline => { }, azul_impl::window::VirtualKeyCode::Unlabeled => { }, azul_impl::window::VirtualKeyCode::VolumeDown => { }, azul_impl::window::VirtualKeyCode::VolumeUp => { }, azul_impl::window::VirtualKeyCode::Wake => { }, azul_impl::window::VirtualKeyCode::WebBack => { }, azul_impl::window::VirtualKeyCode::WebFavorites => { }, azul_impl::window::VirtualKeyCode::WebForward => { }, azul_impl::window::VirtualKeyCode::WebHome => { }, azul_impl::window::VirtualKeyCode::WebRefresh => { }, azul_impl::window::VirtualKeyCode::WebSearch => { }, azul_impl::window::VirtualKeyCode::WebStop => { }, azul_impl::window::VirtualKeyCode::Yen => { }, azul_impl::window::VirtualKeyCode::Copy => { }, azul_impl::window::VirtualKeyCode::Paste => { }, azul_impl::window::VirtualKeyCode::Cut => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_virtual_key_code_deep_copy(object: &AzVirtualKeyCode) -> AzVirtualKeyCode { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_virtual_key_code_fmt_debug(object: &AzVirtualKeyCode) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `AcceleratorKey` struct
pub type AzAcceleratorKeyTT = azul_impl::window::AcceleratorKey;
pub use AzAcceleratorKeyTT as AzAcceleratorKey;
/// Destructor: Takes ownership of the `AcceleratorKey` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_accelerator_key_delete(object: &mut AzAcceleratorKey) { match object { azul_impl::window::AcceleratorKey::Ctrl => { }, azul_impl::window::AcceleratorKey::Alt => { }, azul_impl::window::AcceleratorKey::Shift => { }, azul_impl::window::AcceleratorKey::Key(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_accelerator_key_deep_copy(object: &AzAcceleratorKey) -> AzAcceleratorKey { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_accelerator_key_fmt_debug(object: &AzAcceleratorKey) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `WindowSize` struct
pub type AzWindowSizeTT = azul_impl::window::WindowSize;
pub use AzWindowSizeTT as AzWindowSize;
/// Destructor: Takes ownership of the `WindowSize` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_window_size_delete(object: &mut AzWindowSize) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_window_size_deep_copy(object: &AzWindowSize) -> AzWindowSize { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_window_size_fmt_debug(object: &AzWindowSize) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `WindowFlags` struct
pub type AzWindowFlagsTT = azul_impl::window::WindowFlags;
pub use AzWindowFlagsTT as AzWindowFlags;
/// Destructor: Takes ownership of the `WindowFlags` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_window_flags_delete(object: &mut AzWindowFlags) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_window_flags_deep_copy(object: &AzWindowFlags) -> AzWindowFlags { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_window_flags_fmt_debug(object: &AzWindowFlags) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `DebugState` struct
pub type AzDebugStateTT = azul_impl::window::DebugState;
pub use AzDebugStateTT as AzDebugState;
/// Destructor: Takes ownership of the `DebugState` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_debug_state_delete(object: &mut AzDebugState) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_debug_state_deep_copy(object: &AzDebugState) -> AzDebugState { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_debug_state_fmt_debug(object: &AzDebugState) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `KeyboardState` struct
pub type AzKeyboardStateTT = azul_impl::window::KeyboardState;
pub use AzKeyboardStateTT as AzKeyboardState;
/// Destructor: Takes ownership of the `KeyboardState` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_keyboard_state_delete(object: &mut AzKeyboardState) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_keyboard_state_deep_copy(object: &AzKeyboardState) -> AzKeyboardState { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_keyboard_state_fmt_debug(object: &AzKeyboardState) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `MouseCursorType` struct
pub type AzMouseCursorTypeTT = azul_impl::window::MouseCursorType;
pub use AzMouseCursorTypeTT as AzMouseCursorType;
/// Destructor: Takes ownership of the `MouseCursorType` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_mouse_cursor_type_delete(object: &mut AzMouseCursorType) { match object { azul_impl::window::MouseCursorType::Default => { }, azul_impl::window::MouseCursorType::Crosshair => { }, azul_impl::window::MouseCursorType::Hand => { }, azul_impl::window::MouseCursorType::Arrow => { }, azul_impl::window::MouseCursorType::Move => { }, azul_impl::window::MouseCursorType::Text => { }, azul_impl::window::MouseCursorType::Wait => { }, azul_impl::window::MouseCursorType::Help => { }, azul_impl::window::MouseCursorType::Progress => { }, azul_impl::window::MouseCursorType::NotAllowed => { }, azul_impl::window::MouseCursorType::ContextMenu => { }, azul_impl::window::MouseCursorType::Cell => { }, azul_impl::window::MouseCursorType::VerticalText => { }, azul_impl::window::MouseCursorType::Alias => { }, azul_impl::window::MouseCursorType::Copy => { }, azul_impl::window::MouseCursorType::NoDrop => { }, azul_impl::window::MouseCursorType::Grab => { }, azul_impl::window::MouseCursorType::Grabbing => { }, azul_impl::window::MouseCursorType::AllScroll => { }, azul_impl::window::MouseCursorType::ZoomIn => { }, azul_impl::window::MouseCursorType::ZoomOut => { }, azul_impl::window::MouseCursorType::EResize => { }, azul_impl::window::MouseCursorType::NResize => { }, azul_impl::window::MouseCursorType::NeResize => { }, azul_impl::window::MouseCursorType::NwResize => { }, azul_impl::window::MouseCursorType::SResize => { }, azul_impl::window::MouseCursorType::SeResize => { }, azul_impl::window::MouseCursorType::SwResize => { }, azul_impl::window::MouseCursorType::WResize => { }, azul_impl::window::MouseCursorType::EwResize => { }, azul_impl::window::MouseCursorType::NsResize => { }, azul_impl::window::MouseCursorType::NeswResize => { }, azul_impl::window::MouseCursorType::NwseResize => { }, azul_impl::window::MouseCursorType::ColResize => { }, azul_impl::window::MouseCursorType::RowResize => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_mouse_cursor_type_deep_copy(object: &AzMouseCursorType) -> AzMouseCursorType { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_mouse_cursor_type_fmt_debug(object: &AzMouseCursorType) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `CursorPosition` struct
pub type AzCursorPositionTT = azul_impl::window::CursorPosition;
pub use AzCursorPositionTT as AzCursorPosition;
/// Destructor: Takes ownership of the `CursorPosition` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_cursor_position_delete(object: &mut AzCursorPosition) { match object { azul_impl::window::CursorPosition::OutOfWindow => { }, azul_impl::window::CursorPosition::Uninitialized => { }, azul_impl::window::CursorPosition::InWindow(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_cursor_position_deep_copy(object: &AzCursorPosition) -> AzCursorPosition { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_cursor_position_fmt_debug(object: &AzCursorPosition) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `MouseState` struct
pub type AzMouseStateTT = azul_impl::window::MouseState;
pub use AzMouseStateTT as AzMouseState;
/// Destructor: Takes ownership of the `MouseState` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_mouse_state_delete(object: &mut AzMouseState) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_mouse_state_deep_copy(object: &AzMouseState) -> AzMouseState { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_mouse_state_fmt_debug(object: &AzMouseState) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `PlatformSpecificOptions` struct
pub type AzPlatformSpecificOptionsTT = azul_impl::window::PlatformSpecificOptions;
pub use AzPlatformSpecificOptionsTT as AzPlatformSpecificOptions;
/// Destructor: Takes ownership of the `PlatformSpecificOptions` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_platform_specific_options_delete(object: &mut AzPlatformSpecificOptions) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_platform_specific_options_deep_copy(object: &AzPlatformSpecificOptions) -> AzPlatformSpecificOptions { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_platform_specific_options_fmt_debug(object: &AzPlatformSpecificOptions) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `WindowsWindowOptions` struct
pub type AzWindowsWindowOptionsTT = azul_impl::window::WindowsWindowOptions;
pub use AzWindowsWindowOptionsTT as AzWindowsWindowOptions;
/// Destructor: Takes ownership of the `WindowsWindowOptions` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_windows_window_options_delete(object: &mut AzWindowsWindowOptions) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_windows_window_options_deep_copy(object: &AzWindowsWindowOptions) -> AzWindowsWindowOptions { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_windows_window_options_fmt_debug(object: &AzWindowsWindowOptions) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `WaylandTheme` struct
pub type AzWaylandThemeTT = azul_impl::window::WaylandTheme;
pub use AzWaylandThemeTT as AzWaylandTheme;
/// Destructor: Takes ownership of the `WaylandTheme` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_wayland_theme_delete(object: &mut AzWaylandTheme) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_wayland_theme_deep_copy(object: &AzWaylandTheme) -> AzWaylandTheme { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_wayland_theme_fmt_debug(object: &AzWaylandTheme) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `RendererType` struct
pub type AzRendererTypeTT = azul_impl::window::RendererType;
pub use AzRendererTypeTT as AzRendererType;
/// Destructor: Takes ownership of the `RendererType` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_renderer_type_delete(object: &mut AzRendererType) { match object { azul_impl::window::RendererType::Default => { }, azul_impl::window::RendererType::ForceHardware => { }, azul_impl::window::RendererType::ForceSoftware => { }, azul_impl::window::RendererType::Custom(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_renderer_type_deep_copy(object: &AzRendererType) -> AzRendererType { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_renderer_type_fmt_debug(object: &AzRendererType) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StringPair` struct
pub type AzStringPairTT = azul_impl::window::AzStringPair;
pub use AzStringPairTT as AzStringPair;
/// Destructor: Takes ownership of the `StringPair` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_string_pair_delete(object: &mut AzStringPair) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_string_pair_deep_copy(object: &AzStringPair) -> AzStringPair { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_string_pair_fmt_debug(object: &AzStringPair) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LinuxWindowOptions` struct
pub type AzLinuxWindowOptionsTT = azul_impl::window::LinuxWindowOptions;
pub use AzLinuxWindowOptionsTT as AzLinuxWindowOptions;
/// Destructor: Takes ownership of the `LinuxWindowOptions` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_linux_window_options_delete(object: &mut AzLinuxWindowOptions) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_linux_window_options_deep_copy(object: &AzLinuxWindowOptions) -> AzLinuxWindowOptions { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_linux_window_options_fmt_debug(object: &AzLinuxWindowOptions) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `MacWindowOptions` struct
pub type AzMacWindowOptionsTT = azul_impl::window::MacWindowOptions;
pub use AzMacWindowOptionsTT as AzMacWindowOptions;
/// Destructor: Takes ownership of the `MacWindowOptions` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_mac_window_options_delete(object: &mut AzMacWindowOptions) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_mac_window_options_deep_copy(object: &AzMacWindowOptions) -> AzMacWindowOptions { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_mac_window_options_fmt_debug(object: &AzMacWindowOptions) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `WasmWindowOptions` struct
pub type AzWasmWindowOptionsTT = azul_impl::window::WasmWindowOptions;
pub use AzWasmWindowOptionsTT as AzWasmWindowOptions;
/// Destructor: Takes ownership of the `WasmWindowOptions` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_wasm_window_options_delete(object: &mut AzWasmWindowOptions) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_wasm_window_options_deep_copy(object: &AzWasmWindowOptions) -> AzWasmWindowOptions { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_wasm_window_options_fmt_debug(object: &AzWasmWindowOptions) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `FullScreenMode` struct
pub type AzFullScreenModeTT = azul_impl::window::FullScreenMode;
pub use AzFullScreenModeTT as AzFullScreenMode;
/// Destructor: Takes ownership of the `FullScreenMode` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_full_screen_mode_delete(object: &mut AzFullScreenMode) { match object { azul_impl::window::FullScreenMode::SlowFullScreen => { }, azul_impl::window::FullScreenMode::FastFullScreen => { }, azul_impl::window::FullScreenMode::SlowWindowed => { }, azul_impl::window::FullScreenMode::FastWindowed => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_full_screen_mode_deep_copy(object: &AzFullScreenMode) -> AzFullScreenMode { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_full_screen_mode_fmt_debug(object: &AzFullScreenMode) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `WindowTheme` struct
pub type AzWindowThemeTT = azul_impl::window::WindowTheme;
pub use AzWindowThemeTT as AzWindowTheme;
/// Destructor: Takes ownership of the `WindowTheme` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_window_theme_delete(object: &mut AzWindowTheme) { match object { azul_impl::window::WindowTheme::DarkMode => { }, azul_impl::window::WindowTheme::LightMode => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_window_theme_deep_copy(object: &AzWindowTheme) -> AzWindowTheme { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_window_theme_fmt_debug(object: &AzWindowTheme) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `WindowPosition` struct
pub type AzWindowPositionTT = azul_impl::window::WindowPosition;
pub use AzWindowPositionTT as AzWindowPosition;
/// Destructor: Takes ownership of the `WindowPosition` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_window_position_delete(object: &mut AzWindowPosition) { match object { azul_impl::window::WindowPosition::Uninitialized => { }, azul_impl::window::WindowPosition::Initialized(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_window_position_deep_copy(object: &AzWindowPosition) -> AzWindowPosition { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_window_position_fmt_debug(object: &AzWindowPosition) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `ImePosition` struct
pub type AzImePositionTT = azul_impl::window::ImePosition;
pub use AzImePositionTT as AzImePosition;
/// Destructor: Takes ownership of the `ImePosition` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_ime_position_delete(object: &mut AzImePosition) { match object { azul_impl::window::ImePosition::Uninitialized => { }, azul_impl::window::ImePosition::Initialized(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_ime_position_deep_copy(object: &AzImePosition) -> AzImePosition { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_ime_position_fmt_debug(object: &AzImePosition) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `TouchState` struct
pub type AzTouchStateTT = azul_impl::window::TouchState;
pub use AzTouchStateTT as AzTouchState;
/// Destructor: Takes ownership of the `TouchState` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_touch_state_delete(object: &mut AzTouchState) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_touch_state_deep_copy(object: &AzTouchState) -> AzTouchState { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_touch_state_fmt_debug(object: &AzTouchState) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `WindowState` struct
pub type AzWindowStateTT = azul_impl::window::WindowState;
pub use AzWindowStateTT as AzWindowState;
/// Creates a new `WindowState` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `WindowState::new()` constructor.
#[no_mangle] pub extern "C" fn az_window_state_new(layout_callback: AzLayoutCallbackType) -> AzWindowState { WindowState::new(layout_callback) }
/// Destructor: Takes ownership of the `WindowState` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_window_state_delete(object: &mut AzWindowState) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_window_state_deep_copy(object: &AzWindowState) -> AzWindowState { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_window_state_fmt_debug(object: &AzWindowState) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LogicalSize` struct
pub type AzLogicalSizeTT = azul_impl::window::LogicalSize;
pub use AzLogicalSizeTT as AzLogicalSize;
/// Destructor: Takes ownership of the `LogicalSize` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_logical_size_delete(object: &mut AzLogicalSize) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_logical_size_deep_copy(object: &AzLogicalSize) -> AzLogicalSize { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_logical_size_fmt_debug(object: &AzLogicalSize) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `WindowCreateOptions` struct
pub type AzWindowCreateOptionsTT = azul_impl::window::WindowCreateOptions;
pub use AzWindowCreateOptionsTT as AzWindowCreateOptions;
/// Creates a new `WindowCreateOptions` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `WindowCreateOptions::new()` constructor.
#[no_mangle] pub extern "C" fn az_window_create_options_new(layout_callback: AzLayoutCallbackType) -> AzWindowCreateOptions { WindowCreateOptions::new(layout_callback) }
/// Destructor: Takes ownership of the `WindowCreateOptions` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_window_create_options_delete(object: &mut AzWindowCreateOptions) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_window_create_options_deep_copy(object: &AzWindowCreateOptions) -> AzWindowCreateOptions { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_window_create_options_fmt_debug(object: &AzWindowCreateOptions) -> AzString { format!("{:#?}", object).into() }

// WARNING: autogenerated code for azul api version 0.1.0


//! Public API for Azul
//!
//! A single function can have multiple implementations depending on whether it is
//! compiled for the Rust-desktop target, the Rust-wasm target or the C API.
//!
//! For now, the crate simply re-exports azul_core and calls the c_api functions

#![doc(
    html_logo_url = "https://raw.githubusercontent.com/maps4print/azul/master/assets/images/azul_logo_full_min.svg.png",
    html_favicon_url = "https://raw.githubusercontent.com/maps4print/azul/master/assets/images/favicon.ico",
)]

#![allow(dead_code)]
#![allow(unused_imports)]

extern crate azul_core;
extern crate azul_css;
extern crate azul_native_style;
#[cfg(target_arch = "wasm32")]
extern crate azul_web;
#[cfg(not(target_arch = "wasm32"))]
extern crate azul_desktop;

use core::ffi::c_void;
use std::path::PathBuf;
use azul_core::{
    dom::Dom,
    callbacks::{RefAny, LayoutInfo, Callback, CallbackInfo, GlCallbackInfo, GlCallbackReturn, IFrameCallbackInfo, IFrameCallbackReturn},
    window::WindowCreateOptions,
    app_resources::{RawImage, RawImageFormat, FontId, TextId, ImageId},
};
use azul_css::*;
#[cfg(not(target_arch = "wasm32"))]
use azul_desktop::app::{App, AppConfig};
#[cfg(target_arch = "wasm32")]
use azul_web::app::{App, AppConfig};
/// Pointer to rust-allocated `Box<String>` struct
#[no_mangle] #[repr(C)] pub struct AzStringPtr { ptr: *mut c_void }
/// Creates + allocates a Rust `String` by **copying** it from another utf8-encoded string
#[no_mangle] #[inline] pub extern "C" fn az_string_from_utf8_unchecked(ptr: *const u8, len: usize) -> AzStringPtr { let object: String = unsafe { std::str::from_utf8_unchecked(std::slice::from_raw_parts(ptr, len)).to_string() }; AzStringPtr { ptr: Box::into_raw(Box::new(object)) as *mut c_void } }
/// Creates + allocates a Rust `String` by **copying** it from another utf8-encoded string
#[no_mangle] #[inline] pub extern "C" fn az_string_from_utf8_lossy(ptr: *const u8, len: usize) -> AzStringPtr { let object: String = unsafe { std::string::String::from_utf8_lossy(std::slice::from_raw_parts(ptr, len)).to_string() }; AzStringPtr { ptr: Box::into_raw(Box::new(object)) as *mut c_void } }
/// Destructor: Takes ownership of the `String` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_string_delete(ptr: &mut AzStringPtr) { let _ = unsafe { Box::<String>::from_raw(ptr.ptr  as *mut String) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`String`>!.
#[no_mangle] #[inline] pub extern "C" fn az_string_shallow_copy(ptr: &AzStringPtr) -> AzStringPtr { AzStringPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzStringPtr` to a `Box<String>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_string_downcast(ptr: AzStringPtr) -> Box<String> { unsafe { Box::<String>::from_raw(ptr.ptr  as *mut String) } }
/// (private): Downcasts the `AzStringPtr` to a `&mut Box<String>` and runs the `func` closure on it
#[inline(always)] fn az_string_downcast_refmut<F: FnOnce(&mut Box<String>)>(ptr: &mut AzStringPtr, func: F) { let mut box_ptr: Box<String> = unsafe { Box::<String>::from_raw(ptr.ptr  as *mut String) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzStringPtr` to a `&Box<String>` and runs the `func` closure on it
#[inline(always)] fn az_string_downcast_ref<F: FnOnce(&Box<String>)>(ptr: &mut AzStringPtr, func: F) { let box_ptr: Box<String> = unsafe { Box::<String>::from_raw(ptr.ptr  as *mut String) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Wrapper over a Rust-allocated `Vec<u8>`
#[no_mangle] #[repr(C)] pub struct AzU8VecPtr { ptr: *mut c_void }
/// Creates + allocates a Rust `Vec<u8>` by **copying** it from a bytes source
#[no_mangle] #[inline] pub extern "C" fn az_u8_vec_copy_from(ptr: *const u8, len: usize) -> AzU8VecPtr { let object: Vec<u8> = unsafe { std::slice::from_raw_parts(ptr, len).to_vec() }; AzU8VecPtr { ptr: Box::into_raw(Box::new(object)) as *mut c_void } }
/// Destructor: Takes ownership of the `U8Vec` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_u8_vec_delete(ptr: &mut AzU8VecPtr) { let _ = unsafe { Box::<Vec<u8>>::from_raw(ptr.ptr  as *mut Vec<u8>) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`U8Vec`>!.
#[no_mangle] #[inline] pub extern "C" fn az_u8_vec_shallow_copy(ptr: &AzU8VecPtr) -> AzU8VecPtr { AzU8VecPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzU8VecPtr` to a `Box<Vec<u8>>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_u8_vec_downcast(ptr: AzU8VecPtr) -> Box<Vec<u8>> { unsafe { Box::<Vec<u8>>::from_raw(ptr.ptr  as *mut Vec<u8>) } }
/// (private): Downcasts the `AzU8VecPtr` to a `&mut Box<Vec<u8>>` and runs the `func` closure on it
#[inline(always)] fn az_u8_vec_downcast_refmut<F: FnOnce(&mut Box<Vec<u8>>)>(ptr: &mut AzU8VecPtr, func: F) { let mut box_ptr: Box<Vec<u8>> = unsafe { Box::<Vec<u8>>::from_raw(ptr.ptr  as *mut Vec<u8>) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzU8VecPtr` to a `&Box<Vec<u8>>` and runs the `func` closure on it
#[inline(always)] fn az_u8_vec_downcast_ref<F: FnOnce(&Box<Vec<u8>>)>(ptr: &mut AzU8VecPtr, func: F) { let box_ptr: Box<Vec<u8>> = unsafe { Box::<Vec<u8>>::from_raw(ptr.ptr  as *mut Vec<u8>) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Wrapper over a Rust-allocated `Vec<String>`
#[no_mangle] #[repr(C)] pub struct AzStringVecPtr { ptr: *mut c_void }
/// Creates + allocates a Rust `Vec<String>` by **copying** it from a bytes source
#[no_mangle] #[inline] pub extern "C" fn az_string_vec_copy_from(ptr: *const AzStringPtr, len: usize) -> AzStringVecPtr { let object: Vec<String> = unsafe { std::slice::from_raw_parts(ptr, len).to_vec() }; AzStringVecPtr { ptr: Box::into_raw(Box::new(object)) as *mut c_void } }
/// Destructor: Takes ownership of the `StringVec` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_string_vec_delete(ptr: &mut AzStringVecPtr) { let _ = unsafe { Box::<Vec<String>>::from_raw(ptr.ptr  as *mut Vec<String>) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`StringVec`>!.
#[no_mangle] #[inline] pub extern "C" fn az_string_vec_shallow_copy(ptr: &AzStringVecPtr) -> AzStringVecPtr { AzStringVecPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzStringVecPtr` to a `Box<Vec<String>>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_string_vec_downcast(ptr: AzStringVecPtr) -> Box<Vec<String>> { unsafe { Box::<Vec<String>>::from_raw(ptr.ptr  as *mut Vec<String>) } }
/// (private): Downcasts the `AzStringVecPtr` to a `&mut Box<Vec<String>>` and runs the `func` closure on it
#[inline(always)] fn az_string_vec_downcast_refmut<F: FnOnce(&mut Box<Vec<String>>)>(ptr: &mut AzStringVecPtr, func: F) { let mut box_ptr: Box<Vec<String>> = unsafe { Box::<Vec<String>>::from_raw(ptr.ptr  as *mut Vec<String>) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzStringVecPtr` to a `&Box<Vec<String>>` and runs the `func` closure on it
#[inline(always)] fn az_string_vec_downcast_ref<F: FnOnce(&Box<Vec<String>>)>(ptr: &mut AzStringVecPtr, func: F) { let box_ptr: Box<Vec<String>> = unsafe { Box::<Vec<String>>::from_raw(ptr.ptr  as *mut Vec<String>) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Wrapper over a Rust-allocated `PathBuf`
#[no_mangle] #[repr(C)] pub struct AzPathBufPtr { ptr: *mut c_void }
/// Creates a new PathBuf from a String
#[no_mangle] #[inline] pub extern "C" fn az_path_buf_new(path: AzStringPtr) -> AzPathBufPtr { let object: PathBuf = std::path::PathBuf::from(*az_string_downcast(path)); AzPathBufPtr { ptr: Box::into_raw(Box::new(object)) as *mut c_void } }
/// Destructor: Takes ownership of the `PathBuf` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_path_buf_delete(ptr: &mut AzPathBufPtr) { let _ = unsafe { Box::<PathBuf>::from_raw(ptr.ptr  as *mut PathBuf) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`PathBuf`>!.
#[no_mangle] #[inline] pub extern "C" fn az_path_buf_shallow_copy(ptr: &AzPathBufPtr) -> AzPathBufPtr { AzPathBufPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzPathBufPtr` to a `Box<PathBuf>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_path_buf_downcast(ptr: AzPathBufPtr) -> Box<PathBuf> { unsafe { Box::<PathBuf>::from_raw(ptr.ptr  as *mut PathBuf) } }
/// (private): Downcasts the `AzPathBufPtr` to a `&mut Box<PathBuf>` and runs the `func` closure on it
#[inline(always)] fn az_path_buf_downcast_refmut<F: FnOnce(&mut Box<PathBuf>)>(ptr: &mut AzPathBufPtr, func: F) { let mut box_ptr: Box<PathBuf> = unsafe { Box::<PathBuf>::from_raw(ptr.ptr  as *mut PathBuf) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzPathBufPtr` to a `&Box<PathBuf>` and runs the `func` closure on it
#[inline(always)] fn az_path_buf_downcast_ref<F: FnOnce(&Box<PathBuf>)>(ptr: &mut AzPathBufPtr, func: F) { let box_ptr: Box<PathBuf> = unsafe { Box::<PathBuf>::from_raw(ptr.ptr  as *mut PathBuf) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<AppConfig>` struct
#[no_mangle] #[repr(C)] pub struct AzAppConfigPtr { ptr: *mut c_void }
/// Creates a new AppConfig with default values
#[no_mangle] #[inline] pub extern "C" fn az_app_config_default() -> AzAppConfigPtr { let object: AppConfig = AppConfig::default(); AzAppConfigPtr { ptr: Box::into_raw(Box::new(object)) as *mut c_void } }
/// Destructor: Takes ownership of the `AppConfig` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_app_config_delete(ptr: &mut AzAppConfigPtr) { let _ = unsafe { Box::<AppConfig>::from_raw(ptr.ptr  as *mut AppConfig) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`AppConfig`>!.
#[no_mangle] #[inline] pub extern "C" fn az_app_config_shallow_copy(ptr: &AzAppConfigPtr) -> AzAppConfigPtr { AzAppConfigPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzAppConfigPtr` to a `Box<AppConfig>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_app_config_downcast(ptr: AzAppConfigPtr) -> Box<AppConfig> { unsafe { Box::<AppConfig>::from_raw(ptr.ptr  as *mut AppConfig) } }
/// (private): Downcasts the `AzAppConfigPtr` to a `&mut Box<AppConfig>` and runs the `func` closure on it
#[inline(always)] fn az_app_config_downcast_refmut<F: FnOnce(&mut Box<AppConfig>)>(ptr: &mut AzAppConfigPtr, func: F) { let mut box_ptr: Box<AppConfig> = unsafe { Box::<AppConfig>::from_raw(ptr.ptr  as *mut AppConfig) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzAppConfigPtr` to a `&Box<AppConfig>` and runs the `func` closure on it
#[inline(always)] fn az_app_config_downcast_ref<F: FnOnce(&Box<AppConfig>)>(ptr: &mut AzAppConfigPtr, func: F) { let box_ptr: Box<AppConfig> = unsafe { Box::<AppConfig>::from_raw(ptr.ptr  as *mut AppConfig) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<App>` struct
#[no_mangle] #[repr(C)] pub struct AzAppPtr { ptr: *mut c_void }
/// Creates a new App instance from the given `AppConfig`
#[no_mangle] #[inline] pub extern "C" fn az_app_new(data: AzRefAny, config: AzAppConfigPtr, callback: AzLayoutCallback) -> AzAppPtr { let object: App = App::new(data, *az_app_config_downcast(config), callback).unwrap(); AzAppPtr { ptr: Box::into_raw(Box::new(object)) as *mut c_void } }
/// Runs the application. Due to platform restrictions (specifically `WinMain` on Windows), this function never returns.
#[no_mangle] #[inline] pub extern "C" fn az_app_run(app: AzAppPtr, window: AzWindowCreateOptionsPtr) { az_app_downcast(app).run(*az_window_create_options_downcast(window)) }
/// Destructor: Takes ownership of the `App` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_app_delete(ptr: &mut AzAppPtr) { let _ = unsafe { Box::<App>::from_raw(ptr.ptr  as *mut App) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`App`>!.
#[no_mangle] #[inline] pub extern "C" fn az_app_shallow_copy(ptr: &AzAppPtr) -> AzAppPtr { AzAppPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzAppPtr` to a `Box<App>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_app_downcast(ptr: AzAppPtr) -> Box<App> { unsafe { Box::<App>::from_raw(ptr.ptr  as *mut App) } }
/// (private): Downcasts the `AzAppPtr` to a `&mut Box<App>` and runs the `func` closure on it
#[inline(always)] fn az_app_downcast_refmut<F: FnOnce(&mut Box<App>)>(ptr: &mut AzAppPtr, func: F) { let mut box_ptr: Box<App> = unsafe { Box::<App>::from_raw(ptr.ptr  as *mut App) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzAppPtr` to a `&Box<App>` and runs the `func` closure on it
#[inline(always)] fn az_app_downcast_ref<F: FnOnce(&Box<App>)>(ptr: &mut AzAppPtr, func: F) { let box_ptr: Box<App> = unsafe { Box::<App>::from_raw(ptr.ptr  as *mut App) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// The layout() callback fn
pub type AzLayoutCallback = fn(AzRefAny, AzLayoutInfoPtr) -> AzDomPtr;
pub type AzCallbackReturn = AzUpdateScreen;
/// Callback for responding to window events
pub type AzCallback = fn(AzCallbackInfoPtr) -> AzCallbackReturn;
/// Pointer to rust-allocated `Box<CallbackInfo>` struct
pub type AzCallbackInfoPtrType = azul_core::callbacks::CallbackInfoPtr;
#[no_mangle] pub use AzCallbackInfoPtrType as AzCallbackInfoPtr;
/// Destructor: Takes ownership of the `CallbackInfo` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_callback_info_delete<'a>(ptr: &mut AzCallbackInfoPtr) { let _ = unsafe { Box::<CallbackInfo<'a>>::from_raw(ptr.ptr  as *mut CallbackInfo<'a>) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`CallbackInfo`>!.
#[no_mangle] #[inline] pub extern "C" fn az_callback_info_shallow_copy<'a>(ptr: &AzCallbackInfoPtr) -> AzCallbackInfoPtr { AzCallbackInfoPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzCallbackInfoPtr` to a `Box<CallbackInfo<'a>>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_callback_info_downcast<'a>(ptr: AzCallbackInfoPtr) -> Box<CallbackInfo<'a>> { unsafe { Box::<CallbackInfo<'a>>::from_raw(ptr.ptr  as *mut CallbackInfo<'a>) } }
/// (private): Downcasts the `AzCallbackInfoPtr` to a `&mut Box<CallbackInfo<'a>>` and runs the `func` closure on it
#[inline(always)] fn az_callback_info_downcast_refmut<'a, F: FnOnce(&mut Box<CallbackInfo<'a>>)>(ptr: &mut AzCallbackInfoPtr, func: F) { let mut box_ptr: Box<CallbackInfo<'a>> = unsafe { Box::<CallbackInfo<'a>>::from_raw(ptr.ptr  as *mut CallbackInfo<'a>) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzCallbackInfoPtr` to a `&Box<CallbackInfo<'a>>` and runs the `func` closure on it
#[inline(always)] fn az_callback_info_downcast_ref<'a, F: FnOnce(&Box<CallbackInfo<'a>>)>(ptr: &mut AzCallbackInfoPtr, func: F) { let box_ptr: Box<CallbackInfo<'a>> = unsafe { Box::<CallbackInfo<'a>>::from_raw(ptr.ptr  as *mut CallbackInfo<'a>) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Re-export of rust-allocated (stack based) `UpdateScreen` struct
#[no_mangle] pub type AzUpdateScreen = Option<()>;

/// Re-export of rust-allocated (stack based) `Redraw` struct
#[no_mangle] pub static AzRedraw: AzUpdateScreen = azul_core::callbacks::Redraw;

/// Re-export of rust-allocated (stack based) `DontRedraw` struct
#[no_mangle] pub static AzDontRedraw: AzUpdateScreen = azul_core::callbacks::DontRedraw;

/// Callback for rendering iframes (infinite data structures that have to know how large they are rendered)
pub type AzIFrameCallback = fn(AzIFrameCallbackInfoPtr) -> AzIFrameCallbackReturnPtr;
/// Pointer to rust-allocated `Box<IFrameCallbackInfo>` struct
pub type AzIFrameCallbackInfoPtrType = azul_core::callbacks::IFrameCallbackInfoPtr;
#[no_mangle] pub use AzIFrameCallbackInfoPtrType as AzIFrameCallbackInfoPtr;
/// Destructor: Takes ownership of the `IFrameCallbackInfo` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_i_frame_callback_info_delete<'a>(ptr: &mut AzIFrameCallbackInfoPtr) { let _ = unsafe { Box::<IFrameCallbackInfo<'a>>::from_raw(ptr.ptr  as *mut IFrameCallbackInfo<'a>) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`IFrameCallbackInfo`>!.
#[no_mangle] #[inline] pub extern "C" fn az_i_frame_callback_info_shallow_copy<'a>(ptr: &AzIFrameCallbackInfoPtr) -> AzIFrameCallbackInfoPtr { AzIFrameCallbackInfoPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzIFrameCallbackInfoPtr` to a `Box<IFrameCallbackInfo<'a>>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_i_frame_callback_info_downcast<'a>(ptr: AzIFrameCallbackInfoPtr) -> Box<IFrameCallbackInfo<'a>> { unsafe { Box::<IFrameCallbackInfo<'a>>::from_raw(ptr.ptr  as *mut IFrameCallbackInfo<'a>) } }
/// (private): Downcasts the `AzIFrameCallbackInfoPtr` to a `&mut Box<IFrameCallbackInfo<'a>>` and runs the `func` closure on it
#[inline(always)] fn az_i_frame_callback_info_downcast_refmut<'a, F: FnOnce(&mut Box<IFrameCallbackInfo<'a>>)>(ptr: &mut AzIFrameCallbackInfoPtr, func: F) { let mut box_ptr: Box<IFrameCallbackInfo<'a>> = unsafe { Box::<IFrameCallbackInfo<'a>>::from_raw(ptr.ptr  as *mut IFrameCallbackInfo<'a>) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzIFrameCallbackInfoPtr` to a `&Box<IFrameCallbackInfo<'a>>` and runs the `func` closure on it
#[inline(always)] fn az_i_frame_callback_info_downcast_ref<'a, F: FnOnce(&Box<IFrameCallbackInfo<'a>>)>(ptr: &mut AzIFrameCallbackInfoPtr, func: F) { let box_ptr: Box<IFrameCallbackInfo<'a>> = unsafe { Box::<IFrameCallbackInfo<'a>>::from_raw(ptr.ptr  as *mut IFrameCallbackInfo<'a>) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<IFrameCallbackReturn>` struct
pub type AzIFrameCallbackReturnPtrType = azul_core::callbacks::IFrameCallbackReturnPtr;
#[no_mangle] pub use AzIFrameCallbackReturnPtrType as AzIFrameCallbackReturnPtr;
/// Destructor: Takes ownership of the `IFrameCallbackReturn` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_i_frame_callback_return_delete(ptr: &mut AzIFrameCallbackReturnPtr) { let _ = unsafe { Box::<IFrameCallbackReturn>::from_raw(ptr.ptr  as *mut IFrameCallbackReturn) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`IFrameCallbackReturn`>!.
#[no_mangle] #[inline] pub extern "C" fn az_i_frame_callback_return_shallow_copy(ptr: &AzIFrameCallbackReturnPtr) -> AzIFrameCallbackReturnPtr { AzIFrameCallbackReturnPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzIFrameCallbackReturnPtr` to a `Box<IFrameCallbackReturn>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_i_frame_callback_return_downcast(ptr: AzIFrameCallbackReturnPtr) -> Box<IFrameCallbackReturn> { unsafe { Box::<IFrameCallbackReturn>::from_raw(ptr.ptr  as *mut IFrameCallbackReturn) } }
/// (private): Downcasts the `AzIFrameCallbackReturnPtr` to a `&mut Box<IFrameCallbackReturn>` and runs the `func` closure on it
#[inline(always)] fn az_i_frame_callback_return_downcast_refmut<F: FnOnce(&mut Box<IFrameCallbackReturn>)>(ptr: &mut AzIFrameCallbackReturnPtr, func: F) { let mut box_ptr: Box<IFrameCallbackReturn> = unsafe { Box::<IFrameCallbackReturn>::from_raw(ptr.ptr  as *mut IFrameCallbackReturn) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzIFrameCallbackReturnPtr` to a `&Box<IFrameCallbackReturn>` and runs the `func` closure on it
#[inline(always)] fn az_i_frame_callback_return_downcast_ref<F: FnOnce(&Box<IFrameCallbackReturn>)>(ptr: &mut AzIFrameCallbackReturnPtr, func: F) { let box_ptr: Box<IFrameCallbackReturn> = unsafe { Box::<IFrameCallbackReturn>::from_raw(ptr.ptr  as *mut IFrameCallbackReturn) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Callback for rendering to an OpenGL texture
pub type AzGlCallback = fn(AzGlCallbackInfoPtr) -> AzGlCallbackReturnPtr;
/// Pointer to rust-allocated `Box<GlCallbackInfo>` struct
pub type AzGlCallbackInfoPtrType = azul_core::callbacks::GlCallbackInfoPtr;
#[no_mangle] pub use AzGlCallbackInfoPtrType as AzGlCallbackInfoPtr;
/// Destructor: Takes ownership of the `GlCallbackInfo` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_gl_callback_info_delete<'a>(ptr: &mut AzGlCallbackInfoPtr) { let _ = unsafe { Box::<GlCallbackInfo<'a>>::from_raw(ptr.ptr  as *mut GlCallbackInfo<'a>) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`GlCallbackInfo`>!.
#[no_mangle] #[inline] pub extern "C" fn az_gl_callback_info_shallow_copy<'a>(ptr: &AzGlCallbackInfoPtr) -> AzGlCallbackInfoPtr { AzGlCallbackInfoPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzGlCallbackInfoPtr` to a `Box<GlCallbackInfo<'a>>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_gl_callback_info_downcast<'a>(ptr: AzGlCallbackInfoPtr) -> Box<GlCallbackInfo<'a>> { unsafe { Box::<GlCallbackInfo<'a>>::from_raw(ptr.ptr  as *mut GlCallbackInfo<'a>) } }
/// (private): Downcasts the `AzGlCallbackInfoPtr` to a `&mut Box<GlCallbackInfo<'a>>` and runs the `func` closure on it
#[inline(always)] fn az_gl_callback_info_downcast_refmut<'a, F: FnOnce(&mut Box<GlCallbackInfo<'a>>)>(ptr: &mut AzGlCallbackInfoPtr, func: F) { let mut box_ptr: Box<GlCallbackInfo<'a>> = unsafe { Box::<GlCallbackInfo<'a>>::from_raw(ptr.ptr  as *mut GlCallbackInfo<'a>) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzGlCallbackInfoPtr` to a `&Box<GlCallbackInfo<'a>>` and runs the `func` closure on it
#[inline(always)] fn az_gl_callback_info_downcast_ref<'a, F: FnOnce(&Box<GlCallbackInfo<'a>>)>(ptr: &mut AzGlCallbackInfoPtr, func: F) { let box_ptr: Box<GlCallbackInfo<'a>> = unsafe { Box::<GlCallbackInfo<'a>>::from_raw(ptr.ptr  as *mut GlCallbackInfo<'a>) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<GlCallbackReturn>` struct
pub type AzGlCallbackReturnPtrType = azul_core::callbacks::GlCallbackReturnPtr;
#[no_mangle] pub use AzGlCallbackReturnPtrType as AzGlCallbackReturnPtr;
/// Destructor: Takes ownership of the `GlCallbackReturn` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_gl_callback_return_delete(ptr: &mut AzGlCallbackReturnPtr) { let _ = unsafe { Box::<GlCallbackReturn>::from_raw(ptr.ptr  as *mut GlCallbackReturn) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`GlCallbackReturn`>!.
#[no_mangle] #[inline] pub extern "C" fn az_gl_callback_return_shallow_copy(ptr: &AzGlCallbackReturnPtr) -> AzGlCallbackReturnPtr { AzGlCallbackReturnPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzGlCallbackReturnPtr` to a `Box<GlCallbackReturn>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_gl_callback_return_downcast(ptr: AzGlCallbackReturnPtr) -> Box<GlCallbackReturn> { unsafe { Box::<GlCallbackReturn>::from_raw(ptr.ptr  as *mut GlCallbackReturn) } }
/// (private): Downcasts the `AzGlCallbackReturnPtr` to a `&mut Box<GlCallbackReturn>` and runs the `func` closure on it
#[inline(always)] fn az_gl_callback_return_downcast_refmut<F: FnOnce(&mut Box<GlCallbackReturn>)>(ptr: &mut AzGlCallbackReturnPtr, func: F) { let mut box_ptr: Box<GlCallbackReturn> = unsafe { Box::<GlCallbackReturn>::from_raw(ptr.ptr  as *mut GlCallbackReturn) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzGlCallbackReturnPtr` to a `&Box<GlCallbackReturn>` and runs the `func` closure on it
#[inline(always)] fn az_gl_callback_return_downcast_ref<F: FnOnce(&Box<GlCallbackReturn>)>(ptr: &mut AzGlCallbackReturnPtr, func: F) { let box_ptr: Box<GlCallbackReturn> = unsafe { Box::<GlCallbackReturn>::from_raw(ptr.ptr  as *mut GlCallbackReturn) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<RefAny>` struct
pub use ::azul_core::callbacks::RefAny as AzRefAny;

/// Creates a new `RefAny` instance
#[no_mangle] pub extern "C" fn az_ref_any_new(ptr: *const u8, len: usize, type_id: u64, type_name: AzStringPtr, custom_destructor: fn(AzRefAny)) -> AzRefAny {
    AzRefAny::new_c(ptr, len, type_id, *az_string_downcast(type_name), custom_destructor)
}
/// Returns the internal pointer of the `RefAny` as a `*mut c_void` or a nullptr if the types don't match
#[no_mangle] pub extern "C" fn az_ref_any_get_ptr(ptr: &AzRefAny, len: usize, type_id: u64) -> *const c_void { ptr.get_ptr(len, type_id) }
/// Returns the internal pointer of the `RefAny` as a `*mut c_void` or a nullptr if the types don't match
#[no_mangle] pub extern "C" fn az_ref_any_get_mut_ptr(ptr: &AzRefAny, len: usize, type_id: u64) -> *mut c_void { ptr.get_mut_ptr(len, type_id) }
/// Creates a new reference of the pointer, pointing to the same object: WARNING: After calling this function you'll have two pointers to the same Box<`RefAny`>!.
#[no_mangle] pub extern "C" fn az_ref_any_shallow_copy(ptr: &AzRefAny) -> AzRefAny { ptr.clone() }
/// Destructor: Takes ownership of the `RefAny` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_ref_any_delete(ptr: &mut AzRefAny) { az_ref_any_core_copy(ptr).drop_c() }
/// Copies the pointer without invoking the destructor
#[no_mangle] pub extern "C" fn az_ref_any_core_copy(ptr: &AzRefAny) -> AzRefAny {
    AzRefAny {
        _internal_ptr: ptr._internal_ptr,
        _internal_len: ptr._internal_len,
        _internal_layout_size: ptr._internal_layout_size,
        _internal_layout_align: ptr._internal_layout_align,
        type_id: ptr.type_id,
        type_name: ptr.type_name.clone(),
        strong_count: ptr.strong_count,
        is_currently_mutable: ptr.is_currently_mutable,
        custom_destructor: ptr.custom_destructor,
    }
}

/// Pointer to rust-allocated `Box<LayoutInfo>` struct
pub type AzLayoutInfoPtrType = azul_core::callbacks::LayoutInfoPtr;
#[no_mangle] pub use AzLayoutInfoPtrType as AzLayoutInfoPtr;
/// Destructor: Takes ownership of the `LayoutInfo` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_layout_info_delete<'a>(ptr: &mut AzLayoutInfoPtr) { let _ = unsafe { Box::<LayoutInfo<'a>>::from_raw(ptr.ptr  as *mut LayoutInfo<'a>) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`LayoutInfo`>!.
#[no_mangle] #[inline] pub extern "C" fn az_layout_info_shallow_copy<'a>(ptr: &AzLayoutInfoPtr) -> AzLayoutInfoPtr { AzLayoutInfoPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzLayoutInfoPtr` to a `Box<LayoutInfo<'a>>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_layout_info_downcast<'a>(ptr: AzLayoutInfoPtr) -> Box<LayoutInfo<'a>> { unsafe { Box::<LayoutInfo<'a>>::from_raw(ptr.ptr  as *mut LayoutInfo<'a>) } }
/// (private): Downcasts the `AzLayoutInfoPtr` to a `&mut Box<LayoutInfo<'a>>` and runs the `func` closure on it
#[inline(always)] fn az_layout_info_downcast_refmut<'a, F: FnOnce(&mut Box<LayoutInfo<'a>>)>(ptr: &mut AzLayoutInfoPtr, func: F) { let mut box_ptr: Box<LayoutInfo<'a>> = unsafe { Box::<LayoutInfo<'a>>::from_raw(ptr.ptr  as *mut LayoutInfo<'a>) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzLayoutInfoPtr` to a `&Box<LayoutInfo<'a>>` and runs the `func` closure on it
#[inline(always)] fn az_layout_info_downcast_ref<'a, F: FnOnce(&Box<LayoutInfo<'a>>)>(ptr: &mut AzLayoutInfoPtr, func: F) { let box_ptr: Box<LayoutInfo<'a>> = unsafe { Box::<LayoutInfo<'a>>::from_raw(ptr.ptr  as *mut LayoutInfo<'a>) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<Css>` struct
#[no_mangle] #[repr(C)] pub struct AzCssPtr { ptr: *mut c_void }
/// Loads the native style for the given operating system
#[no_mangle] #[inline] pub extern "C" fn az_css_native() -> AzCssPtr { let object: Css = azul_native_style::native(); AzCssPtr { ptr: Box::into_raw(Box::new(object)) as *mut c_void } }
/// Returns an empty CSS style
#[no_mangle] #[inline] pub extern "C" fn az_css_empty() -> AzCssPtr { let object: Css = Css::empty(); AzCssPtr { ptr: Box::into_raw(Box::new(object)) as *mut c_void } }
/// Destructor: Takes ownership of the `Css` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_css_delete(ptr: &mut AzCssPtr) { let _ = unsafe { Box::<Css>::from_raw(ptr.ptr  as *mut Css) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`Css`>!.
#[no_mangle] #[inline] pub extern "C" fn az_css_shallow_copy(ptr: &AzCssPtr) -> AzCssPtr { AzCssPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzCssPtr` to a `Box<Css>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_css_downcast(ptr: AzCssPtr) -> Box<Css> { unsafe { Box::<Css>::from_raw(ptr.ptr  as *mut Css) } }
/// (private): Downcasts the `AzCssPtr` to a `&mut Box<Css>` and runs the `func` closure on it
#[inline(always)] fn az_css_downcast_refmut<F: FnOnce(&mut Box<Css>)>(ptr: &mut AzCssPtr, func: F) { let mut box_ptr: Box<Css> = unsafe { Box::<Css>::from_raw(ptr.ptr  as *mut Css) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzCssPtr` to a `&Box<Css>` and runs the `func` closure on it
#[inline(always)] fn az_css_downcast_ref<F: FnOnce(&Box<Css>)>(ptr: &mut AzCssPtr, func: F) { let box_ptr: Box<Css> = unsafe { Box::<Css>::from_raw(ptr.ptr  as *mut Css) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<BoxShadowPreDisplayItem>` struct
#[no_mangle] #[repr(C)] pub struct AzBoxShadowPreDisplayItemPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `BoxShadowPreDisplayItem` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_box_shadow_pre_display_item_delete(ptr: &mut AzBoxShadowPreDisplayItemPtr) { let _ = unsafe { Box::<BoxShadowPreDisplayItem>::from_raw(ptr.ptr  as *mut BoxShadowPreDisplayItem) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`BoxShadowPreDisplayItem`>!.
#[no_mangle] #[inline] pub extern "C" fn az_box_shadow_pre_display_item_shallow_copy(ptr: &AzBoxShadowPreDisplayItemPtr) -> AzBoxShadowPreDisplayItemPtr { AzBoxShadowPreDisplayItemPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzBoxShadowPreDisplayItemPtr` to a `Box<BoxShadowPreDisplayItem>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_box_shadow_pre_display_item_downcast(ptr: AzBoxShadowPreDisplayItemPtr) -> Box<BoxShadowPreDisplayItem> { unsafe { Box::<BoxShadowPreDisplayItem>::from_raw(ptr.ptr  as *mut BoxShadowPreDisplayItem) } }
/// (private): Downcasts the `AzBoxShadowPreDisplayItemPtr` to a `&mut Box<BoxShadowPreDisplayItem>` and runs the `func` closure on it
#[inline(always)] fn az_box_shadow_pre_display_item_downcast_refmut<F: FnOnce(&mut Box<BoxShadowPreDisplayItem>)>(ptr: &mut AzBoxShadowPreDisplayItemPtr, func: F) { let mut box_ptr: Box<BoxShadowPreDisplayItem> = unsafe { Box::<BoxShadowPreDisplayItem>::from_raw(ptr.ptr  as *mut BoxShadowPreDisplayItem) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzBoxShadowPreDisplayItemPtr` to a `&Box<BoxShadowPreDisplayItem>` and runs the `func` closure on it
#[inline(always)] fn az_box_shadow_pre_display_item_downcast_ref<F: FnOnce(&Box<BoxShadowPreDisplayItem>)>(ptr: &mut AzBoxShadowPreDisplayItemPtr, func: F) { let box_ptr: Box<BoxShadowPreDisplayItem> = unsafe { Box::<BoxShadowPreDisplayItem>::from_raw(ptr.ptr  as *mut BoxShadowPreDisplayItem) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<LayoutAlignContent>` struct
#[no_mangle] #[repr(C)] pub struct AzLayoutAlignContentPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `LayoutAlignContent` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_layout_align_content_delete(ptr: &mut AzLayoutAlignContentPtr) { let _ = unsafe { Box::<LayoutAlignContent>::from_raw(ptr.ptr  as *mut LayoutAlignContent) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`LayoutAlignContent`>!.
#[no_mangle] #[inline] pub extern "C" fn az_layout_align_content_shallow_copy(ptr: &AzLayoutAlignContentPtr) -> AzLayoutAlignContentPtr { AzLayoutAlignContentPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzLayoutAlignContentPtr` to a `Box<LayoutAlignContent>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_layout_align_content_downcast(ptr: AzLayoutAlignContentPtr) -> Box<LayoutAlignContent> { unsafe { Box::<LayoutAlignContent>::from_raw(ptr.ptr  as *mut LayoutAlignContent) } }
/// (private): Downcasts the `AzLayoutAlignContentPtr` to a `&mut Box<LayoutAlignContent>` and runs the `func` closure on it
#[inline(always)] fn az_layout_align_content_downcast_refmut<F: FnOnce(&mut Box<LayoutAlignContent>)>(ptr: &mut AzLayoutAlignContentPtr, func: F) { let mut box_ptr: Box<LayoutAlignContent> = unsafe { Box::<LayoutAlignContent>::from_raw(ptr.ptr  as *mut LayoutAlignContent) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzLayoutAlignContentPtr` to a `&Box<LayoutAlignContent>` and runs the `func` closure on it
#[inline(always)] fn az_layout_align_content_downcast_ref<F: FnOnce(&Box<LayoutAlignContent>)>(ptr: &mut AzLayoutAlignContentPtr, func: F) { let box_ptr: Box<LayoutAlignContent> = unsafe { Box::<LayoutAlignContent>::from_raw(ptr.ptr  as *mut LayoutAlignContent) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<LayoutAlignItems>` struct
#[no_mangle] #[repr(C)] pub struct AzLayoutAlignItemsPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `LayoutAlignItems` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_layout_align_items_delete(ptr: &mut AzLayoutAlignItemsPtr) { let _ = unsafe { Box::<LayoutAlignItems>::from_raw(ptr.ptr  as *mut LayoutAlignItems) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`LayoutAlignItems`>!.
#[no_mangle] #[inline] pub extern "C" fn az_layout_align_items_shallow_copy(ptr: &AzLayoutAlignItemsPtr) -> AzLayoutAlignItemsPtr { AzLayoutAlignItemsPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzLayoutAlignItemsPtr` to a `Box<LayoutAlignItems>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_layout_align_items_downcast(ptr: AzLayoutAlignItemsPtr) -> Box<LayoutAlignItems> { unsafe { Box::<LayoutAlignItems>::from_raw(ptr.ptr  as *mut LayoutAlignItems) } }
/// (private): Downcasts the `AzLayoutAlignItemsPtr` to a `&mut Box<LayoutAlignItems>` and runs the `func` closure on it
#[inline(always)] fn az_layout_align_items_downcast_refmut<F: FnOnce(&mut Box<LayoutAlignItems>)>(ptr: &mut AzLayoutAlignItemsPtr, func: F) { let mut box_ptr: Box<LayoutAlignItems> = unsafe { Box::<LayoutAlignItems>::from_raw(ptr.ptr  as *mut LayoutAlignItems) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzLayoutAlignItemsPtr` to a `&Box<LayoutAlignItems>` and runs the `func` closure on it
#[inline(always)] fn az_layout_align_items_downcast_ref<F: FnOnce(&Box<LayoutAlignItems>)>(ptr: &mut AzLayoutAlignItemsPtr, func: F) { let box_ptr: Box<LayoutAlignItems> = unsafe { Box::<LayoutAlignItems>::from_raw(ptr.ptr  as *mut LayoutAlignItems) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<LayoutBottom>` struct
#[no_mangle] #[repr(C)] pub struct AzLayoutBottomPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `LayoutBottom` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_layout_bottom_delete(ptr: &mut AzLayoutBottomPtr) { let _ = unsafe { Box::<LayoutBottom>::from_raw(ptr.ptr  as *mut LayoutBottom) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`LayoutBottom`>!.
#[no_mangle] #[inline] pub extern "C" fn az_layout_bottom_shallow_copy(ptr: &AzLayoutBottomPtr) -> AzLayoutBottomPtr { AzLayoutBottomPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzLayoutBottomPtr` to a `Box<LayoutBottom>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_layout_bottom_downcast(ptr: AzLayoutBottomPtr) -> Box<LayoutBottom> { unsafe { Box::<LayoutBottom>::from_raw(ptr.ptr  as *mut LayoutBottom) } }
/// (private): Downcasts the `AzLayoutBottomPtr` to a `&mut Box<LayoutBottom>` and runs the `func` closure on it
#[inline(always)] fn az_layout_bottom_downcast_refmut<F: FnOnce(&mut Box<LayoutBottom>)>(ptr: &mut AzLayoutBottomPtr, func: F) { let mut box_ptr: Box<LayoutBottom> = unsafe { Box::<LayoutBottom>::from_raw(ptr.ptr  as *mut LayoutBottom) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzLayoutBottomPtr` to a `&Box<LayoutBottom>` and runs the `func` closure on it
#[inline(always)] fn az_layout_bottom_downcast_ref<F: FnOnce(&Box<LayoutBottom>)>(ptr: &mut AzLayoutBottomPtr, func: F) { let box_ptr: Box<LayoutBottom> = unsafe { Box::<LayoutBottom>::from_raw(ptr.ptr  as *mut LayoutBottom) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<LayoutBoxSizing>` struct
#[no_mangle] #[repr(C)] pub struct AzLayoutBoxSizingPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `LayoutBoxSizing` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_layout_box_sizing_delete(ptr: &mut AzLayoutBoxSizingPtr) { let _ = unsafe { Box::<LayoutBoxSizing>::from_raw(ptr.ptr  as *mut LayoutBoxSizing) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`LayoutBoxSizing`>!.
#[no_mangle] #[inline] pub extern "C" fn az_layout_box_sizing_shallow_copy(ptr: &AzLayoutBoxSizingPtr) -> AzLayoutBoxSizingPtr { AzLayoutBoxSizingPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzLayoutBoxSizingPtr` to a `Box<LayoutBoxSizing>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_layout_box_sizing_downcast(ptr: AzLayoutBoxSizingPtr) -> Box<LayoutBoxSizing> { unsafe { Box::<LayoutBoxSizing>::from_raw(ptr.ptr  as *mut LayoutBoxSizing) } }
/// (private): Downcasts the `AzLayoutBoxSizingPtr` to a `&mut Box<LayoutBoxSizing>` and runs the `func` closure on it
#[inline(always)] fn az_layout_box_sizing_downcast_refmut<F: FnOnce(&mut Box<LayoutBoxSizing>)>(ptr: &mut AzLayoutBoxSizingPtr, func: F) { let mut box_ptr: Box<LayoutBoxSizing> = unsafe { Box::<LayoutBoxSizing>::from_raw(ptr.ptr  as *mut LayoutBoxSizing) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzLayoutBoxSizingPtr` to a `&Box<LayoutBoxSizing>` and runs the `func` closure on it
#[inline(always)] fn az_layout_box_sizing_downcast_ref<F: FnOnce(&Box<LayoutBoxSizing>)>(ptr: &mut AzLayoutBoxSizingPtr, func: F) { let box_ptr: Box<LayoutBoxSizing> = unsafe { Box::<LayoutBoxSizing>::from_raw(ptr.ptr  as *mut LayoutBoxSizing) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<LayoutDirection>` struct
#[no_mangle] #[repr(C)] pub struct AzLayoutDirectionPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `LayoutDirection` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_layout_direction_delete(ptr: &mut AzLayoutDirectionPtr) { let _ = unsafe { Box::<LayoutDirection>::from_raw(ptr.ptr  as *mut LayoutDirection) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`LayoutDirection`>!.
#[no_mangle] #[inline] pub extern "C" fn az_layout_direction_shallow_copy(ptr: &AzLayoutDirectionPtr) -> AzLayoutDirectionPtr { AzLayoutDirectionPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzLayoutDirectionPtr` to a `Box<LayoutDirection>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_layout_direction_downcast(ptr: AzLayoutDirectionPtr) -> Box<LayoutDirection> { unsafe { Box::<LayoutDirection>::from_raw(ptr.ptr  as *mut LayoutDirection) } }
/// (private): Downcasts the `AzLayoutDirectionPtr` to a `&mut Box<LayoutDirection>` and runs the `func` closure on it
#[inline(always)] fn az_layout_direction_downcast_refmut<F: FnOnce(&mut Box<LayoutDirection>)>(ptr: &mut AzLayoutDirectionPtr, func: F) { let mut box_ptr: Box<LayoutDirection> = unsafe { Box::<LayoutDirection>::from_raw(ptr.ptr  as *mut LayoutDirection) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzLayoutDirectionPtr` to a `&Box<LayoutDirection>` and runs the `func` closure on it
#[inline(always)] fn az_layout_direction_downcast_ref<F: FnOnce(&Box<LayoutDirection>)>(ptr: &mut AzLayoutDirectionPtr, func: F) { let box_ptr: Box<LayoutDirection> = unsafe { Box::<LayoutDirection>::from_raw(ptr.ptr  as *mut LayoutDirection) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<LayoutDisplay>` struct
#[no_mangle] #[repr(C)] pub struct AzLayoutDisplayPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `LayoutDisplay` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_layout_display_delete(ptr: &mut AzLayoutDisplayPtr) { let _ = unsafe { Box::<LayoutDisplay>::from_raw(ptr.ptr  as *mut LayoutDisplay) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`LayoutDisplay`>!.
#[no_mangle] #[inline] pub extern "C" fn az_layout_display_shallow_copy(ptr: &AzLayoutDisplayPtr) -> AzLayoutDisplayPtr { AzLayoutDisplayPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzLayoutDisplayPtr` to a `Box<LayoutDisplay>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_layout_display_downcast(ptr: AzLayoutDisplayPtr) -> Box<LayoutDisplay> { unsafe { Box::<LayoutDisplay>::from_raw(ptr.ptr  as *mut LayoutDisplay) } }
/// (private): Downcasts the `AzLayoutDisplayPtr` to a `&mut Box<LayoutDisplay>` and runs the `func` closure on it
#[inline(always)] fn az_layout_display_downcast_refmut<F: FnOnce(&mut Box<LayoutDisplay>)>(ptr: &mut AzLayoutDisplayPtr, func: F) { let mut box_ptr: Box<LayoutDisplay> = unsafe { Box::<LayoutDisplay>::from_raw(ptr.ptr  as *mut LayoutDisplay) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzLayoutDisplayPtr` to a `&Box<LayoutDisplay>` and runs the `func` closure on it
#[inline(always)] fn az_layout_display_downcast_ref<F: FnOnce(&Box<LayoutDisplay>)>(ptr: &mut AzLayoutDisplayPtr, func: F) { let box_ptr: Box<LayoutDisplay> = unsafe { Box::<LayoutDisplay>::from_raw(ptr.ptr  as *mut LayoutDisplay) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<LayoutFlexGrow>` struct
#[no_mangle] #[repr(C)] pub struct AzLayoutFlexGrowPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `LayoutFlexGrow` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_layout_flex_grow_delete(ptr: &mut AzLayoutFlexGrowPtr) { let _ = unsafe { Box::<LayoutFlexGrow>::from_raw(ptr.ptr  as *mut LayoutFlexGrow) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`LayoutFlexGrow`>!.
#[no_mangle] #[inline] pub extern "C" fn az_layout_flex_grow_shallow_copy(ptr: &AzLayoutFlexGrowPtr) -> AzLayoutFlexGrowPtr { AzLayoutFlexGrowPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzLayoutFlexGrowPtr` to a `Box<LayoutFlexGrow>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_layout_flex_grow_downcast(ptr: AzLayoutFlexGrowPtr) -> Box<LayoutFlexGrow> { unsafe { Box::<LayoutFlexGrow>::from_raw(ptr.ptr  as *mut LayoutFlexGrow) } }
/// (private): Downcasts the `AzLayoutFlexGrowPtr` to a `&mut Box<LayoutFlexGrow>` and runs the `func` closure on it
#[inline(always)] fn az_layout_flex_grow_downcast_refmut<F: FnOnce(&mut Box<LayoutFlexGrow>)>(ptr: &mut AzLayoutFlexGrowPtr, func: F) { let mut box_ptr: Box<LayoutFlexGrow> = unsafe { Box::<LayoutFlexGrow>::from_raw(ptr.ptr  as *mut LayoutFlexGrow) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzLayoutFlexGrowPtr` to a `&Box<LayoutFlexGrow>` and runs the `func` closure on it
#[inline(always)] fn az_layout_flex_grow_downcast_ref<F: FnOnce(&Box<LayoutFlexGrow>)>(ptr: &mut AzLayoutFlexGrowPtr, func: F) { let box_ptr: Box<LayoutFlexGrow> = unsafe { Box::<LayoutFlexGrow>::from_raw(ptr.ptr  as *mut LayoutFlexGrow) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<LayoutFlexShrink>` struct
#[no_mangle] #[repr(C)] pub struct AzLayoutFlexShrinkPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `LayoutFlexShrink` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_layout_flex_shrink_delete(ptr: &mut AzLayoutFlexShrinkPtr) { let _ = unsafe { Box::<LayoutFlexShrink>::from_raw(ptr.ptr  as *mut LayoutFlexShrink) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`LayoutFlexShrink`>!.
#[no_mangle] #[inline] pub extern "C" fn az_layout_flex_shrink_shallow_copy(ptr: &AzLayoutFlexShrinkPtr) -> AzLayoutFlexShrinkPtr { AzLayoutFlexShrinkPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzLayoutFlexShrinkPtr` to a `Box<LayoutFlexShrink>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_layout_flex_shrink_downcast(ptr: AzLayoutFlexShrinkPtr) -> Box<LayoutFlexShrink> { unsafe { Box::<LayoutFlexShrink>::from_raw(ptr.ptr  as *mut LayoutFlexShrink) } }
/// (private): Downcasts the `AzLayoutFlexShrinkPtr` to a `&mut Box<LayoutFlexShrink>` and runs the `func` closure on it
#[inline(always)] fn az_layout_flex_shrink_downcast_refmut<F: FnOnce(&mut Box<LayoutFlexShrink>)>(ptr: &mut AzLayoutFlexShrinkPtr, func: F) { let mut box_ptr: Box<LayoutFlexShrink> = unsafe { Box::<LayoutFlexShrink>::from_raw(ptr.ptr  as *mut LayoutFlexShrink) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzLayoutFlexShrinkPtr` to a `&Box<LayoutFlexShrink>` and runs the `func` closure on it
#[inline(always)] fn az_layout_flex_shrink_downcast_ref<F: FnOnce(&Box<LayoutFlexShrink>)>(ptr: &mut AzLayoutFlexShrinkPtr, func: F) { let box_ptr: Box<LayoutFlexShrink> = unsafe { Box::<LayoutFlexShrink>::from_raw(ptr.ptr  as *mut LayoutFlexShrink) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<LayoutFloat>` struct
#[no_mangle] #[repr(C)] pub struct AzLayoutFloatPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `LayoutFloat` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_layout_float_delete(ptr: &mut AzLayoutFloatPtr) { let _ = unsafe { Box::<LayoutFloat>::from_raw(ptr.ptr  as *mut LayoutFloat) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`LayoutFloat`>!.
#[no_mangle] #[inline] pub extern "C" fn az_layout_float_shallow_copy(ptr: &AzLayoutFloatPtr) -> AzLayoutFloatPtr { AzLayoutFloatPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzLayoutFloatPtr` to a `Box<LayoutFloat>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_layout_float_downcast(ptr: AzLayoutFloatPtr) -> Box<LayoutFloat> { unsafe { Box::<LayoutFloat>::from_raw(ptr.ptr  as *mut LayoutFloat) } }
/// (private): Downcasts the `AzLayoutFloatPtr` to a `&mut Box<LayoutFloat>` and runs the `func` closure on it
#[inline(always)] fn az_layout_float_downcast_refmut<F: FnOnce(&mut Box<LayoutFloat>)>(ptr: &mut AzLayoutFloatPtr, func: F) { let mut box_ptr: Box<LayoutFloat> = unsafe { Box::<LayoutFloat>::from_raw(ptr.ptr  as *mut LayoutFloat) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzLayoutFloatPtr` to a `&Box<LayoutFloat>` and runs the `func` closure on it
#[inline(always)] fn az_layout_float_downcast_ref<F: FnOnce(&Box<LayoutFloat>)>(ptr: &mut AzLayoutFloatPtr, func: F) { let box_ptr: Box<LayoutFloat> = unsafe { Box::<LayoutFloat>::from_raw(ptr.ptr  as *mut LayoutFloat) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<LayoutHeight>` struct
#[no_mangle] #[repr(C)] pub struct AzLayoutHeightPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `LayoutHeight` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_layout_height_delete(ptr: &mut AzLayoutHeightPtr) { let _ = unsafe { Box::<LayoutHeight>::from_raw(ptr.ptr  as *mut LayoutHeight) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`LayoutHeight`>!.
#[no_mangle] #[inline] pub extern "C" fn az_layout_height_shallow_copy(ptr: &AzLayoutHeightPtr) -> AzLayoutHeightPtr { AzLayoutHeightPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzLayoutHeightPtr` to a `Box<LayoutHeight>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_layout_height_downcast(ptr: AzLayoutHeightPtr) -> Box<LayoutHeight> { unsafe { Box::<LayoutHeight>::from_raw(ptr.ptr  as *mut LayoutHeight) } }
/// (private): Downcasts the `AzLayoutHeightPtr` to a `&mut Box<LayoutHeight>` and runs the `func` closure on it
#[inline(always)] fn az_layout_height_downcast_refmut<F: FnOnce(&mut Box<LayoutHeight>)>(ptr: &mut AzLayoutHeightPtr, func: F) { let mut box_ptr: Box<LayoutHeight> = unsafe { Box::<LayoutHeight>::from_raw(ptr.ptr  as *mut LayoutHeight) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzLayoutHeightPtr` to a `&Box<LayoutHeight>` and runs the `func` closure on it
#[inline(always)] fn az_layout_height_downcast_ref<F: FnOnce(&Box<LayoutHeight>)>(ptr: &mut AzLayoutHeightPtr, func: F) { let box_ptr: Box<LayoutHeight> = unsafe { Box::<LayoutHeight>::from_raw(ptr.ptr  as *mut LayoutHeight) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<LayoutJustifyContent>` struct
#[no_mangle] #[repr(C)] pub struct AzLayoutJustifyContentPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `LayoutJustifyContent` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_layout_justify_content_delete(ptr: &mut AzLayoutJustifyContentPtr) { let _ = unsafe { Box::<LayoutJustifyContent>::from_raw(ptr.ptr  as *mut LayoutJustifyContent) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`LayoutJustifyContent`>!.
#[no_mangle] #[inline] pub extern "C" fn az_layout_justify_content_shallow_copy(ptr: &AzLayoutJustifyContentPtr) -> AzLayoutJustifyContentPtr { AzLayoutJustifyContentPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzLayoutJustifyContentPtr` to a `Box<LayoutJustifyContent>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_layout_justify_content_downcast(ptr: AzLayoutJustifyContentPtr) -> Box<LayoutJustifyContent> { unsafe { Box::<LayoutJustifyContent>::from_raw(ptr.ptr  as *mut LayoutJustifyContent) } }
/// (private): Downcasts the `AzLayoutJustifyContentPtr` to a `&mut Box<LayoutJustifyContent>` and runs the `func` closure on it
#[inline(always)] fn az_layout_justify_content_downcast_refmut<F: FnOnce(&mut Box<LayoutJustifyContent>)>(ptr: &mut AzLayoutJustifyContentPtr, func: F) { let mut box_ptr: Box<LayoutJustifyContent> = unsafe { Box::<LayoutJustifyContent>::from_raw(ptr.ptr  as *mut LayoutJustifyContent) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzLayoutJustifyContentPtr` to a `&Box<LayoutJustifyContent>` and runs the `func` closure on it
#[inline(always)] fn az_layout_justify_content_downcast_ref<F: FnOnce(&Box<LayoutJustifyContent>)>(ptr: &mut AzLayoutJustifyContentPtr, func: F) { let box_ptr: Box<LayoutJustifyContent> = unsafe { Box::<LayoutJustifyContent>::from_raw(ptr.ptr  as *mut LayoutJustifyContent) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<LayoutLeft>` struct
#[no_mangle] #[repr(C)] pub struct AzLayoutLeftPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `LayoutLeft` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_layout_left_delete(ptr: &mut AzLayoutLeftPtr) { let _ = unsafe { Box::<LayoutLeft>::from_raw(ptr.ptr  as *mut LayoutLeft) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`LayoutLeft`>!.
#[no_mangle] #[inline] pub extern "C" fn az_layout_left_shallow_copy(ptr: &AzLayoutLeftPtr) -> AzLayoutLeftPtr { AzLayoutLeftPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzLayoutLeftPtr` to a `Box<LayoutLeft>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_layout_left_downcast(ptr: AzLayoutLeftPtr) -> Box<LayoutLeft> { unsafe { Box::<LayoutLeft>::from_raw(ptr.ptr  as *mut LayoutLeft) } }
/// (private): Downcasts the `AzLayoutLeftPtr` to a `&mut Box<LayoutLeft>` and runs the `func` closure on it
#[inline(always)] fn az_layout_left_downcast_refmut<F: FnOnce(&mut Box<LayoutLeft>)>(ptr: &mut AzLayoutLeftPtr, func: F) { let mut box_ptr: Box<LayoutLeft> = unsafe { Box::<LayoutLeft>::from_raw(ptr.ptr  as *mut LayoutLeft) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzLayoutLeftPtr` to a `&Box<LayoutLeft>` and runs the `func` closure on it
#[inline(always)] fn az_layout_left_downcast_ref<F: FnOnce(&Box<LayoutLeft>)>(ptr: &mut AzLayoutLeftPtr, func: F) { let box_ptr: Box<LayoutLeft> = unsafe { Box::<LayoutLeft>::from_raw(ptr.ptr  as *mut LayoutLeft) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<LayoutMarginBottom>` struct
#[no_mangle] #[repr(C)] pub struct AzLayoutMarginBottomPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `LayoutMarginBottom` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_layout_margin_bottom_delete(ptr: &mut AzLayoutMarginBottomPtr) { let _ = unsafe { Box::<LayoutMarginBottom>::from_raw(ptr.ptr  as *mut LayoutMarginBottom) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`LayoutMarginBottom`>!.
#[no_mangle] #[inline] pub extern "C" fn az_layout_margin_bottom_shallow_copy(ptr: &AzLayoutMarginBottomPtr) -> AzLayoutMarginBottomPtr { AzLayoutMarginBottomPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzLayoutMarginBottomPtr` to a `Box<LayoutMarginBottom>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_layout_margin_bottom_downcast(ptr: AzLayoutMarginBottomPtr) -> Box<LayoutMarginBottom> { unsafe { Box::<LayoutMarginBottom>::from_raw(ptr.ptr  as *mut LayoutMarginBottom) } }
/// (private): Downcasts the `AzLayoutMarginBottomPtr` to a `&mut Box<LayoutMarginBottom>` and runs the `func` closure on it
#[inline(always)] fn az_layout_margin_bottom_downcast_refmut<F: FnOnce(&mut Box<LayoutMarginBottom>)>(ptr: &mut AzLayoutMarginBottomPtr, func: F) { let mut box_ptr: Box<LayoutMarginBottom> = unsafe { Box::<LayoutMarginBottom>::from_raw(ptr.ptr  as *mut LayoutMarginBottom) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzLayoutMarginBottomPtr` to a `&Box<LayoutMarginBottom>` and runs the `func` closure on it
#[inline(always)] fn az_layout_margin_bottom_downcast_ref<F: FnOnce(&Box<LayoutMarginBottom>)>(ptr: &mut AzLayoutMarginBottomPtr, func: F) { let box_ptr: Box<LayoutMarginBottom> = unsafe { Box::<LayoutMarginBottom>::from_raw(ptr.ptr  as *mut LayoutMarginBottom) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<LayoutMarginLeft>` struct
#[no_mangle] #[repr(C)] pub struct AzLayoutMarginLeftPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `LayoutMarginLeft` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_layout_margin_left_delete(ptr: &mut AzLayoutMarginLeftPtr) { let _ = unsafe { Box::<LayoutMarginLeft>::from_raw(ptr.ptr  as *mut LayoutMarginLeft) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`LayoutMarginLeft`>!.
#[no_mangle] #[inline] pub extern "C" fn az_layout_margin_left_shallow_copy(ptr: &AzLayoutMarginLeftPtr) -> AzLayoutMarginLeftPtr { AzLayoutMarginLeftPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzLayoutMarginLeftPtr` to a `Box<LayoutMarginLeft>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_layout_margin_left_downcast(ptr: AzLayoutMarginLeftPtr) -> Box<LayoutMarginLeft> { unsafe { Box::<LayoutMarginLeft>::from_raw(ptr.ptr  as *mut LayoutMarginLeft) } }
/// (private): Downcasts the `AzLayoutMarginLeftPtr` to a `&mut Box<LayoutMarginLeft>` and runs the `func` closure on it
#[inline(always)] fn az_layout_margin_left_downcast_refmut<F: FnOnce(&mut Box<LayoutMarginLeft>)>(ptr: &mut AzLayoutMarginLeftPtr, func: F) { let mut box_ptr: Box<LayoutMarginLeft> = unsafe { Box::<LayoutMarginLeft>::from_raw(ptr.ptr  as *mut LayoutMarginLeft) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzLayoutMarginLeftPtr` to a `&Box<LayoutMarginLeft>` and runs the `func` closure on it
#[inline(always)] fn az_layout_margin_left_downcast_ref<F: FnOnce(&Box<LayoutMarginLeft>)>(ptr: &mut AzLayoutMarginLeftPtr, func: F) { let box_ptr: Box<LayoutMarginLeft> = unsafe { Box::<LayoutMarginLeft>::from_raw(ptr.ptr  as *mut LayoutMarginLeft) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<LayoutMarginRight>` struct
#[no_mangle] #[repr(C)] pub struct AzLayoutMarginRightPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `LayoutMarginRight` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_layout_margin_right_delete(ptr: &mut AzLayoutMarginRightPtr) { let _ = unsafe { Box::<LayoutMarginRight>::from_raw(ptr.ptr  as *mut LayoutMarginRight) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`LayoutMarginRight`>!.
#[no_mangle] #[inline] pub extern "C" fn az_layout_margin_right_shallow_copy(ptr: &AzLayoutMarginRightPtr) -> AzLayoutMarginRightPtr { AzLayoutMarginRightPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzLayoutMarginRightPtr` to a `Box<LayoutMarginRight>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_layout_margin_right_downcast(ptr: AzLayoutMarginRightPtr) -> Box<LayoutMarginRight> { unsafe { Box::<LayoutMarginRight>::from_raw(ptr.ptr  as *mut LayoutMarginRight) } }
/// (private): Downcasts the `AzLayoutMarginRightPtr` to a `&mut Box<LayoutMarginRight>` and runs the `func` closure on it
#[inline(always)] fn az_layout_margin_right_downcast_refmut<F: FnOnce(&mut Box<LayoutMarginRight>)>(ptr: &mut AzLayoutMarginRightPtr, func: F) { let mut box_ptr: Box<LayoutMarginRight> = unsafe { Box::<LayoutMarginRight>::from_raw(ptr.ptr  as *mut LayoutMarginRight) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzLayoutMarginRightPtr` to a `&Box<LayoutMarginRight>` and runs the `func` closure on it
#[inline(always)] fn az_layout_margin_right_downcast_ref<F: FnOnce(&Box<LayoutMarginRight>)>(ptr: &mut AzLayoutMarginRightPtr, func: F) { let box_ptr: Box<LayoutMarginRight> = unsafe { Box::<LayoutMarginRight>::from_raw(ptr.ptr  as *mut LayoutMarginRight) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<LayoutMarginTop>` struct
#[no_mangle] #[repr(C)] pub struct AzLayoutMarginTopPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `LayoutMarginTop` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_layout_margin_top_delete(ptr: &mut AzLayoutMarginTopPtr) { let _ = unsafe { Box::<LayoutMarginTop>::from_raw(ptr.ptr  as *mut LayoutMarginTop) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`LayoutMarginTop`>!.
#[no_mangle] #[inline] pub extern "C" fn az_layout_margin_top_shallow_copy(ptr: &AzLayoutMarginTopPtr) -> AzLayoutMarginTopPtr { AzLayoutMarginTopPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzLayoutMarginTopPtr` to a `Box<LayoutMarginTop>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_layout_margin_top_downcast(ptr: AzLayoutMarginTopPtr) -> Box<LayoutMarginTop> { unsafe { Box::<LayoutMarginTop>::from_raw(ptr.ptr  as *mut LayoutMarginTop) } }
/// (private): Downcasts the `AzLayoutMarginTopPtr` to a `&mut Box<LayoutMarginTop>` and runs the `func` closure on it
#[inline(always)] fn az_layout_margin_top_downcast_refmut<F: FnOnce(&mut Box<LayoutMarginTop>)>(ptr: &mut AzLayoutMarginTopPtr, func: F) { let mut box_ptr: Box<LayoutMarginTop> = unsafe { Box::<LayoutMarginTop>::from_raw(ptr.ptr  as *mut LayoutMarginTop) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzLayoutMarginTopPtr` to a `&Box<LayoutMarginTop>` and runs the `func` closure on it
#[inline(always)] fn az_layout_margin_top_downcast_ref<F: FnOnce(&Box<LayoutMarginTop>)>(ptr: &mut AzLayoutMarginTopPtr, func: F) { let box_ptr: Box<LayoutMarginTop> = unsafe { Box::<LayoutMarginTop>::from_raw(ptr.ptr  as *mut LayoutMarginTop) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<LayoutMaxHeight>` struct
#[no_mangle] #[repr(C)] pub struct AzLayoutMaxHeightPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `LayoutMaxHeight` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_layout_max_height_delete(ptr: &mut AzLayoutMaxHeightPtr) { let _ = unsafe { Box::<LayoutMaxHeight>::from_raw(ptr.ptr  as *mut LayoutMaxHeight) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`LayoutMaxHeight`>!.
#[no_mangle] #[inline] pub extern "C" fn az_layout_max_height_shallow_copy(ptr: &AzLayoutMaxHeightPtr) -> AzLayoutMaxHeightPtr { AzLayoutMaxHeightPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzLayoutMaxHeightPtr` to a `Box<LayoutMaxHeight>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_layout_max_height_downcast(ptr: AzLayoutMaxHeightPtr) -> Box<LayoutMaxHeight> { unsafe { Box::<LayoutMaxHeight>::from_raw(ptr.ptr  as *mut LayoutMaxHeight) } }
/// (private): Downcasts the `AzLayoutMaxHeightPtr` to a `&mut Box<LayoutMaxHeight>` and runs the `func` closure on it
#[inline(always)] fn az_layout_max_height_downcast_refmut<F: FnOnce(&mut Box<LayoutMaxHeight>)>(ptr: &mut AzLayoutMaxHeightPtr, func: F) { let mut box_ptr: Box<LayoutMaxHeight> = unsafe { Box::<LayoutMaxHeight>::from_raw(ptr.ptr  as *mut LayoutMaxHeight) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzLayoutMaxHeightPtr` to a `&Box<LayoutMaxHeight>` and runs the `func` closure on it
#[inline(always)] fn az_layout_max_height_downcast_ref<F: FnOnce(&Box<LayoutMaxHeight>)>(ptr: &mut AzLayoutMaxHeightPtr, func: F) { let box_ptr: Box<LayoutMaxHeight> = unsafe { Box::<LayoutMaxHeight>::from_raw(ptr.ptr  as *mut LayoutMaxHeight) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<LayoutMaxWidth>` struct
#[no_mangle] #[repr(C)] pub struct AzLayoutMaxWidthPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `LayoutMaxWidth` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_layout_max_width_delete(ptr: &mut AzLayoutMaxWidthPtr) { let _ = unsafe { Box::<LayoutMaxWidth>::from_raw(ptr.ptr  as *mut LayoutMaxWidth) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`LayoutMaxWidth`>!.
#[no_mangle] #[inline] pub extern "C" fn az_layout_max_width_shallow_copy(ptr: &AzLayoutMaxWidthPtr) -> AzLayoutMaxWidthPtr { AzLayoutMaxWidthPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzLayoutMaxWidthPtr` to a `Box<LayoutMaxWidth>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_layout_max_width_downcast(ptr: AzLayoutMaxWidthPtr) -> Box<LayoutMaxWidth> { unsafe { Box::<LayoutMaxWidth>::from_raw(ptr.ptr  as *mut LayoutMaxWidth) } }
/// (private): Downcasts the `AzLayoutMaxWidthPtr` to a `&mut Box<LayoutMaxWidth>` and runs the `func` closure on it
#[inline(always)] fn az_layout_max_width_downcast_refmut<F: FnOnce(&mut Box<LayoutMaxWidth>)>(ptr: &mut AzLayoutMaxWidthPtr, func: F) { let mut box_ptr: Box<LayoutMaxWidth> = unsafe { Box::<LayoutMaxWidth>::from_raw(ptr.ptr  as *mut LayoutMaxWidth) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzLayoutMaxWidthPtr` to a `&Box<LayoutMaxWidth>` and runs the `func` closure on it
#[inline(always)] fn az_layout_max_width_downcast_ref<F: FnOnce(&Box<LayoutMaxWidth>)>(ptr: &mut AzLayoutMaxWidthPtr, func: F) { let box_ptr: Box<LayoutMaxWidth> = unsafe { Box::<LayoutMaxWidth>::from_raw(ptr.ptr  as *mut LayoutMaxWidth) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<LayoutMinHeight>` struct
#[no_mangle] #[repr(C)] pub struct AzLayoutMinHeightPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `LayoutMinHeight` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_layout_min_height_delete(ptr: &mut AzLayoutMinHeightPtr) { let _ = unsafe { Box::<LayoutMinHeight>::from_raw(ptr.ptr  as *mut LayoutMinHeight) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`LayoutMinHeight`>!.
#[no_mangle] #[inline] pub extern "C" fn az_layout_min_height_shallow_copy(ptr: &AzLayoutMinHeightPtr) -> AzLayoutMinHeightPtr { AzLayoutMinHeightPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzLayoutMinHeightPtr` to a `Box<LayoutMinHeight>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_layout_min_height_downcast(ptr: AzLayoutMinHeightPtr) -> Box<LayoutMinHeight> { unsafe { Box::<LayoutMinHeight>::from_raw(ptr.ptr  as *mut LayoutMinHeight) } }
/// (private): Downcasts the `AzLayoutMinHeightPtr` to a `&mut Box<LayoutMinHeight>` and runs the `func` closure on it
#[inline(always)] fn az_layout_min_height_downcast_refmut<F: FnOnce(&mut Box<LayoutMinHeight>)>(ptr: &mut AzLayoutMinHeightPtr, func: F) { let mut box_ptr: Box<LayoutMinHeight> = unsafe { Box::<LayoutMinHeight>::from_raw(ptr.ptr  as *mut LayoutMinHeight) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzLayoutMinHeightPtr` to a `&Box<LayoutMinHeight>` and runs the `func` closure on it
#[inline(always)] fn az_layout_min_height_downcast_ref<F: FnOnce(&Box<LayoutMinHeight>)>(ptr: &mut AzLayoutMinHeightPtr, func: F) { let box_ptr: Box<LayoutMinHeight> = unsafe { Box::<LayoutMinHeight>::from_raw(ptr.ptr  as *mut LayoutMinHeight) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<LayoutMinWidth>` struct
#[no_mangle] #[repr(C)] pub struct AzLayoutMinWidthPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `LayoutMinWidth` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_layout_min_width_delete(ptr: &mut AzLayoutMinWidthPtr) { let _ = unsafe { Box::<LayoutMinWidth>::from_raw(ptr.ptr  as *mut LayoutMinWidth) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`LayoutMinWidth`>!.
#[no_mangle] #[inline] pub extern "C" fn az_layout_min_width_shallow_copy(ptr: &AzLayoutMinWidthPtr) -> AzLayoutMinWidthPtr { AzLayoutMinWidthPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzLayoutMinWidthPtr` to a `Box<LayoutMinWidth>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_layout_min_width_downcast(ptr: AzLayoutMinWidthPtr) -> Box<LayoutMinWidth> { unsafe { Box::<LayoutMinWidth>::from_raw(ptr.ptr  as *mut LayoutMinWidth) } }
/// (private): Downcasts the `AzLayoutMinWidthPtr` to a `&mut Box<LayoutMinWidth>` and runs the `func` closure on it
#[inline(always)] fn az_layout_min_width_downcast_refmut<F: FnOnce(&mut Box<LayoutMinWidth>)>(ptr: &mut AzLayoutMinWidthPtr, func: F) { let mut box_ptr: Box<LayoutMinWidth> = unsafe { Box::<LayoutMinWidth>::from_raw(ptr.ptr  as *mut LayoutMinWidth) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzLayoutMinWidthPtr` to a `&Box<LayoutMinWidth>` and runs the `func` closure on it
#[inline(always)] fn az_layout_min_width_downcast_ref<F: FnOnce(&Box<LayoutMinWidth>)>(ptr: &mut AzLayoutMinWidthPtr, func: F) { let box_ptr: Box<LayoutMinWidth> = unsafe { Box::<LayoutMinWidth>::from_raw(ptr.ptr  as *mut LayoutMinWidth) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<LayoutPaddingBottom>` struct
#[no_mangle] #[repr(C)] pub struct AzLayoutPaddingBottomPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `LayoutPaddingBottom` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_layout_padding_bottom_delete(ptr: &mut AzLayoutPaddingBottomPtr) { let _ = unsafe { Box::<LayoutPaddingBottom>::from_raw(ptr.ptr  as *mut LayoutPaddingBottom) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`LayoutPaddingBottom`>!.
#[no_mangle] #[inline] pub extern "C" fn az_layout_padding_bottom_shallow_copy(ptr: &AzLayoutPaddingBottomPtr) -> AzLayoutPaddingBottomPtr { AzLayoutPaddingBottomPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzLayoutPaddingBottomPtr` to a `Box<LayoutPaddingBottom>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_layout_padding_bottom_downcast(ptr: AzLayoutPaddingBottomPtr) -> Box<LayoutPaddingBottom> { unsafe { Box::<LayoutPaddingBottom>::from_raw(ptr.ptr  as *mut LayoutPaddingBottom) } }
/// (private): Downcasts the `AzLayoutPaddingBottomPtr` to a `&mut Box<LayoutPaddingBottom>` and runs the `func` closure on it
#[inline(always)] fn az_layout_padding_bottom_downcast_refmut<F: FnOnce(&mut Box<LayoutPaddingBottom>)>(ptr: &mut AzLayoutPaddingBottomPtr, func: F) { let mut box_ptr: Box<LayoutPaddingBottom> = unsafe { Box::<LayoutPaddingBottom>::from_raw(ptr.ptr  as *mut LayoutPaddingBottom) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzLayoutPaddingBottomPtr` to a `&Box<LayoutPaddingBottom>` and runs the `func` closure on it
#[inline(always)] fn az_layout_padding_bottom_downcast_ref<F: FnOnce(&Box<LayoutPaddingBottom>)>(ptr: &mut AzLayoutPaddingBottomPtr, func: F) { let box_ptr: Box<LayoutPaddingBottom> = unsafe { Box::<LayoutPaddingBottom>::from_raw(ptr.ptr  as *mut LayoutPaddingBottom) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<LayoutPaddingLeft>` struct
#[no_mangle] #[repr(C)] pub struct AzLayoutPaddingLeftPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `LayoutPaddingLeft` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_layout_padding_left_delete(ptr: &mut AzLayoutPaddingLeftPtr) { let _ = unsafe { Box::<LayoutPaddingLeft>::from_raw(ptr.ptr  as *mut LayoutPaddingLeft) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`LayoutPaddingLeft`>!.
#[no_mangle] #[inline] pub extern "C" fn az_layout_padding_left_shallow_copy(ptr: &AzLayoutPaddingLeftPtr) -> AzLayoutPaddingLeftPtr { AzLayoutPaddingLeftPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzLayoutPaddingLeftPtr` to a `Box<LayoutPaddingLeft>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_layout_padding_left_downcast(ptr: AzLayoutPaddingLeftPtr) -> Box<LayoutPaddingLeft> { unsafe { Box::<LayoutPaddingLeft>::from_raw(ptr.ptr  as *mut LayoutPaddingLeft) } }
/// (private): Downcasts the `AzLayoutPaddingLeftPtr` to a `&mut Box<LayoutPaddingLeft>` and runs the `func` closure on it
#[inline(always)] fn az_layout_padding_left_downcast_refmut<F: FnOnce(&mut Box<LayoutPaddingLeft>)>(ptr: &mut AzLayoutPaddingLeftPtr, func: F) { let mut box_ptr: Box<LayoutPaddingLeft> = unsafe { Box::<LayoutPaddingLeft>::from_raw(ptr.ptr  as *mut LayoutPaddingLeft) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzLayoutPaddingLeftPtr` to a `&Box<LayoutPaddingLeft>` and runs the `func` closure on it
#[inline(always)] fn az_layout_padding_left_downcast_ref<F: FnOnce(&Box<LayoutPaddingLeft>)>(ptr: &mut AzLayoutPaddingLeftPtr, func: F) { let box_ptr: Box<LayoutPaddingLeft> = unsafe { Box::<LayoutPaddingLeft>::from_raw(ptr.ptr  as *mut LayoutPaddingLeft) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<LayoutPaddingRight>` struct
#[no_mangle] #[repr(C)] pub struct AzLayoutPaddingRightPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `LayoutPaddingRight` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_layout_padding_right_delete(ptr: &mut AzLayoutPaddingRightPtr) { let _ = unsafe { Box::<LayoutPaddingRight>::from_raw(ptr.ptr  as *mut LayoutPaddingRight) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`LayoutPaddingRight`>!.
#[no_mangle] #[inline] pub extern "C" fn az_layout_padding_right_shallow_copy(ptr: &AzLayoutPaddingRightPtr) -> AzLayoutPaddingRightPtr { AzLayoutPaddingRightPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzLayoutPaddingRightPtr` to a `Box<LayoutPaddingRight>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_layout_padding_right_downcast(ptr: AzLayoutPaddingRightPtr) -> Box<LayoutPaddingRight> { unsafe { Box::<LayoutPaddingRight>::from_raw(ptr.ptr  as *mut LayoutPaddingRight) } }
/// (private): Downcasts the `AzLayoutPaddingRightPtr` to a `&mut Box<LayoutPaddingRight>` and runs the `func` closure on it
#[inline(always)] fn az_layout_padding_right_downcast_refmut<F: FnOnce(&mut Box<LayoutPaddingRight>)>(ptr: &mut AzLayoutPaddingRightPtr, func: F) { let mut box_ptr: Box<LayoutPaddingRight> = unsafe { Box::<LayoutPaddingRight>::from_raw(ptr.ptr  as *mut LayoutPaddingRight) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzLayoutPaddingRightPtr` to a `&Box<LayoutPaddingRight>` and runs the `func` closure on it
#[inline(always)] fn az_layout_padding_right_downcast_ref<F: FnOnce(&Box<LayoutPaddingRight>)>(ptr: &mut AzLayoutPaddingRightPtr, func: F) { let box_ptr: Box<LayoutPaddingRight> = unsafe { Box::<LayoutPaddingRight>::from_raw(ptr.ptr  as *mut LayoutPaddingRight) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<LayoutPaddingTop>` struct
#[no_mangle] #[repr(C)] pub struct AzLayoutPaddingTopPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `LayoutPaddingTop` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_layout_padding_top_delete(ptr: &mut AzLayoutPaddingTopPtr) { let _ = unsafe { Box::<LayoutPaddingTop>::from_raw(ptr.ptr  as *mut LayoutPaddingTop) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`LayoutPaddingTop`>!.
#[no_mangle] #[inline] pub extern "C" fn az_layout_padding_top_shallow_copy(ptr: &AzLayoutPaddingTopPtr) -> AzLayoutPaddingTopPtr { AzLayoutPaddingTopPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzLayoutPaddingTopPtr` to a `Box<LayoutPaddingTop>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_layout_padding_top_downcast(ptr: AzLayoutPaddingTopPtr) -> Box<LayoutPaddingTop> { unsafe { Box::<LayoutPaddingTop>::from_raw(ptr.ptr  as *mut LayoutPaddingTop) } }
/// (private): Downcasts the `AzLayoutPaddingTopPtr` to a `&mut Box<LayoutPaddingTop>` and runs the `func` closure on it
#[inline(always)] fn az_layout_padding_top_downcast_refmut<F: FnOnce(&mut Box<LayoutPaddingTop>)>(ptr: &mut AzLayoutPaddingTopPtr, func: F) { let mut box_ptr: Box<LayoutPaddingTop> = unsafe { Box::<LayoutPaddingTop>::from_raw(ptr.ptr  as *mut LayoutPaddingTop) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzLayoutPaddingTopPtr` to a `&Box<LayoutPaddingTop>` and runs the `func` closure on it
#[inline(always)] fn az_layout_padding_top_downcast_ref<F: FnOnce(&Box<LayoutPaddingTop>)>(ptr: &mut AzLayoutPaddingTopPtr, func: F) { let box_ptr: Box<LayoutPaddingTop> = unsafe { Box::<LayoutPaddingTop>::from_raw(ptr.ptr  as *mut LayoutPaddingTop) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<LayoutPosition>` struct
#[no_mangle] #[repr(C)] pub struct AzLayoutPositionPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `LayoutPosition` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_layout_position_delete(ptr: &mut AzLayoutPositionPtr) { let _ = unsafe { Box::<LayoutPosition>::from_raw(ptr.ptr  as *mut LayoutPosition) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`LayoutPosition`>!.
#[no_mangle] #[inline] pub extern "C" fn az_layout_position_shallow_copy(ptr: &AzLayoutPositionPtr) -> AzLayoutPositionPtr { AzLayoutPositionPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzLayoutPositionPtr` to a `Box<LayoutPosition>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_layout_position_downcast(ptr: AzLayoutPositionPtr) -> Box<LayoutPosition> { unsafe { Box::<LayoutPosition>::from_raw(ptr.ptr  as *mut LayoutPosition) } }
/// (private): Downcasts the `AzLayoutPositionPtr` to a `&mut Box<LayoutPosition>` and runs the `func` closure on it
#[inline(always)] fn az_layout_position_downcast_refmut<F: FnOnce(&mut Box<LayoutPosition>)>(ptr: &mut AzLayoutPositionPtr, func: F) { let mut box_ptr: Box<LayoutPosition> = unsafe { Box::<LayoutPosition>::from_raw(ptr.ptr  as *mut LayoutPosition) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzLayoutPositionPtr` to a `&Box<LayoutPosition>` and runs the `func` closure on it
#[inline(always)] fn az_layout_position_downcast_ref<F: FnOnce(&Box<LayoutPosition>)>(ptr: &mut AzLayoutPositionPtr, func: F) { let box_ptr: Box<LayoutPosition> = unsafe { Box::<LayoutPosition>::from_raw(ptr.ptr  as *mut LayoutPosition) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<LayoutRight>` struct
#[no_mangle] #[repr(C)] pub struct AzLayoutRightPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `LayoutRight` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_layout_right_delete(ptr: &mut AzLayoutRightPtr) { let _ = unsafe { Box::<LayoutRight>::from_raw(ptr.ptr  as *mut LayoutRight) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`LayoutRight`>!.
#[no_mangle] #[inline] pub extern "C" fn az_layout_right_shallow_copy(ptr: &AzLayoutRightPtr) -> AzLayoutRightPtr { AzLayoutRightPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzLayoutRightPtr` to a `Box<LayoutRight>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_layout_right_downcast(ptr: AzLayoutRightPtr) -> Box<LayoutRight> { unsafe { Box::<LayoutRight>::from_raw(ptr.ptr  as *mut LayoutRight) } }
/// (private): Downcasts the `AzLayoutRightPtr` to a `&mut Box<LayoutRight>` and runs the `func` closure on it
#[inline(always)] fn az_layout_right_downcast_refmut<F: FnOnce(&mut Box<LayoutRight>)>(ptr: &mut AzLayoutRightPtr, func: F) { let mut box_ptr: Box<LayoutRight> = unsafe { Box::<LayoutRight>::from_raw(ptr.ptr  as *mut LayoutRight) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzLayoutRightPtr` to a `&Box<LayoutRight>` and runs the `func` closure on it
#[inline(always)] fn az_layout_right_downcast_ref<F: FnOnce(&Box<LayoutRight>)>(ptr: &mut AzLayoutRightPtr, func: F) { let box_ptr: Box<LayoutRight> = unsafe { Box::<LayoutRight>::from_raw(ptr.ptr  as *mut LayoutRight) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<LayoutTop>` struct
#[no_mangle] #[repr(C)] pub struct AzLayoutTopPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `LayoutTop` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_layout_top_delete(ptr: &mut AzLayoutTopPtr) { let _ = unsafe { Box::<LayoutTop>::from_raw(ptr.ptr  as *mut LayoutTop) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`LayoutTop`>!.
#[no_mangle] #[inline] pub extern "C" fn az_layout_top_shallow_copy(ptr: &AzLayoutTopPtr) -> AzLayoutTopPtr { AzLayoutTopPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzLayoutTopPtr` to a `Box<LayoutTop>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_layout_top_downcast(ptr: AzLayoutTopPtr) -> Box<LayoutTop> { unsafe { Box::<LayoutTop>::from_raw(ptr.ptr  as *mut LayoutTop) } }
/// (private): Downcasts the `AzLayoutTopPtr` to a `&mut Box<LayoutTop>` and runs the `func` closure on it
#[inline(always)] fn az_layout_top_downcast_refmut<F: FnOnce(&mut Box<LayoutTop>)>(ptr: &mut AzLayoutTopPtr, func: F) { let mut box_ptr: Box<LayoutTop> = unsafe { Box::<LayoutTop>::from_raw(ptr.ptr  as *mut LayoutTop) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzLayoutTopPtr` to a `&Box<LayoutTop>` and runs the `func` closure on it
#[inline(always)] fn az_layout_top_downcast_ref<F: FnOnce(&Box<LayoutTop>)>(ptr: &mut AzLayoutTopPtr, func: F) { let box_ptr: Box<LayoutTop> = unsafe { Box::<LayoutTop>::from_raw(ptr.ptr  as *mut LayoutTop) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<LayoutWidth>` struct
#[no_mangle] #[repr(C)] pub struct AzLayoutWidthPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `LayoutWidth` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_layout_width_delete(ptr: &mut AzLayoutWidthPtr) { let _ = unsafe { Box::<LayoutWidth>::from_raw(ptr.ptr  as *mut LayoutWidth) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`LayoutWidth`>!.
#[no_mangle] #[inline] pub extern "C" fn az_layout_width_shallow_copy(ptr: &AzLayoutWidthPtr) -> AzLayoutWidthPtr { AzLayoutWidthPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzLayoutWidthPtr` to a `Box<LayoutWidth>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_layout_width_downcast(ptr: AzLayoutWidthPtr) -> Box<LayoutWidth> { unsafe { Box::<LayoutWidth>::from_raw(ptr.ptr  as *mut LayoutWidth) } }
/// (private): Downcasts the `AzLayoutWidthPtr` to a `&mut Box<LayoutWidth>` and runs the `func` closure on it
#[inline(always)] fn az_layout_width_downcast_refmut<F: FnOnce(&mut Box<LayoutWidth>)>(ptr: &mut AzLayoutWidthPtr, func: F) { let mut box_ptr: Box<LayoutWidth> = unsafe { Box::<LayoutWidth>::from_raw(ptr.ptr  as *mut LayoutWidth) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzLayoutWidthPtr` to a `&Box<LayoutWidth>` and runs the `func` closure on it
#[inline(always)] fn az_layout_width_downcast_ref<F: FnOnce(&Box<LayoutWidth>)>(ptr: &mut AzLayoutWidthPtr, func: F) { let box_ptr: Box<LayoutWidth> = unsafe { Box::<LayoutWidth>::from_raw(ptr.ptr  as *mut LayoutWidth) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<LayoutWrap>` struct
#[no_mangle] #[repr(C)] pub struct AzLayoutWrapPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `LayoutWrap` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_layout_wrap_delete(ptr: &mut AzLayoutWrapPtr) { let _ = unsafe { Box::<LayoutWrap>::from_raw(ptr.ptr  as *mut LayoutWrap) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`LayoutWrap`>!.
#[no_mangle] #[inline] pub extern "C" fn az_layout_wrap_shallow_copy(ptr: &AzLayoutWrapPtr) -> AzLayoutWrapPtr { AzLayoutWrapPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzLayoutWrapPtr` to a `Box<LayoutWrap>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_layout_wrap_downcast(ptr: AzLayoutWrapPtr) -> Box<LayoutWrap> { unsafe { Box::<LayoutWrap>::from_raw(ptr.ptr  as *mut LayoutWrap) } }
/// (private): Downcasts the `AzLayoutWrapPtr` to a `&mut Box<LayoutWrap>` and runs the `func` closure on it
#[inline(always)] fn az_layout_wrap_downcast_refmut<F: FnOnce(&mut Box<LayoutWrap>)>(ptr: &mut AzLayoutWrapPtr, func: F) { let mut box_ptr: Box<LayoutWrap> = unsafe { Box::<LayoutWrap>::from_raw(ptr.ptr  as *mut LayoutWrap) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzLayoutWrapPtr` to a `&Box<LayoutWrap>` and runs the `func` closure on it
#[inline(always)] fn az_layout_wrap_downcast_ref<F: FnOnce(&Box<LayoutWrap>)>(ptr: &mut AzLayoutWrapPtr, func: F) { let box_ptr: Box<LayoutWrap> = unsafe { Box::<LayoutWrap>::from_raw(ptr.ptr  as *mut LayoutWrap) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<Overflow>` struct
#[no_mangle] #[repr(C)] pub struct AzOverflowPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `Overflow` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_overflow_delete(ptr: &mut AzOverflowPtr) { let _ = unsafe { Box::<Overflow>::from_raw(ptr.ptr  as *mut Overflow) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`Overflow`>!.
#[no_mangle] #[inline] pub extern "C" fn az_overflow_shallow_copy(ptr: &AzOverflowPtr) -> AzOverflowPtr { AzOverflowPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzOverflowPtr` to a `Box<Overflow>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_overflow_downcast(ptr: AzOverflowPtr) -> Box<Overflow> { unsafe { Box::<Overflow>::from_raw(ptr.ptr  as *mut Overflow) } }
/// (private): Downcasts the `AzOverflowPtr` to a `&mut Box<Overflow>` and runs the `func` closure on it
#[inline(always)] fn az_overflow_downcast_refmut<F: FnOnce(&mut Box<Overflow>)>(ptr: &mut AzOverflowPtr, func: F) { let mut box_ptr: Box<Overflow> = unsafe { Box::<Overflow>::from_raw(ptr.ptr  as *mut Overflow) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzOverflowPtr` to a `&Box<Overflow>` and runs the `func` closure on it
#[inline(always)] fn az_overflow_downcast_ref<F: FnOnce(&Box<Overflow>)>(ptr: &mut AzOverflowPtr, func: F) { let box_ptr: Box<Overflow> = unsafe { Box::<Overflow>::from_raw(ptr.ptr  as *mut Overflow) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<StyleBackgroundContent>` struct
#[no_mangle] #[repr(C)] pub struct AzStyleBackgroundContentPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `StyleBackgroundContent` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_style_background_content_delete(ptr: &mut AzStyleBackgroundContentPtr) { let _ = unsafe { Box::<StyleBackgroundContent>::from_raw(ptr.ptr  as *mut StyleBackgroundContent) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`StyleBackgroundContent`>!.
#[no_mangle] #[inline] pub extern "C" fn az_style_background_content_shallow_copy(ptr: &AzStyleBackgroundContentPtr) -> AzStyleBackgroundContentPtr { AzStyleBackgroundContentPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzStyleBackgroundContentPtr` to a `Box<StyleBackgroundContent>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_style_background_content_downcast(ptr: AzStyleBackgroundContentPtr) -> Box<StyleBackgroundContent> { unsafe { Box::<StyleBackgroundContent>::from_raw(ptr.ptr  as *mut StyleBackgroundContent) } }
/// (private): Downcasts the `AzStyleBackgroundContentPtr` to a `&mut Box<StyleBackgroundContent>` and runs the `func` closure on it
#[inline(always)] fn az_style_background_content_downcast_refmut<F: FnOnce(&mut Box<StyleBackgroundContent>)>(ptr: &mut AzStyleBackgroundContentPtr, func: F) { let mut box_ptr: Box<StyleBackgroundContent> = unsafe { Box::<StyleBackgroundContent>::from_raw(ptr.ptr  as *mut StyleBackgroundContent) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzStyleBackgroundContentPtr` to a `&Box<StyleBackgroundContent>` and runs the `func` closure on it
#[inline(always)] fn az_style_background_content_downcast_ref<F: FnOnce(&Box<StyleBackgroundContent>)>(ptr: &mut AzStyleBackgroundContentPtr, func: F) { let box_ptr: Box<StyleBackgroundContent> = unsafe { Box::<StyleBackgroundContent>::from_raw(ptr.ptr  as *mut StyleBackgroundContent) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<StyleBackgroundPosition>` struct
#[no_mangle] #[repr(C)] pub struct AzStyleBackgroundPositionPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `StyleBackgroundPosition` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_style_background_position_delete(ptr: &mut AzStyleBackgroundPositionPtr) { let _ = unsafe { Box::<StyleBackgroundPosition>::from_raw(ptr.ptr  as *mut StyleBackgroundPosition) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`StyleBackgroundPosition`>!.
#[no_mangle] #[inline] pub extern "C" fn az_style_background_position_shallow_copy(ptr: &AzStyleBackgroundPositionPtr) -> AzStyleBackgroundPositionPtr { AzStyleBackgroundPositionPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzStyleBackgroundPositionPtr` to a `Box<StyleBackgroundPosition>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_style_background_position_downcast(ptr: AzStyleBackgroundPositionPtr) -> Box<StyleBackgroundPosition> { unsafe { Box::<StyleBackgroundPosition>::from_raw(ptr.ptr  as *mut StyleBackgroundPosition) } }
/// (private): Downcasts the `AzStyleBackgroundPositionPtr` to a `&mut Box<StyleBackgroundPosition>` and runs the `func` closure on it
#[inline(always)] fn az_style_background_position_downcast_refmut<F: FnOnce(&mut Box<StyleBackgroundPosition>)>(ptr: &mut AzStyleBackgroundPositionPtr, func: F) { let mut box_ptr: Box<StyleBackgroundPosition> = unsafe { Box::<StyleBackgroundPosition>::from_raw(ptr.ptr  as *mut StyleBackgroundPosition) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzStyleBackgroundPositionPtr` to a `&Box<StyleBackgroundPosition>` and runs the `func` closure on it
#[inline(always)] fn az_style_background_position_downcast_ref<F: FnOnce(&Box<StyleBackgroundPosition>)>(ptr: &mut AzStyleBackgroundPositionPtr, func: F) { let box_ptr: Box<StyleBackgroundPosition> = unsafe { Box::<StyleBackgroundPosition>::from_raw(ptr.ptr  as *mut StyleBackgroundPosition) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<StyleBackgroundRepeat>` struct
#[no_mangle] #[repr(C)] pub struct AzStyleBackgroundRepeatPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `StyleBackgroundRepeat` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_style_background_repeat_delete(ptr: &mut AzStyleBackgroundRepeatPtr) { let _ = unsafe { Box::<StyleBackgroundRepeat>::from_raw(ptr.ptr  as *mut StyleBackgroundRepeat) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`StyleBackgroundRepeat`>!.
#[no_mangle] #[inline] pub extern "C" fn az_style_background_repeat_shallow_copy(ptr: &AzStyleBackgroundRepeatPtr) -> AzStyleBackgroundRepeatPtr { AzStyleBackgroundRepeatPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzStyleBackgroundRepeatPtr` to a `Box<StyleBackgroundRepeat>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_style_background_repeat_downcast(ptr: AzStyleBackgroundRepeatPtr) -> Box<StyleBackgroundRepeat> { unsafe { Box::<StyleBackgroundRepeat>::from_raw(ptr.ptr  as *mut StyleBackgroundRepeat) } }
/// (private): Downcasts the `AzStyleBackgroundRepeatPtr` to a `&mut Box<StyleBackgroundRepeat>` and runs the `func` closure on it
#[inline(always)] fn az_style_background_repeat_downcast_refmut<F: FnOnce(&mut Box<StyleBackgroundRepeat>)>(ptr: &mut AzStyleBackgroundRepeatPtr, func: F) { let mut box_ptr: Box<StyleBackgroundRepeat> = unsafe { Box::<StyleBackgroundRepeat>::from_raw(ptr.ptr  as *mut StyleBackgroundRepeat) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzStyleBackgroundRepeatPtr` to a `&Box<StyleBackgroundRepeat>` and runs the `func` closure on it
#[inline(always)] fn az_style_background_repeat_downcast_ref<F: FnOnce(&Box<StyleBackgroundRepeat>)>(ptr: &mut AzStyleBackgroundRepeatPtr, func: F) { let box_ptr: Box<StyleBackgroundRepeat> = unsafe { Box::<StyleBackgroundRepeat>::from_raw(ptr.ptr  as *mut StyleBackgroundRepeat) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<StyleBackgroundSize>` struct
#[no_mangle] #[repr(C)] pub struct AzStyleBackgroundSizePtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `StyleBackgroundSize` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_style_background_size_delete(ptr: &mut AzStyleBackgroundSizePtr) { let _ = unsafe { Box::<StyleBackgroundSize>::from_raw(ptr.ptr  as *mut StyleBackgroundSize) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`StyleBackgroundSize`>!.
#[no_mangle] #[inline] pub extern "C" fn az_style_background_size_shallow_copy(ptr: &AzStyleBackgroundSizePtr) -> AzStyleBackgroundSizePtr { AzStyleBackgroundSizePtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzStyleBackgroundSizePtr` to a `Box<StyleBackgroundSize>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_style_background_size_downcast(ptr: AzStyleBackgroundSizePtr) -> Box<StyleBackgroundSize> { unsafe { Box::<StyleBackgroundSize>::from_raw(ptr.ptr  as *mut StyleBackgroundSize) } }
/// (private): Downcasts the `AzStyleBackgroundSizePtr` to a `&mut Box<StyleBackgroundSize>` and runs the `func` closure on it
#[inline(always)] fn az_style_background_size_downcast_refmut<F: FnOnce(&mut Box<StyleBackgroundSize>)>(ptr: &mut AzStyleBackgroundSizePtr, func: F) { let mut box_ptr: Box<StyleBackgroundSize> = unsafe { Box::<StyleBackgroundSize>::from_raw(ptr.ptr  as *mut StyleBackgroundSize) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzStyleBackgroundSizePtr` to a `&Box<StyleBackgroundSize>` and runs the `func` closure on it
#[inline(always)] fn az_style_background_size_downcast_ref<F: FnOnce(&Box<StyleBackgroundSize>)>(ptr: &mut AzStyleBackgroundSizePtr, func: F) { let box_ptr: Box<StyleBackgroundSize> = unsafe { Box::<StyleBackgroundSize>::from_raw(ptr.ptr  as *mut StyleBackgroundSize) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<StyleBorderBottomColor>` struct
#[no_mangle] #[repr(C)] pub struct AzStyleBorderBottomColorPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `StyleBorderBottomColor` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_style_border_bottom_color_delete(ptr: &mut AzStyleBorderBottomColorPtr) { let _ = unsafe { Box::<StyleBorderBottomColor>::from_raw(ptr.ptr  as *mut StyleBorderBottomColor) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`StyleBorderBottomColor`>!.
#[no_mangle] #[inline] pub extern "C" fn az_style_border_bottom_color_shallow_copy(ptr: &AzStyleBorderBottomColorPtr) -> AzStyleBorderBottomColorPtr { AzStyleBorderBottomColorPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzStyleBorderBottomColorPtr` to a `Box<StyleBorderBottomColor>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_style_border_bottom_color_downcast(ptr: AzStyleBorderBottomColorPtr) -> Box<StyleBorderBottomColor> { unsafe { Box::<StyleBorderBottomColor>::from_raw(ptr.ptr  as *mut StyleBorderBottomColor) } }
/// (private): Downcasts the `AzStyleBorderBottomColorPtr` to a `&mut Box<StyleBorderBottomColor>` and runs the `func` closure on it
#[inline(always)] fn az_style_border_bottom_color_downcast_refmut<F: FnOnce(&mut Box<StyleBorderBottomColor>)>(ptr: &mut AzStyleBorderBottomColorPtr, func: F) { let mut box_ptr: Box<StyleBorderBottomColor> = unsafe { Box::<StyleBorderBottomColor>::from_raw(ptr.ptr  as *mut StyleBorderBottomColor) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzStyleBorderBottomColorPtr` to a `&Box<StyleBorderBottomColor>` and runs the `func` closure on it
#[inline(always)] fn az_style_border_bottom_color_downcast_ref<F: FnOnce(&Box<StyleBorderBottomColor>)>(ptr: &mut AzStyleBorderBottomColorPtr, func: F) { let box_ptr: Box<StyleBorderBottomColor> = unsafe { Box::<StyleBorderBottomColor>::from_raw(ptr.ptr  as *mut StyleBorderBottomColor) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<StyleBorderBottomLeftRadius>` struct
#[no_mangle] #[repr(C)] pub struct AzStyleBorderBottomLeftRadiusPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `StyleBorderBottomLeftRadius` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_style_border_bottom_left_radius_delete(ptr: &mut AzStyleBorderBottomLeftRadiusPtr) { let _ = unsafe { Box::<StyleBorderBottomLeftRadius>::from_raw(ptr.ptr  as *mut StyleBorderBottomLeftRadius) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`StyleBorderBottomLeftRadius`>!.
#[no_mangle] #[inline] pub extern "C" fn az_style_border_bottom_left_radius_shallow_copy(ptr: &AzStyleBorderBottomLeftRadiusPtr) -> AzStyleBorderBottomLeftRadiusPtr { AzStyleBorderBottomLeftRadiusPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzStyleBorderBottomLeftRadiusPtr` to a `Box<StyleBorderBottomLeftRadius>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_style_border_bottom_left_radius_downcast(ptr: AzStyleBorderBottomLeftRadiusPtr) -> Box<StyleBorderBottomLeftRadius> { unsafe { Box::<StyleBorderBottomLeftRadius>::from_raw(ptr.ptr  as *mut StyleBorderBottomLeftRadius) } }
/// (private): Downcasts the `AzStyleBorderBottomLeftRadiusPtr` to a `&mut Box<StyleBorderBottomLeftRadius>` and runs the `func` closure on it
#[inline(always)] fn az_style_border_bottom_left_radius_downcast_refmut<F: FnOnce(&mut Box<StyleBorderBottomLeftRadius>)>(ptr: &mut AzStyleBorderBottomLeftRadiusPtr, func: F) { let mut box_ptr: Box<StyleBorderBottomLeftRadius> = unsafe { Box::<StyleBorderBottomLeftRadius>::from_raw(ptr.ptr  as *mut StyleBorderBottomLeftRadius) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzStyleBorderBottomLeftRadiusPtr` to a `&Box<StyleBorderBottomLeftRadius>` and runs the `func` closure on it
#[inline(always)] fn az_style_border_bottom_left_radius_downcast_ref<F: FnOnce(&Box<StyleBorderBottomLeftRadius>)>(ptr: &mut AzStyleBorderBottomLeftRadiusPtr, func: F) { let box_ptr: Box<StyleBorderBottomLeftRadius> = unsafe { Box::<StyleBorderBottomLeftRadius>::from_raw(ptr.ptr  as *mut StyleBorderBottomLeftRadius) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<StyleBorderBottomRightRadius>` struct
#[no_mangle] #[repr(C)] pub struct AzStyleBorderBottomRightRadiusPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `StyleBorderBottomRightRadius` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_style_border_bottom_right_radius_delete(ptr: &mut AzStyleBorderBottomRightRadiusPtr) { let _ = unsafe { Box::<StyleBorderBottomRightRadius>::from_raw(ptr.ptr  as *mut StyleBorderBottomRightRadius) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`StyleBorderBottomRightRadius`>!.
#[no_mangle] #[inline] pub extern "C" fn az_style_border_bottom_right_radius_shallow_copy(ptr: &AzStyleBorderBottomRightRadiusPtr) -> AzStyleBorderBottomRightRadiusPtr { AzStyleBorderBottomRightRadiusPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzStyleBorderBottomRightRadiusPtr` to a `Box<StyleBorderBottomRightRadius>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_style_border_bottom_right_radius_downcast(ptr: AzStyleBorderBottomRightRadiusPtr) -> Box<StyleBorderBottomRightRadius> { unsafe { Box::<StyleBorderBottomRightRadius>::from_raw(ptr.ptr  as *mut StyleBorderBottomRightRadius) } }
/// (private): Downcasts the `AzStyleBorderBottomRightRadiusPtr` to a `&mut Box<StyleBorderBottomRightRadius>` and runs the `func` closure on it
#[inline(always)] fn az_style_border_bottom_right_radius_downcast_refmut<F: FnOnce(&mut Box<StyleBorderBottomRightRadius>)>(ptr: &mut AzStyleBorderBottomRightRadiusPtr, func: F) { let mut box_ptr: Box<StyleBorderBottomRightRadius> = unsafe { Box::<StyleBorderBottomRightRadius>::from_raw(ptr.ptr  as *mut StyleBorderBottomRightRadius) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzStyleBorderBottomRightRadiusPtr` to a `&Box<StyleBorderBottomRightRadius>` and runs the `func` closure on it
#[inline(always)] fn az_style_border_bottom_right_radius_downcast_ref<F: FnOnce(&Box<StyleBorderBottomRightRadius>)>(ptr: &mut AzStyleBorderBottomRightRadiusPtr, func: F) { let box_ptr: Box<StyleBorderBottomRightRadius> = unsafe { Box::<StyleBorderBottomRightRadius>::from_raw(ptr.ptr  as *mut StyleBorderBottomRightRadius) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<StyleBorderBottomStyle>` struct
#[no_mangle] #[repr(C)] pub struct AzStyleBorderBottomStylePtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `StyleBorderBottomStyle` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_style_border_bottom_style_delete(ptr: &mut AzStyleBorderBottomStylePtr) { let _ = unsafe { Box::<StyleBorderBottomStyle>::from_raw(ptr.ptr  as *mut StyleBorderBottomStyle) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`StyleBorderBottomStyle`>!.
#[no_mangle] #[inline] pub extern "C" fn az_style_border_bottom_style_shallow_copy(ptr: &AzStyleBorderBottomStylePtr) -> AzStyleBorderBottomStylePtr { AzStyleBorderBottomStylePtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzStyleBorderBottomStylePtr` to a `Box<StyleBorderBottomStyle>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_style_border_bottom_style_downcast(ptr: AzStyleBorderBottomStylePtr) -> Box<StyleBorderBottomStyle> { unsafe { Box::<StyleBorderBottomStyle>::from_raw(ptr.ptr  as *mut StyleBorderBottomStyle) } }
/// (private): Downcasts the `AzStyleBorderBottomStylePtr` to a `&mut Box<StyleBorderBottomStyle>` and runs the `func` closure on it
#[inline(always)] fn az_style_border_bottom_style_downcast_refmut<F: FnOnce(&mut Box<StyleBorderBottomStyle>)>(ptr: &mut AzStyleBorderBottomStylePtr, func: F) { let mut box_ptr: Box<StyleBorderBottomStyle> = unsafe { Box::<StyleBorderBottomStyle>::from_raw(ptr.ptr  as *mut StyleBorderBottomStyle) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzStyleBorderBottomStylePtr` to a `&Box<StyleBorderBottomStyle>` and runs the `func` closure on it
#[inline(always)] fn az_style_border_bottom_style_downcast_ref<F: FnOnce(&Box<StyleBorderBottomStyle>)>(ptr: &mut AzStyleBorderBottomStylePtr, func: F) { let box_ptr: Box<StyleBorderBottomStyle> = unsafe { Box::<StyleBorderBottomStyle>::from_raw(ptr.ptr  as *mut StyleBorderBottomStyle) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<StyleBorderBottomWidth>` struct
#[no_mangle] #[repr(C)] pub struct AzStyleBorderBottomWidthPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `StyleBorderBottomWidth` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_style_border_bottom_width_delete(ptr: &mut AzStyleBorderBottomWidthPtr) { let _ = unsafe { Box::<StyleBorderBottomWidth>::from_raw(ptr.ptr  as *mut StyleBorderBottomWidth) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`StyleBorderBottomWidth`>!.
#[no_mangle] #[inline] pub extern "C" fn az_style_border_bottom_width_shallow_copy(ptr: &AzStyleBorderBottomWidthPtr) -> AzStyleBorderBottomWidthPtr { AzStyleBorderBottomWidthPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzStyleBorderBottomWidthPtr` to a `Box<StyleBorderBottomWidth>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_style_border_bottom_width_downcast(ptr: AzStyleBorderBottomWidthPtr) -> Box<StyleBorderBottomWidth> { unsafe { Box::<StyleBorderBottomWidth>::from_raw(ptr.ptr  as *mut StyleBorderBottomWidth) } }
/// (private): Downcasts the `AzStyleBorderBottomWidthPtr` to a `&mut Box<StyleBorderBottomWidth>` and runs the `func` closure on it
#[inline(always)] fn az_style_border_bottom_width_downcast_refmut<F: FnOnce(&mut Box<StyleBorderBottomWidth>)>(ptr: &mut AzStyleBorderBottomWidthPtr, func: F) { let mut box_ptr: Box<StyleBorderBottomWidth> = unsafe { Box::<StyleBorderBottomWidth>::from_raw(ptr.ptr  as *mut StyleBorderBottomWidth) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzStyleBorderBottomWidthPtr` to a `&Box<StyleBorderBottomWidth>` and runs the `func` closure on it
#[inline(always)] fn az_style_border_bottom_width_downcast_ref<F: FnOnce(&Box<StyleBorderBottomWidth>)>(ptr: &mut AzStyleBorderBottomWidthPtr, func: F) { let box_ptr: Box<StyleBorderBottomWidth> = unsafe { Box::<StyleBorderBottomWidth>::from_raw(ptr.ptr  as *mut StyleBorderBottomWidth) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<StyleBorderLeftColor>` struct
#[no_mangle] #[repr(C)] pub struct AzStyleBorderLeftColorPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `StyleBorderLeftColor` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_style_border_left_color_delete(ptr: &mut AzStyleBorderLeftColorPtr) { let _ = unsafe { Box::<StyleBorderLeftColor>::from_raw(ptr.ptr  as *mut StyleBorderLeftColor) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`StyleBorderLeftColor`>!.
#[no_mangle] #[inline] pub extern "C" fn az_style_border_left_color_shallow_copy(ptr: &AzStyleBorderLeftColorPtr) -> AzStyleBorderLeftColorPtr { AzStyleBorderLeftColorPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzStyleBorderLeftColorPtr` to a `Box<StyleBorderLeftColor>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_style_border_left_color_downcast(ptr: AzStyleBorderLeftColorPtr) -> Box<StyleBorderLeftColor> { unsafe { Box::<StyleBorderLeftColor>::from_raw(ptr.ptr  as *mut StyleBorderLeftColor) } }
/// (private): Downcasts the `AzStyleBorderLeftColorPtr` to a `&mut Box<StyleBorderLeftColor>` and runs the `func` closure on it
#[inline(always)] fn az_style_border_left_color_downcast_refmut<F: FnOnce(&mut Box<StyleBorderLeftColor>)>(ptr: &mut AzStyleBorderLeftColorPtr, func: F) { let mut box_ptr: Box<StyleBorderLeftColor> = unsafe { Box::<StyleBorderLeftColor>::from_raw(ptr.ptr  as *mut StyleBorderLeftColor) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzStyleBorderLeftColorPtr` to a `&Box<StyleBorderLeftColor>` and runs the `func` closure on it
#[inline(always)] fn az_style_border_left_color_downcast_ref<F: FnOnce(&Box<StyleBorderLeftColor>)>(ptr: &mut AzStyleBorderLeftColorPtr, func: F) { let box_ptr: Box<StyleBorderLeftColor> = unsafe { Box::<StyleBorderLeftColor>::from_raw(ptr.ptr  as *mut StyleBorderLeftColor) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<StyleBorderLeftStyle>` struct
#[no_mangle] #[repr(C)] pub struct AzStyleBorderLeftStylePtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `StyleBorderLeftStyle` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_style_border_left_style_delete(ptr: &mut AzStyleBorderLeftStylePtr) { let _ = unsafe { Box::<StyleBorderLeftStyle>::from_raw(ptr.ptr  as *mut StyleBorderLeftStyle) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`StyleBorderLeftStyle`>!.
#[no_mangle] #[inline] pub extern "C" fn az_style_border_left_style_shallow_copy(ptr: &AzStyleBorderLeftStylePtr) -> AzStyleBorderLeftStylePtr { AzStyleBorderLeftStylePtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzStyleBorderLeftStylePtr` to a `Box<StyleBorderLeftStyle>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_style_border_left_style_downcast(ptr: AzStyleBorderLeftStylePtr) -> Box<StyleBorderLeftStyle> { unsafe { Box::<StyleBorderLeftStyle>::from_raw(ptr.ptr  as *mut StyleBorderLeftStyle) } }
/// (private): Downcasts the `AzStyleBorderLeftStylePtr` to a `&mut Box<StyleBorderLeftStyle>` and runs the `func` closure on it
#[inline(always)] fn az_style_border_left_style_downcast_refmut<F: FnOnce(&mut Box<StyleBorderLeftStyle>)>(ptr: &mut AzStyleBorderLeftStylePtr, func: F) { let mut box_ptr: Box<StyleBorderLeftStyle> = unsafe { Box::<StyleBorderLeftStyle>::from_raw(ptr.ptr  as *mut StyleBorderLeftStyle) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzStyleBorderLeftStylePtr` to a `&Box<StyleBorderLeftStyle>` and runs the `func` closure on it
#[inline(always)] fn az_style_border_left_style_downcast_ref<F: FnOnce(&Box<StyleBorderLeftStyle>)>(ptr: &mut AzStyleBorderLeftStylePtr, func: F) { let box_ptr: Box<StyleBorderLeftStyle> = unsafe { Box::<StyleBorderLeftStyle>::from_raw(ptr.ptr  as *mut StyleBorderLeftStyle) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<StyleBorderLeftWidth>` struct
#[no_mangle] #[repr(C)] pub struct AzStyleBorderLeftWidthPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `StyleBorderLeftWidth` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_style_border_left_width_delete(ptr: &mut AzStyleBorderLeftWidthPtr) { let _ = unsafe { Box::<StyleBorderLeftWidth>::from_raw(ptr.ptr  as *mut StyleBorderLeftWidth) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`StyleBorderLeftWidth`>!.
#[no_mangle] #[inline] pub extern "C" fn az_style_border_left_width_shallow_copy(ptr: &AzStyleBorderLeftWidthPtr) -> AzStyleBorderLeftWidthPtr { AzStyleBorderLeftWidthPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzStyleBorderLeftWidthPtr` to a `Box<StyleBorderLeftWidth>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_style_border_left_width_downcast(ptr: AzStyleBorderLeftWidthPtr) -> Box<StyleBorderLeftWidth> { unsafe { Box::<StyleBorderLeftWidth>::from_raw(ptr.ptr  as *mut StyleBorderLeftWidth) } }
/// (private): Downcasts the `AzStyleBorderLeftWidthPtr` to a `&mut Box<StyleBorderLeftWidth>` and runs the `func` closure on it
#[inline(always)] fn az_style_border_left_width_downcast_refmut<F: FnOnce(&mut Box<StyleBorderLeftWidth>)>(ptr: &mut AzStyleBorderLeftWidthPtr, func: F) { let mut box_ptr: Box<StyleBorderLeftWidth> = unsafe { Box::<StyleBorderLeftWidth>::from_raw(ptr.ptr  as *mut StyleBorderLeftWidth) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzStyleBorderLeftWidthPtr` to a `&Box<StyleBorderLeftWidth>` and runs the `func` closure on it
#[inline(always)] fn az_style_border_left_width_downcast_ref<F: FnOnce(&Box<StyleBorderLeftWidth>)>(ptr: &mut AzStyleBorderLeftWidthPtr, func: F) { let box_ptr: Box<StyleBorderLeftWidth> = unsafe { Box::<StyleBorderLeftWidth>::from_raw(ptr.ptr  as *mut StyleBorderLeftWidth) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<StyleBorderRightColor>` struct
#[no_mangle] #[repr(C)] pub struct AzStyleBorderRightColorPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `StyleBorderRightColor` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_style_border_right_color_delete(ptr: &mut AzStyleBorderRightColorPtr) { let _ = unsafe { Box::<StyleBorderRightColor>::from_raw(ptr.ptr  as *mut StyleBorderRightColor) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`StyleBorderRightColor`>!.
#[no_mangle] #[inline] pub extern "C" fn az_style_border_right_color_shallow_copy(ptr: &AzStyleBorderRightColorPtr) -> AzStyleBorderRightColorPtr { AzStyleBorderRightColorPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzStyleBorderRightColorPtr` to a `Box<StyleBorderRightColor>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_style_border_right_color_downcast(ptr: AzStyleBorderRightColorPtr) -> Box<StyleBorderRightColor> { unsafe { Box::<StyleBorderRightColor>::from_raw(ptr.ptr  as *mut StyleBorderRightColor) } }
/// (private): Downcasts the `AzStyleBorderRightColorPtr` to a `&mut Box<StyleBorderRightColor>` and runs the `func` closure on it
#[inline(always)] fn az_style_border_right_color_downcast_refmut<F: FnOnce(&mut Box<StyleBorderRightColor>)>(ptr: &mut AzStyleBorderRightColorPtr, func: F) { let mut box_ptr: Box<StyleBorderRightColor> = unsafe { Box::<StyleBorderRightColor>::from_raw(ptr.ptr  as *mut StyleBorderRightColor) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzStyleBorderRightColorPtr` to a `&Box<StyleBorderRightColor>` and runs the `func` closure on it
#[inline(always)] fn az_style_border_right_color_downcast_ref<F: FnOnce(&Box<StyleBorderRightColor>)>(ptr: &mut AzStyleBorderRightColorPtr, func: F) { let box_ptr: Box<StyleBorderRightColor> = unsafe { Box::<StyleBorderRightColor>::from_raw(ptr.ptr  as *mut StyleBorderRightColor) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<StyleBorderRightStyle>` struct
#[no_mangle] #[repr(C)] pub struct AzStyleBorderRightStylePtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `StyleBorderRightStyle` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_style_border_right_style_delete(ptr: &mut AzStyleBorderRightStylePtr) { let _ = unsafe { Box::<StyleBorderRightStyle>::from_raw(ptr.ptr  as *mut StyleBorderRightStyle) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`StyleBorderRightStyle`>!.
#[no_mangle] #[inline] pub extern "C" fn az_style_border_right_style_shallow_copy(ptr: &AzStyleBorderRightStylePtr) -> AzStyleBorderRightStylePtr { AzStyleBorderRightStylePtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzStyleBorderRightStylePtr` to a `Box<StyleBorderRightStyle>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_style_border_right_style_downcast(ptr: AzStyleBorderRightStylePtr) -> Box<StyleBorderRightStyle> { unsafe { Box::<StyleBorderRightStyle>::from_raw(ptr.ptr  as *mut StyleBorderRightStyle) } }
/// (private): Downcasts the `AzStyleBorderRightStylePtr` to a `&mut Box<StyleBorderRightStyle>` and runs the `func` closure on it
#[inline(always)] fn az_style_border_right_style_downcast_refmut<F: FnOnce(&mut Box<StyleBorderRightStyle>)>(ptr: &mut AzStyleBorderRightStylePtr, func: F) { let mut box_ptr: Box<StyleBorderRightStyle> = unsafe { Box::<StyleBorderRightStyle>::from_raw(ptr.ptr  as *mut StyleBorderRightStyle) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzStyleBorderRightStylePtr` to a `&Box<StyleBorderRightStyle>` and runs the `func` closure on it
#[inline(always)] fn az_style_border_right_style_downcast_ref<F: FnOnce(&Box<StyleBorderRightStyle>)>(ptr: &mut AzStyleBorderRightStylePtr, func: F) { let box_ptr: Box<StyleBorderRightStyle> = unsafe { Box::<StyleBorderRightStyle>::from_raw(ptr.ptr  as *mut StyleBorderRightStyle) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<StyleBorderRightWidth>` struct
#[no_mangle] #[repr(C)] pub struct AzStyleBorderRightWidthPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `StyleBorderRightWidth` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_style_border_right_width_delete(ptr: &mut AzStyleBorderRightWidthPtr) { let _ = unsafe { Box::<StyleBorderRightWidth>::from_raw(ptr.ptr  as *mut StyleBorderRightWidth) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`StyleBorderRightWidth`>!.
#[no_mangle] #[inline] pub extern "C" fn az_style_border_right_width_shallow_copy(ptr: &AzStyleBorderRightWidthPtr) -> AzStyleBorderRightWidthPtr { AzStyleBorderRightWidthPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzStyleBorderRightWidthPtr` to a `Box<StyleBorderRightWidth>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_style_border_right_width_downcast(ptr: AzStyleBorderRightWidthPtr) -> Box<StyleBorderRightWidth> { unsafe { Box::<StyleBorderRightWidth>::from_raw(ptr.ptr  as *mut StyleBorderRightWidth) } }
/// (private): Downcasts the `AzStyleBorderRightWidthPtr` to a `&mut Box<StyleBorderRightWidth>` and runs the `func` closure on it
#[inline(always)] fn az_style_border_right_width_downcast_refmut<F: FnOnce(&mut Box<StyleBorderRightWidth>)>(ptr: &mut AzStyleBorderRightWidthPtr, func: F) { let mut box_ptr: Box<StyleBorderRightWidth> = unsafe { Box::<StyleBorderRightWidth>::from_raw(ptr.ptr  as *mut StyleBorderRightWidth) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzStyleBorderRightWidthPtr` to a `&Box<StyleBorderRightWidth>` and runs the `func` closure on it
#[inline(always)] fn az_style_border_right_width_downcast_ref<F: FnOnce(&Box<StyleBorderRightWidth>)>(ptr: &mut AzStyleBorderRightWidthPtr, func: F) { let box_ptr: Box<StyleBorderRightWidth> = unsafe { Box::<StyleBorderRightWidth>::from_raw(ptr.ptr  as *mut StyleBorderRightWidth) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<StyleBorderTopColor>` struct
#[no_mangle] #[repr(C)] pub struct AzStyleBorderTopColorPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `StyleBorderTopColor` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_style_border_top_color_delete(ptr: &mut AzStyleBorderTopColorPtr) { let _ = unsafe { Box::<StyleBorderTopColor>::from_raw(ptr.ptr  as *mut StyleBorderTopColor) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`StyleBorderTopColor`>!.
#[no_mangle] #[inline] pub extern "C" fn az_style_border_top_color_shallow_copy(ptr: &AzStyleBorderTopColorPtr) -> AzStyleBorderTopColorPtr { AzStyleBorderTopColorPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzStyleBorderTopColorPtr` to a `Box<StyleBorderTopColor>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_style_border_top_color_downcast(ptr: AzStyleBorderTopColorPtr) -> Box<StyleBorderTopColor> { unsafe { Box::<StyleBorderTopColor>::from_raw(ptr.ptr  as *mut StyleBorderTopColor) } }
/// (private): Downcasts the `AzStyleBorderTopColorPtr` to a `&mut Box<StyleBorderTopColor>` and runs the `func` closure on it
#[inline(always)] fn az_style_border_top_color_downcast_refmut<F: FnOnce(&mut Box<StyleBorderTopColor>)>(ptr: &mut AzStyleBorderTopColorPtr, func: F) { let mut box_ptr: Box<StyleBorderTopColor> = unsafe { Box::<StyleBorderTopColor>::from_raw(ptr.ptr  as *mut StyleBorderTopColor) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzStyleBorderTopColorPtr` to a `&Box<StyleBorderTopColor>` and runs the `func` closure on it
#[inline(always)] fn az_style_border_top_color_downcast_ref<F: FnOnce(&Box<StyleBorderTopColor>)>(ptr: &mut AzStyleBorderTopColorPtr, func: F) { let box_ptr: Box<StyleBorderTopColor> = unsafe { Box::<StyleBorderTopColor>::from_raw(ptr.ptr  as *mut StyleBorderTopColor) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<StyleBorderTopLeftRadius>` struct
#[no_mangle] #[repr(C)] pub struct AzStyleBorderTopLeftRadiusPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `StyleBorderTopLeftRadius` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_style_border_top_left_radius_delete(ptr: &mut AzStyleBorderTopLeftRadiusPtr) { let _ = unsafe { Box::<StyleBorderTopLeftRadius>::from_raw(ptr.ptr  as *mut StyleBorderTopLeftRadius) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`StyleBorderTopLeftRadius`>!.
#[no_mangle] #[inline] pub extern "C" fn az_style_border_top_left_radius_shallow_copy(ptr: &AzStyleBorderTopLeftRadiusPtr) -> AzStyleBorderTopLeftRadiusPtr { AzStyleBorderTopLeftRadiusPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzStyleBorderTopLeftRadiusPtr` to a `Box<StyleBorderTopLeftRadius>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_style_border_top_left_radius_downcast(ptr: AzStyleBorderTopLeftRadiusPtr) -> Box<StyleBorderTopLeftRadius> { unsafe { Box::<StyleBorderTopLeftRadius>::from_raw(ptr.ptr  as *mut StyleBorderTopLeftRadius) } }
/// (private): Downcasts the `AzStyleBorderTopLeftRadiusPtr` to a `&mut Box<StyleBorderTopLeftRadius>` and runs the `func` closure on it
#[inline(always)] fn az_style_border_top_left_radius_downcast_refmut<F: FnOnce(&mut Box<StyleBorderTopLeftRadius>)>(ptr: &mut AzStyleBorderTopLeftRadiusPtr, func: F) { let mut box_ptr: Box<StyleBorderTopLeftRadius> = unsafe { Box::<StyleBorderTopLeftRadius>::from_raw(ptr.ptr  as *mut StyleBorderTopLeftRadius) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzStyleBorderTopLeftRadiusPtr` to a `&Box<StyleBorderTopLeftRadius>` and runs the `func` closure on it
#[inline(always)] fn az_style_border_top_left_radius_downcast_ref<F: FnOnce(&Box<StyleBorderTopLeftRadius>)>(ptr: &mut AzStyleBorderTopLeftRadiusPtr, func: F) { let box_ptr: Box<StyleBorderTopLeftRadius> = unsafe { Box::<StyleBorderTopLeftRadius>::from_raw(ptr.ptr  as *mut StyleBorderTopLeftRadius) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<StyleBorderTopRightRadius>` struct
#[no_mangle] #[repr(C)] pub struct AzStyleBorderTopRightRadiusPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `StyleBorderTopRightRadius` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_style_border_top_right_radius_delete(ptr: &mut AzStyleBorderTopRightRadiusPtr) { let _ = unsafe { Box::<StyleBorderTopRightRadius>::from_raw(ptr.ptr  as *mut StyleBorderTopRightRadius) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`StyleBorderTopRightRadius`>!.
#[no_mangle] #[inline] pub extern "C" fn az_style_border_top_right_radius_shallow_copy(ptr: &AzStyleBorderTopRightRadiusPtr) -> AzStyleBorderTopRightRadiusPtr { AzStyleBorderTopRightRadiusPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzStyleBorderTopRightRadiusPtr` to a `Box<StyleBorderTopRightRadius>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_style_border_top_right_radius_downcast(ptr: AzStyleBorderTopRightRadiusPtr) -> Box<StyleBorderTopRightRadius> { unsafe { Box::<StyleBorderTopRightRadius>::from_raw(ptr.ptr  as *mut StyleBorderTopRightRadius) } }
/// (private): Downcasts the `AzStyleBorderTopRightRadiusPtr` to a `&mut Box<StyleBorderTopRightRadius>` and runs the `func` closure on it
#[inline(always)] fn az_style_border_top_right_radius_downcast_refmut<F: FnOnce(&mut Box<StyleBorderTopRightRadius>)>(ptr: &mut AzStyleBorderTopRightRadiusPtr, func: F) { let mut box_ptr: Box<StyleBorderTopRightRadius> = unsafe { Box::<StyleBorderTopRightRadius>::from_raw(ptr.ptr  as *mut StyleBorderTopRightRadius) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzStyleBorderTopRightRadiusPtr` to a `&Box<StyleBorderTopRightRadius>` and runs the `func` closure on it
#[inline(always)] fn az_style_border_top_right_radius_downcast_ref<F: FnOnce(&Box<StyleBorderTopRightRadius>)>(ptr: &mut AzStyleBorderTopRightRadiusPtr, func: F) { let box_ptr: Box<StyleBorderTopRightRadius> = unsafe { Box::<StyleBorderTopRightRadius>::from_raw(ptr.ptr  as *mut StyleBorderTopRightRadius) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<StyleBorderTopStyle>` struct
#[no_mangle] #[repr(C)] pub struct AzStyleBorderTopStylePtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `StyleBorderTopStyle` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_style_border_top_style_delete(ptr: &mut AzStyleBorderTopStylePtr) { let _ = unsafe { Box::<StyleBorderTopStyle>::from_raw(ptr.ptr  as *mut StyleBorderTopStyle) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`StyleBorderTopStyle`>!.
#[no_mangle] #[inline] pub extern "C" fn az_style_border_top_style_shallow_copy(ptr: &AzStyleBorderTopStylePtr) -> AzStyleBorderTopStylePtr { AzStyleBorderTopStylePtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzStyleBorderTopStylePtr` to a `Box<StyleBorderTopStyle>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_style_border_top_style_downcast(ptr: AzStyleBorderTopStylePtr) -> Box<StyleBorderTopStyle> { unsafe { Box::<StyleBorderTopStyle>::from_raw(ptr.ptr  as *mut StyleBorderTopStyle) } }
/// (private): Downcasts the `AzStyleBorderTopStylePtr` to a `&mut Box<StyleBorderTopStyle>` and runs the `func` closure on it
#[inline(always)] fn az_style_border_top_style_downcast_refmut<F: FnOnce(&mut Box<StyleBorderTopStyle>)>(ptr: &mut AzStyleBorderTopStylePtr, func: F) { let mut box_ptr: Box<StyleBorderTopStyle> = unsafe { Box::<StyleBorderTopStyle>::from_raw(ptr.ptr  as *mut StyleBorderTopStyle) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzStyleBorderTopStylePtr` to a `&Box<StyleBorderTopStyle>` and runs the `func` closure on it
#[inline(always)] fn az_style_border_top_style_downcast_ref<F: FnOnce(&Box<StyleBorderTopStyle>)>(ptr: &mut AzStyleBorderTopStylePtr, func: F) { let box_ptr: Box<StyleBorderTopStyle> = unsafe { Box::<StyleBorderTopStyle>::from_raw(ptr.ptr  as *mut StyleBorderTopStyle) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<StyleBorderTopWidth>` struct
#[no_mangle] #[repr(C)] pub struct AzStyleBorderTopWidthPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `StyleBorderTopWidth` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_style_border_top_width_delete(ptr: &mut AzStyleBorderTopWidthPtr) { let _ = unsafe { Box::<StyleBorderTopWidth>::from_raw(ptr.ptr  as *mut StyleBorderTopWidth) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`StyleBorderTopWidth`>!.
#[no_mangle] #[inline] pub extern "C" fn az_style_border_top_width_shallow_copy(ptr: &AzStyleBorderTopWidthPtr) -> AzStyleBorderTopWidthPtr { AzStyleBorderTopWidthPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzStyleBorderTopWidthPtr` to a `Box<StyleBorderTopWidth>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_style_border_top_width_downcast(ptr: AzStyleBorderTopWidthPtr) -> Box<StyleBorderTopWidth> { unsafe { Box::<StyleBorderTopWidth>::from_raw(ptr.ptr  as *mut StyleBorderTopWidth) } }
/// (private): Downcasts the `AzStyleBorderTopWidthPtr` to a `&mut Box<StyleBorderTopWidth>` and runs the `func` closure on it
#[inline(always)] fn az_style_border_top_width_downcast_refmut<F: FnOnce(&mut Box<StyleBorderTopWidth>)>(ptr: &mut AzStyleBorderTopWidthPtr, func: F) { let mut box_ptr: Box<StyleBorderTopWidth> = unsafe { Box::<StyleBorderTopWidth>::from_raw(ptr.ptr  as *mut StyleBorderTopWidth) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzStyleBorderTopWidthPtr` to a `&Box<StyleBorderTopWidth>` and runs the `func` closure on it
#[inline(always)] fn az_style_border_top_width_downcast_ref<F: FnOnce(&Box<StyleBorderTopWidth>)>(ptr: &mut AzStyleBorderTopWidthPtr, func: F) { let box_ptr: Box<StyleBorderTopWidth> = unsafe { Box::<StyleBorderTopWidth>::from_raw(ptr.ptr  as *mut StyleBorderTopWidth) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<StyleCursor>` struct
#[no_mangle] #[repr(C)] pub struct AzStyleCursorPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `StyleCursor` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_style_cursor_delete(ptr: &mut AzStyleCursorPtr) { let _ = unsafe { Box::<StyleCursor>::from_raw(ptr.ptr  as *mut StyleCursor) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`StyleCursor`>!.
#[no_mangle] #[inline] pub extern "C" fn az_style_cursor_shallow_copy(ptr: &AzStyleCursorPtr) -> AzStyleCursorPtr { AzStyleCursorPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzStyleCursorPtr` to a `Box<StyleCursor>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_style_cursor_downcast(ptr: AzStyleCursorPtr) -> Box<StyleCursor> { unsafe { Box::<StyleCursor>::from_raw(ptr.ptr  as *mut StyleCursor) } }
/// (private): Downcasts the `AzStyleCursorPtr` to a `&mut Box<StyleCursor>` and runs the `func` closure on it
#[inline(always)] fn az_style_cursor_downcast_refmut<F: FnOnce(&mut Box<StyleCursor>)>(ptr: &mut AzStyleCursorPtr, func: F) { let mut box_ptr: Box<StyleCursor> = unsafe { Box::<StyleCursor>::from_raw(ptr.ptr  as *mut StyleCursor) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzStyleCursorPtr` to a `&Box<StyleCursor>` and runs the `func` closure on it
#[inline(always)] fn az_style_cursor_downcast_ref<F: FnOnce(&Box<StyleCursor>)>(ptr: &mut AzStyleCursorPtr, func: F) { let box_ptr: Box<StyleCursor> = unsafe { Box::<StyleCursor>::from_raw(ptr.ptr  as *mut StyleCursor) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<StyleFontFamily>` struct
#[no_mangle] #[repr(C)] pub struct AzStyleFontFamilyPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `StyleFontFamily` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_style_font_family_delete(ptr: &mut AzStyleFontFamilyPtr) { let _ = unsafe { Box::<StyleFontFamily>::from_raw(ptr.ptr  as *mut StyleFontFamily) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`StyleFontFamily`>!.
#[no_mangle] #[inline] pub extern "C" fn az_style_font_family_shallow_copy(ptr: &AzStyleFontFamilyPtr) -> AzStyleFontFamilyPtr { AzStyleFontFamilyPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzStyleFontFamilyPtr` to a `Box<StyleFontFamily>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_style_font_family_downcast(ptr: AzStyleFontFamilyPtr) -> Box<StyleFontFamily> { unsafe { Box::<StyleFontFamily>::from_raw(ptr.ptr  as *mut StyleFontFamily) } }
/// (private): Downcasts the `AzStyleFontFamilyPtr` to a `&mut Box<StyleFontFamily>` and runs the `func` closure on it
#[inline(always)] fn az_style_font_family_downcast_refmut<F: FnOnce(&mut Box<StyleFontFamily>)>(ptr: &mut AzStyleFontFamilyPtr, func: F) { let mut box_ptr: Box<StyleFontFamily> = unsafe { Box::<StyleFontFamily>::from_raw(ptr.ptr  as *mut StyleFontFamily) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzStyleFontFamilyPtr` to a `&Box<StyleFontFamily>` and runs the `func` closure on it
#[inline(always)] fn az_style_font_family_downcast_ref<F: FnOnce(&Box<StyleFontFamily>)>(ptr: &mut AzStyleFontFamilyPtr, func: F) { let box_ptr: Box<StyleFontFamily> = unsafe { Box::<StyleFontFamily>::from_raw(ptr.ptr  as *mut StyleFontFamily) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<StyleFontSize>` struct
#[no_mangle] #[repr(C)] pub struct AzStyleFontSizePtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `StyleFontSize` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_style_font_size_delete(ptr: &mut AzStyleFontSizePtr) { let _ = unsafe { Box::<StyleFontSize>::from_raw(ptr.ptr  as *mut StyleFontSize) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`StyleFontSize`>!.
#[no_mangle] #[inline] pub extern "C" fn az_style_font_size_shallow_copy(ptr: &AzStyleFontSizePtr) -> AzStyleFontSizePtr { AzStyleFontSizePtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzStyleFontSizePtr` to a `Box<StyleFontSize>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_style_font_size_downcast(ptr: AzStyleFontSizePtr) -> Box<StyleFontSize> { unsafe { Box::<StyleFontSize>::from_raw(ptr.ptr  as *mut StyleFontSize) } }
/// (private): Downcasts the `AzStyleFontSizePtr` to a `&mut Box<StyleFontSize>` and runs the `func` closure on it
#[inline(always)] fn az_style_font_size_downcast_refmut<F: FnOnce(&mut Box<StyleFontSize>)>(ptr: &mut AzStyleFontSizePtr, func: F) { let mut box_ptr: Box<StyleFontSize> = unsafe { Box::<StyleFontSize>::from_raw(ptr.ptr  as *mut StyleFontSize) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzStyleFontSizePtr` to a `&Box<StyleFontSize>` and runs the `func` closure on it
#[inline(always)] fn az_style_font_size_downcast_ref<F: FnOnce(&Box<StyleFontSize>)>(ptr: &mut AzStyleFontSizePtr, func: F) { let box_ptr: Box<StyleFontSize> = unsafe { Box::<StyleFontSize>::from_raw(ptr.ptr  as *mut StyleFontSize) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<StyleLetterSpacing>` struct
#[no_mangle] #[repr(C)] pub struct AzStyleLetterSpacingPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `StyleLetterSpacing` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_style_letter_spacing_delete(ptr: &mut AzStyleLetterSpacingPtr) { let _ = unsafe { Box::<StyleLetterSpacing>::from_raw(ptr.ptr  as *mut StyleLetterSpacing) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`StyleLetterSpacing`>!.
#[no_mangle] #[inline] pub extern "C" fn az_style_letter_spacing_shallow_copy(ptr: &AzStyleLetterSpacingPtr) -> AzStyleLetterSpacingPtr { AzStyleLetterSpacingPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzStyleLetterSpacingPtr` to a `Box<StyleLetterSpacing>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_style_letter_spacing_downcast(ptr: AzStyleLetterSpacingPtr) -> Box<StyleLetterSpacing> { unsafe { Box::<StyleLetterSpacing>::from_raw(ptr.ptr  as *mut StyleLetterSpacing) } }
/// (private): Downcasts the `AzStyleLetterSpacingPtr` to a `&mut Box<StyleLetterSpacing>` and runs the `func` closure on it
#[inline(always)] fn az_style_letter_spacing_downcast_refmut<F: FnOnce(&mut Box<StyleLetterSpacing>)>(ptr: &mut AzStyleLetterSpacingPtr, func: F) { let mut box_ptr: Box<StyleLetterSpacing> = unsafe { Box::<StyleLetterSpacing>::from_raw(ptr.ptr  as *mut StyleLetterSpacing) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzStyleLetterSpacingPtr` to a `&Box<StyleLetterSpacing>` and runs the `func` closure on it
#[inline(always)] fn az_style_letter_spacing_downcast_ref<F: FnOnce(&Box<StyleLetterSpacing>)>(ptr: &mut AzStyleLetterSpacingPtr, func: F) { let box_ptr: Box<StyleLetterSpacing> = unsafe { Box::<StyleLetterSpacing>::from_raw(ptr.ptr  as *mut StyleLetterSpacing) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<StyleLineHeight>` struct
#[no_mangle] #[repr(C)] pub struct AzStyleLineHeightPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `StyleLineHeight` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_style_line_height_delete(ptr: &mut AzStyleLineHeightPtr) { let _ = unsafe { Box::<StyleLineHeight>::from_raw(ptr.ptr  as *mut StyleLineHeight) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`StyleLineHeight`>!.
#[no_mangle] #[inline] pub extern "C" fn az_style_line_height_shallow_copy(ptr: &AzStyleLineHeightPtr) -> AzStyleLineHeightPtr { AzStyleLineHeightPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzStyleLineHeightPtr` to a `Box<StyleLineHeight>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_style_line_height_downcast(ptr: AzStyleLineHeightPtr) -> Box<StyleLineHeight> { unsafe { Box::<StyleLineHeight>::from_raw(ptr.ptr  as *mut StyleLineHeight) } }
/// (private): Downcasts the `AzStyleLineHeightPtr` to a `&mut Box<StyleLineHeight>` and runs the `func` closure on it
#[inline(always)] fn az_style_line_height_downcast_refmut<F: FnOnce(&mut Box<StyleLineHeight>)>(ptr: &mut AzStyleLineHeightPtr, func: F) { let mut box_ptr: Box<StyleLineHeight> = unsafe { Box::<StyleLineHeight>::from_raw(ptr.ptr  as *mut StyleLineHeight) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzStyleLineHeightPtr` to a `&Box<StyleLineHeight>` and runs the `func` closure on it
#[inline(always)] fn az_style_line_height_downcast_ref<F: FnOnce(&Box<StyleLineHeight>)>(ptr: &mut AzStyleLineHeightPtr, func: F) { let box_ptr: Box<StyleLineHeight> = unsafe { Box::<StyleLineHeight>::from_raw(ptr.ptr  as *mut StyleLineHeight) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<StyleTabWidth>` struct
#[no_mangle] #[repr(C)] pub struct AzStyleTabWidthPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `StyleTabWidth` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_style_tab_width_delete(ptr: &mut AzStyleTabWidthPtr) { let _ = unsafe { Box::<StyleTabWidth>::from_raw(ptr.ptr  as *mut StyleTabWidth) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`StyleTabWidth`>!.
#[no_mangle] #[inline] pub extern "C" fn az_style_tab_width_shallow_copy(ptr: &AzStyleTabWidthPtr) -> AzStyleTabWidthPtr { AzStyleTabWidthPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzStyleTabWidthPtr` to a `Box<StyleTabWidth>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_style_tab_width_downcast(ptr: AzStyleTabWidthPtr) -> Box<StyleTabWidth> { unsafe { Box::<StyleTabWidth>::from_raw(ptr.ptr  as *mut StyleTabWidth) } }
/// (private): Downcasts the `AzStyleTabWidthPtr` to a `&mut Box<StyleTabWidth>` and runs the `func` closure on it
#[inline(always)] fn az_style_tab_width_downcast_refmut<F: FnOnce(&mut Box<StyleTabWidth>)>(ptr: &mut AzStyleTabWidthPtr, func: F) { let mut box_ptr: Box<StyleTabWidth> = unsafe { Box::<StyleTabWidth>::from_raw(ptr.ptr  as *mut StyleTabWidth) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzStyleTabWidthPtr` to a `&Box<StyleTabWidth>` and runs the `func` closure on it
#[inline(always)] fn az_style_tab_width_downcast_ref<F: FnOnce(&Box<StyleTabWidth>)>(ptr: &mut AzStyleTabWidthPtr, func: F) { let box_ptr: Box<StyleTabWidth> = unsafe { Box::<StyleTabWidth>::from_raw(ptr.ptr  as *mut StyleTabWidth) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<StyleTextAlignmentHorz>` struct
#[no_mangle] #[repr(C)] pub struct AzStyleTextAlignmentHorzPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `StyleTextAlignmentHorz` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_style_text_alignment_horz_delete(ptr: &mut AzStyleTextAlignmentHorzPtr) { let _ = unsafe { Box::<StyleTextAlignmentHorz>::from_raw(ptr.ptr  as *mut StyleTextAlignmentHorz) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`StyleTextAlignmentHorz`>!.
#[no_mangle] #[inline] pub extern "C" fn az_style_text_alignment_horz_shallow_copy(ptr: &AzStyleTextAlignmentHorzPtr) -> AzStyleTextAlignmentHorzPtr { AzStyleTextAlignmentHorzPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzStyleTextAlignmentHorzPtr` to a `Box<StyleTextAlignmentHorz>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_style_text_alignment_horz_downcast(ptr: AzStyleTextAlignmentHorzPtr) -> Box<StyleTextAlignmentHorz> { unsafe { Box::<StyleTextAlignmentHorz>::from_raw(ptr.ptr  as *mut StyleTextAlignmentHorz) } }
/// (private): Downcasts the `AzStyleTextAlignmentHorzPtr` to a `&mut Box<StyleTextAlignmentHorz>` and runs the `func` closure on it
#[inline(always)] fn az_style_text_alignment_horz_downcast_refmut<F: FnOnce(&mut Box<StyleTextAlignmentHorz>)>(ptr: &mut AzStyleTextAlignmentHorzPtr, func: F) { let mut box_ptr: Box<StyleTextAlignmentHorz> = unsafe { Box::<StyleTextAlignmentHorz>::from_raw(ptr.ptr  as *mut StyleTextAlignmentHorz) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzStyleTextAlignmentHorzPtr` to a `&Box<StyleTextAlignmentHorz>` and runs the `func` closure on it
#[inline(always)] fn az_style_text_alignment_horz_downcast_ref<F: FnOnce(&Box<StyleTextAlignmentHorz>)>(ptr: &mut AzStyleTextAlignmentHorzPtr, func: F) { let box_ptr: Box<StyleTextAlignmentHorz> = unsafe { Box::<StyleTextAlignmentHorz>::from_raw(ptr.ptr  as *mut StyleTextAlignmentHorz) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<StyleTextColor>` struct
#[no_mangle] #[repr(C)] pub struct AzStyleTextColorPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `StyleTextColor` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_style_text_color_delete(ptr: &mut AzStyleTextColorPtr) { let _ = unsafe { Box::<StyleTextColor>::from_raw(ptr.ptr  as *mut StyleTextColor) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`StyleTextColor`>!.
#[no_mangle] #[inline] pub extern "C" fn az_style_text_color_shallow_copy(ptr: &AzStyleTextColorPtr) -> AzStyleTextColorPtr { AzStyleTextColorPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzStyleTextColorPtr` to a `Box<StyleTextColor>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_style_text_color_downcast(ptr: AzStyleTextColorPtr) -> Box<StyleTextColor> { unsafe { Box::<StyleTextColor>::from_raw(ptr.ptr  as *mut StyleTextColor) } }
/// (private): Downcasts the `AzStyleTextColorPtr` to a `&mut Box<StyleTextColor>` and runs the `func` closure on it
#[inline(always)] fn az_style_text_color_downcast_refmut<F: FnOnce(&mut Box<StyleTextColor>)>(ptr: &mut AzStyleTextColorPtr, func: F) { let mut box_ptr: Box<StyleTextColor> = unsafe { Box::<StyleTextColor>::from_raw(ptr.ptr  as *mut StyleTextColor) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzStyleTextColorPtr` to a `&Box<StyleTextColor>` and runs the `func` closure on it
#[inline(always)] fn az_style_text_color_downcast_ref<F: FnOnce(&Box<StyleTextColor>)>(ptr: &mut AzStyleTextColorPtr, func: F) { let box_ptr: Box<StyleTextColor> = unsafe { Box::<StyleTextColor>::from_raw(ptr.ptr  as *mut StyleTextColor) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Pointer to rust-allocated `Box<StyleWordSpacing>` struct
#[no_mangle] #[repr(C)] pub struct AzStyleWordSpacingPtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `StyleWordSpacing` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_style_word_spacing_delete(ptr: &mut AzStyleWordSpacingPtr) { let _ = unsafe { Box::<StyleWordSpacing>::from_raw(ptr.ptr  as *mut StyleWordSpacing) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`StyleWordSpacing`>!.
#[no_mangle] #[inline] pub extern "C" fn az_style_word_spacing_shallow_copy(ptr: &AzStyleWordSpacingPtr) -> AzStyleWordSpacingPtr { AzStyleWordSpacingPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzStyleWordSpacingPtr` to a `Box<StyleWordSpacing>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_style_word_spacing_downcast(ptr: AzStyleWordSpacingPtr) -> Box<StyleWordSpacing> { unsafe { Box::<StyleWordSpacing>::from_raw(ptr.ptr  as *mut StyleWordSpacing) } }
/// (private): Downcasts the `AzStyleWordSpacingPtr` to a `&mut Box<StyleWordSpacing>` and runs the `func` closure on it
#[inline(always)] fn az_style_word_spacing_downcast_refmut<F: FnOnce(&mut Box<StyleWordSpacing>)>(ptr: &mut AzStyleWordSpacingPtr, func: F) { let mut box_ptr: Box<StyleWordSpacing> = unsafe { Box::<StyleWordSpacing>::from_raw(ptr.ptr  as *mut StyleWordSpacing) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzStyleWordSpacingPtr` to a `&Box<StyleWordSpacing>` and runs the `func` closure on it
#[inline(always)] fn az_style_word_spacing_downcast_ref<F: FnOnce(&Box<StyleWordSpacing>)>(ptr: &mut AzStyleWordSpacingPtr, func: F) { let box_ptr: Box<StyleWordSpacing> = unsafe { Box::<StyleWordSpacing>::from_raw(ptr.ptr  as *mut StyleWordSpacing) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Re-export of rust-allocated (stack based) `BoxShadowPreDisplayItemValue` struct
pub type AzBoxShadowPreDisplayItemValueType = azul_css::CssPropertyValue::<BoxShadowPreDisplayItem>;
#[no_mangle] pub use AzBoxShadowPreDisplayItemValueType as AzBoxShadowPreDisplayItemValue;
#[inline] #[no_mangle] pub extern "C" fn az_box_shadow_pre_display_item_value_auto() -> AzBoxShadowPreDisplayItemValue { AzBoxShadowPreDisplayItemValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_box_shadow_pre_display_item_value_none() -> AzBoxShadowPreDisplayItemValue { AzBoxShadowPreDisplayItemValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_box_shadow_pre_display_item_value_inherit() -> AzBoxShadowPreDisplayItemValue { AzBoxShadowPreDisplayItemValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_box_shadow_pre_display_item_value_initial() -> AzBoxShadowPreDisplayItemValue { AzBoxShadowPreDisplayItemValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_box_shadow_pre_display_item_value_exact(variant_data: AzBoxShadowPreDisplayItemPtr) -> AzBoxShadowPreDisplayItemValue { AzBoxShadowPreDisplayItemValue::Exact(*az_box_shadow_pre_display_item_downcast(variant_data)) }
/// Destructor: Takes ownership of the `BoxShadowPreDisplayItemValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_box_shadow_pre_display_item_value_delete(object: &mut AzBoxShadowPreDisplayItemValue) { match object { AzBoxShadowPreDisplayItemValue::Auto => { }, AzBoxShadowPreDisplayItemValue::None => { }, AzBoxShadowPreDisplayItemValue::Inherit => { }, AzBoxShadowPreDisplayItemValue::Initial => { }, AzBoxShadowPreDisplayItemValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_box_shadow_pre_display_item_value_deep_copy(object: &AzBoxShadowPreDisplayItemValue) -> AzBoxShadowPreDisplayItemValue { object.clone() }

/// Re-export of rust-allocated (stack based) `LayoutAlignContentValue` struct
pub type AzLayoutAlignContentValueType = azul_css::CssPropertyValue::<LayoutAlignContent>;
#[no_mangle] pub use AzLayoutAlignContentValueType as AzLayoutAlignContentValue;
#[inline] #[no_mangle] pub extern "C" fn az_layout_align_content_value_auto() -> AzLayoutAlignContentValue { AzLayoutAlignContentValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_layout_align_content_value_none() -> AzLayoutAlignContentValue { AzLayoutAlignContentValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_layout_align_content_value_inherit() -> AzLayoutAlignContentValue { AzLayoutAlignContentValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_layout_align_content_value_initial() -> AzLayoutAlignContentValue { AzLayoutAlignContentValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_layout_align_content_value_exact(variant_data: AzLayoutAlignContentPtr) -> AzLayoutAlignContentValue { AzLayoutAlignContentValue::Exact(*az_layout_align_content_downcast(variant_data)) }
/// Destructor: Takes ownership of the `LayoutAlignContentValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_layout_align_content_value_delete(object: &mut AzLayoutAlignContentValue) { match object { AzLayoutAlignContentValue::Auto => { }, AzLayoutAlignContentValue::None => { }, AzLayoutAlignContentValue::Inherit => { }, AzLayoutAlignContentValue::Initial => { }, AzLayoutAlignContentValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_layout_align_content_value_deep_copy(object: &AzLayoutAlignContentValue) -> AzLayoutAlignContentValue { object.clone() }

/// Re-export of rust-allocated (stack based) `LayoutAlignItemsValue` struct
pub type AzLayoutAlignItemsValueType = azul_css::CssPropertyValue::<LayoutAlignItems>;
#[no_mangle] pub use AzLayoutAlignItemsValueType as AzLayoutAlignItemsValue;
#[inline] #[no_mangle] pub extern "C" fn az_layout_align_items_value_auto() -> AzLayoutAlignItemsValue { AzLayoutAlignItemsValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_layout_align_items_value_none() -> AzLayoutAlignItemsValue { AzLayoutAlignItemsValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_layout_align_items_value_inherit() -> AzLayoutAlignItemsValue { AzLayoutAlignItemsValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_layout_align_items_value_initial() -> AzLayoutAlignItemsValue { AzLayoutAlignItemsValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_layout_align_items_value_exact(variant_data: AzLayoutAlignItemsPtr) -> AzLayoutAlignItemsValue { AzLayoutAlignItemsValue::Exact(*az_layout_align_items_downcast(variant_data)) }
/// Destructor: Takes ownership of the `LayoutAlignItemsValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_layout_align_items_value_delete(object: &mut AzLayoutAlignItemsValue) { match object { AzLayoutAlignItemsValue::Auto => { }, AzLayoutAlignItemsValue::None => { }, AzLayoutAlignItemsValue::Inherit => { }, AzLayoutAlignItemsValue::Initial => { }, AzLayoutAlignItemsValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_layout_align_items_value_deep_copy(object: &AzLayoutAlignItemsValue) -> AzLayoutAlignItemsValue { object.clone() }

/// Re-export of rust-allocated (stack based) `LayoutBottomValue` struct
pub type AzLayoutBottomValueType = azul_css::CssPropertyValue::<LayoutBottom>;
#[no_mangle] pub use AzLayoutBottomValueType as AzLayoutBottomValue;
#[inline] #[no_mangle] pub extern "C" fn az_layout_bottom_value_auto() -> AzLayoutBottomValue { AzLayoutBottomValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_layout_bottom_value_none() -> AzLayoutBottomValue { AzLayoutBottomValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_layout_bottom_value_inherit() -> AzLayoutBottomValue { AzLayoutBottomValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_layout_bottom_value_initial() -> AzLayoutBottomValue { AzLayoutBottomValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_layout_bottom_value_exact(variant_data: AzLayoutBottomPtr) -> AzLayoutBottomValue { AzLayoutBottomValue::Exact(*az_layout_bottom_downcast(variant_data)) }
/// Destructor: Takes ownership of the `LayoutBottomValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_layout_bottom_value_delete(object: &mut AzLayoutBottomValue) { match object { AzLayoutBottomValue::Auto => { }, AzLayoutBottomValue::None => { }, AzLayoutBottomValue::Inherit => { }, AzLayoutBottomValue::Initial => { }, AzLayoutBottomValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_layout_bottom_value_deep_copy(object: &AzLayoutBottomValue) -> AzLayoutBottomValue { object.clone() }

/// Re-export of rust-allocated (stack based) `LayoutBoxSizingValue` struct
pub type AzLayoutBoxSizingValueType = azul_css::CssPropertyValue::<LayoutBoxSizing>;
#[no_mangle] pub use AzLayoutBoxSizingValueType as AzLayoutBoxSizingValue;
#[inline] #[no_mangle] pub extern "C" fn az_layout_box_sizing_value_auto() -> AzLayoutBoxSizingValue { AzLayoutBoxSizingValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_layout_box_sizing_value_none() -> AzLayoutBoxSizingValue { AzLayoutBoxSizingValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_layout_box_sizing_value_inherit() -> AzLayoutBoxSizingValue { AzLayoutBoxSizingValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_layout_box_sizing_value_initial() -> AzLayoutBoxSizingValue { AzLayoutBoxSizingValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_layout_box_sizing_value_exact(variant_data: AzLayoutBoxSizingPtr) -> AzLayoutBoxSizingValue { AzLayoutBoxSizingValue::Exact(*az_layout_box_sizing_downcast(variant_data)) }
/// Destructor: Takes ownership of the `LayoutBoxSizingValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_layout_box_sizing_value_delete(object: &mut AzLayoutBoxSizingValue) { match object { AzLayoutBoxSizingValue::Auto => { }, AzLayoutBoxSizingValue::None => { }, AzLayoutBoxSizingValue::Inherit => { }, AzLayoutBoxSizingValue::Initial => { }, AzLayoutBoxSizingValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_layout_box_sizing_value_deep_copy(object: &AzLayoutBoxSizingValue) -> AzLayoutBoxSizingValue { object.clone() }

/// Re-export of rust-allocated (stack based) `LayoutDirectionValue` struct
pub type AzLayoutDirectionValueType = azul_css::CssPropertyValue::<LayoutDirection>;
#[no_mangle] pub use AzLayoutDirectionValueType as AzLayoutDirectionValue;
#[inline] #[no_mangle] pub extern "C" fn az_layout_direction_value_auto() -> AzLayoutDirectionValue { AzLayoutDirectionValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_layout_direction_value_none() -> AzLayoutDirectionValue { AzLayoutDirectionValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_layout_direction_value_inherit() -> AzLayoutDirectionValue { AzLayoutDirectionValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_layout_direction_value_initial() -> AzLayoutDirectionValue { AzLayoutDirectionValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_layout_direction_value_exact(variant_data: AzLayoutDirectionPtr) -> AzLayoutDirectionValue { AzLayoutDirectionValue::Exact(*az_layout_direction_downcast(variant_data)) }
/// Destructor: Takes ownership of the `LayoutDirectionValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_layout_direction_value_delete(object: &mut AzLayoutDirectionValue) { match object { AzLayoutDirectionValue::Auto => { }, AzLayoutDirectionValue::None => { }, AzLayoutDirectionValue::Inherit => { }, AzLayoutDirectionValue::Initial => { }, AzLayoutDirectionValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_layout_direction_value_deep_copy(object: &AzLayoutDirectionValue) -> AzLayoutDirectionValue { object.clone() }

/// Re-export of rust-allocated (stack based) `LayoutDisplayValue` struct
pub type AzLayoutDisplayValueType = azul_css::CssPropertyValue::<LayoutDisplay>;
#[no_mangle] pub use AzLayoutDisplayValueType as AzLayoutDisplayValue;
#[inline] #[no_mangle] pub extern "C" fn az_layout_display_value_auto() -> AzLayoutDisplayValue { AzLayoutDisplayValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_layout_display_value_none() -> AzLayoutDisplayValue { AzLayoutDisplayValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_layout_display_value_inherit() -> AzLayoutDisplayValue { AzLayoutDisplayValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_layout_display_value_initial() -> AzLayoutDisplayValue { AzLayoutDisplayValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_layout_display_value_exact(variant_data: AzLayoutDisplayPtr) -> AzLayoutDisplayValue { AzLayoutDisplayValue::Exact(*az_layout_display_downcast(variant_data)) }
/// Destructor: Takes ownership of the `LayoutDisplayValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_layout_display_value_delete(object: &mut AzLayoutDisplayValue) { match object { AzLayoutDisplayValue::Auto => { }, AzLayoutDisplayValue::None => { }, AzLayoutDisplayValue::Inherit => { }, AzLayoutDisplayValue::Initial => { }, AzLayoutDisplayValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_layout_display_value_deep_copy(object: &AzLayoutDisplayValue) -> AzLayoutDisplayValue { object.clone() }

/// Re-export of rust-allocated (stack based) `LayoutFlexGrowValue` struct
pub type AzLayoutFlexGrowValueType = azul_css::CssPropertyValue::<LayoutFlexGrow>;
#[no_mangle] pub use AzLayoutFlexGrowValueType as AzLayoutFlexGrowValue;
#[inline] #[no_mangle] pub extern "C" fn az_layout_flex_grow_value_auto() -> AzLayoutFlexGrowValue { AzLayoutFlexGrowValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_layout_flex_grow_value_none() -> AzLayoutFlexGrowValue { AzLayoutFlexGrowValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_layout_flex_grow_value_inherit() -> AzLayoutFlexGrowValue { AzLayoutFlexGrowValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_layout_flex_grow_value_initial() -> AzLayoutFlexGrowValue { AzLayoutFlexGrowValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_layout_flex_grow_value_exact(variant_data: AzLayoutFlexGrowPtr) -> AzLayoutFlexGrowValue { AzLayoutFlexGrowValue::Exact(*az_layout_flex_grow_downcast(variant_data)) }
/// Destructor: Takes ownership of the `LayoutFlexGrowValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_layout_flex_grow_value_delete(object: &mut AzLayoutFlexGrowValue) { match object { AzLayoutFlexGrowValue::Auto => { }, AzLayoutFlexGrowValue::None => { }, AzLayoutFlexGrowValue::Inherit => { }, AzLayoutFlexGrowValue::Initial => { }, AzLayoutFlexGrowValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_layout_flex_grow_value_deep_copy(object: &AzLayoutFlexGrowValue) -> AzLayoutFlexGrowValue { object.clone() }

/// Re-export of rust-allocated (stack based) `LayoutFlexShrinkValue` struct
pub type AzLayoutFlexShrinkValueType = azul_css::CssPropertyValue::<LayoutFlexShrink>;
#[no_mangle] pub use AzLayoutFlexShrinkValueType as AzLayoutFlexShrinkValue;
#[inline] #[no_mangle] pub extern "C" fn az_layout_flex_shrink_value_auto() -> AzLayoutFlexShrinkValue { AzLayoutFlexShrinkValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_layout_flex_shrink_value_none() -> AzLayoutFlexShrinkValue { AzLayoutFlexShrinkValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_layout_flex_shrink_value_inherit() -> AzLayoutFlexShrinkValue { AzLayoutFlexShrinkValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_layout_flex_shrink_value_initial() -> AzLayoutFlexShrinkValue { AzLayoutFlexShrinkValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_layout_flex_shrink_value_exact(variant_data: AzLayoutFlexShrinkPtr) -> AzLayoutFlexShrinkValue { AzLayoutFlexShrinkValue::Exact(*az_layout_flex_shrink_downcast(variant_data)) }
/// Destructor: Takes ownership of the `LayoutFlexShrinkValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_layout_flex_shrink_value_delete(object: &mut AzLayoutFlexShrinkValue) { match object { AzLayoutFlexShrinkValue::Auto => { }, AzLayoutFlexShrinkValue::None => { }, AzLayoutFlexShrinkValue::Inherit => { }, AzLayoutFlexShrinkValue::Initial => { }, AzLayoutFlexShrinkValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_layout_flex_shrink_value_deep_copy(object: &AzLayoutFlexShrinkValue) -> AzLayoutFlexShrinkValue { object.clone() }

/// Re-export of rust-allocated (stack based) `LayoutFloatValue` struct
pub type AzLayoutFloatValueType = azul_css::CssPropertyValue::<LayoutFloat>;
#[no_mangle] pub use AzLayoutFloatValueType as AzLayoutFloatValue;
#[inline] #[no_mangle] pub extern "C" fn az_layout_float_value_auto() -> AzLayoutFloatValue { AzLayoutFloatValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_layout_float_value_none() -> AzLayoutFloatValue { AzLayoutFloatValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_layout_float_value_inherit() -> AzLayoutFloatValue { AzLayoutFloatValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_layout_float_value_initial() -> AzLayoutFloatValue { AzLayoutFloatValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_layout_float_value_exact(variant_data: AzLayoutFloatPtr) -> AzLayoutFloatValue { AzLayoutFloatValue::Exact(*az_layout_float_downcast(variant_data)) }
/// Destructor: Takes ownership of the `LayoutFloatValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_layout_float_value_delete(object: &mut AzLayoutFloatValue) { match object { AzLayoutFloatValue::Auto => { }, AzLayoutFloatValue::None => { }, AzLayoutFloatValue::Inherit => { }, AzLayoutFloatValue::Initial => { }, AzLayoutFloatValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_layout_float_value_deep_copy(object: &AzLayoutFloatValue) -> AzLayoutFloatValue { object.clone() }

/// Re-export of rust-allocated (stack based) `LayoutHeightValue` struct
pub type AzLayoutHeightValueType = azul_css::CssPropertyValue::<LayoutHeight>;
#[no_mangle] pub use AzLayoutHeightValueType as AzLayoutHeightValue;
#[inline] #[no_mangle] pub extern "C" fn az_layout_height_value_auto() -> AzLayoutHeightValue { AzLayoutHeightValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_layout_height_value_none() -> AzLayoutHeightValue { AzLayoutHeightValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_layout_height_value_inherit() -> AzLayoutHeightValue { AzLayoutHeightValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_layout_height_value_initial() -> AzLayoutHeightValue { AzLayoutHeightValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_layout_height_value_exact(variant_data: AzLayoutHeightPtr) -> AzLayoutHeightValue { AzLayoutHeightValue::Exact(*az_layout_height_downcast(variant_data)) }
/// Destructor: Takes ownership of the `LayoutHeightValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_layout_height_value_delete(object: &mut AzLayoutHeightValue) { match object { AzLayoutHeightValue::Auto => { }, AzLayoutHeightValue::None => { }, AzLayoutHeightValue::Inherit => { }, AzLayoutHeightValue::Initial => { }, AzLayoutHeightValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_layout_height_value_deep_copy(object: &AzLayoutHeightValue) -> AzLayoutHeightValue { object.clone() }

/// Re-export of rust-allocated (stack based) `LayoutJustifyContentValue` struct
pub type AzLayoutJustifyContentValueType = azul_css::CssPropertyValue::<LayoutJustifyContent>;
#[no_mangle] pub use AzLayoutJustifyContentValueType as AzLayoutJustifyContentValue;
#[inline] #[no_mangle] pub extern "C" fn az_layout_justify_content_value_auto() -> AzLayoutJustifyContentValue { AzLayoutJustifyContentValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_layout_justify_content_value_none() -> AzLayoutJustifyContentValue { AzLayoutJustifyContentValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_layout_justify_content_value_inherit() -> AzLayoutJustifyContentValue { AzLayoutJustifyContentValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_layout_justify_content_value_initial() -> AzLayoutJustifyContentValue { AzLayoutJustifyContentValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_layout_justify_content_value_exact(variant_data: AzLayoutJustifyContentPtr) -> AzLayoutJustifyContentValue { AzLayoutJustifyContentValue::Exact(*az_layout_justify_content_downcast(variant_data)) }
/// Destructor: Takes ownership of the `LayoutJustifyContentValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_layout_justify_content_value_delete(object: &mut AzLayoutJustifyContentValue) { match object { AzLayoutJustifyContentValue::Auto => { }, AzLayoutJustifyContentValue::None => { }, AzLayoutJustifyContentValue::Inherit => { }, AzLayoutJustifyContentValue::Initial => { }, AzLayoutJustifyContentValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_layout_justify_content_value_deep_copy(object: &AzLayoutJustifyContentValue) -> AzLayoutJustifyContentValue { object.clone() }

/// Re-export of rust-allocated (stack based) `LayoutLeftValue` struct
pub type AzLayoutLeftValueType = azul_css::CssPropertyValue::<LayoutLeft>;
#[no_mangle] pub use AzLayoutLeftValueType as AzLayoutLeftValue;
#[inline] #[no_mangle] pub extern "C" fn az_layout_left_value_auto() -> AzLayoutLeftValue { AzLayoutLeftValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_layout_left_value_none() -> AzLayoutLeftValue { AzLayoutLeftValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_layout_left_value_inherit() -> AzLayoutLeftValue { AzLayoutLeftValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_layout_left_value_initial() -> AzLayoutLeftValue { AzLayoutLeftValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_layout_left_value_exact(variant_data: AzLayoutLeftPtr) -> AzLayoutLeftValue { AzLayoutLeftValue::Exact(*az_layout_left_downcast(variant_data)) }
/// Destructor: Takes ownership of the `LayoutLeftValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_layout_left_value_delete(object: &mut AzLayoutLeftValue) { match object { AzLayoutLeftValue::Auto => { }, AzLayoutLeftValue::None => { }, AzLayoutLeftValue::Inherit => { }, AzLayoutLeftValue::Initial => { }, AzLayoutLeftValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_layout_left_value_deep_copy(object: &AzLayoutLeftValue) -> AzLayoutLeftValue { object.clone() }

/// Re-export of rust-allocated (stack based) `LayoutMarginBottomValue` struct
pub type AzLayoutMarginBottomValueType = azul_css::CssPropertyValue::<LayoutMarginBottom>;
#[no_mangle] pub use AzLayoutMarginBottomValueType as AzLayoutMarginBottomValue;
#[inline] #[no_mangle] pub extern "C" fn az_layout_margin_bottom_value_auto() -> AzLayoutMarginBottomValue { AzLayoutMarginBottomValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_layout_margin_bottom_value_none() -> AzLayoutMarginBottomValue { AzLayoutMarginBottomValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_layout_margin_bottom_value_inherit() -> AzLayoutMarginBottomValue { AzLayoutMarginBottomValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_layout_margin_bottom_value_initial() -> AzLayoutMarginBottomValue { AzLayoutMarginBottomValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_layout_margin_bottom_value_exact(variant_data: AzLayoutMarginBottomPtr) -> AzLayoutMarginBottomValue { AzLayoutMarginBottomValue::Exact(*az_layout_margin_bottom_downcast(variant_data)) }
/// Destructor: Takes ownership of the `LayoutMarginBottomValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_layout_margin_bottom_value_delete(object: &mut AzLayoutMarginBottomValue) { match object { AzLayoutMarginBottomValue::Auto => { }, AzLayoutMarginBottomValue::None => { }, AzLayoutMarginBottomValue::Inherit => { }, AzLayoutMarginBottomValue::Initial => { }, AzLayoutMarginBottomValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_layout_margin_bottom_value_deep_copy(object: &AzLayoutMarginBottomValue) -> AzLayoutMarginBottomValue { object.clone() }

/// Re-export of rust-allocated (stack based) `LayoutMarginLeftValue` struct
pub type AzLayoutMarginLeftValueType = azul_css::CssPropertyValue::<LayoutMarginLeft>;
#[no_mangle] pub use AzLayoutMarginLeftValueType as AzLayoutMarginLeftValue;
#[inline] #[no_mangle] pub extern "C" fn az_layout_margin_left_value_auto() -> AzLayoutMarginLeftValue { AzLayoutMarginLeftValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_layout_margin_left_value_none() -> AzLayoutMarginLeftValue { AzLayoutMarginLeftValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_layout_margin_left_value_inherit() -> AzLayoutMarginLeftValue { AzLayoutMarginLeftValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_layout_margin_left_value_initial() -> AzLayoutMarginLeftValue { AzLayoutMarginLeftValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_layout_margin_left_value_exact(variant_data: AzLayoutMarginLeftPtr) -> AzLayoutMarginLeftValue { AzLayoutMarginLeftValue::Exact(*az_layout_margin_left_downcast(variant_data)) }
/// Destructor: Takes ownership of the `LayoutMarginLeftValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_layout_margin_left_value_delete(object: &mut AzLayoutMarginLeftValue) { match object { AzLayoutMarginLeftValue::Auto => { }, AzLayoutMarginLeftValue::None => { }, AzLayoutMarginLeftValue::Inherit => { }, AzLayoutMarginLeftValue::Initial => { }, AzLayoutMarginLeftValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_layout_margin_left_value_deep_copy(object: &AzLayoutMarginLeftValue) -> AzLayoutMarginLeftValue { object.clone() }

/// Re-export of rust-allocated (stack based) `LayoutMarginRightValue` struct
pub type AzLayoutMarginRightValueType = azul_css::CssPropertyValue::<LayoutMarginRight>;
#[no_mangle] pub use AzLayoutMarginRightValueType as AzLayoutMarginRightValue;
#[inline] #[no_mangle] pub extern "C" fn az_layout_margin_right_value_auto() -> AzLayoutMarginRightValue { AzLayoutMarginRightValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_layout_margin_right_value_none() -> AzLayoutMarginRightValue { AzLayoutMarginRightValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_layout_margin_right_value_inherit() -> AzLayoutMarginRightValue { AzLayoutMarginRightValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_layout_margin_right_value_initial() -> AzLayoutMarginRightValue { AzLayoutMarginRightValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_layout_margin_right_value_exact(variant_data: AzLayoutMarginRightPtr) -> AzLayoutMarginRightValue { AzLayoutMarginRightValue::Exact(*az_layout_margin_right_downcast(variant_data)) }
/// Destructor: Takes ownership of the `LayoutMarginRightValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_layout_margin_right_value_delete(object: &mut AzLayoutMarginRightValue) { match object { AzLayoutMarginRightValue::Auto => { }, AzLayoutMarginRightValue::None => { }, AzLayoutMarginRightValue::Inherit => { }, AzLayoutMarginRightValue::Initial => { }, AzLayoutMarginRightValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_layout_margin_right_value_deep_copy(object: &AzLayoutMarginRightValue) -> AzLayoutMarginRightValue { object.clone() }

/// Re-export of rust-allocated (stack based) `LayoutMarginTopValue` struct
pub type AzLayoutMarginTopValueType = azul_css::CssPropertyValue::<LayoutMarginTop>;
#[no_mangle] pub use AzLayoutMarginTopValueType as AzLayoutMarginTopValue;
#[inline] #[no_mangle] pub extern "C" fn az_layout_margin_top_value_auto() -> AzLayoutMarginTopValue { AzLayoutMarginTopValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_layout_margin_top_value_none() -> AzLayoutMarginTopValue { AzLayoutMarginTopValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_layout_margin_top_value_inherit() -> AzLayoutMarginTopValue { AzLayoutMarginTopValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_layout_margin_top_value_initial() -> AzLayoutMarginTopValue { AzLayoutMarginTopValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_layout_margin_top_value_exact(variant_data: AzLayoutMarginTopPtr) -> AzLayoutMarginTopValue { AzLayoutMarginTopValue::Exact(*az_layout_margin_top_downcast(variant_data)) }
/// Destructor: Takes ownership of the `LayoutMarginTopValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_layout_margin_top_value_delete(object: &mut AzLayoutMarginTopValue) { match object { AzLayoutMarginTopValue::Auto => { }, AzLayoutMarginTopValue::None => { }, AzLayoutMarginTopValue::Inherit => { }, AzLayoutMarginTopValue::Initial => { }, AzLayoutMarginTopValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_layout_margin_top_value_deep_copy(object: &AzLayoutMarginTopValue) -> AzLayoutMarginTopValue { object.clone() }

/// Re-export of rust-allocated (stack based) `LayoutMaxHeightValue` struct
pub type AzLayoutMaxHeightValueType = azul_css::CssPropertyValue::<LayoutMaxHeight>;
#[no_mangle] pub use AzLayoutMaxHeightValueType as AzLayoutMaxHeightValue;
#[inline] #[no_mangle] pub extern "C" fn az_layout_max_height_value_auto() -> AzLayoutMaxHeightValue { AzLayoutMaxHeightValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_layout_max_height_value_none() -> AzLayoutMaxHeightValue { AzLayoutMaxHeightValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_layout_max_height_value_inherit() -> AzLayoutMaxHeightValue { AzLayoutMaxHeightValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_layout_max_height_value_initial() -> AzLayoutMaxHeightValue { AzLayoutMaxHeightValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_layout_max_height_value_exact(variant_data: AzLayoutMaxHeightPtr) -> AzLayoutMaxHeightValue { AzLayoutMaxHeightValue::Exact(*az_layout_max_height_downcast(variant_data)) }
/// Destructor: Takes ownership of the `LayoutMaxHeightValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_layout_max_height_value_delete(object: &mut AzLayoutMaxHeightValue) { match object { AzLayoutMaxHeightValue::Auto => { }, AzLayoutMaxHeightValue::None => { }, AzLayoutMaxHeightValue::Inherit => { }, AzLayoutMaxHeightValue::Initial => { }, AzLayoutMaxHeightValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_layout_max_height_value_deep_copy(object: &AzLayoutMaxHeightValue) -> AzLayoutMaxHeightValue { object.clone() }

/// Re-export of rust-allocated (stack based) `LayoutMaxWidthValue` struct
pub type AzLayoutMaxWidthValueType = azul_css::CssPropertyValue::<LayoutMaxWidth>;
#[no_mangle] pub use AzLayoutMaxWidthValueType as AzLayoutMaxWidthValue;
#[inline] #[no_mangle] pub extern "C" fn az_layout_max_width_value_auto() -> AzLayoutMaxWidthValue { AzLayoutMaxWidthValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_layout_max_width_value_none() -> AzLayoutMaxWidthValue { AzLayoutMaxWidthValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_layout_max_width_value_inherit() -> AzLayoutMaxWidthValue { AzLayoutMaxWidthValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_layout_max_width_value_initial() -> AzLayoutMaxWidthValue { AzLayoutMaxWidthValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_layout_max_width_value_exact(variant_data: AzLayoutMaxWidthPtr) -> AzLayoutMaxWidthValue { AzLayoutMaxWidthValue::Exact(*az_layout_max_width_downcast(variant_data)) }
/// Destructor: Takes ownership of the `LayoutMaxWidthValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_layout_max_width_value_delete(object: &mut AzLayoutMaxWidthValue) { match object { AzLayoutMaxWidthValue::Auto => { }, AzLayoutMaxWidthValue::None => { }, AzLayoutMaxWidthValue::Inherit => { }, AzLayoutMaxWidthValue::Initial => { }, AzLayoutMaxWidthValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_layout_max_width_value_deep_copy(object: &AzLayoutMaxWidthValue) -> AzLayoutMaxWidthValue { object.clone() }

/// Re-export of rust-allocated (stack based) `LayoutMinHeightValue` struct
pub type AzLayoutMinHeightValueType = azul_css::CssPropertyValue::<LayoutMinHeight>;
#[no_mangle] pub use AzLayoutMinHeightValueType as AzLayoutMinHeightValue;
#[inline] #[no_mangle] pub extern "C" fn az_layout_min_height_value_auto() -> AzLayoutMinHeightValue { AzLayoutMinHeightValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_layout_min_height_value_none() -> AzLayoutMinHeightValue { AzLayoutMinHeightValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_layout_min_height_value_inherit() -> AzLayoutMinHeightValue { AzLayoutMinHeightValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_layout_min_height_value_initial() -> AzLayoutMinHeightValue { AzLayoutMinHeightValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_layout_min_height_value_exact(variant_data: AzLayoutMinHeightPtr) -> AzLayoutMinHeightValue { AzLayoutMinHeightValue::Exact(*az_layout_min_height_downcast(variant_data)) }
/// Destructor: Takes ownership of the `LayoutMinHeightValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_layout_min_height_value_delete(object: &mut AzLayoutMinHeightValue) { match object { AzLayoutMinHeightValue::Auto => { }, AzLayoutMinHeightValue::None => { }, AzLayoutMinHeightValue::Inherit => { }, AzLayoutMinHeightValue::Initial => { }, AzLayoutMinHeightValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_layout_min_height_value_deep_copy(object: &AzLayoutMinHeightValue) -> AzLayoutMinHeightValue { object.clone() }

/// Re-export of rust-allocated (stack based) `LayoutMinWidthValue` struct
pub type AzLayoutMinWidthValueType = azul_css::CssPropertyValue::<LayoutMinWidth>;
#[no_mangle] pub use AzLayoutMinWidthValueType as AzLayoutMinWidthValue;
#[inline] #[no_mangle] pub extern "C" fn az_layout_min_width_value_auto() -> AzLayoutMinWidthValue { AzLayoutMinWidthValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_layout_min_width_value_none() -> AzLayoutMinWidthValue { AzLayoutMinWidthValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_layout_min_width_value_inherit() -> AzLayoutMinWidthValue { AzLayoutMinWidthValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_layout_min_width_value_initial() -> AzLayoutMinWidthValue { AzLayoutMinWidthValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_layout_min_width_value_exact(variant_data: AzLayoutMinWidthPtr) -> AzLayoutMinWidthValue { AzLayoutMinWidthValue::Exact(*az_layout_min_width_downcast(variant_data)) }
/// Destructor: Takes ownership of the `LayoutMinWidthValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_layout_min_width_value_delete(object: &mut AzLayoutMinWidthValue) { match object { AzLayoutMinWidthValue::Auto => { }, AzLayoutMinWidthValue::None => { }, AzLayoutMinWidthValue::Inherit => { }, AzLayoutMinWidthValue::Initial => { }, AzLayoutMinWidthValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_layout_min_width_value_deep_copy(object: &AzLayoutMinWidthValue) -> AzLayoutMinWidthValue { object.clone() }

/// Re-export of rust-allocated (stack based) `LayoutPaddingBottomValue` struct
pub type AzLayoutPaddingBottomValueType = azul_css::CssPropertyValue::<LayoutPaddingBottom>;
#[no_mangle] pub use AzLayoutPaddingBottomValueType as AzLayoutPaddingBottomValue;
#[inline] #[no_mangle] pub extern "C" fn az_layout_padding_bottom_value_auto() -> AzLayoutPaddingBottomValue { AzLayoutPaddingBottomValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_layout_padding_bottom_value_none() -> AzLayoutPaddingBottomValue { AzLayoutPaddingBottomValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_layout_padding_bottom_value_inherit() -> AzLayoutPaddingBottomValue { AzLayoutPaddingBottomValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_layout_padding_bottom_value_initial() -> AzLayoutPaddingBottomValue { AzLayoutPaddingBottomValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_layout_padding_bottom_value_exact(variant_data: AzLayoutPaddingBottomPtr) -> AzLayoutPaddingBottomValue { AzLayoutPaddingBottomValue::Exact(*az_layout_padding_bottom_downcast(variant_data)) }
/// Destructor: Takes ownership of the `LayoutPaddingBottomValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_layout_padding_bottom_value_delete(object: &mut AzLayoutPaddingBottomValue) { match object { AzLayoutPaddingBottomValue::Auto => { }, AzLayoutPaddingBottomValue::None => { }, AzLayoutPaddingBottomValue::Inherit => { }, AzLayoutPaddingBottomValue::Initial => { }, AzLayoutPaddingBottomValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_layout_padding_bottom_value_deep_copy(object: &AzLayoutPaddingBottomValue) -> AzLayoutPaddingBottomValue { object.clone() }

/// Re-export of rust-allocated (stack based) `LayoutPaddingLeftValue` struct
pub type AzLayoutPaddingLeftValueType = azul_css::CssPropertyValue::<LayoutPaddingLeft>;
#[no_mangle] pub use AzLayoutPaddingLeftValueType as AzLayoutPaddingLeftValue;
#[inline] #[no_mangle] pub extern "C" fn az_layout_padding_left_value_auto() -> AzLayoutPaddingLeftValue { AzLayoutPaddingLeftValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_layout_padding_left_value_none() -> AzLayoutPaddingLeftValue { AzLayoutPaddingLeftValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_layout_padding_left_value_inherit() -> AzLayoutPaddingLeftValue { AzLayoutPaddingLeftValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_layout_padding_left_value_initial() -> AzLayoutPaddingLeftValue { AzLayoutPaddingLeftValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_layout_padding_left_value_exact(variant_data: AzLayoutPaddingLeftPtr) -> AzLayoutPaddingLeftValue { AzLayoutPaddingLeftValue::Exact(*az_layout_padding_left_downcast(variant_data)) }
/// Destructor: Takes ownership of the `LayoutPaddingLeftValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_layout_padding_left_value_delete(object: &mut AzLayoutPaddingLeftValue) { match object { AzLayoutPaddingLeftValue::Auto => { }, AzLayoutPaddingLeftValue::None => { }, AzLayoutPaddingLeftValue::Inherit => { }, AzLayoutPaddingLeftValue::Initial => { }, AzLayoutPaddingLeftValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_layout_padding_left_value_deep_copy(object: &AzLayoutPaddingLeftValue) -> AzLayoutPaddingLeftValue { object.clone() }

/// Re-export of rust-allocated (stack based) `LayoutPaddingRightValue` struct
pub type AzLayoutPaddingRightValueType = azul_css::CssPropertyValue::<LayoutPaddingRight>;
#[no_mangle] pub use AzLayoutPaddingRightValueType as AzLayoutPaddingRightValue;
#[inline] #[no_mangle] pub extern "C" fn az_layout_padding_right_value_auto() -> AzLayoutPaddingRightValue { AzLayoutPaddingRightValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_layout_padding_right_value_none() -> AzLayoutPaddingRightValue { AzLayoutPaddingRightValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_layout_padding_right_value_inherit() -> AzLayoutPaddingRightValue { AzLayoutPaddingRightValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_layout_padding_right_value_initial() -> AzLayoutPaddingRightValue { AzLayoutPaddingRightValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_layout_padding_right_value_exact(variant_data: AzLayoutPaddingRightPtr) -> AzLayoutPaddingRightValue { AzLayoutPaddingRightValue::Exact(*az_layout_padding_right_downcast(variant_data)) }
/// Destructor: Takes ownership of the `LayoutPaddingRightValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_layout_padding_right_value_delete(object: &mut AzLayoutPaddingRightValue) { match object { AzLayoutPaddingRightValue::Auto => { }, AzLayoutPaddingRightValue::None => { }, AzLayoutPaddingRightValue::Inherit => { }, AzLayoutPaddingRightValue::Initial => { }, AzLayoutPaddingRightValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_layout_padding_right_value_deep_copy(object: &AzLayoutPaddingRightValue) -> AzLayoutPaddingRightValue { object.clone() }

/// Re-export of rust-allocated (stack based) `LayoutPaddingTopValue` struct
pub type AzLayoutPaddingTopValueType = azul_css::CssPropertyValue::<LayoutPaddingTop>;
#[no_mangle] pub use AzLayoutPaddingTopValueType as AzLayoutPaddingTopValue;
#[inline] #[no_mangle] pub extern "C" fn az_layout_padding_top_value_auto() -> AzLayoutPaddingTopValue { AzLayoutPaddingTopValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_layout_padding_top_value_none() -> AzLayoutPaddingTopValue { AzLayoutPaddingTopValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_layout_padding_top_value_inherit() -> AzLayoutPaddingTopValue { AzLayoutPaddingTopValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_layout_padding_top_value_initial() -> AzLayoutPaddingTopValue { AzLayoutPaddingTopValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_layout_padding_top_value_exact(variant_data: AzLayoutPaddingTopPtr) -> AzLayoutPaddingTopValue { AzLayoutPaddingTopValue::Exact(*az_layout_padding_top_downcast(variant_data)) }
/// Destructor: Takes ownership of the `LayoutPaddingTopValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_layout_padding_top_value_delete(object: &mut AzLayoutPaddingTopValue) { match object { AzLayoutPaddingTopValue::Auto => { }, AzLayoutPaddingTopValue::None => { }, AzLayoutPaddingTopValue::Inherit => { }, AzLayoutPaddingTopValue::Initial => { }, AzLayoutPaddingTopValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_layout_padding_top_value_deep_copy(object: &AzLayoutPaddingTopValue) -> AzLayoutPaddingTopValue { object.clone() }

/// Re-export of rust-allocated (stack based) `LayoutPositionValue` struct
pub type AzLayoutPositionValueType = azul_css::CssPropertyValue::<LayoutPosition>;
#[no_mangle] pub use AzLayoutPositionValueType as AzLayoutPositionValue;
#[inline] #[no_mangle] pub extern "C" fn az_layout_position_value_auto() -> AzLayoutPositionValue { AzLayoutPositionValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_layout_position_value_none() -> AzLayoutPositionValue { AzLayoutPositionValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_layout_position_value_inherit() -> AzLayoutPositionValue { AzLayoutPositionValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_layout_position_value_initial() -> AzLayoutPositionValue { AzLayoutPositionValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_layout_position_value_exact(variant_data: AzLayoutPositionPtr) -> AzLayoutPositionValue { AzLayoutPositionValue::Exact(*az_layout_position_downcast(variant_data)) }
/// Destructor: Takes ownership of the `LayoutPositionValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_layout_position_value_delete(object: &mut AzLayoutPositionValue) { match object { AzLayoutPositionValue::Auto => { }, AzLayoutPositionValue::None => { }, AzLayoutPositionValue::Inherit => { }, AzLayoutPositionValue::Initial => { }, AzLayoutPositionValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_layout_position_value_deep_copy(object: &AzLayoutPositionValue) -> AzLayoutPositionValue { object.clone() }

/// Re-export of rust-allocated (stack based) `LayoutRightValue` struct
pub type AzLayoutRightValueType = azul_css::CssPropertyValue::<LayoutRight>;
#[no_mangle] pub use AzLayoutRightValueType as AzLayoutRightValue;
#[inline] #[no_mangle] pub extern "C" fn az_layout_right_value_auto() -> AzLayoutRightValue { AzLayoutRightValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_layout_right_value_none() -> AzLayoutRightValue { AzLayoutRightValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_layout_right_value_inherit() -> AzLayoutRightValue { AzLayoutRightValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_layout_right_value_initial() -> AzLayoutRightValue { AzLayoutRightValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_layout_right_value_exact(variant_data: AzLayoutRightPtr) -> AzLayoutRightValue { AzLayoutRightValue::Exact(*az_layout_right_downcast(variant_data)) }
/// Destructor: Takes ownership of the `LayoutRightValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_layout_right_value_delete(object: &mut AzLayoutRightValue) { match object { AzLayoutRightValue::Auto => { }, AzLayoutRightValue::None => { }, AzLayoutRightValue::Inherit => { }, AzLayoutRightValue::Initial => { }, AzLayoutRightValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_layout_right_value_deep_copy(object: &AzLayoutRightValue) -> AzLayoutRightValue { object.clone() }

/// Re-export of rust-allocated (stack based) `LayoutTopValue` struct
pub type AzLayoutTopValueType = azul_css::CssPropertyValue::<LayoutTop>;
#[no_mangle] pub use AzLayoutTopValueType as AzLayoutTopValue;
#[inline] #[no_mangle] pub extern "C" fn az_layout_top_value_auto() -> AzLayoutTopValue { AzLayoutTopValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_layout_top_value_none() -> AzLayoutTopValue { AzLayoutTopValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_layout_top_value_inherit() -> AzLayoutTopValue { AzLayoutTopValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_layout_top_value_initial() -> AzLayoutTopValue { AzLayoutTopValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_layout_top_value_exact(variant_data: AzLayoutTopPtr) -> AzLayoutTopValue { AzLayoutTopValue::Exact(*az_layout_top_downcast(variant_data)) }
/// Destructor: Takes ownership of the `LayoutTopValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_layout_top_value_delete(object: &mut AzLayoutTopValue) { match object { AzLayoutTopValue::Auto => { }, AzLayoutTopValue::None => { }, AzLayoutTopValue::Inherit => { }, AzLayoutTopValue::Initial => { }, AzLayoutTopValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_layout_top_value_deep_copy(object: &AzLayoutTopValue) -> AzLayoutTopValue { object.clone() }

/// Re-export of rust-allocated (stack based) `LayoutWidthValue` struct
pub type AzLayoutWidthValueType = azul_css::CssPropertyValue::<LayoutWidth>;
#[no_mangle] pub use AzLayoutWidthValueType as AzLayoutWidthValue;
#[inline] #[no_mangle] pub extern "C" fn az_layout_width_value_auto() -> AzLayoutWidthValue { AzLayoutWidthValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_layout_width_value_none() -> AzLayoutWidthValue { AzLayoutWidthValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_layout_width_value_inherit() -> AzLayoutWidthValue { AzLayoutWidthValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_layout_width_value_initial() -> AzLayoutWidthValue { AzLayoutWidthValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_layout_width_value_exact(variant_data: AzLayoutWidthPtr) -> AzLayoutWidthValue { AzLayoutWidthValue::Exact(*az_layout_width_downcast(variant_data)) }
/// Destructor: Takes ownership of the `LayoutWidthValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_layout_width_value_delete(object: &mut AzLayoutWidthValue) { match object { AzLayoutWidthValue::Auto => { }, AzLayoutWidthValue::None => { }, AzLayoutWidthValue::Inherit => { }, AzLayoutWidthValue::Initial => { }, AzLayoutWidthValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_layout_width_value_deep_copy(object: &AzLayoutWidthValue) -> AzLayoutWidthValue { object.clone() }

/// Re-export of rust-allocated (stack based) `LayoutWrapValue` struct
pub type AzLayoutWrapValueType = azul_css::CssPropertyValue::<LayoutWrap>;
#[no_mangle] pub use AzLayoutWrapValueType as AzLayoutWrapValue;
#[inline] #[no_mangle] pub extern "C" fn az_layout_wrap_value_auto() -> AzLayoutWrapValue { AzLayoutWrapValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_layout_wrap_value_none() -> AzLayoutWrapValue { AzLayoutWrapValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_layout_wrap_value_inherit() -> AzLayoutWrapValue { AzLayoutWrapValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_layout_wrap_value_initial() -> AzLayoutWrapValue { AzLayoutWrapValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_layout_wrap_value_exact(variant_data: AzLayoutWrapPtr) -> AzLayoutWrapValue { AzLayoutWrapValue::Exact(*az_layout_wrap_downcast(variant_data)) }
/// Destructor: Takes ownership of the `LayoutWrapValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_layout_wrap_value_delete(object: &mut AzLayoutWrapValue) { match object { AzLayoutWrapValue::Auto => { }, AzLayoutWrapValue::None => { }, AzLayoutWrapValue::Inherit => { }, AzLayoutWrapValue::Initial => { }, AzLayoutWrapValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_layout_wrap_value_deep_copy(object: &AzLayoutWrapValue) -> AzLayoutWrapValue { object.clone() }

/// Re-export of rust-allocated (stack based) `OverflowValue` struct
pub type AzOverflowValueType = azul_css::CssPropertyValue::<Overflow>;
#[no_mangle] pub use AzOverflowValueType as AzOverflowValue;
#[inline] #[no_mangle] pub extern "C" fn az_overflow_value_auto() -> AzOverflowValue { AzOverflowValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_overflow_value_none() -> AzOverflowValue { AzOverflowValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_overflow_value_inherit() -> AzOverflowValue { AzOverflowValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_overflow_value_initial() -> AzOverflowValue { AzOverflowValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_overflow_value_exact(variant_data: AzOverflowPtr) -> AzOverflowValue { AzOverflowValue::Exact(*az_overflow_downcast(variant_data)) }
/// Destructor: Takes ownership of the `OverflowValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_overflow_value_delete(object: &mut AzOverflowValue) { match object { AzOverflowValue::Auto => { }, AzOverflowValue::None => { }, AzOverflowValue::Inherit => { }, AzOverflowValue::Initial => { }, AzOverflowValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_overflow_value_deep_copy(object: &AzOverflowValue) -> AzOverflowValue { object.clone() }

/// Re-export of rust-allocated (stack based) `StyleBackgroundContentValue` struct
pub type AzStyleBackgroundContentValueType = azul_css::CssPropertyValue::<StyleBackgroundContent>;
#[no_mangle] pub use AzStyleBackgroundContentValueType as AzStyleBackgroundContentValue;
#[inline] #[no_mangle] pub extern "C" fn az_style_background_content_value_auto() -> AzStyleBackgroundContentValue { AzStyleBackgroundContentValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_style_background_content_value_none() -> AzStyleBackgroundContentValue { AzStyleBackgroundContentValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_style_background_content_value_inherit() -> AzStyleBackgroundContentValue { AzStyleBackgroundContentValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_style_background_content_value_initial() -> AzStyleBackgroundContentValue { AzStyleBackgroundContentValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_style_background_content_value_exact(variant_data: AzStyleBackgroundContentPtr) -> AzStyleBackgroundContentValue { AzStyleBackgroundContentValue::Exact(*az_style_background_content_downcast(variant_data)) }
/// Destructor: Takes ownership of the `StyleBackgroundContentValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_style_background_content_value_delete(object: &mut AzStyleBackgroundContentValue) { match object { AzStyleBackgroundContentValue::Auto => { }, AzStyleBackgroundContentValue::None => { }, AzStyleBackgroundContentValue::Inherit => { }, AzStyleBackgroundContentValue::Initial => { }, AzStyleBackgroundContentValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_style_background_content_value_deep_copy(object: &AzStyleBackgroundContentValue) -> AzStyleBackgroundContentValue { object.clone() }

/// Re-export of rust-allocated (stack based) `StyleBackgroundPositionValue` struct
pub type AzStyleBackgroundPositionValueType = azul_css::CssPropertyValue::<StyleBackgroundPosition>;
#[no_mangle] pub use AzStyleBackgroundPositionValueType as AzStyleBackgroundPositionValue;
#[inline] #[no_mangle] pub extern "C" fn az_style_background_position_value_auto() -> AzStyleBackgroundPositionValue { AzStyleBackgroundPositionValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_style_background_position_value_none() -> AzStyleBackgroundPositionValue { AzStyleBackgroundPositionValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_style_background_position_value_inherit() -> AzStyleBackgroundPositionValue { AzStyleBackgroundPositionValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_style_background_position_value_initial() -> AzStyleBackgroundPositionValue { AzStyleBackgroundPositionValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_style_background_position_value_exact(variant_data: AzStyleBackgroundPositionPtr) -> AzStyleBackgroundPositionValue { AzStyleBackgroundPositionValue::Exact(*az_style_background_position_downcast(variant_data)) }
/// Destructor: Takes ownership of the `StyleBackgroundPositionValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_style_background_position_value_delete(object: &mut AzStyleBackgroundPositionValue) { match object { AzStyleBackgroundPositionValue::Auto => { }, AzStyleBackgroundPositionValue::None => { }, AzStyleBackgroundPositionValue::Inherit => { }, AzStyleBackgroundPositionValue::Initial => { }, AzStyleBackgroundPositionValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_style_background_position_value_deep_copy(object: &AzStyleBackgroundPositionValue) -> AzStyleBackgroundPositionValue { object.clone() }

/// Re-export of rust-allocated (stack based) `StyleBackgroundRepeatValue` struct
pub type AzStyleBackgroundRepeatValueType = azul_css::CssPropertyValue::<StyleBackgroundRepeat>;
#[no_mangle] pub use AzStyleBackgroundRepeatValueType as AzStyleBackgroundRepeatValue;
#[inline] #[no_mangle] pub extern "C" fn az_style_background_repeat_value_auto() -> AzStyleBackgroundRepeatValue { AzStyleBackgroundRepeatValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_style_background_repeat_value_none() -> AzStyleBackgroundRepeatValue { AzStyleBackgroundRepeatValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_style_background_repeat_value_inherit() -> AzStyleBackgroundRepeatValue { AzStyleBackgroundRepeatValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_style_background_repeat_value_initial() -> AzStyleBackgroundRepeatValue { AzStyleBackgroundRepeatValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_style_background_repeat_value_exact(variant_data: AzStyleBackgroundRepeatPtr) -> AzStyleBackgroundRepeatValue { AzStyleBackgroundRepeatValue::Exact(*az_style_background_repeat_downcast(variant_data)) }
/// Destructor: Takes ownership of the `StyleBackgroundRepeatValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_style_background_repeat_value_delete(object: &mut AzStyleBackgroundRepeatValue) { match object { AzStyleBackgroundRepeatValue::Auto => { }, AzStyleBackgroundRepeatValue::None => { }, AzStyleBackgroundRepeatValue::Inherit => { }, AzStyleBackgroundRepeatValue::Initial => { }, AzStyleBackgroundRepeatValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_style_background_repeat_value_deep_copy(object: &AzStyleBackgroundRepeatValue) -> AzStyleBackgroundRepeatValue { object.clone() }

/// Re-export of rust-allocated (stack based) `StyleBackgroundSizeValue` struct
pub type AzStyleBackgroundSizeValueType = azul_css::CssPropertyValue::<StyleBackgroundSize>;
#[no_mangle] pub use AzStyleBackgroundSizeValueType as AzStyleBackgroundSizeValue;
#[inline] #[no_mangle] pub extern "C" fn az_style_background_size_value_auto() -> AzStyleBackgroundSizeValue { AzStyleBackgroundSizeValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_style_background_size_value_none() -> AzStyleBackgroundSizeValue { AzStyleBackgroundSizeValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_style_background_size_value_inherit() -> AzStyleBackgroundSizeValue { AzStyleBackgroundSizeValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_style_background_size_value_initial() -> AzStyleBackgroundSizeValue { AzStyleBackgroundSizeValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_style_background_size_value_exact(variant_data: AzStyleBackgroundSizePtr) -> AzStyleBackgroundSizeValue { AzStyleBackgroundSizeValue::Exact(*az_style_background_size_downcast(variant_data)) }
/// Destructor: Takes ownership of the `StyleBackgroundSizeValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_style_background_size_value_delete(object: &mut AzStyleBackgroundSizeValue) { match object { AzStyleBackgroundSizeValue::Auto => { }, AzStyleBackgroundSizeValue::None => { }, AzStyleBackgroundSizeValue::Inherit => { }, AzStyleBackgroundSizeValue::Initial => { }, AzStyleBackgroundSizeValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_style_background_size_value_deep_copy(object: &AzStyleBackgroundSizeValue) -> AzStyleBackgroundSizeValue { object.clone() }

/// Re-export of rust-allocated (stack based) `StyleBorderBottomColorValue` struct
pub type AzStyleBorderBottomColorValueType = azul_css::CssPropertyValue::<StyleBorderBottomColor>;
#[no_mangle] pub use AzStyleBorderBottomColorValueType as AzStyleBorderBottomColorValue;
#[inline] #[no_mangle] pub extern "C" fn az_style_border_bottom_color_value_auto() -> AzStyleBorderBottomColorValue { AzStyleBorderBottomColorValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_bottom_color_value_none() -> AzStyleBorderBottomColorValue { AzStyleBorderBottomColorValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_bottom_color_value_inherit() -> AzStyleBorderBottomColorValue { AzStyleBorderBottomColorValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_bottom_color_value_initial() -> AzStyleBorderBottomColorValue { AzStyleBorderBottomColorValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_bottom_color_value_exact(variant_data: AzStyleBorderBottomColorPtr) -> AzStyleBorderBottomColorValue { AzStyleBorderBottomColorValue::Exact(*az_style_border_bottom_color_downcast(variant_data)) }
/// Destructor: Takes ownership of the `StyleBorderBottomColorValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_style_border_bottom_color_value_delete(object: &mut AzStyleBorderBottomColorValue) { match object { AzStyleBorderBottomColorValue::Auto => { }, AzStyleBorderBottomColorValue::None => { }, AzStyleBorderBottomColorValue::Inherit => { }, AzStyleBorderBottomColorValue::Initial => { }, AzStyleBorderBottomColorValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_style_border_bottom_color_value_deep_copy(object: &AzStyleBorderBottomColorValue) -> AzStyleBorderBottomColorValue { object.clone() }

/// Re-export of rust-allocated (stack based) `StyleBorderBottomLeftRadiusValue` struct
pub type AzStyleBorderBottomLeftRadiusValueType = azul_css::CssPropertyValue::<StyleBorderBottomLeftRadius>;
#[no_mangle] pub use AzStyleBorderBottomLeftRadiusValueType as AzStyleBorderBottomLeftRadiusValue;
#[inline] #[no_mangle] pub extern "C" fn az_style_border_bottom_left_radius_value_auto() -> AzStyleBorderBottomLeftRadiusValue { AzStyleBorderBottomLeftRadiusValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_bottom_left_radius_value_none() -> AzStyleBorderBottomLeftRadiusValue { AzStyleBorderBottomLeftRadiusValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_bottom_left_radius_value_inherit() -> AzStyleBorderBottomLeftRadiusValue { AzStyleBorderBottomLeftRadiusValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_bottom_left_radius_value_initial() -> AzStyleBorderBottomLeftRadiusValue { AzStyleBorderBottomLeftRadiusValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_bottom_left_radius_value_exact(variant_data: AzStyleBorderBottomLeftRadiusPtr) -> AzStyleBorderBottomLeftRadiusValue { AzStyleBorderBottomLeftRadiusValue::Exact(*az_style_border_bottom_left_radius_downcast(variant_data)) }
/// Destructor: Takes ownership of the `StyleBorderBottomLeftRadiusValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_style_border_bottom_left_radius_value_delete(object: &mut AzStyleBorderBottomLeftRadiusValue) { match object { AzStyleBorderBottomLeftRadiusValue::Auto => { }, AzStyleBorderBottomLeftRadiusValue::None => { }, AzStyleBorderBottomLeftRadiusValue::Inherit => { }, AzStyleBorderBottomLeftRadiusValue::Initial => { }, AzStyleBorderBottomLeftRadiusValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_style_border_bottom_left_radius_value_deep_copy(object: &AzStyleBorderBottomLeftRadiusValue) -> AzStyleBorderBottomLeftRadiusValue { object.clone() }

/// Re-export of rust-allocated (stack based) `StyleBorderBottomRightRadiusValue` struct
pub type AzStyleBorderBottomRightRadiusValueType = azul_css::CssPropertyValue::<StyleBorderBottomRightRadius>;
#[no_mangle] pub use AzStyleBorderBottomRightRadiusValueType as AzStyleBorderBottomRightRadiusValue;
#[inline] #[no_mangle] pub extern "C" fn az_style_border_bottom_right_radius_value_auto() -> AzStyleBorderBottomRightRadiusValue { AzStyleBorderBottomRightRadiusValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_bottom_right_radius_value_none() -> AzStyleBorderBottomRightRadiusValue { AzStyleBorderBottomRightRadiusValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_bottom_right_radius_value_inherit() -> AzStyleBorderBottomRightRadiusValue { AzStyleBorderBottomRightRadiusValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_bottom_right_radius_value_initial() -> AzStyleBorderBottomRightRadiusValue { AzStyleBorderBottomRightRadiusValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_bottom_right_radius_value_exact(variant_data: AzStyleBorderBottomRightRadiusPtr) -> AzStyleBorderBottomRightRadiusValue { AzStyleBorderBottomRightRadiusValue::Exact(*az_style_border_bottom_right_radius_downcast(variant_data)) }
/// Destructor: Takes ownership of the `StyleBorderBottomRightRadiusValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_style_border_bottom_right_radius_value_delete(object: &mut AzStyleBorderBottomRightRadiusValue) { match object { AzStyleBorderBottomRightRadiusValue::Auto => { }, AzStyleBorderBottomRightRadiusValue::None => { }, AzStyleBorderBottomRightRadiusValue::Inherit => { }, AzStyleBorderBottomRightRadiusValue::Initial => { }, AzStyleBorderBottomRightRadiusValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_style_border_bottom_right_radius_value_deep_copy(object: &AzStyleBorderBottomRightRadiusValue) -> AzStyleBorderBottomRightRadiusValue { object.clone() }

/// Re-export of rust-allocated (stack based) `StyleBorderBottomStyleValue` struct
pub type AzStyleBorderBottomStyleValueType = azul_css::CssPropertyValue::<StyleBorderBottomStyle>;
#[no_mangle] pub use AzStyleBorderBottomStyleValueType as AzStyleBorderBottomStyleValue;
#[inline] #[no_mangle] pub extern "C" fn az_style_border_bottom_style_value_auto() -> AzStyleBorderBottomStyleValue { AzStyleBorderBottomStyleValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_bottom_style_value_none() -> AzStyleBorderBottomStyleValue { AzStyleBorderBottomStyleValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_bottom_style_value_inherit() -> AzStyleBorderBottomStyleValue { AzStyleBorderBottomStyleValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_bottom_style_value_initial() -> AzStyleBorderBottomStyleValue { AzStyleBorderBottomStyleValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_bottom_style_value_exact(variant_data: AzStyleBorderBottomStylePtr) -> AzStyleBorderBottomStyleValue { AzStyleBorderBottomStyleValue::Exact(*az_style_border_bottom_style_downcast(variant_data)) }
/// Destructor: Takes ownership of the `StyleBorderBottomStyleValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_style_border_bottom_style_value_delete(object: &mut AzStyleBorderBottomStyleValue) { match object { AzStyleBorderBottomStyleValue::Auto => { }, AzStyleBorderBottomStyleValue::None => { }, AzStyleBorderBottomStyleValue::Inherit => { }, AzStyleBorderBottomStyleValue::Initial => { }, AzStyleBorderBottomStyleValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_style_border_bottom_style_value_deep_copy(object: &AzStyleBorderBottomStyleValue) -> AzStyleBorderBottomStyleValue { object.clone() }

/// Re-export of rust-allocated (stack based) `StyleBorderBottomWidthValue` struct
pub type AzStyleBorderBottomWidthValueType = azul_css::CssPropertyValue::<StyleBorderBottomWidth>;
#[no_mangle] pub use AzStyleBorderBottomWidthValueType as AzStyleBorderBottomWidthValue;
#[inline] #[no_mangle] pub extern "C" fn az_style_border_bottom_width_value_auto() -> AzStyleBorderBottomWidthValue { AzStyleBorderBottomWidthValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_bottom_width_value_none() -> AzStyleBorderBottomWidthValue { AzStyleBorderBottomWidthValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_bottom_width_value_inherit() -> AzStyleBorderBottomWidthValue { AzStyleBorderBottomWidthValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_bottom_width_value_initial() -> AzStyleBorderBottomWidthValue { AzStyleBorderBottomWidthValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_bottom_width_value_exact(variant_data: AzStyleBorderBottomWidthPtr) -> AzStyleBorderBottomWidthValue { AzStyleBorderBottomWidthValue::Exact(*az_style_border_bottom_width_downcast(variant_data)) }
/// Destructor: Takes ownership of the `StyleBorderBottomWidthValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_style_border_bottom_width_value_delete(object: &mut AzStyleBorderBottomWidthValue) { match object { AzStyleBorderBottomWidthValue::Auto => { }, AzStyleBorderBottomWidthValue::None => { }, AzStyleBorderBottomWidthValue::Inherit => { }, AzStyleBorderBottomWidthValue::Initial => { }, AzStyleBorderBottomWidthValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_style_border_bottom_width_value_deep_copy(object: &AzStyleBorderBottomWidthValue) -> AzStyleBorderBottomWidthValue { object.clone() }

/// Re-export of rust-allocated (stack based) `StyleBorderLeftColorValue` struct
pub type AzStyleBorderLeftColorValueType = azul_css::CssPropertyValue::<StyleBorderLeftColor>;
#[no_mangle] pub use AzStyleBorderLeftColorValueType as AzStyleBorderLeftColorValue;
#[inline] #[no_mangle] pub extern "C" fn az_style_border_left_color_value_auto() -> AzStyleBorderLeftColorValue { AzStyleBorderLeftColorValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_left_color_value_none() -> AzStyleBorderLeftColorValue { AzStyleBorderLeftColorValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_left_color_value_inherit() -> AzStyleBorderLeftColorValue { AzStyleBorderLeftColorValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_left_color_value_initial() -> AzStyleBorderLeftColorValue { AzStyleBorderLeftColorValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_left_color_value_exact(variant_data: AzStyleBorderLeftColorPtr) -> AzStyleBorderLeftColorValue { AzStyleBorderLeftColorValue::Exact(*az_style_border_left_color_downcast(variant_data)) }
/// Destructor: Takes ownership of the `StyleBorderLeftColorValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_style_border_left_color_value_delete(object: &mut AzStyleBorderLeftColorValue) { match object { AzStyleBorderLeftColorValue::Auto => { }, AzStyleBorderLeftColorValue::None => { }, AzStyleBorderLeftColorValue::Inherit => { }, AzStyleBorderLeftColorValue::Initial => { }, AzStyleBorderLeftColorValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_style_border_left_color_value_deep_copy(object: &AzStyleBorderLeftColorValue) -> AzStyleBorderLeftColorValue { object.clone() }

/// Re-export of rust-allocated (stack based) `StyleBorderLeftStyleValue` struct
pub type AzStyleBorderLeftStyleValueType = azul_css::CssPropertyValue::<StyleBorderLeftStyle>;
#[no_mangle] pub use AzStyleBorderLeftStyleValueType as AzStyleBorderLeftStyleValue;
#[inline] #[no_mangle] pub extern "C" fn az_style_border_left_style_value_auto() -> AzStyleBorderLeftStyleValue { AzStyleBorderLeftStyleValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_left_style_value_none() -> AzStyleBorderLeftStyleValue { AzStyleBorderLeftStyleValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_left_style_value_inherit() -> AzStyleBorderLeftStyleValue { AzStyleBorderLeftStyleValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_left_style_value_initial() -> AzStyleBorderLeftStyleValue { AzStyleBorderLeftStyleValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_left_style_value_exact(variant_data: AzStyleBorderLeftStylePtr) -> AzStyleBorderLeftStyleValue { AzStyleBorderLeftStyleValue::Exact(*az_style_border_left_style_downcast(variant_data)) }
/// Destructor: Takes ownership of the `StyleBorderLeftStyleValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_style_border_left_style_value_delete(object: &mut AzStyleBorderLeftStyleValue) { match object { AzStyleBorderLeftStyleValue::Auto => { }, AzStyleBorderLeftStyleValue::None => { }, AzStyleBorderLeftStyleValue::Inherit => { }, AzStyleBorderLeftStyleValue::Initial => { }, AzStyleBorderLeftStyleValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_style_border_left_style_value_deep_copy(object: &AzStyleBorderLeftStyleValue) -> AzStyleBorderLeftStyleValue { object.clone() }

/// Re-export of rust-allocated (stack based) `StyleBorderLeftWidthValue` struct
pub type AzStyleBorderLeftWidthValueType = azul_css::CssPropertyValue::<StyleBorderLeftWidth>;
#[no_mangle] pub use AzStyleBorderLeftWidthValueType as AzStyleBorderLeftWidthValue;
#[inline] #[no_mangle] pub extern "C" fn az_style_border_left_width_value_auto() -> AzStyleBorderLeftWidthValue { AzStyleBorderLeftWidthValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_left_width_value_none() -> AzStyleBorderLeftWidthValue { AzStyleBorderLeftWidthValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_left_width_value_inherit() -> AzStyleBorderLeftWidthValue { AzStyleBorderLeftWidthValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_left_width_value_initial() -> AzStyleBorderLeftWidthValue { AzStyleBorderLeftWidthValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_left_width_value_exact(variant_data: AzStyleBorderLeftWidthPtr) -> AzStyleBorderLeftWidthValue { AzStyleBorderLeftWidthValue::Exact(*az_style_border_left_width_downcast(variant_data)) }
/// Destructor: Takes ownership of the `StyleBorderLeftWidthValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_style_border_left_width_value_delete(object: &mut AzStyleBorderLeftWidthValue) { match object { AzStyleBorderLeftWidthValue::Auto => { }, AzStyleBorderLeftWidthValue::None => { }, AzStyleBorderLeftWidthValue::Inherit => { }, AzStyleBorderLeftWidthValue::Initial => { }, AzStyleBorderLeftWidthValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_style_border_left_width_value_deep_copy(object: &AzStyleBorderLeftWidthValue) -> AzStyleBorderLeftWidthValue { object.clone() }

/// Re-export of rust-allocated (stack based) `StyleBorderRightColorValue` struct
pub type AzStyleBorderRightColorValueType = azul_css::CssPropertyValue::<StyleBorderRightColor>;
#[no_mangle] pub use AzStyleBorderRightColorValueType as AzStyleBorderRightColorValue;
#[inline] #[no_mangle] pub extern "C" fn az_style_border_right_color_value_auto() -> AzStyleBorderRightColorValue { AzStyleBorderRightColorValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_right_color_value_none() -> AzStyleBorderRightColorValue { AzStyleBorderRightColorValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_right_color_value_inherit() -> AzStyleBorderRightColorValue { AzStyleBorderRightColorValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_right_color_value_initial() -> AzStyleBorderRightColorValue { AzStyleBorderRightColorValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_right_color_value_exact(variant_data: AzStyleBorderRightColorPtr) -> AzStyleBorderRightColorValue { AzStyleBorderRightColorValue::Exact(*az_style_border_right_color_downcast(variant_data)) }
/// Destructor: Takes ownership of the `StyleBorderRightColorValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_style_border_right_color_value_delete(object: &mut AzStyleBorderRightColorValue) { match object { AzStyleBorderRightColorValue::Auto => { }, AzStyleBorderRightColorValue::None => { }, AzStyleBorderRightColorValue::Inherit => { }, AzStyleBorderRightColorValue::Initial => { }, AzStyleBorderRightColorValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_style_border_right_color_value_deep_copy(object: &AzStyleBorderRightColorValue) -> AzStyleBorderRightColorValue { object.clone() }

/// Re-export of rust-allocated (stack based) `StyleBorderRightStyleValue` struct
pub type AzStyleBorderRightStyleValueType = azul_css::CssPropertyValue::<StyleBorderRightStyle>;
#[no_mangle] pub use AzStyleBorderRightStyleValueType as AzStyleBorderRightStyleValue;
#[inline] #[no_mangle] pub extern "C" fn az_style_border_right_style_value_auto() -> AzStyleBorderRightStyleValue { AzStyleBorderRightStyleValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_right_style_value_none() -> AzStyleBorderRightStyleValue { AzStyleBorderRightStyleValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_right_style_value_inherit() -> AzStyleBorderRightStyleValue { AzStyleBorderRightStyleValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_right_style_value_initial() -> AzStyleBorderRightStyleValue { AzStyleBorderRightStyleValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_right_style_value_exact(variant_data: AzStyleBorderRightStylePtr) -> AzStyleBorderRightStyleValue { AzStyleBorderRightStyleValue::Exact(*az_style_border_right_style_downcast(variant_data)) }
/// Destructor: Takes ownership of the `StyleBorderRightStyleValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_style_border_right_style_value_delete(object: &mut AzStyleBorderRightStyleValue) { match object { AzStyleBorderRightStyleValue::Auto => { }, AzStyleBorderRightStyleValue::None => { }, AzStyleBorderRightStyleValue::Inherit => { }, AzStyleBorderRightStyleValue::Initial => { }, AzStyleBorderRightStyleValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_style_border_right_style_value_deep_copy(object: &AzStyleBorderRightStyleValue) -> AzStyleBorderRightStyleValue { object.clone() }

/// Re-export of rust-allocated (stack based) `StyleBorderRightWidthValue` struct
pub type AzStyleBorderRightWidthValueType = azul_css::CssPropertyValue::<StyleBorderRightWidth>;
#[no_mangle] pub use AzStyleBorderRightWidthValueType as AzStyleBorderRightWidthValue;
#[inline] #[no_mangle] pub extern "C" fn az_style_border_right_width_value_auto() -> AzStyleBorderRightWidthValue { AzStyleBorderRightWidthValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_right_width_value_none() -> AzStyleBorderRightWidthValue { AzStyleBorderRightWidthValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_right_width_value_inherit() -> AzStyleBorderRightWidthValue { AzStyleBorderRightWidthValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_right_width_value_initial() -> AzStyleBorderRightWidthValue { AzStyleBorderRightWidthValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_right_width_value_exact(variant_data: AzStyleBorderRightWidthPtr) -> AzStyleBorderRightWidthValue { AzStyleBorderRightWidthValue::Exact(*az_style_border_right_width_downcast(variant_data)) }
/// Destructor: Takes ownership of the `StyleBorderRightWidthValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_style_border_right_width_value_delete(object: &mut AzStyleBorderRightWidthValue) { match object { AzStyleBorderRightWidthValue::Auto => { }, AzStyleBorderRightWidthValue::None => { }, AzStyleBorderRightWidthValue::Inherit => { }, AzStyleBorderRightWidthValue::Initial => { }, AzStyleBorderRightWidthValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_style_border_right_width_value_deep_copy(object: &AzStyleBorderRightWidthValue) -> AzStyleBorderRightWidthValue { object.clone() }

/// Re-export of rust-allocated (stack based) `StyleBorderTopColorValue` struct
pub type AzStyleBorderTopColorValueType = azul_css::CssPropertyValue::<StyleBorderTopColor>;
#[no_mangle] pub use AzStyleBorderTopColorValueType as AzStyleBorderTopColorValue;
#[inline] #[no_mangle] pub extern "C" fn az_style_border_top_color_value_auto() -> AzStyleBorderTopColorValue { AzStyleBorderTopColorValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_top_color_value_none() -> AzStyleBorderTopColorValue { AzStyleBorderTopColorValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_top_color_value_inherit() -> AzStyleBorderTopColorValue { AzStyleBorderTopColorValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_top_color_value_initial() -> AzStyleBorderTopColorValue { AzStyleBorderTopColorValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_top_color_value_exact(variant_data: AzStyleBorderTopColorPtr) -> AzStyleBorderTopColorValue { AzStyleBorderTopColorValue::Exact(*az_style_border_top_color_downcast(variant_data)) }
/// Destructor: Takes ownership of the `StyleBorderTopColorValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_style_border_top_color_value_delete(object: &mut AzStyleBorderTopColorValue) { match object { AzStyleBorderTopColorValue::Auto => { }, AzStyleBorderTopColorValue::None => { }, AzStyleBorderTopColorValue::Inherit => { }, AzStyleBorderTopColorValue::Initial => { }, AzStyleBorderTopColorValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_style_border_top_color_value_deep_copy(object: &AzStyleBorderTopColorValue) -> AzStyleBorderTopColorValue { object.clone() }

/// Re-export of rust-allocated (stack based) `StyleBorderTopLeftRadiusValue` struct
pub type AzStyleBorderTopLeftRadiusValueType = azul_css::CssPropertyValue::<StyleBorderTopLeftRadius>;
#[no_mangle] pub use AzStyleBorderTopLeftRadiusValueType as AzStyleBorderTopLeftRadiusValue;
#[inline] #[no_mangle] pub extern "C" fn az_style_border_top_left_radius_value_auto() -> AzStyleBorderTopLeftRadiusValue { AzStyleBorderTopLeftRadiusValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_top_left_radius_value_none() -> AzStyleBorderTopLeftRadiusValue { AzStyleBorderTopLeftRadiusValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_top_left_radius_value_inherit() -> AzStyleBorderTopLeftRadiusValue { AzStyleBorderTopLeftRadiusValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_top_left_radius_value_initial() -> AzStyleBorderTopLeftRadiusValue { AzStyleBorderTopLeftRadiusValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_top_left_radius_value_exact(variant_data: AzStyleBorderTopLeftRadiusPtr) -> AzStyleBorderTopLeftRadiusValue { AzStyleBorderTopLeftRadiusValue::Exact(*az_style_border_top_left_radius_downcast(variant_data)) }
/// Destructor: Takes ownership of the `StyleBorderTopLeftRadiusValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_style_border_top_left_radius_value_delete(object: &mut AzStyleBorderTopLeftRadiusValue) { match object { AzStyleBorderTopLeftRadiusValue::Auto => { }, AzStyleBorderTopLeftRadiusValue::None => { }, AzStyleBorderTopLeftRadiusValue::Inherit => { }, AzStyleBorderTopLeftRadiusValue::Initial => { }, AzStyleBorderTopLeftRadiusValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_style_border_top_left_radius_value_deep_copy(object: &AzStyleBorderTopLeftRadiusValue) -> AzStyleBorderTopLeftRadiusValue { object.clone() }

/// Re-export of rust-allocated (stack based) `StyleBorderTopRightRadiusValue` struct
pub type AzStyleBorderTopRightRadiusValueType = azul_css::CssPropertyValue::<StyleBorderTopRightRadius>;
#[no_mangle] pub use AzStyleBorderTopRightRadiusValueType as AzStyleBorderTopRightRadiusValue;
#[inline] #[no_mangle] pub extern "C" fn az_style_border_top_right_radius_value_auto() -> AzStyleBorderTopRightRadiusValue { AzStyleBorderTopRightRadiusValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_top_right_radius_value_none() -> AzStyleBorderTopRightRadiusValue { AzStyleBorderTopRightRadiusValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_top_right_radius_value_inherit() -> AzStyleBorderTopRightRadiusValue { AzStyleBorderTopRightRadiusValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_top_right_radius_value_initial() -> AzStyleBorderTopRightRadiusValue { AzStyleBorderTopRightRadiusValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_top_right_radius_value_exact(variant_data: AzStyleBorderTopRightRadiusPtr) -> AzStyleBorderTopRightRadiusValue { AzStyleBorderTopRightRadiusValue::Exact(*az_style_border_top_right_radius_downcast(variant_data)) }
/// Destructor: Takes ownership of the `StyleBorderTopRightRadiusValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_style_border_top_right_radius_value_delete(object: &mut AzStyleBorderTopRightRadiusValue) { match object { AzStyleBorderTopRightRadiusValue::Auto => { }, AzStyleBorderTopRightRadiusValue::None => { }, AzStyleBorderTopRightRadiusValue::Inherit => { }, AzStyleBorderTopRightRadiusValue::Initial => { }, AzStyleBorderTopRightRadiusValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_style_border_top_right_radius_value_deep_copy(object: &AzStyleBorderTopRightRadiusValue) -> AzStyleBorderTopRightRadiusValue { object.clone() }

/// Re-export of rust-allocated (stack based) `StyleBorderTopStyleValue` struct
pub type AzStyleBorderTopStyleValueType = azul_css::CssPropertyValue::<StyleBorderTopStyle>;
#[no_mangle] pub use AzStyleBorderTopStyleValueType as AzStyleBorderTopStyleValue;
#[inline] #[no_mangle] pub extern "C" fn az_style_border_top_style_value_auto() -> AzStyleBorderTopStyleValue { AzStyleBorderTopStyleValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_top_style_value_none() -> AzStyleBorderTopStyleValue { AzStyleBorderTopStyleValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_top_style_value_inherit() -> AzStyleBorderTopStyleValue { AzStyleBorderTopStyleValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_top_style_value_initial() -> AzStyleBorderTopStyleValue { AzStyleBorderTopStyleValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_top_style_value_exact(variant_data: AzStyleBorderTopStylePtr) -> AzStyleBorderTopStyleValue { AzStyleBorderTopStyleValue::Exact(*az_style_border_top_style_downcast(variant_data)) }
/// Destructor: Takes ownership of the `StyleBorderTopStyleValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_style_border_top_style_value_delete(object: &mut AzStyleBorderTopStyleValue) { match object { AzStyleBorderTopStyleValue::Auto => { }, AzStyleBorderTopStyleValue::None => { }, AzStyleBorderTopStyleValue::Inherit => { }, AzStyleBorderTopStyleValue::Initial => { }, AzStyleBorderTopStyleValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_style_border_top_style_value_deep_copy(object: &AzStyleBorderTopStyleValue) -> AzStyleBorderTopStyleValue { object.clone() }

/// Re-export of rust-allocated (stack based) `StyleBorderTopWidthValue` struct
pub type AzStyleBorderTopWidthValueType = azul_css::CssPropertyValue::<StyleBorderTopWidth>;
#[no_mangle] pub use AzStyleBorderTopWidthValueType as AzStyleBorderTopWidthValue;
#[inline] #[no_mangle] pub extern "C" fn az_style_border_top_width_value_auto() -> AzStyleBorderTopWidthValue { AzStyleBorderTopWidthValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_top_width_value_none() -> AzStyleBorderTopWidthValue { AzStyleBorderTopWidthValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_top_width_value_inherit() -> AzStyleBorderTopWidthValue { AzStyleBorderTopWidthValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_top_width_value_initial() -> AzStyleBorderTopWidthValue { AzStyleBorderTopWidthValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_style_border_top_width_value_exact(variant_data: AzStyleBorderTopWidthPtr) -> AzStyleBorderTopWidthValue { AzStyleBorderTopWidthValue::Exact(*az_style_border_top_width_downcast(variant_data)) }
/// Destructor: Takes ownership of the `StyleBorderTopWidthValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_style_border_top_width_value_delete(object: &mut AzStyleBorderTopWidthValue) { match object { AzStyleBorderTopWidthValue::Auto => { }, AzStyleBorderTopWidthValue::None => { }, AzStyleBorderTopWidthValue::Inherit => { }, AzStyleBorderTopWidthValue::Initial => { }, AzStyleBorderTopWidthValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_style_border_top_width_value_deep_copy(object: &AzStyleBorderTopWidthValue) -> AzStyleBorderTopWidthValue { object.clone() }

/// Re-export of rust-allocated (stack based) `StyleCursorValue` struct
pub type AzStyleCursorValueType = azul_css::CssPropertyValue::<StyleCursor>;
#[no_mangle] pub use AzStyleCursorValueType as AzStyleCursorValue;
#[inline] #[no_mangle] pub extern "C" fn az_style_cursor_value_auto() -> AzStyleCursorValue { AzStyleCursorValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_style_cursor_value_none() -> AzStyleCursorValue { AzStyleCursorValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_style_cursor_value_inherit() -> AzStyleCursorValue { AzStyleCursorValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_style_cursor_value_initial() -> AzStyleCursorValue { AzStyleCursorValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_style_cursor_value_exact(variant_data: AzStyleCursorPtr) -> AzStyleCursorValue { AzStyleCursorValue::Exact(*az_style_cursor_downcast(variant_data)) }
/// Destructor: Takes ownership of the `StyleCursorValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_style_cursor_value_delete(object: &mut AzStyleCursorValue) { match object { AzStyleCursorValue::Auto => { }, AzStyleCursorValue::None => { }, AzStyleCursorValue::Inherit => { }, AzStyleCursorValue::Initial => { }, AzStyleCursorValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_style_cursor_value_deep_copy(object: &AzStyleCursorValue) -> AzStyleCursorValue { object.clone() }

/// Re-export of rust-allocated (stack based) `StyleFontFamilyValue` struct
pub type AzStyleFontFamilyValueType = azul_css::CssPropertyValue::<StyleFontFamily>;
#[no_mangle] pub use AzStyleFontFamilyValueType as AzStyleFontFamilyValue;
#[inline] #[no_mangle] pub extern "C" fn az_style_font_family_value_auto() -> AzStyleFontFamilyValue { AzStyleFontFamilyValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_style_font_family_value_none() -> AzStyleFontFamilyValue { AzStyleFontFamilyValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_style_font_family_value_inherit() -> AzStyleFontFamilyValue { AzStyleFontFamilyValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_style_font_family_value_initial() -> AzStyleFontFamilyValue { AzStyleFontFamilyValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_style_font_family_value_exact(variant_data: AzStyleFontFamilyPtr) -> AzStyleFontFamilyValue { AzStyleFontFamilyValue::Exact(*az_style_font_family_downcast(variant_data)) }
/// Destructor: Takes ownership of the `StyleFontFamilyValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_style_font_family_value_delete(object: &mut AzStyleFontFamilyValue) { match object { AzStyleFontFamilyValue::Auto => { }, AzStyleFontFamilyValue::None => { }, AzStyleFontFamilyValue::Inherit => { }, AzStyleFontFamilyValue::Initial => { }, AzStyleFontFamilyValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_style_font_family_value_deep_copy(object: &AzStyleFontFamilyValue) -> AzStyleFontFamilyValue { object.clone() }

/// Re-export of rust-allocated (stack based) `StyleFontSizeValue` struct
pub type AzStyleFontSizeValueType = azul_css::CssPropertyValue::<StyleFontSize>;
#[no_mangle] pub use AzStyleFontSizeValueType as AzStyleFontSizeValue;
#[inline] #[no_mangle] pub extern "C" fn az_style_font_size_value_auto() -> AzStyleFontSizeValue { AzStyleFontSizeValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_style_font_size_value_none() -> AzStyleFontSizeValue { AzStyleFontSizeValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_style_font_size_value_inherit() -> AzStyleFontSizeValue { AzStyleFontSizeValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_style_font_size_value_initial() -> AzStyleFontSizeValue { AzStyleFontSizeValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_style_font_size_value_exact(variant_data: AzStyleFontSizePtr) -> AzStyleFontSizeValue { AzStyleFontSizeValue::Exact(*az_style_font_size_downcast(variant_data)) }
/// Destructor: Takes ownership of the `StyleFontSizeValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_style_font_size_value_delete(object: &mut AzStyleFontSizeValue) { match object { AzStyleFontSizeValue::Auto => { }, AzStyleFontSizeValue::None => { }, AzStyleFontSizeValue::Inherit => { }, AzStyleFontSizeValue::Initial => { }, AzStyleFontSizeValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_style_font_size_value_deep_copy(object: &AzStyleFontSizeValue) -> AzStyleFontSizeValue { object.clone() }

/// Re-export of rust-allocated (stack based) `StyleLetterSpacingValue` struct
pub type AzStyleLetterSpacingValueType = azul_css::CssPropertyValue::<StyleLetterSpacing>;
#[no_mangle] pub use AzStyleLetterSpacingValueType as AzStyleLetterSpacingValue;
#[inline] #[no_mangle] pub extern "C" fn az_style_letter_spacing_value_auto() -> AzStyleLetterSpacingValue { AzStyleLetterSpacingValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_style_letter_spacing_value_none() -> AzStyleLetterSpacingValue { AzStyleLetterSpacingValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_style_letter_spacing_value_inherit() -> AzStyleLetterSpacingValue { AzStyleLetterSpacingValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_style_letter_spacing_value_initial() -> AzStyleLetterSpacingValue { AzStyleLetterSpacingValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_style_letter_spacing_value_exact(variant_data: AzStyleLetterSpacingPtr) -> AzStyleLetterSpacingValue { AzStyleLetterSpacingValue::Exact(*az_style_letter_spacing_downcast(variant_data)) }
/// Destructor: Takes ownership of the `StyleLetterSpacingValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_style_letter_spacing_value_delete(object: &mut AzStyleLetterSpacingValue) { match object { AzStyleLetterSpacingValue::Auto => { }, AzStyleLetterSpacingValue::None => { }, AzStyleLetterSpacingValue::Inherit => { }, AzStyleLetterSpacingValue::Initial => { }, AzStyleLetterSpacingValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_style_letter_spacing_value_deep_copy(object: &AzStyleLetterSpacingValue) -> AzStyleLetterSpacingValue { object.clone() }

/// Re-export of rust-allocated (stack based) `StyleLineHeightValue` struct
pub type AzStyleLineHeightValueType = azul_css::CssPropertyValue::<StyleLineHeight>;
#[no_mangle] pub use AzStyleLineHeightValueType as AzStyleLineHeightValue;
#[inline] #[no_mangle] pub extern "C" fn az_style_line_height_value_auto() -> AzStyleLineHeightValue { AzStyleLineHeightValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_style_line_height_value_none() -> AzStyleLineHeightValue { AzStyleLineHeightValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_style_line_height_value_inherit() -> AzStyleLineHeightValue { AzStyleLineHeightValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_style_line_height_value_initial() -> AzStyleLineHeightValue { AzStyleLineHeightValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_style_line_height_value_exact(variant_data: AzStyleLineHeightPtr) -> AzStyleLineHeightValue { AzStyleLineHeightValue::Exact(*az_style_line_height_downcast(variant_data)) }
/// Destructor: Takes ownership of the `StyleLineHeightValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_style_line_height_value_delete(object: &mut AzStyleLineHeightValue) { match object { AzStyleLineHeightValue::Auto => { }, AzStyleLineHeightValue::None => { }, AzStyleLineHeightValue::Inherit => { }, AzStyleLineHeightValue::Initial => { }, AzStyleLineHeightValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_style_line_height_value_deep_copy(object: &AzStyleLineHeightValue) -> AzStyleLineHeightValue { object.clone() }

/// Re-export of rust-allocated (stack based) `StyleTabWidthValue` struct
pub type AzStyleTabWidthValueType = azul_css::CssPropertyValue::<StyleTabWidth>;
#[no_mangle] pub use AzStyleTabWidthValueType as AzStyleTabWidthValue;
#[inline] #[no_mangle] pub extern "C" fn az_style_tab_width_value_auto() -> AzStyleTabWidthValue { AzStyleTabWidthValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_style_tab_width_value_none() -> AzStyleTabWidthValue { AzStyleTabWidthValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_style_tab_width_value_inherit() -> AzStyleTabWidthValue { AzStyleTabWidthValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_style_tab_width_value_initial() -> AzStyleTabWidthValue { AzStyleTabWidthValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_style_tab_width_value_exact(variant_data: AzStyleTabWidthPtr) -> AzStyleTabWidthValue { AzStyleTabWidthValue::Exact(*az_style_tab_width_downcast(variant_data)) }
/// Destructor: Takes ownership of the `StyleTabWidthValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_style_tab_width_value_delete(object: &mut AzStyleTabWidthValue) { match object { AzStyleTabWidthValue::Auto => { }, AzStyleTabWidthValue::None => { }, AzStyleTabWidthValue::Inherit => { }, AzStyleTabWidthValue::Initial => { }, AzStyleTabWidthValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_style_tab_width_value_deep_copy(object: &AzStyleTabWidthValue) -> AzStyleTabWidthValue { object.clone() }

/// Re-export of rust-allocated (stack based) `StyleTextAlignmentHorzValue` struct
pub type AzStyleTextAlignmentHorzValueType = azul_css::CssPropertyValue::<StyleTextAlignmentHorz>;
#[no_mangle] pub use AzStyleTextAlignmentHorzValueType as AzStyleTextAlignmentHorzValue;
#[inline] #[no_mangle] pub extern "C" fn az_style_text_alignment_horz_value_auto() -> AzStyleTextAlignmentHorzValue { AzStyleTextAlignmentHorzValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_style_text_alignment_horz_value_none() -> AzStyleTextAlignmentHorzValue { AzStyleTextAlignmentHorzValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_style_text_alignment_horz_value_inherit() -> AzStyleTextAlignmentHorzValue { AzStyleTextAlignmentHorzValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_style_text_alignment_horz_value_initial() -> AzStyleTextAlignmentHorzValue { AzStyleTextAlignmentHorzValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_style_text_alignment_horz_value_exact(variant_data: AzStyleTextAlignmentHorzPtr) -> AzStyleTextAlignmentHorzValue { AzStyleTextAlignmentHorzValue::Exact(*az_style_text_alignment_horz_downcast(variant_data)) }
/// Destructor: Takes ownership of the `StyleTextAlignmentHorzValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_style_text_alignment_horz_value_delete(object: &mut AzStyleTextAlignmentHorzValue) { match object { AzStyleTextAlignmentHorzValue::Auto => { }, AzStyleTextAlignmentHorzValue::None => { }, AzStyleTextAlignmentHorzValue::Inherit => { }, AzStyleTextAlignmentHorzValue::Initial => { }, AzStyleTextAlignmentHorzValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_style_text_alignment_horz_value_deep_copy(object: &AzStyleTextAlignmentHorzValue) -> AzStyleTextAlignmentHorzValue { object.clone() }

/// Re-export of rust-allocated (stack based) `StyleTextColorValue` struct
pub type AzStyleTextColorValueType = azul_css::CssPropertyValue::<StyleTextColor>;
#[no_mangle] pub use AzStyleTextColorValueType as AzStyleTextColorValue;
#[inline] #[no_mangle] pub extern "C" fn az_style_text_color_value_auto() -> AzStyleTextColorValue { AzStyleTextColorValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_style_text_color_value_none() -> AzStyleTextColorValue { AzStyleTextColorValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_style_text_color_value_inherit() -> AzStyleTextColorValue { AzStyleTextColorValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_style_text_color_value_initial() -> AzStyleTextColorValue { AzStyleTextColorValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_style_text_color_value_exact(variant_data: AzStyleTextColorPtr) -> AzStyleTextColorValue { AzStyleTextColorValue::Exact(*az_style_text_color_downcast(variant_data)) }
/// Destructor: Takes ownership of the `StyleTextColorValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_style_text_color_value_delete(object: &mut AzStyleTextColorValue) { match object { AzStyleTextColorValue::Auto => { }, AzStyleTextColorValue::None => { }, AzStyleTextColorValue::Inherit => { }, AzStyleTextColorValue::Initial => { }, AzStyleTextColorValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_style_text_color_value_deep_copy(object: &AzStyleTextColorValue) -> AzStyleTextColorValue { object.clone() }

/// Re-export of rust-allocated (stack based) `StyleWordSpacingValue` struct
pub type AzStyleWordSpacingValueType = azul_css::CssPropertyValue::<StyleWordSpacing>;
#[no_mangle] pub use AzStyleWordSpacingValueType as AzStyleWordSpacingValue;
#[inline] #[no_mangle] pub extern "C" fn az_style_word_spacing_value_auto() -> AzStyleWordSpacingValue { AzStyleWordSpacingValue::Auto }
#[inline] #[no_mangle] pub extern "C" fn az_style_word_spacing_value_none() -> AzStyleWordSpacingValue { AzStyleWordSpacingValue::None }
#[inline] #[no_mangle] pub extern "C" fn az_style_word_spacing_value_inherit() -> AzStyleWordSpacingValue { AzStyleWordSpacingValue::Inherit }
#[inline] #[no_mangle] pub extern "C" fn az_style_word_spacing_value_initial() -> AzStyleWordSpacingValue { AzStyleWordSpacingValue::Initial }
#[inline] #[no_mangle] pub extern "C" fn az_style_word_spacing_value_exact(variant_data: AzStyleWordSpacingPtr) -> AzStyleWordSpacingValue { AzStyleWordSpacingValue::Exact(*az_style_word_spacing_downcast(variant_data)) }
/// Destructor: Takes ownership of the `StyleWordSpacingValue` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_style_word_spacing_value_delete(object: &mut AzStyleWordSpacingValue) { match object { AzStyleWordSpacingValue::Auto => { }, AzStyleWordSpacingValue::None => { }, AzStyleWordSpacingValue::Inherit => { }, AzStyleWordSpacingValue::Initial => { }, AzStyleWordSpacingValue::Exact(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_style_word_spacing_value_deep_copy(object: &AzStyleWordSpacingValue) -> AzStyleWordSpacingValue { object.clone() }

/// Parsed CSS key-value pair
pub type AzCssPropertyType = azul_css::CssProperty;
#[no_mangle] pub use AzCssPropertyType as AzCssProperty;
#[inline] #[no_mangle] pub extern "C" fn az_css_property_text_color(variant_data: AzStyleTextColorValue) -> AzCssProperty { AzCssProperty::TextColor(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_font_size(variant_data: AzStyleFontSizeValue) -> AzCssProperty { AzCssProperty::FontSize(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_font_family(variant_data: AzStyleFontFamilyValue) -> AzCssProperty { AzCssProperty::FontFamily(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_text_align(variant_data: AzStyleTextAlignmentHorzValue) -> AzCssProperty { AzCssProperty::TextAlign(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_letter_spacing(variant_data: AzStyleLetterSpacingValue) -> AzCssProperty { AzCssProperty::LetterSpacing(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_line_height(variant_data: AzStyleLineHeightValue) -> AzCssProperty { AzCssProperty::LineHeight(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_word_spacing(variant_data: AzStyleWordSpacingValue) -> AzCssProperty { AzCssProperty::WordSpacing(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_tab_width(variant_data: AzStyleTabWidthValue) -> AzCssProperty { AzCssProperty::TabWidth(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_cursor(variant_data: AzStyleCursorValue) -> AzCssProperty { AzCssProperty::Cursor(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_display(variant_data: AzLayoutDisplayValue) -> AzCssProperty { AzCssProperty::Display(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_float(variant_data: AzLayoutFloatValue) -> AzCssProperty { AzCssProperty::Float(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_box_sizing(variant_data: AzLayoutBoxSizingValue) -> AzCssProperty { AzCssProperty::BoxSizing(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_width(variant_data: AzLayoutWidthValue) -> AzCssProperty { AzCssProperty::Width(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_height(variant_data: AzLayoutHeightValue) -> AzCssProperty { AzCssProperty::Height(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_min_width(variant_data: AzLayoutMinWidthValue) -> AzCssProperty { AzCssProperty::MinWidth(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_min_height(variant_data: AzLayoutMinHeightValue) -> AzCssProperty { AzCssProperty::MinHeight(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_max_width(variant_data: AzLayoutMaxWidthValue) -> AzCssProperty { AzCssProperty::MaxWidth(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_max_height(variant_data: AzLayoutMaxHeightValue) -> AzCssProperty { AzCssProperty::MaxHeight(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_position(variant_data: AzLayoutPositionValue) -> AzCssProperty { AzCssProperty::Position(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_top(variant_data: AzLayoutTopValue) -> AzCssProperty { AzCssProperty::Top(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_right(variant_data: AzLayoutRightValue) -> AzCssProperty { AzCssProperty::Right(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_left(variant_data: AzLayoutLeftValue) -> AzCssProperty { AzCssProperty::Left(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_bottom(variant_data: AzLayoutBottomValue) -> AzCssProperty { AzCssProperty::Bottom(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_flex_wrap(variant_data: AzLayoutWrapValue) -> AzCssProperty { AzCssProperty::FlexWrap(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_flex_direction(variant_data: AzLayoutDirectionValue) -> AzCssProperty { AzCssProperty::FlexDirection(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_flex_grow(variant_data: AzLayoutFlexGrowValue) -> AzCssProperty { AzCssProperty::FlexGrow(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_flex_shrink(variant_data: AzLayoutFlexShrinkValue) -> AzCssProperty { AzCssProperty::FlexShrink(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_justify_content(variant_data: AzLayoutJustifyContentValue) -> AzCssProperty { AzCssProperty::JustifyContent(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_align_items(variant_data: AzLayoutAlignItemsValue) -> AzCssProperty { AzCssProperty::AlignItems(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_align_content(variant_data: AzLayoutAlignContentValue) -> AzCssProperty { AzCssProperty::AlignContent(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_background_content(variant_data: AzStyleBackgroundContentValue) -> AzCssProperty { AzCssProperty::BackgroundContent(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_background_position(variant_data: AzStyleBackgroundPositionValue) -> AzCssProperty { AzCssProperty::BackgroundPosition(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_background_size(variant_data: AzStyleBackgroundSizeValue) -> AzCssProperty { AzCssProperty::BackgroundSize(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_background_repeat(variant_data: AzStyleBackgroundRepeatValue) -> AzCssProperty { AzCssProperty::BackgroundRepeat(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_overflow_x(variant_data: AzOverflowValue) -> AzCssProperty { AzCssProperty::OverflowX(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_overflow_y(variant_data: AzOverflowValue) -> AzCssProperty { AzCssProperty::OverflowY(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_padding_top(variant_data: AzLayoutPaddingTopValue) -> AzCssProperty { AzCssProperty::PaddingTop(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_padding_left(variant_data: AzLayoutPaddingLeftValue) -> AzCssProperty { AzCssProperty::PaddingLeft(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_padding_right(variant_data: AzLayoutPaddingRightValue) -> AzCssProperty { AzCssProperty::PaddingRight(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_padding_bottom(variant_data: AzLayoutPaddingBottomValue) -> AzCssProperty { AzCssProperty::PaddingBottom(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_margin_top(variant_data: AzLayoutMarginTopValue) -> AzCssProperty { AzCssProperty::MarginTop(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_margin_left(variant_data: AzLayoutMarginLeftValue) -> AzCssProperty { AzCssProperty::MarginLeft(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_margin_right(variant_data: AzLayoutMarginRightValue) -> AzCssProperty { AzCssProperty::MarginRight(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_margin_bottom(variant_data: AzLayoutMarginBottomValue) -> AzCssProperty { AzCssProperty::MarginBottom(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_border_top_left_radius(variant_data: AzStyleBorderTopLeftRadiusValue) -> AzCssProperty { AzCssProperty::BorderTopLeftRadius(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_border_top_right_radius(variant_data: AzStyleBorderTopRightRadiusValue) -> AzCssProperty { AzCssProperty::BorderTopRightRadius(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_border_bottom_left_radius(variant_data: AzStyleBorderBottomLeftRadiusValue) -> AzCssProperty { AzCssProperty::BorderBottomLeftRadius(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_border_bottom_right_radius(variant_data: AzStyleBorderBottomRightRadiusValue) -> AzCssProperty { AzCssProperty::BorderBottomRightRadius(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_border_top_color(variant_data: AzStyleBorderTopColorValue) -> AzCssProperty { AzCssProperty::BorderTopColor(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_border_right_color(variant_data: AzStyleBorderRightColorValue) -> AzCssProperty { AzCssProperty::BorderRightColor(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_border_left_color(variant_data: AzStyleBorderLeftColorValue) -> AzCssProperty { AzCssProperty::BorderLeftColor(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_border_bottom_color(variant_data: AzStyleBorderBottomColorValue) -> AzCssProperty { AzCssProperty::BorderBottomColor(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_border_top_style(variant_data: AzStyleBorderTopStyleValue) -> AzCssProperty { AzCssProperty::BorderTopStyle(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_border_right_style(variant_data: AzStyleBorderRightStyleValue) -> AzCssProperty { AzCssProperty::BorderRightStyle(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_border_left_style(variant_data: AzStyleBorderLeftStyleValue) -> AzCssProperty { AzCssProperty::BorderLeftStyle(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_border_bottom_style(variant_data: AzStyleBorderBottomStyleValue) -> AzCssProperty { AzCssProperty::BorderBottomStyle(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_border_top_width(variant_data: AzStyleBorderTopWidthValue) -> AzCssProperty { AzCssProperty::BorderTopWidth(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_border_right_width(variant_data: AzStyleBorderRightWidthValue) -> AzCssProperty { AzCssProperty::BorderRightWidth(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_border_left_width(variant_data: AzStyleBorderLeftWidthValue) -> AzCssProperty { AzCssProperty::BorderLeftWidth(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_border_bottom_width(variant_data: AzStyleBorderBottomWidthValue) -> AzCssProperty { AzCssProperty::BorderBottomWidth(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_box_shadow_left(variant_data: AzBoxShadowPreDisplayItemValue) -> AzCssProperty { AzCssProperty::BoxShadowLeft(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_box_shadow_right(variant_data: AzBoxShadowPreDisplayItemValue) -> AzCssProperty { AzCssProperty::BoxShadowRight(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_box_shadow_top(variant_data: AzBoxShadowPreDisplayItemValue) -> AzCssProperty { AzCssProperty::BoxShadowTop(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_css_property_box_shadow_bottom(variant_data: AzBoxShadowPreDisplayItemValue) -> AzCssProperty { AzCssProperty::BoxShadowBottom(variant_data) }
/// Destructor: Takes ownership of the `CssProperty` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_css_property_delete(object: &mut AzCssProperty) { match object { AzCssProperty::TextColor(_) => { }, AzCssProperty::FontSize(_) => { }, AzCssProperty::FontFamily(_) => { }, AzCssProperty::TextAlign(_) => { }, AzCssProperty::LetterSpacing(_) => { }, AzCssProperty::LineHeight(_) => { }, AzCssProperty::WordSpacing(_) => { }, AzCssProperty::TabWidth(_) => { }, AzCssProperty::Cursor(_) => { }, AzCssProperty::Display(_) => { }, AzCssProperty::Float(_) => { }, AzCssProperty::BoxSizing(_) => { }, AzCssProperty::Width(_) => { }, AzCssProperty::Height(_) => { }, AzCssProperty::MinWidth(_) => { }, AzCssProperty::MinHeight(_) => { }, AzCssProperty::MaxWidth(_) => { }, AzCssProperty::MaxHeight(_) => { }, AzCssProperty::Position(_) => { }, AzCssProperty::Top(_) => { }, AzCssProperty::Right(_) => { }, AzCssProperty::Left(_) => { }, AzCssProperty::Bottom(_) => { }, AzCssProperty::FlexWrap(_) => { }, AzCssProperty::FlexDirection(_) => { }, AzCssProperty::FlexGrow(_) => { }, AzCssProperty::FlexShrink(_) => { }, AzCssProperty::JustifyContent(_) => { }, AzCssProperty::AlignItems(_) => { }, AzCssProperty::AlignContent(_) => { }, AzCssProperty::BackgroundContent(_) => { }, AzCssProperty::BackgroundPosition(_) => { }, AzCssProperty::BackgroundSize(_) => { }, AzCssProperty::BackgroundRepeat(_) => { }, AzCssProperty::OverflowX(_) => { }, AzCssProperty::OverflowY(_) => { }, AzCssProperty::PaddingTop(_) => { }, AzCssProperty::PaddingLeft(_) => { }, AzCssProperty::PaddingRight(_) => { }, AzCssProperty::PaddingBottom(_) => { }, AzCssProperty::MarginTop(_) => { }, AzCssProperty::MarginLeft(_) => { }, AzCssProperty::MarginRight(_) => { }, AzCssProperty::MarginBottom(_) => { }, AzCssProperty::BorderTopLeftRadius(_) => { }, AzCssProperty::BorderTopRightRadius(_) => { }, AzCssProperty::BorderBottomLeftRadius(_) => { }, AzCssProperty::BorderBottomRightRadius(_) => { }, AzCssProperty::BorderTopColor(_) => { }, AzCssProperty::BorderRightColor(_) => { }, AzCssProperty::BorderLeftColor(_) => { }, AzCssProperty::BorderBottomColor(_) => { }, AzCssProperty::BorderTopStyle(_) => { }, AzCssProperty::BorderRightStyle(_) => { }, AzCssProperty::BorderLeftStyle(_) => { }, AzCssProperty::BorderBottomStyle(_) => { }, AzCssProperty::BorderTopWidth(_) => { }, AzCssProperty::BorderRightWidth(_) => { }, AzCssProperty::BorderLeftWidth(_) => { }, AzCssProperty::BorderBottomWidth(_) => { }, AzCssProperty::BoxShadowLeft(_) => { }, AzCssProperty::BoxShadowRight(_) => { }, AzCssProperty::BoxShadowTop(_) => { }, AzCssProperty::BoxShadowBottom(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_css_property_deep_copy(object: &AzCssProperty) -> AzCssProperty { object.clone() }

/// Pointer to rust-allocated `Box<Dom>` struct
pub type AzDomPtrType = azul_core::dom::DomPtr;
#[no_mangle] pub use AzDomPtrType as AzDomPtr;
/// Creates a new `div` node
#[no_mangle] #[inline] pub extern "C" fn az_dom_div() -> AzDomPtr { let object: Dom = Dom::div(); AzDomPtr { ptr: Box::into_raw(Box::new(object)) as *mut c_void } }
/// Creates a new `body` node
#[no_mangle] #[inline] pub extern "C" fn az_dom_body() -> AzDomPtr { let object: Dom = Dom::body(); AzDomPtr { ptr: Box::into_raw(Box::new(object)) as *mut c_void } }
/// Creates a new `p` node with a given `String` as the text contents
#[no_mangle] #[inline] pub extern "C" fn az_dom_label(text: AzStringPtr) -> AzDomPtr { let object: Dom = Dom::label(*az_string_downcast(text)); AzDomPtr { ptr: Box::into_raw(Box::new(object)) as *mut c_void } }
/// Creates a new `p` node from a (cached) text referenced by a `TextId`
#[no_mangle] #[inline] pub extern "C" fn az_dom_text(text_id: AzTextId) -> AzDomPtr { let object: Dom = Dom::text(*az_text_id_downcast(text_id)); AzDomPtr { ptr: Box::into_raw(Box::new(object)) as *mut c_void } }
/// Creates a new `img` node from a (cached) text referenced by a `ImageId`
#[no_mangle] #[inline] pub extern "C" fn az_dom_image(image_id: AzImageId) -> AzDomPtr { let object: Dom = Dom::image(*az_image_id_downcast(image_id)); AzDomPtr { ptr: Box::into_raw(Box::new(object)) as *mut c_void } }
/// Creates a new node which will render an OpenGL texture after the layout step is finished. See the documentation for [GlCallback]() for more info about OpenGL rendering callbacks.
#[no_mangle] #[inline] pub extern "C" fn az_dom_gl_texture(data: AzRefAny, callback: AzGlCallback) -> AzDomPtr { let object: Dom = Dom::gl_texture(azul_core::callbacks::GlCallback(callback)); AzDomPtr { ptr: Box::into_raw(Box::new(object)) as *mut c_void } }
/// Creates a new node with a callback that will return a `Dom` after being layouted. See the documentation for [IFrameCallback]() for more info about iframe callbacks.
#[no_mangle] #[inline] pub extern "C" fn az_dom_iframe_callback(data: AzRefAny, callback: AzGlCallback) -> AzDomPtr { let object: Dom = Dom::iframe(azul_core::callbacks::IFrameCallback(callback)); AzDomPtr { ptr: Box::into_raw(Box::new(object)) as *mut c_void } }
/// Adds a CSS ID (`#something`) to the DOM node
#[no_mangle] #[inline] pub extern "C" fn az_dom_add_id(dom: &mut AzDomPtr, id: AzStringPtr) { az_dom_downcast_refmut(dom, |d| { d.add_id(*az_string_downcast(id)); }) }
/// Same as [`Dom::add_id`](#method.add_id), but as a builder method
#[no_mangle] #[inline] pub extern "C" fn az_dom_with_id(mut dom: AzDomPtr, id: AzStringPtr) -> AzDomPtr { az_dom_add_id(&mut dom, id); dom }
/// Same as calling [`Dom::add_id`](#method.add_id) for each CSS ID, but this function **replaces** all current CSS IDs
#[no_mangle] #[inline] pub extern "C" fn az_dom_set_ids(dom: &mut AzDomPtr, ids: AzStringVecPtr) { az_dom_downcast_refmut(dom, |d| { d.set_ids(*az_vec_string_downcast(ids)); }) }
/// Same as [`Dom::set_ids`](#method.set_ids), but as a builder method
#[no_mangle] #[inline] pub extern "C" fn az_dom_with_ids(mut dom: AzDomPtr, ids: AzStringVecPtr) -> AzDomPtr { az_dom_set_ids(&mut dom, ids); dom }
/// Adds a CSS class (`.something`) to the DOM node
#[no_mangle] #[inline] pub extern "C" fn az_dom_add_class(dom: &mut AzDomPtr, class: AzStringPtr) { az_dom_downcast_refmut(dom, |d| { d.add_class(*az_string_downcast(class)); }) }
/// Same as [`Dom::add_class`](#method.add_class), but as a builder method
#[no_mangle] #[inline] pub extern "C" fn az_dom_with_class(mut dom: AzDomPtr, class: AzStringPtr) -> AzDomPtr { az_dom_add_class(&mut dom, class); dom }
/// Same as calling [`Dom::add_class`](#method.add_class) for each class, but this function **replaces** all current classes
#[no_mangle] #[inline] pub extern "C" fn az_dom_set_classes(dom: &mut AzDomPtr, classes: AzStringVecPtr) { az_dom_downcast_refmut(dom, |d| { d.set_classes(*az_vec_string_downcast(classes)); }) }
/// Same as [`Dom::set_classes`](#method.set_classes), but as a builder method
#[no_mangle] #[inline] pub extern "C" fn az_dom_with_classes(mut dom: AzDomPtr, classes: AzStringVecPtr) -> AzDomPtr { az_dom_set_classes(&mut dom, ids); dom }
/// Adds a [`Callback`](callbacks/type.Callback) that acts on the `data` the `event` happens
#[no_mangle] #[inline] pub extern "C" fn az_dom_add_callback(dom: &mut AzDomPtr, event: AzEventFilter, data: AzRefAny, callback: AzCallback) { az_dom_downcast_refmut(dom, |d| { d.add_callback(event, data, Callback(callback)); }) }
/// Same as [`Dom::add_callback`](#method.add_callback), but as a builder method
#[no_mangle] #[inline] pub extern "C" fn az_dom_with_callback(dom: &mut AzDomPtr, event: AzEventFilter, data: AzRefAny, callback: AzCallback) { az_dom_add_callback(&mut dom, event, data, callback); dom }
/// Overrides the CSS property of this DOM node with a value (for example `"width = 200px"`)
#[no_mangle] #[inline] pub extern "C" fn az_dom_add_dynamic_css_override(dom: &mut AzDomPtr, prop: AzCssProperty) { az_dom_downcast_refmut(dom, |d| { d.add_dynamic_css_override(event, az_css_property_downcast(prop)); }) }
/// Same as [`Dom::add_dynamic_css_override`](#method.add_dynamic_css_override), but as a builder method
#[no_mangle] #[inline] pub extern "C" fn az_dom_with_dynamic_css_override(dom: &mut AzDomPtr, prop: AzCssProperty) { az_dom_add_dynamic_css_override(&mut dom, prop); dom }
/// Sets the `is_draggable` attribute of this DOM node (default: false)
#[no_mangle] #[inline] pub extern "C" fn az_dom_set_is_draggable(dom: &mut AzDomPtr, is_draggable: bool) { az_dom_downcast_refmut(dom, |d| { d.is_draggable(event, is_draggable); }) }
/// Same as [`Dom::set_is_draggable`](#method.set_is_draggable), but as a builder method
#[no_mangle] #[inline] pub extern "C" fn az_dom_is_draggable(dom: &mut AzDomPtr, is_draggable: bool) { az_dom_set_is_draggable(&mut dom, is_draggable); dom }
/// Sets the `tabindex` attribute of this DOM node (makes an element focusable - default: None)
#[no_mangle] #[inline] pub extern "C" fn az_dom_set_tab_index(dom: &mut AzDomPtr, tab_index: AzTabIndex) { az_dom_downcast_refmut(dom, |d| { d.set_tab_index(event, tab_index); }) }
/// Same as [`Dom::set_tab_index`](#method.set_tab_index), but as a builder method
#[no_mangle] #[inline] pub extern "C" fn az_dom_with_tab_index(dom: &mut AzDomPtr, tab_index: AzTabIndex) { az_dom_set_tab_index(&mut dom, tab_index); dom }
/// Reparents another `Dom` to be the child node of this `Dom`
#[no_mangle] #[inline] pub extern "C" fn az_dom_add_child(dom: &mut AzDomPtr, child: AzDomPtr) { az_dom_downcast_refmut(dom, |d| { d.add_child(*az_dom_downcast(child)); }) }
/// Same as [`Dom::add_child`](#method.add_child), but as a builder method
#[no_mangle] #[inline] pub extern "C" fn az_dom_with_child(mut dom: AzDomPtr, child: AzDomPtr) -> AzDomPtr { az_dom_add_child(&mut dom, child); dom }
/// Returns if the DOM node has a certain CSS ID
#[no_mangle] #[inline] pub extern "C" fn az_dom_has_id(dom: &AzDomPtr, id: AzStringPtr) -> bool { az_dom_downcast_refmut(dom, |d| { d.has_id(&*az_string_downcast(id)) }) }
/// Returns if the DOM node has a certain CSS class
#[no_mangle] #[inline] pub extern "C" fn az_dom_has_class(dom: &AzDomPtr, class: AzStringPtr) -> bool { az_dom_downcast_refmut(dom, |d| { d.has_class(&*az_string_downcast(class)) }) }
/// Destructor: Takes ownership of the `Dom` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_dom_delete(ptr: &mut AzDomPtr) { let _ = unsafe { Box::<Dom>::from_raw(ptr.ptr  as *mut Dom) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`Dom`>!.
#[no_mangle] #[inline] pub extern "C" fn az_dom_shallow_copy(ptr: &AzDomPtr) -> AzDomPtr { AzDomPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzDomPtr` to a `Box<Dom>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_dom_downcast(ptr: AzDomPtr) -> Box<Dom> { unsafe { Box::<Dom>::from_raw(ptr.ptr  as *mut Dom) } }
/// (private): Downcasts the `AzDomPtr` to a `&mut Box<Dom>` and runs the `func` closure on it
#[inline(always)] fn az_dom_downcast_refmut<F: FnOnce(&mut Box<Dom>)>(ptr: &mut AzDomPtr, func: F) { let mut box_ptr: Box<Dom> = unsafe { Box::<Dom>::from_raw(ptr.ptr  as *mut Dom) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzDomPtr` to a `&Box<Dom>` and runs the `func` closure on it
#[inline(always)] fn az_dom_downcast_ref<F: FnOnce(&Box<Dom>)>(ptr: &mut AzDomPtr, func: F) { let box_ptr: Box<Dom> = unsafe { Box::<Dom>::from_raw(ptr.ptr  as *mut Dom) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Re-export of rust-allocated (stack based) `EventFilter` struct
pub type AzEventFilterType = azul_core::dom::EventFilter;
#[no_mangle] pub use AzEventFilterType as AzEventFilter;
#[inline] #[no_mangle] pub extern "C" fn az_event_filter_hover(variant_data: AzHoverEventFilter) -> AzEventFilter { AzEventFilter::Hover(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_event_filter_not(variant_data: AzNotEventFilter) -> AzEventFilter { AzEventFilter::Not(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_event_filter_focus(variant_data: AzFocusEventFilter) -> AzEventFilter { AzEventFilter::Focus(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_event_filter_window(variant_data: AzWindowEventFilter) -> AzEventFilter { AzEventFilter::Window(variant_data) }
/// Destructor: Takes ownership of the `EventFilter` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_event_filter_delete(object: &mut AzEventFilter) { match object { AzEventFilter::Hover(_) => { }, AzEventFilter::Not(_) => { }, AzEventFilter::Focus(_) => { }, AzEventFilter::Window(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_event_filter_deep_copy(object: &AzEventFilter) -> AzEventFilter { object.clone() }

/// Re-export of rust-allocated (stack based) `HoverEventFilter` struct
pub type AzHoverEventFilterType = azul_core::dom::HoverEventFilter;
#[no_mangle] pub use AzHoverEventFilterType as AzHoverEventFilter;
#[inline] #[no_mangle] pub extern "C" fn az_hover_event_filter_mouse_over() -> AzHoverEventFilter { AzHoverEventFilter::MouseOver }
#[inline] #[no_mangle] pub extern "C" fn az_hover_event_filter_mouse_down() -> AzHoverEventFilter { AzHoverEventFilter::MouseDown }
#[inline] #[no_mangle] pub extern "C" fn az_hover_event_filter_left_mouse_down() -> AzHoverEventFilter { AzHoverEventFilter::LeftMouseDown }
#[inline] #[no_mangle] pub extern "C" fn az_hover_event_filter_right_mouse_down() -> AzHoverEventFilter { AzHoverEventFilter::RightMouseDown }
#[inline] #[no_mangle] pub extern "C" fn az_hover_event_filter_middle_mouse_down() -> AzHoverEventFilter { AzHoverEventFilter::MiddleMouseDown }
#[inline] #[no_mangle] pub extern "C" fn az_hover_event_filter_mouse_up() -> AzHoverEventFilter { AzHoverEventFilter::MouseUp }
#[inline] #[no_mangle] pub extern "C" fn az_hover_event_filter_left_mouse_up() -> AzHoverEventFilter { AzHoverEventFilter::LeftMouseUp }
#[inline] #[no_mangle] pub extern "C" fn az_hover_event_filter_right_mouse_up() -> AzHoverEventFilter { AzHoverEventFilter::RightMouseUp }
#[inline] #[no_mangle] pub extern "C" fn az_hover_event_filter_middle_mouse_up() -> AzHoverEventFilter { AzHoverEventFilter::MiddleMouseUp }
#[inline] #[no_mangle] pub extern "C" fn az_hover_event_filter_mouse_enter() -> AzHoverEventFilter { AzHoverEventFilter::MouseEnter }
#[inline] #[no_mangle] pub extern "C" fn az_hover_event_filter_mouse_leave() -> AzHoverEventFilter { AzHoverEventFilter::MouseLeave }
#[inline] #[no_mangle] pub extern "C" fn az_hover_event_filter_scroll() -> AzHoverEventFilter { AzHoverEventFilter::Scroll }
#[inline] #[no_mangle] pub extern "C" fn az_hover_event_filter_scroll_start() -> AzHoverEventFilter { AzHoverEventFilter::ScrollStart }
#[inline] #[no_mangle] pub extern "C" fn az_hover_event_filter_scroll_end() -> AzHoverEventFilter { AzHoverEventFilter::ScrollEnd }
#[inline] #[no_mangle] pub extern "C" fn az_hover_event_filter_text_input() -> AzHoverEventFilter { AzHoverEventFilter::TextInput }
#[inline] #[no_mangle] pub extern "C" fn az_hover_event_filter_virtual_key_down() -> AzHoverEventFilter { AzHoverEventFilter::VirtualKeyDown }
#[inline] #[no_mangle] pub extern "C" fn az_hover_event_filter_virtual_key_up() -> AzHoverEventFilter { AzHoverEventFilter::VirtualKeyUp }
#[inline] #[no_mangle] pub extern "C" fn az_hover_event_filter_hovered_file() -> AzHoverEventFilter { AzHoverEventFilter::HoveredFile }
#[inline] #[no_mangle] pub extern "C" fn az_hover_event_filter_dropped_file() -> AzHoverEventFilter { AzHoverEventFilter::DroppedFile }
#[inline] #[no_mangle] pub extern "C" fn az_hover_event_filter_hovered_file_cancelled() -> AzHoverEventFilter { AzHoverEventFilter::HoveredFileCancelled }
/// Destructor: Takes ownership of the `HoverEventFilter` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_hover_event_filter_delete(object: &mut AzHoverEventFilter) { match object { AzHoverEventFilter::MouseOver => { }, AzHoverEventFilter::MouseDown => { }, AzHoverEventFilter::LeftMouseDown => { }, AzHoverEventFilter::RightMouseDown => { }, AzHoverEventFilter::MiddleMouseDown => { }, AzHoverEventFilter::MouseUp => { }, AzHoverEventFilter::LeftMouseUp => { }, AzHoverEventFilter::RightMouseUp => { }, AzHoverEventFilter::MiddleMouseUp => { }, AzHoverEventFilter::MouseEnter => { }, AzHoverEventFilter::MouseLeave => { }, AzHoverEventFilter::Scroll => { }, AzHoverEventFilter::ScrollStart => { }, AzHoverEventFilter::ScrollEnd => { }, AzHoverEventFilter::TextInput => { }, AzHoverEventFilter::VirtualKeyDown => { }, AzHoverEventFilter::VirtualKeyUp => { }, AzHoverEventFilter::HoveredFile => { }, AzHoverEventFilter::DroppedFile => { }, AzHoverEventFilter::HoveredFileCancelled => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_hover_event_filter_deep_copy(object: &AzHoverEventFilter) -> AzHoverEventFilter { object.clone() }

/// Re-export of rust-allocated (stack based) `FocusEventFilter` struct
pub type AzFocusEventFilterType = azul_core::dom::FocusEventFilter;
#[no_mangle] pub use AzFocusEventFilterType as AzFocusEventFilter;
#[inline] #[no_mangle] pub extern "C" fn az_focus_event_filter_mouse_over() -> AzFocusEventFilter { AzFocusEventFilter::MouseOver }
#[inline] #[no_mangle] pub extern "C" fn az_focus_event_filter_mouse_down() -> AzFocusEventFilter { AzFocusEventFilter::MouseDown }
#[inline] #[no_mangle] pub extern "C" fn az_focus_event_filter_left_mouse_down() -> AzFocusEventFilter { AzFocusEventFilter::LeftMouseDown }
#[inline] #[no_mangle] pub extern "C" fn az_focus_event_filter_right_mouse_down() -> AzFocusEventFilter { AzFocusEventFilter::RightMouseDown }
#[inline] #[no_mangle] pub extern "C" fn az_focus_event_filter_middle_mouse_down() -> AzFocusEventFilter { AzFocusEventFilter::MiddleMouseDown }
#[inline] #[no_mangle] pub extern "C" fn az_focus_event_filter_mouse_up() -> AzFocusEventFilter { AzFocusEventFilter::MouseUp }
#[inline] #[no_mangle] pub extern "C" fn az_focus_event_filter_left_mouse_up() -> AzFocusEventFilter { AzFocusEventFilter::LeftMouseUp }
#[inline] #[no_mangle] pub extern "C" fn az_focus_event_filter_right_mouse_up() -> AzFocusEventFilter { AzFocusEventFilter::RightMouseUp }
#[inline] #[no_mangle] pub extern "C" fn az_focus_event_filter_middle_mouse_up() -> AzFocusEventFilter { AzFocusEventFilter::MiddleMouseUp }
#[inline] #[no_mangle] pub extern "C" fn az_focus_event_filter_mouse_enter() -> AzFocusEventFilter { AzFocusEventFilter::MouseEnter }
#[inline] #[no_mangle] pub extern "C" fn az_focus_event_filter_mouse_leave() -> AzFocusEventFilter { AzFocusEventFilter::MouseLeave }
#[inline] #[no_mangle] pub extern "C" fn az_focus_event_filter_scroll() -> AzFocusEventFilter { AzFocusEventFilter::Scroll }
#[inline] #[no_mangle] pub extern "C" fn az_focus_event_filter_scroll_start() -> AzFocusEventFilter { AzFocusEventFilter::ScrollStart }
#[inline] #[no_mangle] pub extern "C" fn az_focus_event_filter_scroll_end() -> AzFocusEventFilter { AzFocusEventFilter::ScrollEnd }
#[inline] #[no_mangle] pub extern "C" fn az_focus_event_filter_text_input() -> AzFocusEventFilter { AzFocusEventFilter::TextInput }
#[inline] #[no_mangle] pub extern "C" fn az_focus_event_filter_virtual_key_down() -> AzFocusEventFilter { AzFocusEventFilter::VirtualKeyDown }
#[inline] #[no_mangle] pub extern "C" fn az_focus_event_filter_virtual_key_up() -> AzFocusEventFilter { AzFocusEventFilter::VirtualKeyUp }
#[inline] #[no_mangle] pub extern "C" fn az_focus_event_filter_focus_received() -> AzFocusEventFilter { AzFocusEventFilter::FocusReceived }
#[inline] #[no_mangle] pub extern "C" fn az_focus_event_filter_focus_lost() -> AzFocusEventFilter { AzFocusEventFilter::FocusLost }
/// Destructor: Takes ownership of the `FocusEventFilter` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_focus_event_filter_delete(object: &mut AzFocusEventFilter) { match object { AzFocusEventFilter::MouseOver => { }, AzFocusEventFilter::MouseDown => { }, AzFocusEventFilter::LeftMouseDown => { }, AzFocusEventFilter::RightMouseDown => { }, AzFocusEventFilter::MiddleMouseDown => { }, AzFocusEventFilter::MouseUp => { }, AzFocusEventFilter::LeftMouseUp => { }, AzFocusEventFilter::RightMouseUp => { }, AzFocusEventFilter::MiddleMouseUp => { }, AzFocusEventFilter::MouseEnter => { }, AzFocusEventFilter::MouseLeave => { }, AzFocusEventFilter::Scroll => { }, AzFocusEventFilter::ScrollStart => { }, AzFocusEventFilter::ScrollEnd => { }, AzFocusEventFilter::TextInput => { }, AzFocusEventFilter::VirtualKeyDown => { }, AzFocusEventFilter::VirtualKeyUp => { }, AzFocusEventFilter::FocusReceived => { }, AzFocusEventFilter::FocusLost => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_focus_event_filter_deep_copy(object: &AzFocusEventFilter) -> AzFocusEventFilter { object.clone() }

/// Re-export of rust-allocated (stack based) `NotEventFilter` struct
pub type AzNotEventFilterType = azul_core::dom::NotEventFilter;
#[no_mangle] pub use AzNotEventFilterType as AzNotEventFilter;
#[inline] #[no_mangle] pub extern "C" fn az_not_event_filter_hover(variant_data: AzHoverEventFilter) -> AzNotEventFilter { AzNotEventFilter::Hover(variant_data) }
#[inline] #[no_mangle] pub extern "C" fn az_not_event_filter_focus(variant_data: AzFocusEventFilter) -> AzNotEventFilter { AzNotEventFilter::Focus(variant_data) }
/// Destructor: Takes ownership of the `NotEventFilter` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_not_event_filter_delete(object: &mut AzNotEventFilter) { match object { AzNotEventFilter::Hover(_) => { }, AzNotEventFilter::Focus(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_not_event_filter_deep_copy(object: &AzNotEventFilter) -> AzNotEventFilter { object.clone() }

/// Re-export of rust-allocated (stack based) `WindowEventFilter` struct
pub type AzWindowEventFilterType = azul_core::dom::WindowEventFilter;
#[no_mangle] pub use AzWindowEventFilterType as AzWindowEventFilter;
#[inline] #[no_mangle] pub extern "C" fn az_window_event_filter_mouse_over() -> AzWindowEventFilter { AzWindowEventFilter::MouseOver }
#[inline] #[no_mangle] pub extern "C" fn az_window_event_filter_mouse_down() -> AzWindowEventFilter { AzWindowEventFilter::MouseDown }
#[inline] #[no_mangle] pub extern "C" fn az_window_event_filter_left_mouse_down() -> AzWindowEventFilter { AzWindowEventFilter::LeftMouseDown }
#[inline] #[no_mangle] pub extern "C" fn az_window_event_filter_right_mouse_down() -> AzWindowEventFilter { AzWindowEventFilter::RightMouseDown }
#[inline] #[no_mangle] pub extern "C" fn az_window_event_filter_middle_mouse_down() -> AzWindowEventFilter { AzWindowEventFilter::MiddleMouseDown }
#[inline] #[no_mangle] pub extern "C" fn az_window_event_filter_mouse_up() -> AzWindowEventFilter { AzWindowEventFilter::MouseUp }
#[inline] #[no_mangle] pub extern "C" fn az_window_event_filter_left_mouse_up() -> AzWindowEventFilter { AzWindowEventFilter::LeftMouseUp }
#[inline] #[no_mangle] pub extern "C" fn az_window_event_filter_right_mouse_up() -> AzWindowEventFilter { AzWindowEventFilter::RightMouseUp }
#[inline] #[no_mangle] pub extern "C" fn az_window_event_filter_middle_mouse_up() -> AzWindowEventFilter { AzWindowEventFilter::MiddleMouseUp }
#[inline] #[no_mangle] pub extern "C" fn az_window_event_filter_mouse_enter() -> AzWindowEventFilter { AzWindowEventFilter::MouseEnter }
#[inline] #[no_mangle] pub extern "C" fn az_window_event_filter_mouse_leave() -> AzWindowEventFilter { AzWindowEventFilter::MouseLeave }
#[inline] #[no_mangle] pub extern "C" fn az_window_event_filter_scroll() -> AzWindowEventFilter { AzWindowEventFilter::Scroll }
#[inline] #[no_mangle] pub extern "C" fn az_window_event_filter_scroll_start() -> AzWindowEventFilter { AzWindowEventFilter::ScrollStart }
#[inline] #[no_mangle] pub extern "C" fn az_window_event_filter_scroll_end() -> AzWindowEventFilter { AzWindowEventFilter::ScrollEnd }
#[inline] #[no_mangle] pub extern "C" fn az_window_event_filter_text_input() -> AzWindowEventFilter { AzWindowEventFilter::TextInput }
#[inline] #[no_mangle] pub extern "C" fn az_window_event_filter_virtual_key_down() -> AzWindowEventFilter { AzWindowEventFilter::VirtualKeyDown }
#[inline] #[no_mangle] pub extern "C" fn az_window_event_filter_virtual_key_up() -> AzWindowEventFilter { AzWindowEventFilter::VirtualKeyUp }
#[inline] #[no_mangle] pub extern "C" fn az_window_event_filter_hovered_file() -> AzWindowEventFilter { AzWindowEventFilter::HoveredFile }
#[inline] #[no_mangle] pub extern "C" fn az_window_event_filter_dropped_file() -> AzWindowEventFilter { AzWindowEventFilter::DroppedFile }
#[inline] #[no_mangle] pub extern "C" fn az_window_event_filter_hovered_file_cancelled() -> AzWindowEventFilter { AzWindowEventFilter::HoveredFileCancelled }
/// Destructor: Takes ownership of the `WindowEventFilter` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_window_event_filter_delete(object: &mut AzWindowEventFilter) { match object { AzWindowEventFilter::MouseOver => { }, AzWindowEventFilter::MouseDown => { }, AzWindowEventFilter::LeftMouseDown => { }, AzWindowEventFilter::RightMouseDown => { }, AzWindowEventFilter::MiddleMouseDown => { }, AzWindowEventFilter::MouseUp => { }, AzWindowEventFilter::LeftMouseUp => { }, AzWindowEventFilter::RightMouseUp => { }, AzWindowEventFilter::MiddleMouseUp => { }, AzWindowEventFilter::MouseEnter => { }, AzWindowEventFilter::MouseLeave => { }, AzWindowEventFilter::Scroll => { }, AzWindowEventFilter::ScrollStart => { }, AzWindowEventFilter::ScrollEnd => { }, AzWindowEventFilter::TextInput => { }, AzWindowEventFilter::VirtualKeyDown => { }, AzWindowEventFilter::VirtualKeyUp => { }, AzWindowEventFilter::HoveredFile => { }, AzWindowEventFilter::DroppedFile => { }, AzWindowEventFilter::HoveredFileCancelled => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_window_event_filter_deep_copy(object: &AzWindowEventFilter) -> AzWindowEventFilter { object.clone() }

/// Re-export of rust-allocated (stack based) `TabIndex` struct
pub type AzTabIndexType = azul_core::dom::TabIndex;
#[no_mangle] pub use AzTabIndexType as AzTabIndex;
/// Automatic tab index, similar to simply setting `focusable = "true"` or `tabindex = 0`, (both have the effect of making the element focusable)
#[inline] #[no_mangle] pub extern "C" fn az_tab_index_auto() -> AzTabIndex { AzTabIndex::Auto }
///  Set the tab index in relation to its parent element (`tabindex = n`)
#[inline] #[no_mangle] pub extern "C" fn az_tab_index_override_in_parent(variant_data: usize) -> AzTabIndex { AzTabIndex::OverrideInParent(variant_data) }
/// Elements can be focused in callbacks, but are not accessible via keyboard / tab navigation (`tabindex = -1`)
#[inline] #[no_mangle] pub extern "C" fn az_tab_index_no_keyboard_focus() -> AzTabIndex { AzTabIndex::NoKeyboardFocus }
/// Destructor: Takes ownership of the `TabIndex` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_tab_index_delete(object: &mut AzTabIndex) { match object { AzTabIndex::Auto => { }, AzTabIndex::OverrideInParent => { }, AzTabIndex::NoKeyboardFocus => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_tab_index_deep_copy(object: &AzTabIndex) -> AzTabIndex { object.clone() }

/// Re-export of rust-allocated (stack based) `TextId` struct
pub type AzTextIdType = azul_core::app_resources::TextId;
#[no_mangle] pub use AzTextIdType as AzTextId;
/// Creates a new, unique `TextId`
#[no_mangle] #[inline] pub extern "C" fn az_text_id_new() -> AzTextId { let object: TextId = TextId::new(); object }
/// Destructor: Takes ownership of the `TextId` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_text_id_delete(object: &mut AzTextId) { }
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_text_id_deep_copy(object: &AzTextId) -> AzTextId { object.clone() }

/// Re-export of rust-allocated (stack based) `ImageId` struct
pub type AzImageIdType = azul_core::app_resources::ImageId;
#[no_mangle] pub use AzImageIdType as AzImageId;
/// Creates a new, unique `ImageId`
#[no_mangle] #[inline] pub extern "C" fn az_image_id_new() -> AzImageId { let object: ImageId = ImageId::new(); object }
/// Destructor: Takes ownership of the `ImageId` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_image_id_delete(object: &mut AzImageId) { }
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_image_id_deep_copy(object: &AzImageId) -> AzImageId { object.clone() }

/// Re-export of rust-allocated (stack based) `FontId` struct
pub type AzFontIdType = azul_core::app_resources::FontId;
#[no_mangle] pub use AzFontIdType as AzFontId;
/// Creates a new, unique `FontId`
#[no_mangle] #[inline] pub extern "C" fn az_font_id_new() -> AzFontId { let object: FontId = FontId::new(); object }
/// Destructor: Takes ownership of the `FontId` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_font_id_delete(object: &mut AzFontId) { }
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_font_id_deep_copy(object: &AzFontId) -> AzFontId { object.clone() }

/// Re-export of rust-allocated (stack based) `ImageSource` struct
pub type AzImageSourceType = azul_core::app_resources::ImageSource;
#[no_mangle] pub use AzImageSourceType as AzImageSource;
/// Bytes of the image, encoded in PNG / JPG / etc. format
#[inline] #[no_mangle] pub extern "C" fn az_image_source_embedded(variant_data: AzU8VecPtr) -> AzImageSource { AzImageSource::Embedded(*az_u8_vec_downcast(variant_data)) }
/// References an (encoded!) image as a file from the file system that is loaded when necessary
#[inline] #[no_mangle] pub extern "C" fn az_image_source_file(variant_data: AzPathBufPtr) -> AzImageSource { AzImageSource::File(*az_path_buf_downcast(variant_data)) }
/// References a decoded (!) `RawImage` as the image source
#[inline] #[no_mangle] pub extern "C" fn az_image_source_raw(variant_data: AzRawImagePtr) -> AzImageSource { AzImageSource::Raw(*az_raw_image_downcast(variant_data)) }
/// Destructor: Takes ownership of the `ImageSource` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_image_source_delete(object: &mut AzImageSource) { match object { AzImageSource::Embedded(_) => { }, AzImageSource::File(_) => { }, AzImageSource::Raw(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_image_source_deep_copy(object: &AzImageSource) -> AzImageSource { object.clone() }

/// Re-export of rust-allocated (stack based) `FontSource` struct
pub type AzFontSourceType = azul_core::app_resources::FontSource;
#[no_mangle] pub use AzFontSourceType as AzFontSource;
/// Bytes are the bytes of the font file
#[inline] #[no_mangle] pub extern "C" fn az_font_source_embedded(variant_data: AzU8VecPtr) -> AzFontSource { AzFontSource::Embedded(*az_u8_vec_downcast(variant_data)) }
/// References a font from a file path, which is loaded when necessary
#[inline] #[no_mangle] pub extern "C" fn az_font_source_file(variant_data: AzPathBufPtr) -> AzFontSource { AzFontSource::File(*az_path_buf_downcast(variant_data)) }
/// References a font from from a system font identifier, such as `"Arial"` or `"Helvetica"`
#[inline] #[no_mangle] pub extern "C" fn az_font_source_system(variant_data: AzStringPtr) -> AzFontSource { AzFontSource::System(*az_string_downcast(variant_data)) }
/// Destructor: Takes ownership of the `FontSource` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_font_source_delete(object: &mut AzFontSource) { match object { AzFontSource::Embedded(_) => { }, AzFontSource::File(_) => { }, AzFontSource::System(_) => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_font_source_deep_copy(object: &AzFontSource) -> AzFontSource { object.clone() }

/// Pointer to rust-allocated `Box<RawImage>` struct
#[no_mangle] #[repr(C)] pub struct AzRawImagePtr { ptr: *mut c_void }
/// Creates a new `RawImage` by loading the decoded bytes
#[no_mangle] #[inline] pub extern "C" fn az_raw_image_new(decoded_pixels: AzU8VecPtr, width: usize, height: usize, data_format: AzRawImageFormat) -> AzRawImagePtr { let object: RawImage = RawImage { pixels: *az_u8_vec_downcast(decoded_pixels), image_dimensions: (width, height), data_format }; AzRawImagePtr { ptr: Box::into_raw(Box::new(object)) as *mut c_void } }
/// Destructor: Takes ownership of the `RawImage` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_raw_image_delete(ptr: &mut AzRawImagePtr) { let _ = unsafe { Box::<RawImage>::from_raw(ptr.ptr  as *mut RawImage) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`RawImage`>!.
#[no_mangle] #[inline] pub extern "C" fn az_raw_image_shallow_copy(ptr: &AzRawImagePtr) -> AzRawImagePtr { AzRawImagePtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzRawImagePtr` to a `Box<RawImage>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_raw_image_downcast(ptr: AzRawImagePtr) -> Box<RawImage> { unsafe { Box::<RawImage>::from_raw(ptr.ptr  as *mut RawImage) } }
/// (private): Downcasts the `AzRawImagePtr` to a `&mut Box<RawImage>` and runs the `func` closure on it
#[inline(always)] fn az_raw_image_downcast_refmut<F: FnOnce(&mut Box<RawImage>)>(ptr: &mut AzRawImagePtr, func: F) { let mut box_ptr: Box<RawImage> = unsafe { Box::<RawImage>::from_raw(ptr.ptr  as *mut RawImage) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzRawImagePtr` to a `&Box<RawImage>` and runs the `func` closure on it
#[inline(always)] fn az_raw_image_downcast_ref<F: FnOnce(&Box<RawImage>)>(ptr: &mut AzRawImagePtr, func: F) { let box_ptr: Box<RawImage> = unsafe { Box::<RawImage>::from_raw(ptr.ptr  as *mut RawImage) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

/// Re-export of rust-allocated (stack based) `RawImageFormat` struct
pub type AzRawImageFormatType = azul_core::app_resources::RawImageFormat;
#[no_mangle] pub use AzRawImageFormatType as AzRawImageFormat;
/// Bytes are in the R-unsinged-8bit format
#[inline] #[no_mangle] pub extern "C" fn az_raw_image_format_r8() -> AzRawImageFormat { AzRawImageFormat::R8 }
/// Bytes are in the R-unsinged-16bit format
#[inline] #[no_mangle] pub extern "C" fn az_raw_image_format_r16() -> AzRawImageFormat { AzRawImageFormat::R16 }
/// Bytes are in the RG-unsinged-16bit format
#[inline] #[no_mangle] pub extern "C" fn az_raw_image_format_rg16() -> AzRawImageFormat { AzRawImageFormat::RG16 }
/// Bytes are in the BRGA-unsigned-8bit format
#[inline] #[no_mangle] pub extern "C" fn az_raw_image_format_bgra8() -> AzRawImageFormat { AzRawImageFormat::BGRA8 }
/// Bytes are in the RGBA-floating-point-32bit format
#[inline] #[no_mangle] pub extern "C" fn az_raw_image_format_rgbaf32() -> AzRawImageFormat { AzRawImageFormat::RGBAF32 }
/// Bytes are in the RG-unsigned-8bit format
#[inline] #[no_mangle] pub extern "C" fn az_raw_image_format_rg8() -> AzRawImageFormat { AzRawImageFormat::RG8 }
/// Bytes are in the RGBA-signed-32bit format
#[inline] #[no_mangle] pub extern "C" fn az_raw_image_format_rgbai32() -> AzRawImageFormat { AzRawImageFormat::RGBAI32 }
/// Bytes are in the RGBA-unsigned-8bit format
#[inline] #[no_mangle] pub extern "C" fn az_raw_image_format_rgba8() -> AzRawImageFormat { AzRawImageFormat::RGBA8 }
/// Destructor: Takes ownership of the `RawImageFormat` pointer and deletes it.
#[no_mangle] #[inline] #[allow(unused_variables)] pub extern "C" fn az_raw_image_format_delete(object: &mut AzRawImageFormat) { match object { AzRawImageFormat::R8 => { }, AzRawImageFormat::R16 => { }, AzRawImageFormat::RG16 => { }, AzRawImageFormat::BGRA8 => { }, AzRawImageFormat::RGBAF32 => { }, AzRawImageFormat::RG8 => { }, AzRawImageFormat::RGBAI32 => { }, AzRawImageFormat::RGBA8 => { }, }
}
/// Copies the object
#[no_mangle] #[inline] pub extern "C" fn az_raw_image_format_deep_copy(object: &AzRawImageFormat) -> AzRawImageFormat { object.clone() }

/// Pointer to rust-allocated `Box<WindowCreateOptions>` struct
#[no_mangle] #[repr(C)] pub struct AzWindowCreateOptionsPtr { ptr: *mut c_void }
// Creates a new `WindowCreateOptions` instance whose memory is owned by the rust allocator
// Equivalent to the Rust `WindowCreateOptions::new()` constructor.
#[no_mangle] #[inline] pub extern "C" fn az_window_create_options_new(css: AzCssPtr) -> AzWindowCreateOptionsPtr { let object: WindowCreateOptions = WindowCreateOptions::new(*az_css_downcast(css)); AzWindowCreateOptionsPtr { ptr: Box::into_raw(Box::new(object)) as *mut c_void } }
/// Destructor: Takes ownership of the `WindowCreateOptions` pointer and deletes it.
#[no_mangle] #[inline] pub extern "C" fn az_window_create_options_delete(ptr: &mut AzWindowCreateOptionsPtr) { let _ = unsafe { Box::<WindowCreateOptions>::from_raw(ptr.ptr  as *mut WindowCreateOptions) }; }
/// Copies the pointer: WARNING: After calling this function you'll have two pointers to the same Box<`WindowCreateOptions`>!.
#[no_mangle] #[inline] pub extern "C" fn az_window_create_options_shallow_copy(ptr: &AzWindowCreateOptionsPtr) -> AzWindowCreateOptionsPtr { AzWindowCreateOptionsPtr { ptr: ptr.ptr } }
/// (private): Downcasts the `AzWindowCreateOptionsPtr` to a `Box<WindowCreateOptions>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_window_create_options_downcast(ptr: AzWindowCreateOptionsPtr) -> Box<WindowCreateOptions> { unsafe { Box::<WindowCreateOptions>::from_raw(ptr.ptr  as *mut WindowCreateOptions) } }
/// (private): Downcasts the `AzWindowCreateOptionsPtr` to a `&mut Box<WindowCreateOptions>` and runs the `func` closure on it
#[inline(always)] fn az_window_create_options_downcast_refmut<F: FnOnce(&mut Box<WindowCreateOptions>)>(ptr: &mut AzWindowCreateOptionsPtr, func: F) { let mut box_ptr: Box<WindowCreateOptions> = unsafe { Box::<WindowCreateOptions>::from_raw(ptr.ptr  as *mut WindowCreateOptions) };func(&mut box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }
/// (private): Downcasts the `AzWindowCreateOptionsPtr` to a `&Box<WindowCreateOptions>` and runs the `func` closure on it
#[inline(always)] fn az_window_create_options_downcast_ref<F: FnOnce(&Box<WindowCreateOptions>)>(ptr: &mut AzWindowCreateOptionsPtr, func: F) { let box_ptr: Box<WindowCreateOptions> = unsafe { Box::<WindowCreateOptions>::from_raw(ptr.ptr  as *mut WindowCreateOptions) };func(&box_ptr);ptr.ptr = Box::into_raw(box_ptr) as *mut c_void; }

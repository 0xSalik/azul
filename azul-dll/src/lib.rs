#![crate_type = "cdylib"]

// WARNING: autogenerated code for azul api version 0.1.0


//! Public API for Azul
//!
//! A single function can have multiple implementations depending on whether it is
//! compiled for the Rust-desktop target, the Rust-wasm target or the C API.
//!
//! For now, the crate simply re-exports azul_core and calls the c_api functions

#![doc(
    html_logo_url = "https://raw.githubusercontent.com/maps4print/azul/master/assets/images/azul_logo_full_min.svg.png",
    html_favicon_url = "https://raw.githubusercontent.com/maps4print/azul/master/assets/images/favicon.ico",
)]

#![allow(dead_code)]
#![allow(unused_imports)]

extern crate azul_core;
#[cfg(target_arch = "wasm32")]
extern crate azul_web as azul_impl;
#[cfg(not(target_arch = "wasm32"))]
extern crate azul_desktop as azul_impl;

use core::ffi::c_void;
use std::{path::PathBuf, vec::Vec, string::String, time::Duration};
use azul_impl::{
    css::{self, *},
    dom::{Dom, NodeData},
    callbacks::{
        RefAny, LayoutInfo,
        Callback, CallbackInfo, CallbackType,
        TimerCallback, TimerCallbackType, TimerCallbackInfo, TimerCallbackReturn,
        GlCallback, GlCallbackInfo, GlCallbackReturn, ThreadCallbackType,
        IFrameCallback, IFrameCallbackInfo, IFrameCallbackReturn
    },
    window::WindowCreateOptions,
    resources::{RawImage, RawImageFormat, FontId, TextId, ImageId},
    app::{App, AppConfig},
    task::{OptionDuration, Timer, DropCheck, Task, Thread},
    gl::{OptionTexture, Texture, GlContextPtr},
};
/// Re-export of rust-allocated (stack based) `String` struct
pub type AzStringTT = azul_impl::css::AzString;
#[no_mangle] pub use AzStringTT as AzString;
/// Creates + allocates a Rust `String` by **copying** it from another utf8-encoded string
#[no_mangle] pub extern "C" fn az_string_from_utf8_unchecked(ptr: *const u8, len: usize) -> AzString { unsafe { let slice = std::slice::from_raw_parts(ptr, len); println!("{:?}", slice); let vec = slice.to_vec(); let u8vec: AzU8Vec = vec.into(); let s = AzString { vec: u8vec }; println!("copied string from exe to dll memory: {:?}", s); s } }
/// Creates + allocates a Rust `String` by **copying** it from another utf8-encoded string
#[no_mangle] pub extern "C" fn az_string_from_utf8_lossy(ptr: *const u8, len: usize) -> AzString { unsafe { std::string::String::from_utf8_lossy(std::slice::from_raw_parts(ptr, len)).to_string() }.into() }
/// Creates + allocates a Rust `String` by **copying** it from another utf8-encoded string
#[no_mangle] pub extern "C" fn az_string_into_bytes(string: AzString) -> AzU8Vec { string.into_bytes() }
/// Destructor: Takes ownership of the `String` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_string_delete(object: &mut AzString) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_string_deep_copy(object: &AzString) -> AzString { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_string_fmt_debug(object: &AzString) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `XWindowType`
pub type AzXWindowTypeVecTT = azul_impl::window::XWindowTypeVec;
#[no_mangle] pub use AzXWindowTypeVecTT as AzXWindowTypeVec;
/// Creates + allocates a Rust `Vec<XWindowType>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_x_window_type_vec_copy_from(ptr: *mut AzXWindowType, len: usize) -> AzXWindowTypeVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `XWindowTypeVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_x_window_type_vec_delete(object: &mut AzXWindowTypeVec) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_x_window_type_vec_deep_copy(object: &AzXWindowTypeVec) -> AzXWindowTypeVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_x_window_type_vec_fmt_debug(object: &AzXWindowTypeVec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `VirtualKeyCode`
pub type AzVirtualKeyCodeVecTT = azul_impl::window::VirtualKeyCodeVec;
#[no_mangle] pub use AzVirtualKeyCodeVecTT as AzVirtualKeyCodeVec;
/// Creates + allocates a Rust `Vec<VirtualKeyCode>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_virtual_key_code_vec_copy_from(ptr: *mut AzVirtualKeyCode, len: usize) -> AzVirtualKeyCodeVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `VirtualKeyCodeVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_virtual_key_code_vec_delete(object: &mut AzVirtualKeyCodeVec) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_virtual_key_code_vec_deep_copy(object: &AzVirtualKeyCodeVec) -> AzVirtualKeyCodeVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_virtual_key_code_vec_fmt_debug(object: &AzVirtualKeyCodeVec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `ScanCode`
pub type AzScanCodeVecTT = azul_impl::window::ScanCodeVec;
#[no_mangle] pub use AzScanCodeVecTT as AzScanCodeVec;
/// Creates + allocates a Rust `Vec<ScanCode>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_scan_code_vec_copy_from(ptr: *mut u32, len: usize) -> AzScanCodeVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `ScanCodeVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_scan_code_vec_delete(object: &mut AzScanCodeVec) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_scan_code_vec_deep_copy(object: &AzScanCodeVec) -> AzScanCodeVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_scan_code_vec_fmt_debug(object: &AzScanCodeVec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `CssDeclaration`
pub type AzCssDeclarationVecTT = azul_impl::css::CssDeclarationVec;
#[no_mangle] pub use AzCssDeclarationVecTT as AzCssDeclarationVec;
/// Creates + allocates a Rust `Vec<CssDeclaration>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_css_declaration_vec_copy_from(ptr: *mut AzCssDeclaration, len: usize) -> AzCssDeclarationVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `CssDeclarationVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_css_declaration_vec_delete(object: &mut AzCssDeclarationVec) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_css_declaration_vec_deep_copy(object: &AzCssDeclarationVec) -> AzCssDeclarationVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_css_declaration_vec_fmt_debug(object: &AzCssDeclarationVec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `CssPathSelector`
pub type AzCssPathSelectorVecTT = azul_impl::css::CssPathSelectorVec;
#[no_mangle] pub use AzCssPathSelectorVecTT as AzCssPathSelectorVec;
/// Creates + allocates a Rust `Vec<CssPathSelector>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_css_path_selector_vec_copy_from(ptr: *mut AzCssPathSelector, len: usize) -> AzCssPathSelectorVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `CssPathSelectorVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_css_path_selector_vec_delete(object: &mut AzCssPathSelectorVec) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_css_path_selector_vec_deep_copy(object: &AzCssPathSelectorVec) -> AzCssPathSelectorVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_css_path_selector_vec_fmt_debug(object: &AzCssPathSelectorVec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `Stylesheet`
pub type AzStylesheetVecTT = azul_impl::css::StylesheetVec;
#[no_mangle] pub use AzStylesheetVecTT as AzStylesheetVec;
/// Creates + allocates a Rust `Vec<Stylesheet>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_stylesheet_vec_copy_from(ptr: *mut AzStylesheet, len: usize) -> AzStylesheetVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `StylesheetVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_stylesheet_vec_delete(object: &mut AzStylesheetVec) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_stylesheet_vec_deep_copy(object: &AzStylesheetVec) -> AzStylesheetVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_stylesheet_vec_fmt_debug(object: &AzStylesheetVec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `CssRuleBlock`
pub type AzCssRuleBlockVecTT = azul_impl::css::CssRuleBlockVec;
#[no_mangle] pub use AzCssRuleBlockVecTT as AzCssRuleBlockVec;
/// Creates + allocates a Rust `Vec<CssRuleBlock>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_css_rule_block_vec_copy_from(ptr: *mut AzCssRuleBlock, len: usize) -> AzCssRuleBlockVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `CssRuleBlockVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_css_rule_block_vec_delete(object: &mut AzCssRuleBlockVec) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_css_rule_block_vec_deep_copy(object: &AzCssRuleBlockVec) -> AzCssRuleBlockVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_css_rule_block_vec_fmt_debug(object: &AzCssRuleBlockVec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `U8Vec`
pub type AzU8VecTT = azul_impl::css::U8Vec;
#[no_mangle] pub use AzU8VecTT as AzU8Vec;
/// Creates + allocates a Rust `Vec<u8>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_u8_vec_copy_from(ptr: *mut u8, len: usize) -> AzU8Vec { unsafe { std::slice::from_raw_parts(ptr, len).to_vec() }.into() }
/// Destructor: Takes ownership of the `U8Vec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_u8_vec_delete(object: &mut AzU8Vec) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_u8_vec_deep_copy(object: &AzU8Vec) -> AzU8Vec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_u8_vec_fmt_debug(object: &AzU8Vec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `CallbackData`
pub type AzCallbackDataVecTT = azul_impl::dom::CallbackDataVec;
#[no_mangle] pub use AzCallbackDataVecTT as AzCallbackDataVec;
/// Creates + allocates a Rust `Vec<CallbackData>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_callback_data_vec_copy_from(ptr: *mut AzCallbackData, len: usize) -> AzCallbackDataVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `CallbackDataVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_callback_data_vec_delete(object: &mut AzCallbackDataVec) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_callback_data_vec_deep_copy(object: &AzCallbackDataVec) -> AzCallbackDataVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_callback_data_vec_fmt_debug(object: &AzCallbackDataVec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `Vec<DebugMessage>`
pub type AzDebugMessageVecTT = azul_impl::gl::AzDebugMessageVec;
#[no_mangle] pub use AzDebugMessageVecTT as AzDebugMessageVec;
/// Creates + allocates a Rust `Vec<DebugMessage>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_debug_message_vec_copy_from(ptr: *mut AzDebugMessage, len: usize) -> AzDebugMessageVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `DebugMessageVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_debug_message_vec_delete(object: &mut AzDebugMessageVec) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_debug_message_vec_deep_copy(object: &AzDebugMessageVec) -> AzDebugMessageVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_debug_message_vec_fmt_debug(object: &AzDebugMessageVec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `U32Vec`
pub type AzGLuintVecTT = azul_impl::gl::GLuintVec;
#[no_mangle] pub use AzGLuintVecTT as AzGLuintVec;
/// Creates + allocates a Rust `Vec<u32>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_g_luint_vec_copy_from(ptr: *mut u32, len: usize) -> AzGLuintVec { unsafe { std::slice::from_raw_parts(ptr, len).to_vec() }.into() }
/// Destructor: Takes ownership of the `GLuintVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_g_luint_vec_delete(object: &mut AzGLuintVec) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_g_luint_vec_deep_copy(object: &AzGLuintVec) -> AzGLuintVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_g_luint_vec_fmt_debug(object: &AzGLuintVec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `GLintVec`
pub type AzGLintVecTT = azul_impl::gl::GLintVec;
#[no_mangle] pub use AzGLintVecTT as AzGLintVec;
/// Creates + allocates a Rust `Vec<u32>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_g_lint_vec_copy_from(ptr: *mut i32, len: usize) -> AzGLintVec { unsafe { std::slice::from_raw_parts(ptr, len).to_vec() }.into() }
/// Destructor: Takes ownership of the `GLintVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_g_lint_vec_delete(object: &mut AzGLintVec) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_g_lint_vec_deep_copy(object: &AzGLintVec) -> AzGLintVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_g_lint_vec_fmt_debug(object: &AzGLintVec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `OverridePropertyVec`
pub type AzOverridePropertyVecTT = azul_impl::dom::OverridePropertyVec;
#[no_mangle] pub use AzOverridePropertyVecTT as AzOverridePropertyVec;
/// Creates + allocates a Rust `Vec<OverrideProperty>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_override_property_vec_copy_from(ptr: *mut AzOverrideProperty, len: usize) -> AzOverridePropertyVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `OverridePropertyVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_override_property_vec_delete(object: &mut AzOverridePropertyVec) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_override_property_vec_deep_copy(object: &AzOverridePropertyVec) -> AzOverridePropertyVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_override_property_vec_fmt_debug(object: &AzOverridePropertyVec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `DomVec`
pub type AzDomVecTT = azul_impl::dom::DomVec;
#[no_mangle] pub use AzDomVecTT as AzDomVec;
/// Creates + allocates a Rust `Vec<Dom>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_dom_vec_copy_from(ptr: *mut AzDom, len: usize) -> AzDomVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `DomVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_dom_vec_delete(object: &mut AzDomVec) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_dom_vec_deep_copy(object: &AzDomVec) -> AzDomVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_dom_vec_fmt_debug(object: &AzDomVec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `StringVec`
pub type AzStringVecTT = azul_impl::css::StringVec;
#[no_mangle] pub use AzStringVecTT as AzStringVec;
/// Creates + allocates a Rust `Vec<String>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_string_vec_copy_from(ptr: *mut AzString, len: usize) -> AzStringVec { unsafe { std::slice::from_raw_parts(ptr, len).into_iter().map(|s| s.clone()).collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `StringVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_string_vec_delete(object: &mut AzStringVec) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_string_vec_deep_copy(object: &AzStringVec) -> AzStringVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_string_vec_fmt_debug(object: &AzStringVec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `StringPairVec`
pub type AzStringPairVecTT = azul_impl::window::StringPairVec;
#[no_mangle] pub use AzStringPairVecTT as AzStringPairVec;
/// Creates + allocates a Rust `Vec<StringPair>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_string_pair_vec_copy_from(ptr: *mut AzStringPair, len: usize) -> AzStringPairVec { unsafe { std::slice::from_raw_parts(ptr, len).into_iter().map(|s| s.clone()).collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `StringPairVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_string_pair_vec_delete(object: &mut AzStringPairVec) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_string_pair_vec_deep_copy(object: &AzStringPairVec) -> AzStringPairVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_string_pair_vec_fmt_debug(object: &AzStringPairVec) -> AzString { format!("{:#?}", object).into() }

/// Wrapper over a Rust-allocated `GradientStopPreVec`
pub type AzGradientStopPreVecTT = azul_impl::css::GradientStopPreVec;
#[no_mangle] pub use AzGradientStopPreVecTT as AzGradientStopPreVec;
/// Creates + allocates a Rust `Vec<GradientStopPre>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_gradient_stop_pre_vec_copy_from(ptr: *mut AzGradientStopPre, len: usize) -> AzGradientStopPreVec { unsafe { std::slice::from_raw_parts(ptr, len).into_iter().map(|s| s.clone()).collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `GradientStopPreVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_gradient_stop_pre_vec_delete(object: &mut AzGradientStopPreVec) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_gradient_stop_pre_vec_deep_copy(object: &AzGradientStopPreVec) -> AzGradientStopPreVec { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_gradient_stop_pre_vec_fmt_debug(object: &AzGradientStopPreVec) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionWaylandTheme` struct
pub type AzOptionWaylandThemeTT = azul_impl::window::OptionWaylandTheme;
#[no_mangle] pub use AzOptionWaylandThemeTT as AzOptionWaylandTheme;
/// Destructor: Takes ownership of the `OptionWaylandTheme` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_wayland_theme_delete(object: &mut AzOptionWaylandTheme) { match object { azul_impl::window::OptionWaylandTheme::None => { }, azul_impl::window::OptionWaylandTheme::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_wayland_theme_deep_copy(object: &AzOptionWaylandTheme) -> AzOptionWaylandTheme { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_wayland_theme_fmt_debug(object: &AzOptionWaylandTheme) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionTaskBarIcon` struct
pub type AzOptionTaskBarIconTT = azul_impl::window::OptionTaskBarIcon;
#[no_mangle] pub use AzOptionTaskBarIconTT as AzOptionTaskBarIcon;
/// Destructor: Takes ownership of the `OptionTaskBarIcon` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_task_bar_icon_delete(object: &mut AzOptionTaskBarIcon) { match object { azul_impl::window::OptionTaskBarIcon::None => { }, azul_impl::window::OptionTaskBarIcon::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_task_bar_icon_deep_copy(object: &AzOptionTaskBarIcon) -> AzOptionTaskBarIcon { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_task_bar_icon_fmt_debug(object: &AzOptionTaskBarIcon) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionHwndHandle` struct
pub type AzOptionHwndHandleTT = azul_impl::window::OptionHwndHandle;
#[no_mangle] pub use AzOptionHwndHandleTT as AzOptionHwndHandle;
/// Destructor: Takes ownership of the `OptionHwndHandle` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_hwnd_handle_delete(object: &mut AzOptionHwndHandle) { match object { azul_impl::window::OptionHwndHandle::None => { }, azul_impl::window::OptionHwndHandle::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_hwnd_handle_deep_copy(object: &AzOptionHwndHandle) -> AzOptionHwndHandle { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_hwnd_handle_fmt_debug(object: &AzOptionHwndHandle) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionLogicalPosition` struct
pub type AzOptionLogicalPositionTT = azul_impl::window::OptionLogicalPosition;
#[no_mangle] pub use AzOptionLogicalPositionTT as AzOptionLogicalPosition;
/// Destructor: Takes ownership of the `OptionLogicalPosition` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_logical_position_delete(object: &mut AzOptionLogicalPosition) { match object { azul_impl::window::OptionLogicalPosition::None => { }, azul_impl::window::OptionLogicalPosition::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_logical_position_deep_copy(object: &AzOptionLogicalPosition) -> AzOptionLogicalPosition { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_logical_position_fmt_debug(object: &AzOptionLogicalPosition) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionHotReloadOptions` struct
pub type AzOptionHotReloadOptionsTT = azul_impl::window::OptionHotReloadOptions;
#[no_mangle] pub use AzOptionHotReloadOptionsTT as AzOptionHotReloadOptions;
/// Destructor: Takes ownership of the `OptionHotReloadOptions` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_hot_reload_options_delete(object: &mut AzOptionHotReloadOptions) { match object { azul_impl::window::OptionHotReloadOptions::None => { }, azul_impl::window::OptionHotReloadOptions::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_hot_reload_options_deep_copy(object: &AzOptionHotReloadOptions) -> AzOptionHotReloadOptions { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_hot_reload_options_fmt_debug(object: &AzOptionHotReloadOptions) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionPhysicalPositionI32` struct
pub type AzOptionPhysicalPositionI32TT = azul_impl::window::OptionPhysicalPositionI32;
#[no_mangle] pub use AzOptionPhysicalPositionI32TT as AzOptionPhysicalPositionI32;
/// Destructor: Takes ownership of the `OptionPhysicalPositionI32` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_physical_position_i32_delete(object: &mut AzOptionPhysicalPositionI32) { match object { azul_impl::window::OptionPhysicalPositionI32::None => { }, azul_impl::window::OptionPhysicalPositionI32::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_physical_position_i32_deep_copy(object: &AzOptionPhysicalPositionI32) -> AzOptionPhysicalPositionI32 { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_physical_position_i32_fmt_debug(object: &AzOptionPhysicalPositionI32) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionWindowIcon` struct
pub type AzOptionWindowIconTT = azul_impl::window::OptionWindowIcon;
#[no_mangle] pub use AzOptionWindowIconTT as AzOptionWindowIcon;
/// Destructor: Takes ownership of the `OptionWindowIcon` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_window_icon_delete(object: &mut AzOptionWindowIcon) { match object { azul_impl::window::OptionWindowIcon::None => { }, azul_impl::window::OptionWindowIcon::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_window_icon_deep_copy(object: &AzOptionWindowIcon) -> AzOptionWindowIcon { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_window_icon_fmt_debug(object: &AzOptionWindowIcon) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionString` struct
pub type AzOptionStringTT = azul_impl::window::OptionAzString;
#[no_mangle] pub use AzOptionStringTT as AzOptionString;
/// Destructor: Takes ownership of the `OptionString` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_string_delete(object: &mut AzOptionString) { match object { azul_impl::window::OptionAzString::None => { }, azul_impl::window::OptionAzString::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_string_deep_copy(object: &AzOptionString) -> AzOptionString { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_string_fmt_debug(object: &AzOptionString) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionX11Visual` struct
pub type AzOptionX11VisualTT = azul_impl::window::OptionX11Visual;
#[no_mangle] pub use AzOptionX11VisualTT as AzOptionX11Visual;
/// Destructor: Takes ownership of the `OptionX11Visual` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_x11_visual_delete(object: &mut AzOptionX11Visual) { match object { azul_impl::window::OptionX11Visual::None => { }, azul_impl::window::OptionX11Visual::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_x11_visual_deep_copy(object: &AzOptionX11Visual) -> AzOptionX11Visual { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_x11_visual_fmt_debug(object: &AzOptionX11Visual) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionI32` struct
pub type AzOptionI32TT = azul_impl::window::OptionI32;
#[no_mangle] pub use AzOptionI32TT as AzOptionI32;
/// Destructor: Takes ownership of the `OptionI32` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_i32_delete(object: &mut AzOptionI32) { match object { azul_impl::window::OptionI32::None => { }, azul_impl::window::OptionI32::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_i32_deep_copy(object: &AzOptionI32) -> AzOptionI32 { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_i32_fmt_debug(object: &AzOptionI32) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionF32` struct
pub type AzOptionF32TT = azul_impl::window::OptionF32;
#[no_mangle] pub use AzOptionF32TT as AzOptionF32;
/// Destructor: Takes ownership of the `OptionF32` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_f32_delete(object: &mut AzOptionF32) { match object { azul_impl::window::OptionF32::None => { }, azul_impl::window::OptionF32::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_f32_deep_copy(object: &AzOptionF32) -> AzOptionF32 { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_f32_fmt_debug(object: &AzOptionF32) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionMouseCursorType` struct
pub type AzOptionMouseCursorTypeTT = azul_impl::window::OptionMouseCursorType;
#[no_mangle] pub use AzOptionMouseCursorTypeTT as AzOptionMouseCursorType;
/// Destructor: Takes ownership of the `OptionMouseCursorType` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_mouse_cursor_type_delete(object: &mut AzOptionMouseCursorType) { match object { azul_impl::window::OptionMouseCursorType::None => { }, azul_impl::window::OptionMouseCursorType::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_mouse_cursor_type_deep_copy(object: &AzOptionMouseCursorType) -> AzOptionMouseCursorType { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_mouse_cursor_type_fmt_debug(object: &AzOptionMouseCursorType) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionLogicalSize` struct
pub type AzOptionLogicalSizeTT = azul_impl::window::OptionLogicalSize;
#[no_mangle] pub use AzOptionLogicalSizeTT as AzOptionLogicalSize;
/// Destructor: Takes ownership of the `OptionLogicalSize` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_logical_size_delete(object: &mut AzOptionLogicalSize) { match object { azul_impl::window::OptionLogicalSize::None => { }, azul_impl::window::OptionLogicalSize::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_logical_size_deep_copy(object: &AzOptionLogicalSize) -> AzOptionLogicalSize { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_logical_size_fmt_debug(object: &AzOptionLogicalSize) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionChar` struct
pub type AzOptionCharTT = azul_impl::window::OptionChar;
#[no_mangle] pub use AzOptionCharTT as AzOptionChar;
/// Destructor: Takes ownership of the `OptionChar` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_char_delete(object: &mut AzOptionChar) { match object { azul_impl::window::OptionChar::None => { }, azul_impl::window::OptionChar::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_char_deep_copy(object: &AzOptionChar) -> AzOptionChar { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_char_fmt_debug(object: &AzOptionChar) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionVirtualKeyCode` struct
pub type AzOptionVirtualKeyCodeTT = azul_impl::window::OptionVirtualKeyCode;
#[no_mangle] pub use AzOptionVirtualKeyCodeTT as AzOptionVirtualKeyCode;
/// Destructor: Takes ownership of the `OptionVirtualKeyCode` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_virtual_key_code_delete(object: &mut AzOptionVirtualKeyCode) { match object { azul_impl::window::OptionVirtualKeyCode::None => { }, azul_impl::window::OptionVirtualKeyCode::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_virtual_key_code_deep_copy(object: &AzOptionVirtualKeyCode) -> AzOptionVirtualKeyCode { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_virtual_key_code_fmt_debug(object: &AzOptionVirtualKeyCode) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionPercentageValue` struct
pub type AzOptionPercentageValueTT = azul_impl::css::OptionPercentageValue;
#[no_mangle] pub use AzOptionPercentageValueTT as AzOptionPercentageValue;
/// Destructor: Takes ownership of the `OptionPercentageValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_percentage_value_delete(object: &mut AzOptionPercentageValue) { match object { azul_impl::css::OptionPercentageValue::None => { }, azul_impl::css::OptionPercentageValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_percentage_value_deep_copy(object: &AzOptionPercentageValue) -> AzOptionPercentageValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_percentage_value_fmt_debug(object: &AzOptionPercentageValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionDom` struct
pub type AzOptionDomTT = azul_impl::dom::OptionDom;
#[no_mangle] pub use AzOptionDomTT as AzOptionDom;
/// Destructor: Takes ownership of the `OptionDom` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_dom_delete(object: &mut AzOptionDom) { match object { azul_impl::dom::OptionDom::None => { }, azul_impl::dom::OptionDom::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_dom_deep_copy(object: &AzOptionDom) -> AzOptionDom { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_dom_fmt_debug(object: &AzOptionDom) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionTexture` struct
pub type AzOptionTextureTT = azul_impl::gl::OptionTexture;
#[no_mangle] pub use AzOptionTextureTT as AzOptionTexture;
/// Destructor: Takes ownership of the `OptionTexture` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_texture_delete(object: &mut AzOptionTexture) { match object { azul_impl::gl::OptionTexture::None => { }, azul_impl::gl::OptionTexture::Some(_) => { }, }
}
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_texture_fmt_debug(object: &AzOptionTexture) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionTabIndex` struct
pub type AzOptionTabIndexTT = azul_impl::dom::OptionTabIndex;
#[no_mangle] pub use AzOptionTabIndexTT as AzOptionTabIndex;
/// Destructor: Takes ownership of the `OptionTabIndex` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_tab_index_delete(object: &mut AzOptionTabIndex) { match object { azul_impl::dom::OptionTabIndex::None => { }, azul_impl::dom::OptionTabIndex::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_tab_index_deep_copy(object: &AzOptionTabIndex) -> AzOptionTabIndex { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_tab_index_fmt_debug(object: &AzOptionTabIndex) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionDuration` struct
pub type AzOptionDurationTT = azul_impl::task::OptionDuration;
#[no_mangle] pub use AzOptionDurationTT as AzOptionDuration;
/// Destructor: Takes ownership of the `OptionDuration` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_duration_delete(object: &mut AzOptionDuration) { match object { azul_impl::task::OptionDuration::None => { }, azul_impl::task::OptionDuration::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_duration_deep_copy(object: &AzOptionDuration) -> AzOptionDuration { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_duration_fmt_debug(object: &AzOptionDuration) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionInstantPtr` struct
pub type AzOptionInstantPtrTT = azul_impl::task::OptionInstantPtr;
#[no_mangle] pub use AzOptionInstantPtrTT as AzOptionInstantPtr;
/// Destructor: Takes ownership of the `OptionInstantPtr` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_instant_ptr_delete(object: &mut AzOptionInstantPtr) { match object { azul_impl::task::OptionInstantPtr::None => { }, azul_impl::task::OptionInstantPtr::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_instant_ptr_deep_copy(object: &AzOptionInstantPtr) -> AzOptionInstantPtr { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_instant_ptr_fmt_debug(object: &AzOptionInstantPtr) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionUsize` struct
pub type AzOptionUsizeTT = azul_impl::gl::OptionUsize;
#[no_mangle] pub use AzOptionUsizeTT as AzOptionUsize;
/// Destructor: Takes ownership of the `OptionUsize` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_usize_delete(object: &mut AzOptionUsize) { match object { azul_impl::gl::OptionUsize::None => { }, azul_impl::gl::OptionUsize::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_usize_deep_copy(object: &AzOptionUsize) -> AzOptionUsize { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_usize_fmt_debug(object: &AzOptionUsize) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OptionU8VecRef` struct
pub type AzOptionU8VecRefTT = azul_impl::gl::OptionU8VecRef;
#[no_mangle] pub use AzOptionU8VecRefTT as AzOptionU8VecRef;
/// Destructor: Takes ownership of the `OptionU8VecRef` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_u8_vec_ref_delete(object: &mut AzOptionU8VecRef) { match object { azul_impl::gl::OptionU8VecRef::None => { }, azul_impl::gl::OptionU8VecRef::Some(_) => { }, }
}
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_option_u8_vec_ref_fmt_debug(object: &AzOptionU8VecRef) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `ResultRefAnyBlockError` struct
pub type AzResultRefAnyBlockErrorTT = azul_impl::task::ResultRefAnyBlockError;
#[no_mangle] pub use AzResultRefAnyBlockErrorTT as AzResultRefAnyBlockError;
/// Destructor: Takes ownership of the `ResultRefAnyBlockError` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_result_ref_any_block_error_delete(object: &mut AzResultRefAnyBlockError) { match object { azul_impl::task::ResultRefAnyBlockError::Ok(_) => { }, azul_impl::task::ResultRefAnyBlockError::Err(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_result_ref_any_block_error_deep_copy(object: &AzResultRefAnyBlockError) -> AzResultRefAnyBlockError { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_result_ref_any_block_error_fmt_debug(object: &AzResultRefAnyBlockError) -> AzString { format!("{:#?}", object).into() }

/// Pointer to rust-allocated `Box<Instant>` struct
pub type AzInstantPtrTT = azul_impl::task::AzInstantPtr;
#[no_mangle] pub use AzInstantPtrTT as AzInstantPtr;
// Creates a new `Instant` instance whose memory is owned by the rust allocator
// Equivalent to the Rust `Instant::now()` constructor.
#[no_mangle] pub extern "C" fn az_instant_ptr_now() -> AzInstantPtr { let object: std::time::Instant = std::time::Instant::now(); let ptr = Box::into_raw(Box::new(object)) as *mut c_void; AzInstantPtr { ptr } }
/// Destructor: Takes ownership of the `Instant` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_instant_ptr_delete(ptr: &mut AzInstantPtr) { let _ = unsafe { Box::<std::time::Instant>::from_raw(ptr.ptr  as *mut std::time::Instant) };}
/// (private): Downcasts the `AzInstantPtr` to a `Box<std::time::Instant>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_instant_ptr_downcast(ptr: AzInstantPtr) -> Box<std::time::Instant> {     unsafe { Box::<std::time::Instant>::from_raw(ptr.ptr  as *mut std::time::Instant) }}
/// (private): Downcasts the `AzInstantPtr` to a `&mut Box<std::time::Instant>` and runs the `func` closure on it
#[inline(always)] fn az_instant_ptr_downcast_refmut<P, F: FnOnce(&mut std::time::Instant) -> P>(ptr: &mut AzInstantPtr, func: F) -> P {     func(unsafe { &mut *(ptr.ptr as *mut std::time::Instant) })}
/// (private): Downcasts the `AzInstantPtr` to a `&Box<std::time::Instant>` and runs the `func` closure on it
#[inline(always)] fn az_instant_ptr_downcast_ref<P, F: FnOnce(&std::time::Instant) -> P>(ptr: &AzInstantPtr, func: F) -> P {     func(unsafe { &*(ptr.ptr as *const std::time::Instant) })}
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_instant_ptr_fmt_debug(object: &AzInstantPtr) -> AzString { az_instant_ptr_downcast_ref(object, |o| format!("{:#?}", o)).into() }
/// Compares two instances of `AzInstantPtr` for equality
#[no_mangle] pub extern "C" fn az_instant_ptr_partial_eq(a: &AzInstantPtr, b: &AzInstantPtr) -> bool { a.eq(b) }
/// Compares two instances of `AzInstantPtr` for ordering. Returns 0 for None (equality), 1 on Some(Less), 2 on Some(Equal) and 3 on Some(Greater). 
#[no_mangle] pub extern "C" fn az_instant_ptr_partial_cmp(a: &AzInstantPtr, b: &AzInstantPtr) -> u8 { use std::cmp::Ordering::*;match a.partial_cmp(b) { None => 0, Some(Less) => 1, Some(Equal) => 2, Some(Greater) => 3 } }
/// Compares two instances of `AzInstantPtr` for full ordering. Returns 0 for Less, 1 for Equal, 2 for Greater. 
#[no_mangle] pub extern "C" fn az_instant_ptr_cmp(a: &AzInstantPtr, b: &AzInstantPtr) -> u8 { use std::cmp::Ordering::*; match a.cmp(b) { Less => 0, Equal => 1, Greater => 2 } }

/// Re-export of rust-allocated (stack based) `Duration` struct
pub type AzDurationTT = azul_impl::task::AzDuration;
#[no_mangle] pub use AzDurationTT as AzDuration;
/// Destructor: Takes ownership of the `Duration` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_duration_delete(object: &mut AzDuration) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_duration_deep_copy(object: &AzDuration) -> AzDuration { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_duration_fmt_debug(object: &AzDuration) -> AzString { format!("{:#?}", object).into() }

/// Pointer to rust-allocated `Box<AppConfig>` struct
#[no_mangle] #[repr(C)] pub struct AzAppConfigPtr { ptr: *mut c_void }
/// Creates a new AppConfig with default values
#[no_mangle] pub extern "C" fn az_app_config_ptr_default() -> AzAppConfigPtr { let object: AppConfig = AppConfig::default(); let ptr = Box::into_raw(Box::new(object)) as *mut c_void; AzAppConfigPtr { ptr } }
/// Destructor: Takes ownership of the `AppConfig` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_app_config_ptr_delete(ptr: &mut AzAppConfigPtr) { let _ = unsafe { Box::<AppConfig>::from_raw(ptr.ptr  as *mut AppConfig) };}
/// (private): Downcasts the `AzAppConfigPtr` to a `Box<AppConfig>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_app_config_ptr_downcast(ptr: AzAppConfigPtr) -> Box<AppConfig> {     unsafe { Box::<AppConfig>::from_raw(ptr.ptr  as *mut AppConfig) }}
/// (private): Downcasts the `AzAppConfigPtr` to a `&mut Box<AppConfig>` and runs the `func` closure on it
#[inline(always)] fn az_app_config_ptr_downcast_refmut<P, F: FnOnce(&mut AppConfig) -> P>(ptr: &mut AzAppConfigPtr, func: F) -> P {     func(unsafe { &mut *(ptr.ptr as *mut AppConfig) })}
/// (private): Downcasts the `AzAppConfigPtr` to a `&Box<AppConfig>` and runs the `func` closure on it
#[inline(always)] fn az_app_config_ptr_downcast_ref<P, F: FnOnce(&AppConfig) -> P>(ptr: &AzAppConfigPtr, func: F) -> P {     func(unsafe { &*(ptr.ptr as *const AppConfig) })}
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_app_config_ptr_fmt_debug(object: &AzAppConfigPtr) -> AzString { az_app_config_ptr_downcast_ref(object, |o| format!("{:#?}", o)).into() }

/// Pointer to rust-allocated `Box<App>` struct
#[no_mangle] #[repr(C)] pub struct AzAppPtr { ptr: *mut c_void }
/// Creates a new App instance from the given `AppConfig`
#[no_mangle] pub extern "C" fn az_app_ptr_new(data: AzRefAny, config: AzAppConfigPtr, callback: AzLayoutCallbackType) -> AzAppPtr { let object: App = App::new(data, *az_app_config_ptr_downcast(config), callback).unwrap(); let ptr = Box::into_raw(Box::new(object)) as *mut c_void; AzAppPtr { ptr } }
/// Runs the application. Due to platform restrictions (specifically `WinMain` on Windows), this function never returns.
#[no_mangle] pub extern "C" fn az_app_ptr_run(app: AzAppPtr, window: AzWindowCreateOptions) { az_app_ptr_downcast(app).run(window) }
/// Destructor: Takes ownership of the `App` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_app_ptr_delete(ptr: &mut AzAppPtr) { let _ = unsafe { Box::<App>::from_raw(ptr.ptr  as *mut App) };}
/// (private): Downcasts the `AzAppPtr` to a `Box<App>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_app_ptr_downcast(ptr: AzAppPtr) -> Box<App> {     unsafe { Box::<App>::from_raw(ptr.ptr  as *mut App) }}
/// (private): Downcasts the `AzAppPtr` to a `&mut Box<App>` and runs the `func` closure on it
#[inline(always)] fn az_app_ptr_downcast_refmut<P, F: FnOnce(&mut App) -> P>(ptr: &mut AzAppPtr, func: F) -> P {     func(unsafe { &mut *(ptr.ptr as *mut App) })}
/// (private): Downcasts the `AzAppPtr` to a `&Box<App>` and runs the `func` closure on it
#[inline(always)] fn az_app_ptr_downcast_ref<P, F: FnOnce(&App) -> P>(ptr: &AzAppPtr, func: F) -> P {     func(unsafe { &*(ptr.ptr as *const App) })}
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_app_ptr_fmt_debug(object: &AzAppPtr) -> AzString { az_app_ptr_downcast_ref(object, |o| format!("{:#?}", o)).into() }

/// Re-export of rust-allocated (stack based) `HidpiAdjustedBounds` struct
pub type AzHidpiAdjustedBoundsTT = azul_impl::callbacks::HidpiAdjustedBounds;
#[no_mangle] pub use AzHidpiAdjustedBoundsTT as AzHidpiAdjustedBounds;
/// Returns the size of the bounds in logical units
#[no_mangle] pub extern "C" fn az_hidpi_adjusted_bounds_get_logical_size(hidpiadjustedbounds: &AzHidpiAdjustedBounds) -> AzLogicalSize { hidpiadjustedbounds.get_logical_size() }
/// Returns the size of the bounds in physical units
#[no_mangle] pub extern "C" fn az_hidpi_adjusted_bounds_get_physical_size(hidpiadjustedbounds: &AzHidpiAdjustedBounds) -> AzPhysicalSizeU32 { hidpiadjustedbounds.get_physical_size() }
/// Returns the hidpi factor of the bounds
#[no_mangle] pub extern "C" fn az_hidpi_adjusted_bounds_get_hidpi_factor(hidpiadjustedbounds: &AzHidpiAdjustedBounds) -> f32 { hidpiadjustedbounds.get_hidpi_factor() }
/// Destructor: Takes ownership of the `HidpiAdjustedBounds` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_hidpi_adjusted_bounds_delete(object: &mut AzHidpiAdjustedBounds) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_hidpi_adjusted_bounds_deep_copy(object: &AzHidpiAdjustedBounds) -> AzHidpiAdjustedBounds { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_hidpi_adjusted_bounds_fmt_debug(object: &AzHidpiAdjustedBounds) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutCallback` struct
pub type AzLayoutCallbackTT = azul_impl::callbacks::LayoutCallback;
#[no_mangle] pub use AzLayoutCallbackTT as AzLayoutCallback;
/// Destructor: Takes ownership of the `LayoutCallback` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_callback_delete(object: &mut AzLayoutCallback) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_callback_deep_copy(object: &AzLayoutCallback) -> AzLayoutCallback { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_callback_fmt_debug(object: &AzLayoutCallback) -> AzString { format!("{:#?}", object).into() }

/// The layout() callback fn
pub type AzLayoutCallbackType = fn(AzRefAny, AzLayoutInfoPtr) -> AzDom;
/// Re-export of rust-allocated (stack based) `Callback` struct
pub type AzCallbackTT = azul_impl::callbacks::Callback;
#[no_mangle] pub use AzCallbackTT as AzCallback;
/// Destructor: Takes ownership of the `Callback` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_callback_delete(object: &mut AzCallback) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_callback_deep_copy(object: &AzCallback) -> AzCallback { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_callback_fmt_debug(object: &AzCallback) -> AzString { format!("{:#?}", object).into() }
/// Compares two instances of `AzCallback` for equality
#[no_mangle] pub extern "C" fn az_callback_partial_eq(a: &AzCallback, b: &AzCallback) -> bool { a.eq(b) }
/// Compares two instances of `AzCallback` for ordering. Returns 0 for None (equality), 1 on Some(Less), 2 on Some(Equal) and 3 on Some(Greater). 
#[no_mangle] pub extern "C" fn az_callback_partial_cmp(a: &AzCallback, b: &AzCallback) -> u8 { use std::cmp::Ordering::*;match a.partial_cmp(b) { None => 0, Some(Less) => 1, Some(Equal) => 2, Some(Greater) => 3 } }
/// Compares two instances of `AzCallback` for full ordering. Returns 0 for Less, 1 for Equal, 2 for Greater. 
#[no_mangle] pub extern "C" fn az_callback_cmp(a: &AzCallback, b: &AzCallback) -> u8 { use std::cmp::Ordering::*; match a.cmp(b) { Less => 0, Equal => 1, Greater => 2 } }
/// Returns the hash of a `AzCallback` instance 
#[no_mangle] pub extern "C" fn az_callback_hash(object: &AzCallback) -> u64 { use std::collections::hash_map::DefaultHasher; use std::hash::{Hash, Hasher}; let mut hasher = DefaultHasher::new(); object.hash(&mut hasher); hasher.finish() }

pub type AzCallbackReturn = AzUpdateScreen;
/// Callback for responding to window events
pub type AzCallbackType = fn(AzCallbackInfoPtr) -> AzCallbackReturn;
/// Pointer to rust-allocated `Box<CallbackInfo>` struct
pub type AzCallbackInfoPtrTT = azul_impl::callbacks::CallbackInfoPtr;
#[no_mangle] pub use AzCallbackInfoPtrTT as AzCallbackInfoPtr;
/// Returns a copy of the internal `RefAny`
#[no_mangle] pub extern "C" fn az_callback_info_ptr_get_state(callbackinfo: &AzCallbackInfoPtr) -> AzRefAny { az_callback_info_ptr_downcast_ref(callbackinfo, |ci| ci.state.clone()) }
/// Returns a copy of the internal `KeyboardState`. Same as `self.get_window_state().keyboard_state`
#[no_mangle] pub extern "C" fn az_callback_info_ptr_get_keyboard_state(callbackinfo: &AzCallbackInfoPtr) -> AzKeyboardState { az_callback_info_ptr_downcast_ref(callbackinfo, |ci| ci.current_window_state.keyboard_state.clone()) }
/// Returns a copy of the internal `MouseState`. Same as `self.get_window_state().mouse_state`
#[no_mangle] pub extern "C" fn az_callback_info_ptr_get_mouse_state(callbackinfo: &AzCallbackInfoPtr) -> AzMouseState { az_callback_info_ptr_downcast_ref(callbackinfo, |ci| ci.current_window_state.mouse_state.clone()) }
/// Sets the new `WindowState` for the next frame. The window is updated after all callbacks are run.
#[no_mangle] pub extern "C" fn az_callback_info_ptr_set_window_state(callbackinfo: &mut AzCallbackInfoPtr, new_state: AzWindowState) { az_callback_info_ptr_downcast_refmut(callbackinfo, |ci| { *ci.modifiable_window_state = new_state; }) }
/// Destructor: Takes ownership of the `CallbackInfo` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_callback_info_ptr_delete<'a>(ptr: &mut AzCallbackInfoPtr) { let _ = unsafe { Box::<CallbackInfo<'a>>::from_raw(ptr.ptr  as *mut CallbackInfo<'a>) };}
/// (private): Downcasts the `AzCallbackInfoPtr` to a `Box<CallbackInfo<'a>>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_callback_info_ptr_downcast<'a>(ptr: AzCallbackInfoPtr) -> Box<CallbackInfo<'a>> {     unsafe { Box::<CallbackInfo<'a>>::from_raw(ptr.ptr  as *mut CallbackInfo<'a>) }}
/// (private): Downcasts the `AzCallbackInfoPtr` to a `&mut Box<CallbackInfo<'a>>` and runs the `func` closure on it
#[inline(always)] fn az_callback_info_ptr_downcast_refmut<'a, P, F: FnOnce(&mut CallbackInfo<'a>) -> P>(ptr: &mut AzCallbackInfoPtr, func: F) -> P {     func(unsafe { &mut *(ptr.ptr as *mut CallbackInfo<'a>) })}
/// (private): Downcasts the `AzCallbackInfoPtr` to a `&Box<CallbackInfo<'a>>` and runs the `func` closure on it
#[inline(always)] fn az_callback_info_ptr_downcast_ref<'a, P, F: FnOnce(&CallbackInfo<'a>) -> P>(ptr: &AzCallbackInfoPtr, func: F) -> P {     func(unsafe { &*(ptr.ptr as *const CallbackInfo<'a>) })}
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_callback_info_ptr_fmt_debug<'a>(object: &AzCallbackInfoPtr) -> AzString { az_callback_info_ptr_downcast_ref(object, |o| format!("{:#?}", o)).into() }

/// Specifies if the screen should be updated after the callback function has returned
pub type AzUpdateScreenTT = azul_impl::callbacks::UpdateScreen;
#[no_mangle] pub use AzUpdateScreenTT as AzUpdateScreen;
/// Destructor: Takes ownership of the `UpdateScreen` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_update_screen_delete(object: &mut AzUpdateScreen) { match object { azul_impl::callbacks::UpdateScreen::Redraw => { }, azul_impl::callbacks::UpdateScreen::DontRedraw => { }, azul_impl::callbacks::UpdateScreen::UpdateScrollStates => { }, azul_impl::callbacks::UpdateScreen::UpdateTransforms => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_update_screen_deep_copy(object: &AzUpdateScreen) -> AzUpdateScreen { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_update_screen_fmt_debug(object: &AzUpdateScreen) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `IFrameCallback` struct
pub type AzIFrameCallbackTT = azul_impl::callbacks::IFrameCallback;
#[no_mangle] pub use AzIFrameCallbackTT as AzIFrameCallback;
/// Destructor: Takes ownership of the `IFrameCallback` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_i_frame_callback_delete(object: &mut AzIFrameCallback) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_i_frame_callback_deep_copy(object: &AzIFrameCallback) -> AzIFrameCallback { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_i_frame_callback_fmt_debug(object: &AzIFrameCallback) -> AzString { format!("{:#?}", object).into() }

/// Callback for rendering iframes (infinite data structures that have to know how large they are rendered)
pub type AzIFrameCallbackType = fn(AzIFrameCallbackInfoPtr) -> AzIFrameCallbackReturn;
/// Pointer to rust-allocated `Box<IFrameCallbackInfo>` struct
pub type AzIFrameCallbackInfoPtrTT = azul_impl::callbacks::IFrameCallbackInfoPtr;
#[no_mangle] pub use AzIFrameCallbackInfoPtrTT as AzIFrameCallbackInfoPtr;
/// Returns a copy of the internal `RefAny`
#[no_mangle] pub extern "C" fn az_i_frame_callback_info_ptr_get_state(iframecallbackinfo: &AzIFrameCallbackInfoPtr) -> AzRefAny { az_i_frame_callback_info_ptr_downcast_ref(iframecallbackinfo, |ci| ci.state.clone()) }
/// Returns a copy of the internal `HidpiAdjustedBounds`
#[no_mangle] pub extern "C" fn az_i_frame_callback_info_ptr_get_bounds(iframecallbackinfo: &AzIFrameCallbackInfoPtr) -> AzHidpiAdjustedBounds { az_i_frame_callback_info_ptr_downcast_ref(iframecallbackinfo, |ci| ci.bounds.clone()) }
/// Destructor: Takes ownership of the `IFrameCallbackInfo` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_i_frame_callback_info_ptr_delete<'a>(ptr: &mut AzIFrameCallbackInfoPtr) { let _ = unsafe { Box::<IFrameCallbackInfo<'a>>::from_raw(ptr.ptr  as *mut IFrameCallbackInfo<'a>) };}
/// (private): Downcasts the `AzIFrameCallbackInfoPtr` to a `Box<IFrameCallbackInfo<'a>>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_i_frame_callback_info_ptr_downcast<'a>(ptr: AzIFrameCallbackInfoPtr) -> Box<IFrameCallbackInfo<'a>> {     unsafe { Box::<IFrameCallbackInfo<'a>>::from_raw(ptr.ptr  as *mut IFrameCallbackInfo<'a>) }}
/// (private): Downcasts the `AzIFrameCallbackInfoPtr` to a `&mut Box<IFrameCallbackInfo<'a>>` and runs the `func` closure on it
#[inline(always)] fn az_i_frame_callback_info_ptr_downcast_refmut<'a, P, F: FnOnce(&mut IFrameCallbackInfo<'a>) -> P>(ptr: &mut AzIFrameCallbackInfoPtr, func: F) -> P {     func(unsafe { &mut *(ptr.ptr as *mut IFrameCallbackInfo<'a>) })}
/// (private): Downcasts the `AzIFrameCallbackInfoPtr` to a `&Box<IFrameCallbackInfo<'a>>` and runs the `func` closure on it
#[inline(always)] fn az_i_frame_callback_info_ptr_downcast_ref<'a, P, F: FnOnce(&IFrameCallbackInfo<'a>) -> P>(ptr: &AzIFrameCallbackInfoPtr, func: F) -> P {     func(unsafe { &*(ptr.ptr as *const IFrameCallbackInfo<'a>) })}
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_i_frame_callback_info_ptr_fmt_debug<'a>(object: &AzIFrameCallbackInfoPtr) -> AzString { az_i_frame_callback_info_ptr_downcast_ref(object, |o| format!("{:#?}", o)).into() }

/// Re-export of rust-allocated (stack based) `IFrameCallbackReturn` struct
pub type AzIFrameCallbackReturnTT = azul_impl::callbacks::IFrameCallbackReturn;
#[no_mangle] pub use AzIFrameCallbackReturnTT as AzIFrameCallbackReturn;
/// Destructor: Takes ownership of the `IFrameCallbackReturn` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_i_frame_callback_return_delete(object: &mut AzIFrameCallbackReturn) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_i_frame_callback_return_deep_copy(object: &AzIFrameCallbackReturn) -> AzIFrameCallbackReturn { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_i_frame_callback_return_fmt_debug(object: &AzIFrameCallbackReturn) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `GlCallback` struct
pub type AzGlCallbackTT = azul_impl::callbacks::GlCallback;
#[no_mangle] pub use AzGlCallbackTT as AzGlCallback;
/// Destructor: Takes ownership of the `GlCallback` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_gl_callback_delete(object: &mut AzGlCallback) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_gl_callback_deep_copy(object: &AzGlCallback) -> AzGlCallback { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_gl_callback_fmt_debug(object: &AzGlCallback) -> AzString { format!("{:#?}", object).into() }

/// Callback for rendering to an OpenGL texture
pub type AzGlCallbackType = fn(AzGlCallbackInfoPtr) -> AzGlCallbackReturn;
/// Pointer to rust-allocated `Box<GlCallbackInfo>` struct
pub type AzGlCallbackInfoPtrTT = azul_impl::callbacks::GlCallbackInfoPtr;
#[no_mangle] pub use AzGlCallbackInfoPtrTT as AzGlCallbackInfoPtr;
/// Returns a copy of the internal `RefAny`
#[no_mangle] pub extern "C" fn az_gl_callback_info_ptr_get_state(glcallbackinfo: &AzGlCallbackInfoPtr) -> AzRefAny { az_gl_callback_info_ptr_downcast_ref(glcallbackinfo, |ci| ci.state.clone()) }
/// Returns a copy of the internal `HidpiAdjustedBounds`
#[no_mangle] pub extern "C" fn az_gl_callback_info_ptr_get_bounds(glcallbackinfo: &AzGlCallbackInfoPtr) -> AzHidpiAdjustedBounds { az_gl_callback_info_ptr_downcast_ref(glcallbackinfo, |ci| ci.bounds.clone()) }
/// Destructor: Takes ownership of the `GlCallbackInfo` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_gl_callback_info_ptr_delete<'a>(ptr: &mut AzGlCallbackInfoPtr) { let _ = unsafe { Box::<GlCallbackInfo<'a>>::from_raw(ptr.ptr  as *mut GlCallbackInfo<'a>) };}
/// (private): Downcasts the `AzGlCallbackInfoPtr` to a `Box<GlCallbackInfo<'a>>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_gl_callback_info_ptr_downcast<'a>(ptr: AzGlCallbackInfoPtr) -> Box<GlCallbackInfo<'a>> {     unsafe { Box::<GlCallbackInfo<'a>>::from_raw(ptr.ptr  as *mut GlCallbackInfo<'a>) }}
/// (private): Downcasts the `AzGlCallbackInfoPtr` to a `&mut Box<GlCallbackInfo<'a>>` and runs the `func` closure on it
#[inline(always)] fn az_gl_callback_info_ptr_downcast_refmut<'a, P, F: FnOnce(&mut GlCallbackInfo<'a>) -> P>(ptr: &mut AzGlCallbackInfoPtr, func: F) -> P {     func(unsafe { &mut *(ptr.ptr as *mut GlCallbackInfo<'a>) })}
/// (private): Downcasts the `AzGlCallbackInfoPtr` to a `&Box<GlCallbackInfo<'a>>` and runs the `func` closure on it
#[inline(always)] fn az_gl_callback_info_ptr_downcast_ref<'a, P, F: FnOnce(&GlCallbackInfo<'a>) -> P>(ptr: &AzGlCallbackInfoPtr, func: F) -> P {     func(unsafe { &*(ptr.ptr as *const GlCallbackInfo<'a>) })}
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_gl_callback_info_ptr_fmt_debug<'a>(object: &AzGlCallbackInfoPtr) -> AzString { az_gl_callback_info_ptr_downcast_ref(object, |o| format!("{:#?}", o)).into() }

/// Re-export of rust-allocated (stack based) `GlCallbackReturn` struct
pub type AzGlCallbackReturnTT = azul_impl::callbacks::GlCallbackReturn;
#[no_mangle] pub use AzGlCallbackReturnTT as AzGlCallbackReturn;
/// Destructor: Takes ownership of the `GlCallbackReturn` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_gl_callback_return_delete(object: &mut AzGlCallbackReturn) { }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_gl_callback_return_fmt_debug(object: &AzGlCallbackReturn) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `TimerCallback` struct
pub type AzTimerCallbackTT = azul_impl::callbacks::TimerCallback;
#[no_mangle] pub use AzTimerCallbackTT as AzTimerCallback;
/// Destructor: Takes ownership of the `TimerCallback` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_timer_callback_delete(object: &mut AzTimerCallback) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_timer_callback_deep_copy(object: &AzTimerCallback) -> AzTimerCallback { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_timer_callback_fmt_debug(object: &AzTimerCallback) -> AzString { format!("{:#?}", object).into() }

/// Pointer to rust-allocated `Box<TimerCallbackType>` struct
#[no_mangle] #[repr(C)] pub struct AzTimerCallbackTypePtr { ptr: *mut c_void }
/// Destructor: Takes ownership of the `TimerCallbackType` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_timer_callback_type_ptr_delete(ptr: &mut AzTimerCallbackTypePtr) { let _ = unsafe { Box::<TimerCallbackType>::from_raw(ptr.ptr  as *mut TimerCallbackType) };}
/// (private): Downcasts the `AzTimerCallbackTypePtr` to a `Box<TimerCallbackType>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_timer_callback_type_ptr_downcast(ptr: AzTimerCallbackTypePtr) -> Box<TimerCallbackType> {     unsafe { Box::<TimerCallbackType>::from_raw(ptr.ptr  as *mut TimerCallbackType) }}
/// (private): Downcasts the `AzTimerCallbackTypePtr` to a `&mut Box<TimerCallbackType>` and runs the `func` closure on it
#[inline(always)] fn az_timer_callback_type_ptr_downcast_refmut<P, F: FnOnce(&mut TimerCallbackType) -> P>(ptr: &mut AzTimerCallbackTypePtr, func: F) -> P {     func(unsafe { &mut *(ptr.ptr as *mut TimerCallbackType) })}
/// (private): Downcasts the `AzTimerCallbackTypePtr` to a `&Box<TimerCallbackType>` and runs the `func` closure on it
#[inline(always)] fn az_timer_callback_type_ptr_downcast_ref<P, F: FnOnce(&TimerCallbackType) -> P>(ptr: &AzTimerCallbackTypePtr, func: F) -> P {     func(unsafe { &*(ptr.ptr as *const TimerCallbackType) })}
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_timer_callback_type_ptr_fmt_debug(object: &AzTimerCallbackTypePtr) -> AzString { az_timer_callback_type_ptr_downcast_ref(object, |o| format!("{:#?}", o)).into() }

/// Pointer to rust-allocated `Box<TimerCallbackInfo>` struct
pub type AzTimerCallbackInfoPtrTT = azul_impl::callbacks::TimerCallbackInfoPtr;
#[no_mangle] pub use AzTimerCallbackInfoPtrTT as AzTimerCallbackInfoPtr;
/// Returns a copy of the internal `RefAny`
#[no_mangle] pub extern "C" fn az_timer_callback_info_ptr_get_state(timercallbackinfo: &AzTimerCallbackInfoPtr) -> AzRefAny { az_timer_callback_info_ptr_downcast_ref(timercallbackinfo, |ci| ci.state.clone()) }
/// Destructor: Takes ownership of the `TimerCallbackInfo` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_timer_callback_info_ptr_delete<'a>(ptr: &mut AzTimerCallbackInfoPtr) { let _ = unsafe { Box::<azul_impl::callbacks::TimerCallbackInfo<'a>>::from_raw(ptr.ptr  as *mut azul_impl::callbacks::TimerCallbackInfo<'a>) };}
/// (private): Downcasts the `AzTimerCallbackInfoPtr` to a `Box<azul_impl::callbacks::TimerCallbackInfo<'a>>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_timer_callback_info_ptr_downcast<'a>(ptr: AzTimerCallbackInfoPtr) -> Box<azul_impl::callbacks::TimerCallbackInfo<'a>> {     unsafe { Box::<azul_impl::callbacks::TimerCallbackInfo<'a>>::from_raw(ptr.ptr  as *mut azul_impl::callbacks::TimerCallbackInfo<'a>) }}
/// (private): Downcasts the `AzTimerCallbackInfoPtr` to a `&mut Box<azul_impl::callbacks::TimerCallbackInfo<'a>>` and runs the `func` closure on it
#[inline(always)] fn az_timer_callback_info_ptr_downcast_refmut<'a, P, F: FnOnce(&mut azul_impl::callbacks::TimerCallbackInfo<'a>) -> P>(ptr: &mut AzTimerCallbackInfoPtr, func: F) -> P {     func(unsafe { &mut *(ptr.ptr as *mut azul_impl::callbacks::TimerCallbackInfo<'a>) })}
/// (private): Downcasts the `AzTimerCallbackInfoPtr` to a `&Box<azul_impl::callbacks::TimerCallbackInfo<'a>>` and runs the `func` closure on it
#[inline(always)] fn az_timer_callback_info_ptr_downcast_ref<'a, P, F: FnOnce(&azul_impl::callbacks::TimerCallbackInfo<'a>) -> P>(ptr: &AzTimerCallbackInfoPtr, func: F) -> P {     func(unsafe { &*(ptr.ptr as *const azul_impl::callbacks::TimerCallbackInfo<'a>) })}
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_timer_callback_info_ptr_fmt_debug<'a>(object: &AzTimerCallbackInfoPtr) -> AzString { az_timer_callback_info_ptr_downcast_ref(object, |o| format!("{:#?}", o)).into() }

/// Re-export of rust-allocated (stack based) `TimerCallbackReturn` struct
pub type AzTimerCallbackReturnTT = azul_impl::callbacks::TimerCallbackReturn;
#[no_mangle] pub use AzTimerCallbackReturnTT as AzTimerCallbackReturn;
/// Destructor: Takes ownership of the `TimerCallbackReturn` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_timer_callback_return_delete(object: &mut AzTimerCallbackReturn) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_timer_callback_return_deep_copy(object: &AzTimerCallbackReturn) -> AzTimerCallbackReturn { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_timer_callback_return_fmt_debug(object: &AzTimerCallbackReturn) -> AzString { format!("{:#?}", object).into() }

pub type AzThreadCallbackType = fn(AzRefAny) -> AzRefAny;

pub type AzTaskCallbackType = fn(AzArcMutexRefAnyPtr, AzDropCheckPtr) -> AzUpdateScreen;
pub type AzRefAnyDestructorType = fn(*const c_void);

/// Re-export of rust-allocated (stack based) `RefAnySharingInfo` struct
pub type AzRefAnySharingInfoTT = azul_impl::callbacks::RefAnySharingInfo;
#[no_mangle] pub use AzRefAnySharingInfoTT as AzRefAnySharingInfo;
// Equivalent to the Rust `RefAnySharingInfo::can_be_shared()` function.
#[no_mangle] pub extern "C" fn az_ref_any_sharing_info_can_be_shared(refanysharinginfo: &AzRefAnySharingInfo) -> bool { refanysharinginfo.can_be_shared() }
// Equivalent to the Rust `RefAnySharingInfo::can_be_shared_mut()` function.
#[no_mangle] pub extern "C" fn az_ref_any_sharing_info_can_be_shared_mut(refanysharinginfo: &AzRefAnySharingInfo) -> bool { refanysharinginfo.can_be_shared_mut() }
// Equivalent to the Rust `RefAnySharingInfo::increase_ref()` function.
#[no_mangle] pub extern "C" fn az_ref_any_sharing_info_increase_ref(refanysharinginfo: &mut AzRefAnySharingInfo) { refanysharinginfo.increase_ref() }
// Equivalent to the Rust `RefAnySharingInfo::decrease_ref()` function.
#[no_mangle] pub extern "C" fn az_ref_any_sharing_info_decrease_ref(refanysharinginfo: &mut AzRefAnySharingInfo) { refanysharinginfo.decrease_ref() }
// Equivalent to the Rust `RefAnySharingInfo::increase_refmut()` function.
#[no_mangle] pub extern "C" fn az_ref_any_sharing_info_increase_refmut(refanysharinginfo: &mut AzRefAnySharingInfo) { refanysharinginfo.increase_refmut() }
// Equivalent to the Rust `RefAnySharingInfo::decrease_refmut()` function.
#[no_mangle] pub extern "C" fn az_ref_any_sharing_info_decrease_refmut(refanysharinginfo: &mut AzRefAnySharingInfo) { refanysharinginfo.decrease_refmut() }
/// Destructor: Takes ownership of the `RefAnySharingInfo` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_ref_any_sharing_info_delete(object: &mut AzRefAnySharingInfo) { }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_ref_any_sharing_info_fmt_debug(object: &AzRefAnySharingInfo) -> AzString { format!("{:#?}", object).into() }

/// RefAny is a reference-counted, type-erased pointer, which stores a reference to a struct. `RefAny` can be up- and downcasted (this usually done via generics and can't be expressed in the Rust API)
pub type AzRefAnyTT = azul_impl::callbacks::RefAny;
#[no_mangle] pub use AzRefAnyTT as AzRefAny;
// Creates a new `RefAny` instance whose memory is owned by the rust allocator
// Equivalent to the Rust `RefAny::new_c()` constructor.
#[no_mangle] pub extern "C" fn az_ref_any_new_c(ptr: *const c_void, len: usize, type_id: u64, type_name: AzString, destructor: AzRefAnyDestructorType) -> AzRefAny { RefAny::new_c(ptr, len, type_id, type_name, destructor) }
// Equivalent to the Rust `RefAny::is_type()` function.
#[no_mangle] pub extern "C" fn az_ref_any_is_type(refany: &AzRefAny, type_id: u64) -> bool { refany.is_type(type_id) }
// Equivalent to the Rust `RefAny::get_type_name()` function.
#[no_mangle] pub extern "C" fn az_ref_any_get_type_name(refany: &AzRefAny) -> AzString { refany.get_type_name() }
// Equivalent to the Rust `RefAny::can_be_shared()` function.
#[no_mangle] pub extern "C" fn az_ref_any_can_be_shared(refany: &AzRefAny) -> bool { refany.can_be_shared() }
// Equivalent to the Rust `RefAny::can_be_shared_mut()` function.
#[no_mangle] pub extern "C" fn az_ref_any_can_be_shared_mut(refany: &AzRefAny) -> bool { refany.can_be_shared_mut() }
// Equivalent to the Rust `RefAny::increase_ref()` function.
#[no_mangle] pub extern "C" fn az_ref_any_increase_ref(refany: &AzRefAny) { refany.increase_ref() }
// Equivalent to the Rust `RefAny::decrease_ref()` function.
#[no_mangle] pub extern "C" fn az_ref_any_decrease_ref(refany: &AzRefAny) { refany.decrease_ref() }
// Equivalent to the Rust `RefAny::increase_refmut()` function.
#[no_mangle] pub extern "C" fn az_ref_any_increase_refmut(refany: &AzRefAny) { refany.increase_refmut() }
// Equivalent to the Rust `RefAny::decrease_refmut()` function.
#[no_mangle] pub extern "C" fn az_ref_any_decrease_refmut(refany: &AzRefAny) { refany.decrease_refmut() }
/// Destructor: Takes ownership of the `RefAny` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_ref_any_delete(object: &mut AzRefAny) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_ref_any_deep_copy(object: &AzRefAny) -> AzRefAny { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_ref_any_fmt_debug(object: &AzRefAny) -> AzString { format!("{:#?}", object).into() }
/// Compares two instances of `AzRefAny` for equality
#[no_mangle] pub extern "C" fn az_ref_any_partial_eq(a: &AzRefAny, b: &AzRefAny) -> bool { a.eq(b) }
/// Compares two instances of `AzRefAny` for ordering. Returns 0 for None (equality), 1 on Some(Less), 2 on Some(Equal) and 3 on Some(Greater). 
#[no_mangle] pub extern "C" fn az_ref_any_partial_cmp(a: &AzRefAny, b: &AzRefAny) -> u8 { use std::cmp::Ordering::*;match a.partial_cmp(b) { None => 0, Some(Less) => 1, Some(Equal) => 2, Some(Greater) => 3 } }
/// Compares two instances of `AzRefAny` for full ordering. Returns 0 for Less, 1 for Equal, 2 for Greater. 
#[no_mangle] pub extern "C" fn az_ref_any_cmp(a: &AzRefAny, b: &AzRefAny) -> u8 { use std::cmp::Ordering::*; match a.cmp(b) { Less => 0, Equal => 1, Greater => 2 } }
/// Returns the hash of a `AzRefAny` instance 
#[no_mangle] pub extern "C" fn az_ref_any_hash(object: &AzRefAny) -> u64 { use std::collections::hash_map::DefaultHasher; use std::hash::{Hash, Hasher}; let mut hasher = DefaultHasher::new(); object.hash(&mut hasher); hasher.finish() }

/// Pointer to rust-allocated `Box<LayoutInfo>` struct
pub type AzLayoutInfoPtrTT = azul_impl::callbacks::LayoutInfoPtr;
#[no_mangle] pub use AzLayoutInfoPtrTT as AzLayoutInfoPtr;
/// Destructor: Takes ownership of the `LayoutInfo` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_layout_info_ptr_delete<'a>(ptr: &mut AzLayoutInfoPtr) { let _ = unsafe { Box::<LayoutInfo<'a>>::from_raw(ptr.ptr  as *mut LayoutInfo<'a>) };}
/// (private): Downcasts the `AzLayoutInfoPtr` to a `Box<LayoutInfo<'a>>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_layout_info_ptr_downcast<'a>(ptr: AzLayoutInfoPtr) -> Box<LayoutInfo<'a>> {     unsafe { Box::<LayoutInfo<'a>>::from_raw(ptr.ptr  as *mut LayoutInfo<'a>) }}
/// (private): Downcasts the `AzLayoutInfoPtr` to a `&mut Box<LayoutInfo<'a>>` and runs the `func` closure on it
#[inline(always)] fn az_layout_info_ptr_downcast_refmut<'a, P, F: FnOnce(&mut LayoutInfo<'a>) -> P>(ptr: &mut AzLayoutInfoPtr, func: F) -> P {     func(unsafe { &mut *(ptr.ptr as *mut LayoutInfo<'a>) })}
/// (private): Downcasts the `AzLayoutInfoPtr` to a `&Box<LayoutInfo<'a>>` and runs the `func` closure on it
#[inline(always)] fn az_layout_info_ptr_downcast_ref<'a, P, F: FnOnce(&LayoutInfo<'a>) -> P>(ptr: &AzLayoutInfoPtr, func: F) -> P {     func(unsafe { &*(ptr.ptr as *const LayoutInfo<'a>) })}
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_info_ptr_fmt_debug<'a>(object: &AzLayoutInfoPtr) -> AzString { az_layout_info_ptr_downcast_ref(object, |o| format!("{:#?}", o)).into() }

/// Re-export of rust-allocated (stack based) `CssRuleBlock` struct
pub type AzCssRuleBlockTT = azul_impl::css::CssRuleBlock;
#[no_mangle] pub use AzCssRuleBlockTT as AzCssRuleBlock;
/// Destructor: Takes ownership of the `CssRuleBlock` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_css_rule_block_delete(object: &mut AzCssRuleBlock) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_css_rule_block_deep_copy(object: &AzCssRuleBlock) -> AzCssRuleBlock { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_css_rule_block_fmt_debug(object: &AzCssRuleBlock) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `CssDeclaration` struct
pub type AzCssDeclarationTT = azul_impl::css::CssDeclaration;
#[no_mangle] pub use AzCssDeclarationTT as AzCssDeclaration;
/// Destructor: Takes ownership of the `CssDeclaration` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_css_declaration_delete(object: &mut AzCssDeclaration) { match object { azul_impl::css::CssDeclaration::Static(_) => { }, azul_impl::css::CssDeclaration::Dynamic(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_css_declaration_deep_copy(object: &AzCssDeclaration) -> AzCssDeclaration { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_css_declaration_fmt_debug(object: &AzCssDeclaration) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `DynamicCssProperty` struct
pub type AzDynamicCssPropertyTT = azul_impl::css::DynamicCssProperty;
#[no_mangle] pub use AzDynamicCssPropertyTT as AzDynamicCssProperty;
/// Destructor: Takes ownership of the `DynamicCssProperty` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_dynamic_css_property_delete(object: &mut AzDynamicCssProperty) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_dynamic_css_property_deep_copy(object: &AzDynamicCssProperty) -> AzDynamicCssProperty { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_dynamic_css_property_fmt_debug(object: &AzDynamicCssProperty) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `CssPath` struct
pub type AzCssPathTT = azul_impl::css::CssPath;
#[no_mangle] pub use AzCssPathTT as AzCssPath;
/// Destructor: Takes ownership of the `CssPath` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_css_path_delete(object: &mut AzCssPath) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_css_path_deep_copy(object: &AzCssPath) -> AzCssPath { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_css_path_fmt_debug(object: &AzCssPath) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `CssPathSelector` struct
pub type AzCssPathSelectorTT = azul_impl::css::CssPathSelector;
#[no_mangle] pub use AzCssPathSelectorTT as AzCssPathSelector;
/// Destructor: Takes ownership of the `CssPathSelector` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_css_path_selector_delete(object: &mut AzCssPathSelector) { match object { azul_impl::css::CssPathSelector::Global => { }, azul_impl::css::CssPathSelector::Type(_) => { }, azul_impl::css::CssPathSelector::Class(_) => { }, azul_impl::css::CssPathSelector::Id(_) => { }, azul_impl::css::CssPathSelector::PseudoSelector(_) => { }, azul_impl::css::CssPathSelector::DirectChildren => { }, azul_impl::css::CssPathSelector::Children => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_css_path_selector_deep_copy(object: &AzCssPathSelector) -> AzCssPathSelector { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_css_path_selector_fmt_debug(object: &AzCssPathSelector) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `NodeTypePath` struct
pub type AzNodeTypePathTT = azul_impl::css::NodeTypePath;
#[no_mangle] pub use AzNodeTypePathTT as AzNodeTypePath;
/// Destructor: Takes ownership of the `NodeTypePath` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_node_type_path_delete(object: &mut AzNodeTypePath) { match object { azul_impl::css::NodeTypePath::Body => { }, azul_impl::css::NodeTypePath::Div => { }, azul_impl::css::NodeTypePath::P => { }, azul_impl::css::NodeTypePath::Img => { }, azul_impl::css::NodeTypePath::Texture => { }, azul_impl::css::NodeTypePath::IFrame => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_node_type_path_deep_copy(object: &AzNodeTypePath) -> AzNodeTypePath { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_node_type_path_fmt_debug(object: &AzNodeTypePath) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `CssPathPseudoSelector` struct
pub type AzCssPathPseudoSelectorTT = azul_impl::css::CssPathPseudoSelector;
#[no_mangle] pub use AzCssPathPseudoSelectorTT as AzCssPathPseudoSelector;
/// Destructor: Takes ownership of the `CssPathPseudoSelector` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_css_path_pseudo_selector_delete(object: &mut AzCssPathPseudoSelector) { match object { azul_impl::css::CssPathPseudoSelector::First => { }, azul_impl::css::CssPathPseudoSelector::Last => { }, azul_impl::css::CssPathPseudoSelector::NthChild(_) => { }, azul_impl::css::CssPathPseudoSelector::Hover => { }, azul_impl::css::CssPathPseudoSelector::Active => { }, azul_impl::css::CssPathPseudoSelector::Focus => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_css_path_pseudo_selector_deep_copy(object: &AzCssPathPseudoSelector) -> AzCssPathPseudoSelector { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_css_path_pseudo_selector_fmt_debug(object: &AzCssPathPseudoSelector) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `CssNthChildSelector` struct
pub type AzCssNthChildSelectorTT = azul_impl::css::CssNthChildSelector;
#[no_mangle] pub use AzCssNthChildSelectorTT as AzCssNthChildSelector;
/// Destructor: Takes ownership of the `CssNthChildSelector` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_css_nth_child_selector_delete(object: &mut AzCssNthChildSelector) { match object { azul_impl::css::CssNthChildSelector::Number(_) => { }, azul_impl::css::CssNthChildSelector::Even => { }, azul_impl::css::CssNthChildSelector::Odd => { }, azul_impl::css::CssNthChildSelector::Pattern(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_css_nth_child_selector_deep_copy(object: &AzCssNthChildSelector) -> AzCssNthChildSelector { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_css_nth_child_selector_fmt_debug(object: &AzCssNthChildSelector) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `CssNthChildPattern` struct
pub type AzCssNthChildPatternTT = azul_impl::css::CssNthChildPattern;
#[no_mangle] pub use AzCssNthChildPatternTT as AzCssNthChildPattern;
/// Destructor: Takes ownership of the `CssNthChildPattern` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_css_nth_child_pattern_delete(object: &mut AzCssNthChildPattern) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_css_nth_child_pattern_deep_copy(object: &AzCssNthChildPattern) -> AzCssNthChildPattern { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_css_nth_child_pattern_fmt_debug(object: &AzCssNthChildPattern) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `Stylesheet` struct
pub type AzStylesheetTT = azul_impl::css::Stylesheet;
#[no_mangle] pub use AzStylesheetTT as AzStylesheet;
/// Destructor: Takes ownership of the `Stylesheet` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_stylesheet_delete(object: &mut AzStylesheet) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_stylesheet_deep_copy(object: &AzStylesheet) -> AzStylesheet { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_stylesheet_fmt_debug(object: &AzStylesheet) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `Css` struct
pub type AzCssTT = azul_impl::css::Css;
#[no_mangle] pub use AzCssTT as AzCss;
/// Loads the native style for the given operating system
#[no_mangle] pub extern "C" fn az_css_native() -> AzCss { css::native() }
/// Returns an empty CSS style
#[no_mangle] pub extern "C" fn az_css_empty() -> AzCss { css::empty() }
/// Returns a CSS style parsed from a `String`
#[no_mangle] pub extern "C" fn az_css_from_string(s: AzString) -> AzCss { css::from_str(s.as_str()).unwrap() }
/// Appends a parsed stylesheet to `Css::native()`
#[no_mangle] pub extern "C" fn az_css_override_native(s: AzString) -> AzCss { css::override_native(s.as_str()).unwrap() }
/// Destructor: Takes ownership of the `Css` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_css_delete(object: &mut AzCss) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_css_deep_copy(object: &AzCss) -> AzCss { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_css_fmt_debug(object: &AzCss) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `ColorU` struct
pub type AzColorUTT = azul_impl::css::ColorU;
#[no_mangle] pub use AzColorUTT as AzColorU;
/// Destructor: Takes ownership of the `ColorU` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_color_u_delete(object: &mut AzColorU) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_color_u_deep_copy(object: &AzColorU) -> AzColorU { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_color_u_fmt_debug(object: &AzColorU) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `SizeMetric` struct
pub type AzSizeMetricTT = azul_impl::css::SizeMetric;
#[no_mangle] pub use AzSizeMetricTT as AzSizeMetric;
/// Destructor: Takes ownership of the `SizeMetric` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_size_metric_delete(object: &mut AzSizeMetric) { match object { azul_impl::css::SizeMetric::Px => { }, azul_impl::css::SizeMetric::Pt => { }, azul_impl::css::SizeMetric::Em => { }, azul_impl::css::SizeMetric::Percent => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_size_metric_deep_copy(object: &AzSizeMetric) -> AzSizeMetric { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_size_metric_fmt_debug(object: &AzSizeMetric) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `FloatValue` struct
pub type AzFloatValueTT = azul_impl::css::FloatValue;
#[no_mangle] pub use AzFloatValueTT as AzFloatValue;
/// Destructor: Takes ownership of the `FloatValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_float_value_delete(object: &mut AzFloatValue) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_float_value_deep_copy(object: &AzFloatValue) -> AzFloatValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_float_value_fmt_debug(object: &AzFloatValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `PixelValue` struct
pub type AzPixelValueTT = azul_impl::css::PixelValue;
#[no_mangle] pub use AzPixelValueTT as AzPixelValue;
/// Destructor: Takes ownership of the `PixelValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_pixel_value_delete(object: &mut AzPixelValue) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_pixel_value_deep_copy(object: &AzPixelValue) -> AzPixelValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_pixel_value_fmt_debug(object: &AzPixelValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `PixelValueNoPercent` struct
pub type AzPixelValueNoPercentTT = azul_impl::css::PixelValueNoPercent;
#[no_mangle] pub use AzPixelValueNoPercentTT as AzPixelValueNoPercent;
/// Destructor: Takes ownership of the `PixelValueNoPercent` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_pixel_value_no_percent_delete(object: &mut AzPixelValueNoPercent) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_pixel_value_no_percent_deep_copy(object: &AzPixelValueNoPercent) -> AzPixelValueNoPercent { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_pixel_value_no_percent_fmt_debug(object: &AzPixelValueNoPercent) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `BoxShadowClipMode` struct
pub type AzBoxShadowClipModeTT = azul_impl::css::BoxShadowClipMode;
#[no_mangle] pub use AzBoxShadowClipModeTT as AzBoxShadowClipMode;
/// Destructor: Takes ownership of the `BoxShadowClipMode` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_box_shadow_clip_mode_delete(object: &mut AzBoxShadowClipMode) { match object { azul_impl::css::BoxShadowClipMode::Outset => { }, azul_impl::css::BoxShadowClipMode::Inset => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_box_shadow_clip_mode_deep_copy(object: &AzBoxShadowClipMode) -> AzBoxShadowClipMode { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_box_shadow_clip_mode_fmt_debug(object: &AzBoxShadowClipMode) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `BoxShadowPreDisplayItem` struct
pub type AzBoxShadowPreDisplayItemTT = azul_impl::css::BoxShadowPreDisplayItem;
#[no_mangle] pub use AzBoxShadowPreDisplayItemTT as AzBoxShadowPreDisplayItem;
/// Destructor: Takes ownership of the `BoxShadowPreDisplayItem` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_box_shadow_pre_display_item_delete(object: &mut AzBoxShadowPreDisplayItem) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_box_shadow_pre_display_item_deep_copy(object: &AzBoxShadowPreDisplayItem) -> AzBoxShadowPreDisplayItem { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_box_shadow_pre_display_item_fmt_debug(object: &AzBoxShadowPreDisplayItem) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutAlignContent` struct
pub type AzLayoutAlignContentTT = azul_impl::css::LayoutAlignContent;
#[no_mangle] pub use AzLayoutAlignContentTT as AzLayoutAlignContent;
/// Destructor: Takes ownership of the `LayoutAlignContent` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_align_content_delete(object: &mut AzLayoutAlignContent) { match object { azul_impl::css::LayoutAlignContent::Stretch => { }, azul_impl::css::LayoutAlignContent::Center => { }, azul_impl::css::LayoutAlignContent::Start => { }, azul_impl::css::LayoutAlignContent::End => { }, azul_impl::css::LayoutAlignContent::SpaceBetween => { }, azul_impl::css::LayoutAlignContent::SpaceAround => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_align_content_deep_copy(object: &AzLayoutAlignContent) -> AzLayoutAlignContent { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_align_content_fmt_debug(object: &AzLayoutAlignContent) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutAlignItems` struct
pub type AzLayoutAlignItemsTT = azul_impl::css::LayoutAlignItems;
#[no_mangle] pub use AzLayoutAlignItemsTT as AzLayoutAlignItems;
/// Destructor: Takes ownership of the `LayoutAlignItems` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_align_items_delete(object: &mut AzLayoutAlignItems) { match object { azul_impl::css::LayoutAlignItems::Stretch => { }, azul_impl::css::LayoutAlignItems::Center => { }, azul_impl::css::LayoutAlignItems::Start => { }, azul_impl::css::LayoutAlignItems::End => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_align_items_deep_copy(object: &AzLayoutAlignItems) -> AzLayoutAlignItems { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_align_items_fmt_debug(object: &AzLayoutAlignItems) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutBottom` struct
pub type AzLayoutBottomTT = azul_impl::css::LayoutBottom;
#[no_mangle] pub use AzLayoutBottomTT as AzLayoutBottom;
/// Destructor: Takes ownership of the `LayoutBottom` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_bottom_delete(object: &mut AzLayoutBottom) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_bottom_deep_copy(object: &AzLayoutBottom) -> AzLayoutBottom { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_bottom_fmt_debug(object: &AzLayoutBottom) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutBoxSizing` struct
pub type AzLayoutBoxSizingTT = azul_impl::css::LayoutBoxSizing;
#[no_mangle] pub use AzLayoutBoxSizingTT as AzLayoutBoxSizing;
/// Destructor: Takes ownership of the `LayoutBoxSizing` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_box_sizing_delete(object: &mut AzLayoutBoxSizing) { match object { azul_impl::css::LayoutBoxSizing::ContentBox => { }, azul_impl::css::LayoutBoxSizing::BorderBox => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_box_sizing_deep_copy(object: &AzLayoutBoxSizing) -> AzLayoutBoxSizing { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_box_sizing_fmt_debug(object: &AzLayoutBoxSizing) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutDirection` struct
pub type AzLayoutDirectionTT = azul_impl::css::LayoutDirection;
#[no_mangle] pub use AzLayoutDirectionTT as AzLayoutDirection;
/// Destructor: Takes ownership of the `LayoutDirection` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_direction_delete(object: &mut AzLayoutDirection) { match object { azul_impl::css::LayoutDirection::Row => { }, azul_impl::css::LayoutDirection::RowReverse => { }, azul_impl::css::LayoutDirection::Column => { }, azul_impl::css::LayoutDirection::ColumnReverse => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_direction_deep_copy(object: &AzLayoutDirection) -> AzLayoutDirection { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_direction_fmt_debug(object: &AzLayoutDirection) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutDisplay` struct
pub type AzLayoutDisplayTT = azul_impl::css::LayoutDisplay;
#[no_mangle] pub use AzLayoutDisplayTT as AzLayoutDisplay;
/// Destructor: Takes ownership of the `LayoutDisplay` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_display_delete(object: &mut AzLayoutDisplay) { match object { azul_impl::css::LayoutDisplay::Flex => { }, azul_impl::css::LayoutDisplay::Block => { }, azul_impl::css::LayoutDisplay::InlineBlock => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_display_deep_copy(object: &AzLayoutDisplay) -> AzLayoutDisplay { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_display_fmt_debug(object: &AzLayoutDisplay) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutFlexGrow` struct
pub type AzLayoutFlexGrowTT = azul_impl::css::LayoutFlexGrow;
#[no_mangle] pub use AzLayoutFlexGrowTT as AzLayoutFlexGrow;
/// Destructor: Takes ownership of the `LayoutFlexGrow` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_flex_grow_delete(object: &mut AzLayoutFlexGrow) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_flex_grow_deep_copy(object: &AzLayoutFlexGrow) -> AzLayoutFlexGrow { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_flex_grow_fmt_debug(object: &AzLayoutFlexGrow) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutFlexShrink` struct
pub type AzLayoutFlexShrinkTT = azul_impl::css::LayoutFlexShrink;
#[no_mangle] pub use AzLayoutFlexShrinkTT as AzLayoutFlexShrink;
/// Destructor: Takes ownership of the `LayoutFlexShrink` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_flex_shrink_delete(object: &mut AzLayoutFlexShrink) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_flex_shrink_deep_copy(object: &AzLayoutFlexShrink) -> AzLayoutFlexShrink { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_flex_shrink_fmt_debug(object: &AzLayoutFlexShrink) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutFloat` struct
pub type AzLayoutFloatTT = azul_impl::css::LayoutFloat;
#[no_mangle] pub use AzLayoutFloatTT as AzLayoutFloat;
/// Destructor: Takes ownership of the `LayoutFloat` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_float_delete(object: &mut AzLayoutFloat) { match object { azul_impl::css::LayoutFloat::Left => { }, azul_impl::css::LayoutFloat::Right => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_float_deep_copy(object: &AzLayoutFloat) -> AzLayoutFloat { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_float_fmt_debug(object: &AzLayoutFloat) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutHeight` struct
pub type AzLayoutHeightTT = azul_impl::css::LayoutHeight;
#[no_mangle] pub use AzLayoutHeightTT as AzLayoutHeight;
/// Destructor: Takes ownership of the `LayoutHeight` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_height_delete(object: &mut AzLayoutHeight) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_height_deep_copy(object: &AzLayoutHeight) -> AzLayoutHeight { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_height_fmt_debug(object: &AzLayoutHeight) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutJustifyContent` struct
pub type AzLayoutJustifyContentTT = azul_impl::css::LayoutJustifyContent;
#[no_mangle] pub use AzLayoutJustifyContentTT as AzLayoutJustifyContent;
/// Destructor: Takes ownership of the `LayoutJustifyContent` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_justify_content_delete(object: &mut AzLayoutJustifyContent) { match object { azul_impl::css::LayoutJustifyContent::Start => { }, azul_impl::css::LayoutJustifyContent::End => { }, azul_impl::css::LayoutJustifyContent::Center => { }, azul_impl::css::LayoutJustifyContent::SpaceBetween => { }, azul_impl::css::LayoutJustifyContent::SpaceAround => { }, azul_impl::css::LayoutJustifyContent::SpaceEvenly => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_justify_content_deep_copy(object: &AzLayoutJustifyContent) -> AzLayoutJustifyContent { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_justify_content_fmt_debug(object: &AzLayoutJustifyContent) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutLeft` struct
pub type AzLayoutLeftTT = azul_impl::css::LayoutLeft;
#[no_mangle] pub use AzLayoutLeftTT as AzLayoutLeft;
/// Destructor: Takes ownership of the `LayoutLeft` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_left_delete(object: &mut AzLayoutLeft) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_left_deep_copy(object: &AzLayoutLeft) -> AzLayoutLeft { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_left_fmt_debug(object: &AzLayoutLeft) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutMarginBottom` struct
pub type AzLayoutMarginBottomTT = azul_impl::css::LayoutMarginBottom;
#[no_mangle] pub use AzLayoutMarginBottomTT as AzLayoutMarginBottom;
/// Destructor: Takes ownership of the `LayoutMarginBottom` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_margin_bottom_delete(object: &mut AzLayoutMarginBottom) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_margin_bottom_deep_copy(object: &AzLayoutMarginBottom) -> AzLayoutMarginBottom { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_margin_bottom_fmt_debug(object: &AzLayoutMarginBottom) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutMarginLeft` struct
pub type AzLayoutMarginLeftTT = azul_impl::css::LayoutMarginLeft;
#[no_mangle] pub use AzLayoutMarginLeftTT as AzLayoutMarginLeft;
/// Destructor: Takes ownership of the `LayoutMarginLeft` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_margin_left_delete(object: &mut AzLayoutMarginLeft) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_margin_left_deep_copy(object: &AzLayoutMarginLeft) -> AzLayoutMarginLeft { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_margin_left_fmt_debug(object: &AzLayoutMarginLeft) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutMarginRight` struct
pub type AzLayoutMarginRightTT = azul_impl::css::LayoutMarginRight;
#[no_mangle] pub use AzLayoutMarginRightTT as AzLayoutMarginRight;
/// Destructor: Takes ownership of the `LayoutMarginRight` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_margin_right_delete(object: &mut AzLayoutMarginRight) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_margin_right_deep_copy(object: &AzLayoutMarginRight) -> AzLayoutMarginRight { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_margin_right_fmt_debug(object: &AzLayoutMarginRight) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutMarginTop` struct
pub type AzLayoutMarginTopTT = azul_impl::css::LayoutMarginTop;
#[no_mangle] pub use AzLayoutMarginTopTT as AzLayoutMarginTop;
/// Destructor: Takes ownership of the `LayoutMarginTop` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_margin_top_delete(object: &mut AzLayoutMarginTop) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_margin_top_deep_copy(object: &AzLayoutMarginTop) -> AzLayoutMarginTop { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_margin_top_fmt_debug(object: &AzLayoutMarginTop) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutMaxHeight` struct
pub type AzLayoutMaxHeightTT = azul_impl::css::LayoutMaxHeight;
#[no_mangle] pub use AzLayoutMaxHeightTT as AzLayoutMaxHeight;
/// Destructor: Takes ownership of the `LayoutMaxHeight` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_max_height_delete(object: &mut AzLayoutMaxHeight) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_max_height_deep_copy(object: &AzLayoutMaxHeight) -> AzLayoutMaxHeight { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_max_height_fmt_debug(object: &AzLayoutMaxHeight) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutMaxWidth` struct
pub type AzLayoutMaxWidthTT = azul_impl::css::LayoutMaxWidth;
#[no_mangle] pub use AzLayoutMaxWidthTT as AzLayoutMaxWidth;
/// Destructor: Takes ownership of the `LayoutMaxWidth` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_max_width_delete(object: &mut AzLayoutMaxWidth) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_max_width_deep_copy(object: &AzLayoutMaxWidth) -> AzLayoutMaxWidth { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_max_width_fmt_debug(object: &AzLayoutMaxWidth) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutMinHeight` struct
pub type AzLayoutMinHeightTT = azul_impl::css::LayoutMinHeight;
#[no_mangle] pub use AzLayoutMinHeightTT as AzLayoutMinHeight;
/// Destructor: Takes ownership of the `LayoutMinHeight` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_min_height_delete(object: &mut AzLayoutMinHeight) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_min_height_deep_copy(object: &AzLayoutMinHeight) -> AzLayoutMinHeight { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_min_height_fmt_debug(object: &AzLayoutMinHeight) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutMinWidth` struct
pub type AzLayoutMinWidthTT = azul_impl::css::LayoutMinWidth;
#[no_mangle] pub use AzLayoutMinWidthTT as AzLayoutMinWidth;
/// Destructor: Takes ownership of the `LayoutMinWidth` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_min_width_delete(object: &mut AzLayoutMinWidth) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_min_width_deep_copy(object: &AzLayoutMinWidth) -> AzLayoutMinWidth { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_min_width_fmt_debug(object: &AzLayoutMinWidth) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutPaddingBottom` struct
pub type AzLayoutPaddingBottomTT = azul_impl::css::LayoutPaddingBottom;
#[no_mangle] pub use AzLayoutPaddingBottomTT as AzLayoutPaddingBottom;
/// Destructor: Takes ownership of the `LayoutPaddingBottom` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_padding_bottom_delete(object: &mut AzLayoutPaddingBottom) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_padding_bottom_deep_copy(object: &AzLayoutPaddingBottom) -> AzLayoutPaddingBottom { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_padding_bottom_fmt_debug(object: &AzLayoutPaddingBottom) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutPaddingLeft` struct
pub type AzLayoutPaddingLeftTT = azul_impl::css::LayoutPaddingLeft;
#[no_mangle] pub use AzLayoutPaddingLeftTT as AzLayoutPaddingLeft;
/// Destructor: Takes ownership of the `LayoutPaddingLeft` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_padding_left_delete(object: &mut AzLayoutPaddingLeft) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_padding_left_deep_copy(object: &AzLayoutPaddingLeft) -> AzLayoutPaddingLeft { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_padding_left_fmt_debug(object: &AzLayoutPaddingLeft) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutPaddingRight` struct
pub type AzLayoutPaddingRightTT = azul_impl::css::LayoutPaddingRight;
#[no_mangle] pub use AzLayoutPaddingRightTT as AzLayoutPaddingRight;
/// Destructor: Takes ownership of the `LayoutPaddingRight` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_padding_right_delete(object: &mut AzLayoutPaddingRight) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_padding_right_deep_copy(object: &AzLayoutPaddingRight) -> AzLayoutPaddingRight { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_padding_right_fmt_debug(object: &AzLayoutPaddingRight) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutPaddingTop` struct
pub type AzLayoutPaddingTopTT = azul_impl::css::LayoutPaddingTop;
#[no_mangle] pub use AzLayoutPaddingTopTT as AzLayoutPaddingTop;
/// Destructor: Takes ownership of the `LayoutPaddingTop` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_padding_top_delete(object: &mut AzLayoutPaddingTop) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_padding_top_deep_copy(object: &AzLayoutPaddingTop) -> AzLayoutPaddingTop { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_padding_top_fmt_debug(object: &AzLayoutPaddingTop) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutPosition` struct
pub type AzLayoutPositionTT = azul_impl::css::LayoutPosition;
#[no_mangle] pub use AzLayoutPositionTT as AzLayoutPosition;
/// Destructor: Takes ownership of the `LayoutPosition` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_position_delete(object: &mut AzLayoutPosition) { match object { azul_impl::css::LayoutPosition::Static => { }, azul_impl::css::LayoutPosition::Relative => { }, azul_impl::css::LayoutPosition::Absolute => { }, azul_impl::css::LayoutPosition::Fixed => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_position_deep_copy(object: &AzLayoutPosition) -> AzLayoutPosition { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_position_fmt_debug(object: &AzLayoutPosition) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutRight` struct
pub type AzLayoutRightTT = azul_impl::css::LayoutRight;
#[no_mangle] pub use AzLayoutRightTT as AzLayoutRight;
/// Destructor: Takes ownership of the `LayoutRight` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_right_delete(object: &mut AzLayoutRight) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_right_deep_copy(object: &AzLayoutRight) -> AzLayoutRight { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_right_fmt_debug(object: &AzLayoutRight) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutTop` struct
pub type AzLayoutTopTT = azul_impl::css::LayoutTop;
#[no_mangle] pub use AzLayoutTopTT as AzLayoutTop;
/// Destructor: Takes ownership of the `LayoutTop` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_top_delete(object: &mut AzLayoutTop) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_top_deep_copy(object: &AzLayoutTop) -> AzLayoutTop { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_top_fmt_debug(object: &AzLayoutTop) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutWidth` struct
pub type AzLayoutWidthTT = azul_impl::css::LayoutWidth;
#[no_mangle] pub use AzLayoutWidthTT as AzLayoutWidth;
/// Destructor: Takes ownership of the `LayoutWidth` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_width_delete(object: &mut AzLayoutWidth) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_width_deep_copy(object: &AzLayoutWidth) -> AzLayoutWidth { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_width_fmt_debug(object: &AzLayoutWidth) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutWrap` struct
pub type AzLayoutWrapTT = azul_impl::css::LayoutWrap;
#[no_mangle] pub use AzLayoutWrapTT as AzLayoutWrap;
/// Destructor: Takes ownership of the `LayoutWrap` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_wrap_delete(object: &mut AzLayoutWrap) { match object { azul_impl::css::LayoutWrap::Wrap => { }, azul_impl::css::LayoutWrap::NoWrap => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_wrap_deep_copy(object: &AzLayoutWrap) -> AzLayoutWrap { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_wrap_fmt_debug(object: &AzLayoutWrap) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `Overflow` struct
pub type AzOverflowTT = azul_impl::css::Overflow;
#[no_mangle] pub use AzOverflowTT as AzOverflow;
/// Destructor: Takes ownership of the `Overflow` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_overflow_delete(object: &mut AzOverflow) { match object { azul_impl::css::Overflow::Scroll => { }, azul_impl::css::Overflow::Auto => { }, azul_impl::css::Overflow::Hidden => { }, azul_impl::css::Overflow::Visible => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_overflow_deep_copy(object: &AzOverflow) -> AzOverflow { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_overflow_fmt_debug(object: &AzOverflow) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `PercentageValue` struct
pub type AzPercentageValueTT = azul_impl::css::PercentageValue;
#[no_mangle] pub use AzPercentageValueTT as AzPercentageValue;
/// Destructor: Takes ownership of the `PercentageValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_percentage_value_delete(object: &mut AzPercentageValue) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_percentage_value_deep_copy(object: &AzPercentageValue) -> AzPercentageValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_percentage_value_fmt_debug(object: &AzPercentageValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `GradientStopPre` struct
pub type AzGradientStopPreTT = azul_impl::css::GradientStopPre;
#[no_mangle] pub use AzGradientStopPreTT as AzGradientStopPre;
/// Destructor: Takes ownership of the `GradientStopPre` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_gradient_stop_pre_delete(object: &mut AzGradientStopPre) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_gradient_stop_pre_deep_copy(object: &AzGradientStopPre) -> AzGradientStopPre { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_gradient_stop_pre_fmt_debug(object: &AzGradientStopPre) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `DirectionCorner` struct
pub type AzDirectionCornerTT = azul_impl::css::DirectionCorner;
#[no_mangle] pub use AzDirectionCornerTT as AzDirectionCorner;
/// Destructor: Takes ownership of the `DirectionCorner` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_direction_corner_delete(object: &mut AzDirectionCorner) { match object { azul_impl::css::DirectionCorner::Right => { }, azul_impl::css::DirectionCorner::Left => { }, azul_impl::css::DirectionCorner::Top => { }, azul_impl::css::DirectionCorner::Bottom => { }, azul_impl::css::DirectionCorner::TopRight => { }, azul_impl::css::DirectionCorner::TopLeft => { }, azul_impl::css::DirectionCorner::BottomRight => { }, azul_impl::css::DirectionCorner::BottomLeft => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_direction_corner_deep_copy(object: &AzDirectionCorner) -> AzDirectionCorner { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_direction_corner_fmt_debug(object: &AzDirectionCorner) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `DirectionCorners` struct
pub type AzDirectionCornersTT = azul_impl::css::DirectionCorners;
#[no_mangle] pub use AzDirectionCornersTT as AzDirectionCorners;
/// Destructor: Takes ownership of the `DirectionCorners` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_direction_corners_delete(object: &mut AzDirectionCorners) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_direction_corners_deep_copy(object: &AzDirectionCorners) -> AzDirectionCorners { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_direction_corners_fmt_debug(object: &AzDirectionCorners) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `Direction` struct
pub type AzDirectionTT = azul_impl::css::Direction;
#[no_mangle] pub use AzDirectionTT as AzDirection;
/// Destructor: Takes ownership of the `Direction` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_direction_delete(object: &mut AzDirection) { match object { azul_impl::css::Direction::Angle(_) => { }, azul_impl::css::Direction::FromTo(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_direction_deep_copy(object: &AzDirection) -> AzDirection { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_direction_fmt_debug(object: &AzDirection) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `ExtendMode` struct
pub type AzExtendModeTT = azul_impl::css::ExtendMode;
#[no_mangle] pub use AzExtendModeTT as AzExtendMode;
/// Destructor: Takes ownership of the `ExtendMode` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_extend_mode_delete(object: &mut AzExtendMode) { match object { azul_impl::css::ExtendMode::Clamp => { }, azul_impl::css::ExtendMode::Repeat => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_extend_mode_deep_copy(object: &AzExtendMode) -> AzExtendMode { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_extend_mode_fmt_debug(object: &AzExtendMode) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LinearGradient` struct
pub type AzLinearGradientTT = azul_impl::css::LinearGradient;
#[no_mangle] pub use AzLinearGradientTT as AzLinearGradient;
/// Destructor: Takes ownership of the `LinearGradient` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_linear_gradient_delete(object: &mut AzLinearGradient) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_linear_gradient_deep_copy(object: &AzLinearGradient) -> AzLinearGradient { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_linear_gradient_fmt_debug(object: &AzLinearGradient) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `Shape` struct
pub type AzShapeTT = azul_impl::css::Shape;
#[no_mangle] pub use AzShapeTT as AzShape;
/// Destructor: Takes ownership of the `Shape` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_shape_delete(object: &mut AzShape) { match object { azul_impl::css::Shape::Ellipse => { }, azul_impl::css::Shape::Circle => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_shape_deep_copy(object: &AzShape) -> AzShape { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_shape_fmt_debug(object: &AzShape) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `RadialGradient` struct
pub type AzRadialGradientTT = azul_impl::css::RadialGradient;
#[no_mangle] pub use AzRadialGradientTT as AzRadialGradient;
/// Destructor: Takes ownership of the `RadialGradient` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_radial_gradient_delete(object: &mut AzRadialGradient) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_radial_gradient_deep_copy(object: &AzRadialGradient) -> AzRadialGradient { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_radial_gradient_fmt_debug(object: &AzRadialGradient) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `CssImageId` struct
pub type AzCssImageIdTT = azul_impl::css::CssImageId;
#[no_mangle] pub use AzCssImageIdTT as AzCssImageId;
/// Destructor: Takes ownership of the `CssImageId` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_css_image_id_delete(object: &mut AzCssImageId) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_css_image_id_deep_copy(object: &AzCssImageId) -> AzCssImageId { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_css_image_id_fmt_debug(object: &AzCssImageId) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBackgroundContent` struct
pub type AzStyleBackgroundContentTT = azul_impl::css::StyleBackgroundContent;
#[no_mangle] pub use AzStyleBackgroundContentTT as AzStyleBackgroundContent;
/// Destructor: Takes ownership of the `StyleBackgroundContent` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_background_content_delete(object: &mut AzStyleBackgroundContent) { match object { azul_impl::css::StyleBackgroundContent::LinearGradient(_) => { }, azul_impl::css::StyleBackgroundContent::RadialGradient(_) => { }, azul_impl::css::StyleBackgroundContent::Image(_) => { }, azul_impl::css::StyleBackgroundContent::Color(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_background_content_deep_copy(object: &AzStyleBackgroundContent) -> AzStyleBackgroundContent { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_background_content_fmt_debug(object: &AzStyleBackgroundContent) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `BackgroundPositionHorizontal` struct
pub type AzBackgroundPositionHorizontalTT = azul_impl::css::BackgroundPositionHorizontal;
#[no_mangle] pub use AzBackgroundPositionHorizontalTT as AzBackgroundPositionHorizontal;
/// Destructor: Takes ownership of the `BackgroundPositionHorizontal` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_background_position_horizontal_delete(object: &mut AzBackgroundPositionHorizontal) { match object { azul_impl::css::BackgroundPositionHorizontal::Left => { }, azul_impl::css::BackgroundPositionHorizontal::Center => { }, azul_impl::css::BackgroundPositionHorizontal::Right => { }, azul_impl::css::BackgroundPositionHorizontal::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_background_position_horizontal_deep_copy(object: &AzBackgroundPositionHorizontal) -> AzBackgroundPositionHorizontal { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_background_position_horizontal_fmt_debug(object: &AzBackgroundPositionHorizontal) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `BackgroundPositionVertical` struct
pub type AzBackgroundPositionVerticalTT = azul_impl::css::BackgroundPositionVertical;
#[no_mangle] pub use AzBackgroundPositionVerticalTT as AzBackgroundPositionVertical;
/// Destructor: Takes ownership of the `BackgroundPositionVertical` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_background_position_vertical_delete(object: &mut AzBackgroundPositionVertical) { match object { azul_impl::css::BackgroundPositionVertical::Top => { }, azul_impl::css::BackgroundPositionVertical::Center => { }, azul_impl::css::BackgroundPositionVertical::Bottom => { }, azul_impl::css::BackgroundPositionVertical::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_background_position_vertical_deep_copy(object: &AzBackgroundPositionVertical) -> AzBackgroundPositionVertical { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_background_position_vertical_fmt_debug(object: &AzBackgroundPositionVertical) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBackgroundPosition` struct
pub type AzStyleBackgroundPositionTT = azul_impl::css::StyleBackgroundPosition;
#[no_mangle] pub use AzStyleBackgroundPositionTT as AzStyleBackgroundPosition;
/// Destructor: Takes ownership of the `StyleBackgroundPosition` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_background_position_delete(object: &mut AzStyleBackgroundPosition) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_background_position_deep_copy(object: &AzStyleBackgroundPosition) -> AzStyleBackgroundPosition { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_background_position_fmt_debug(object: &AzStyleBackgroundPosition) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBackgroundRepeat` struct
pub type AzStyleBackgroundRepeatTT = azul_impl::css::StyleBackgroundRepeat;
#[no_mangle] pub use AzStyleBackgroundRepeatTT as AzStyleBackgroundRepeat;
/// Destructor: Takes ownership of the `StyleBackgroundRepeat` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_background_repeat_delete(object: &mut AzStyleBackgroundRepeat) { match object { azul_impl::css::StyleBackgroundRepeat::NoRepeat => { }, azul_impl::css::StyleBackgroundRepeat::Repeat => { }, azul_impl::css::StyleBackgroundRepeat::RepeatX => { }, azul_impl::css::StyleBackgroundRepeat::RepeatY => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_background_repeat_deep_copy(object: &AzStyleBackgroundRepeat) -> AzStyleBackgroundRepeat { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_background_repeat_fmt_debug(object: &AzStyleBackgroundRepeat) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBackgroundSize` struct
pub type AzStyleBackgroundSizeTT = azul_impl::css::StyleBackgroundSize;
#[no_mangle] pub use AzStyleBackgroundSizeTT as AzStyleBackgroundSize;
/// Destructor: Takes ownership of the `StyleBackgroundSize` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_background_size_delete(object: &mut AzStyleBackgroundSize) { match object { azul_impl::css::StyleBackgroundSize::ExactSize(_) => { }, azul_impl::css::StyleBackgroundSize::Contain => { }, azul_impl::css::StyleBackgroundSize::Cover => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_background_size_deep_copy(object: &AzStyleBackgroundSize) -> AzStyleBackgroundSize { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_background_size_fmt_debug(object: &AzStyleBackgroundSize) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderBottomColor` struct
pub type AzStyleBorderBottomColorTT = azul_impl::css::StyleBorderBottomColor;
#[no_mangle] pub use AzStyleBorderBottomColorTT as AzStyleBorderBottomColor;
/// Destructor: Takes ownership of the `StyleBorderBottomColor` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_bottom_color_delete(object: &mut AzStyleBorderBottomColor) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_bottom_color_deep_copy(object: &AzStyleBorderBottomColor) -> AzStyleBorderBottomColor { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_bottom_color_fmt_debug(object: &AzStyleBorderBottomColor) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderBottomLeftRadius` struct
pub type AzStyleBorderBottomLeftRadiusTT = azul_impl::css::StyleBorderBottomLeftRadius;
#[no_mangle] pub use AzStyleBorderBottomLeftRadiusTT as AzStyleBorderBottomLeftRadius;
/// Destructor: Takes ownership of the `StyleBorderBottomLeftRadius` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_bottom_left_radius_delete(object: &mut AzStyleBorderBottomLeftRadius) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_bottom_left_radius_deep_copy(object: &AzStyleBorderBottomLeftRadius) -> AzStyleBorderBottomLeftRadius { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_bottom_left_radius_fmt_debug(object: &AzStyleBorderBottomLeftRadius) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderBottomRightRadius` struct
pub type AzStyleBorderBottomRightRadiusTT = azul_impl::css::StyleBorderBottomRightRadius;
#[no_mangle] pub use AzStyleBorderBottomRightRadiusTT as AzStyleBorderBottomRightRadius;
/// Destructor: Takes ownership of the `StyleBorderBottomRightRadius` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_bottom_right_radius_delete(object: &mut AzStyleBorderBottomRightRadius) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_bottom_right_radius_deep_copy(object: &AzStyleBorderBottomRightRadius) -> AzStyleBorderBottomRightRadius { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_bottom_right_radius_fmt_debug(object: &AzStyleBorderBottomRightRadius) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `BorderStyle` struct
pub type AzBorderStyleTT = azul_impl::css::BorderStyle;
#[no_mangle] pub use AzBorderStyleTT as AzBorderStyle;
/// Destructor: Takes ownership of the `BorderStyle` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_border_style_delete(object: &mut AzBorderStyle) { match object { azul_impl::css::BorderStyle::None => { }, azul_impl::css::BorderStyle::Solid => { }, azul_impl::css::BorderStyle::Double => { }, azul_impl::css::BorderStyle::Dotted => { }, azul_impl::css::BorderStyle::Dashed => { }, azul_impl::css::BorderStyle::Hidden => { }, azul_impl::css::BorderStyle::Groove => { }, azul_impl::css::BorderStyle::Ridge => { }, azul_impl::css::BorderStyle::Inset => { }, azul_impl::css::BorderStyle::Outset => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_border_style_deep_copy(object: &AzBorderStyle) -> AzBorderStyle { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_border_style_fmt_debug(object: &AzBorderStyle) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderBottomStyle` struct
pub type AzStyleBorderBottomStyleTT = azul_impl::css::StyleBorderBottomStyle;
#[no_mangle] pub use AzStyleBorderBottomStyleTT as AzStyleBorderBottomStyle;
/// Destructor: Takes ownership of the `StyleBorderBottomStyle` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_bottom_style_delete(object: &mut AzStyleBorderBottomStyle) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_bottom_style_deep_copy(object: &AzStyleBorderBottomStyle) -> AzStyleBorderBottomStyle { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_bottom_style_fmt_debug(object: &AzStyleBorderBottomStyle) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderBottomWidth` struct
pub type AzStyleBorderBottomWidthTT = azul_impl::css::StyleBorderBottomWidth;
#[no_mangle] pub use AzStyleBorderBottomWidthTT as AzStyleBorderBottomWidth;
/// Destructor: Takes ownership of the `StyleBorderBottomWidth` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_bottom_width_delete(object: &mut AzStyleBorderBottomWidth) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_bottom_width_deep_copy(object: &AzStyleBorderBottomWidth) -> AzStyleBorderBottomWidth { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_bottom_width_fmt_debug(object: &AzStyleBorderBottomWidth) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderLeftColor` struct
pub type AzStyleBorderLeftColorTT = azul_impl::css::StyleBorderLeftColor;
#[no_mangle] pub use AzStyleBorderLeftColorTT as AzStyleBorderLeftColor;
/// Destructor: Takes ownership of the `StyleBorderLeftColor` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_left_color_delete(object: &mut AzStyleBorderLeftColor) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_left_color_deep_copy(object: &AzStyleBorderLeftColor) -> AzStyleBorderLeftColor { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_left_color_fmt_debug(object: &AzStyleBorderLeftColor) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderLeftStyle` struct
pub type AzStyleBorderLeftStyleTT = azul_impl::css::StyleBorderLeftStyle;
#[no_mangle] pub use AzStyleBorderLeftStyleTT as AzStyleBorderLeftStyle;
/// Destructor: Takes ownership of the `StyleBorderLeftStyle` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_left_style_delete(object: &mut AzStyleBorderLeftStyle) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_left_style_deep_copy(object: &AzStyleBorderLeftStyle) -> AzStyleBorderLeftStyle { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_left_style_fmt_debug(object: &AzStyleBorderLeftStyle) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderLeftWidth` struct
pub type AzStyleBorderLeftWidthTT = azul_impl::css::StyleBorderLeftWidth;
#[no_mangle] pub use AzStyleBorderLeftWidthTT as AzStyleBorderLeftWidth;
/// Destructor: Takes ownership of the `StyleBorderLeftWidth` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_left_width_delete(object: &mut AzStyleBorderLeftWidth) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_left_width_deep_copy(object: &AzStyleBorderLeftWidth) -> AzStyleBorderLeftWidth { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_left_width_fmt_debug(object: &AzStyleBorderLeftWidth) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderRightColor` struct
pub type AzStyleBorderRightColorTT = azul_impl::css::StyleBorderRightColor;
#[no_mangle] pub use AzStyleBorderRightColorTT as AzStyleBorderRightColor;
/// Destructor: Takes ownership of the `StyleBorderRightColor` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_right_color_delete(object: &mut AzStyleBorderRightColor) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_right_color_deep_copy(object: &AzStyleBorderRightColor) -> AzStyleBorderRightColor { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_right_color_fmt_debug(object: &AzStyleBorderRightColor) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderRightStyle` struct
pub type AzStyleBorderRightStyleTT = azul_impl::css::StyleBorderRightStyle;
#[no_mangle] pub use AzStyleBorderRightStyleTT as AzStyleBorderRightStyle;
/// Destructor: Takes ownership of the `StyleBorderRightStyle` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_right_style_delete(object: &mut AzStyleBorderRightStyle) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_right_style_deep_copy(object: &AzStyleBorderRightStyle) -> AzStyleBorderRightStyle { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_right_style_fmt_debug(object: &AzStyleBorderRightStyle) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderRightWidth` struct
pub type AzStyleBorderRightWidthTT = azul_impl::css::StyleBorderRightWidth;
#[no_mangle] pub use AzStyleBorderRightWidthTT as AzStyleBorderRightWidth;
/// Destructor: Takes ownership of the `StyleBorderRightWidth` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_right_width_delete(object: &mut AzStyleBorderRightWidth) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_right_width_deep_copy(object: &AzStyleBorderRightWidth) -> AzStyleBorderRightWidth { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_right_width_fmt_debug(object: &AzStyleBorderRightWidth) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderTopColor` struct
pub type AzStyleBorderTopColorTT = azul_impl::css::StyleBorderTopColor;
#[no_mangle] pub use AzStyleBorderTopColorTT as AzStyleBorderTopColor;
/// Destructor: Takes ownership of the `StyleBorderTopColor` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_top_color_delete(object: &mut AzStyleBorderTopColor) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_top_color_deep_copy(object: &AzStyleBorderTopColor) -> AzStyleBorderTopColor { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_top_color_fmt_debug(object: &AzStyleBorderTopColor) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderTopLeftRadius` struct
pub type AzStyleBorderTopLeftRadiusTT = azul_impl::css::StyleBorderTopLeftRadius;
#[no_mangle] pub use AzStyleBorderTopLeftRadiusTT as AzStyleBorderTopLeftRadius;
/// Destructor: Takes ownership of the `StyleBorderTopLeftRadius` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_top_left_radius_delete(object: &mut AzStyleBorderTopLeftRadius) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_top_left_radius_deep_copy(object: &AzStyleBorderTopLeftRadius) -> AzStyleBorderTopLeftRadius { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_top_left_radius_fmt_debug(object: &AzStyleBorderTopLeftRadius) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderTopRightRadius` struct
pub type AzStyleBorderTopRightRadiusTT = azul_impl::css::StyleBorderTopRightRadius;
#[no_mangle] pub use AzStyleBorderTopRightRadiusTT as AzStyleBorderTopRightRadius;
/// Destructor: Takes ownership of the `StyleBorderTopRightRadius` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_top_right_radius_delete(object: &mut AzStyleBorderTopRightRadius) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_top_right_radius_deep_copy(object: &AzStyleBorderTopRightRadius) -> AzStyleBorderTopRightRadius { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_top_right_radius_fmt_debug(object: &AzStyleBorderTopRightRadius) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderTopStyle` struct
pub type AzStyleBorderTopStyleTT = azul_impl::css::StyleBorderTopStyle;
#[no_mangle] pub use AzStyleBorderTopStyleTT as AzStyleBorderTopStyle;
/// Destructor: Takes ownership of the `StyleBorderTopStyle` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_top_style_delete(object: &mut AzStyleBorderTopStyle) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_top_style_deep_copy(object: &AzStyleBorderTopStyle) -> AzStyleBorderTopStyle { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_top_style_fmt_debug(object: &AzStyleBorderTopStyle) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderTopWidth` struct
pub type AzStyleBorderTopWidthTT = azul_impl::css::StyleBorderTopWidth;
#[no_mangle] pub use AzStyleBorderTopWidthTT as AzStyleBorderTopWidth;
/// Destructor: Takes ownership of the `StyleBorderTopWidth` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_top_width_delete(object: &mut AzStyleBorderTopWidth) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_top_width_deep_copy(object: &AzStyleBorderTopWidth) -> AzStyleBorderTopWidth { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_top_width_fmt_debug(object: &AzStyleBorderTopWidth) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleCursor` struct
pub type AzStyleCursorTT = azul_impl::css::StyleCursor;
#[no_mangle] pub use AzStyleCursorTT as AzStyleCursor;
/// Destructor: Takes ownership of the `StyleCursor` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_cursor_delete(object: &mut AzStyleCursor) { match object { azul_impl::css::StyleCursor::Alias => { }, azul_impl::css::StyleCursor::AllScroll => { }, azul_impl::css::StyleCursor::Cell => { }, azul_impl::css::StyleCursor::ColResize => { }, azul_impl::css::StyleCursor::ContextMenu => { }, azul_impl::css::StyleCursor::Copy => { }, azul_impl::css::StyleCursor::Crosshair => { }, azul_impl::css::StyleCursor::Default => { }, azul_impl::css::StyleCursor::EResize => { }, azul_impl::css::StyleCursor::EwResize => { }, azul_impl::css::StyleCursor::Grab => { }, azul_impl::css::StyleCursor::Grabbing => { }, azul_impl::css::StyleCursor::Help => { }, azul_impl::css::StyleCursor::Move => { }, azul_impl::css::StyleCursor::NResize => { }, azul_impl::css::StyleCursor::NsResize => { }, azul_impl::css::StyleCursor::NeswResize => { }, azul_impl::css::StyleCursor::NwseResize => { }, azul_impl::css::StyleCursor::Pointer => { }, azul_impl::css::StyleCursor::Progress => { }, azul_impl::css::StyleCursor::RowResize => { }, azul_impl::css::StyleCursor::SResize => { }, azul_impl::css::StyleCursor::SeResize => { }, azul_impl::css::StyleCursor::Text => { }, azul_impl::css::StyleCursor::Unset => { }, azul_impl::css::StyleCursor::VerticalText => { }, azul_impl::css::StyleCursor::WResize => { }, azul_impl::css::StyleCursor::Wait => { }, azul_impl::css::StyleCursor::ZoomIn => { }, azul_impl::css::StyleCursor::ZoomOut => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_cursor_deep_copy(object: &AzStyleCursor) -> AzStyleCursor { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_cursor_fmt_debug(object: &AzStyleCursor) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleFontFamily` struct
pub type AzStyleFontFamilyTT = azul_impl::css::StyleFontFamily;
#[no_mangle] pub use AzStyleFontFamilyTT as AzStyleFontFamily;
/// Destructor: Takes ownership of the `StyleFontFamily` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_font_family_delete(object: &mut AzStyleFontFamily) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_font_family_deep_copy(object: &AzStyleFontFamily) -> AzStyleFontFamily { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_font_family_fmt_debug(object: &AzStyleFontFamily) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleFontSize` struct
pub type AzStyleFontSizeTT = azul_impl::css::StyleFontSize;
#[no_mangle] pub use AzStyleFontSizeTT as AzStyleFontSize;
/// Destructor: Takes ownership of the `StyleFontSize` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_font_size_delete(object: &mut AzStyleFontSize) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_font_size_deep_copy(object: &AzStyleFontSize) -> AzStyleFontSize { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_font_size_fmt_debug(object: &AzStyleFontSize) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleLetterSpacing` struct
pub type AzStyleLetterSpacingTT = azul_impl::css::StyleLetterSpacing;
#[no_mangle] pub use AzStyleLetterSpacingTT as AzStyleLetterSpacing;
/// Destructor: Takes ownership of the `StyleLetterSpacing` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_letter_spacing_delete(object: &mut AzStyleLetterSpacing) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_letter_spacing_deep_copy(object: &AzStyleLetterSpacing) -> AzStyleLetterSpacing { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_letter_spacing_fmt_debug(object: &AzStyleLetterSpacing) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleLineHeight` struct
pub type AzStyleLineHeightTT = azul_impl::css::StyleLineHeight;
#[no_mangle] pub use AzStyleLineHeightTT as AzStyleLineHeight;
/// Destructor: Takes ownership of the `StyleLineHeight` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_line_height_delete(object: &mut AzStyleLineHeight) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_line_height_deep_copy(object: &AzStyleLineHeight) -> AzStyleLineHeight { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_line_height_fmt_debug(object: &AzStyleLineHeight) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleTabWidth` struct
pub type AzStyleTabWidthTT = azul_impl::css::StyleTabWidth;
#[no_mangle] pub use AzStyleTabWidthTT as AzStyleTabWidth;
/// Destructor: Takes ownership of the `StyleTabWidth` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_tab_width_delete(object: &mut AzStyleTabWidth) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_tab_width_deep_copy(object: &AzStyleTabWidth) -> AzStyleTabWidth { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_tab_width_fmt_debug(object: &AzStyleTabWidth) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleTextAlignmentHorz` struct
pub type AzStyleTextAlignmentHorzTT = azul_impl::css::StyleTextAlignmentHorz;
#[no_mangle] pub use AzStyleTextAlignmentHorzTT as AzStyleTextAlignmentHorz;
/// Destructor: Takes ownership of the `StyleTextAlignmentHorz` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_text_alignment_horz_delete(object: &mut AzStyleTextAlignmentHorz) { match object { azul_impl::css::StyleTextAlignmentHorz::Left => { }, azul_impl::css::StyleTextAlignmentHorz::Center => { }, azul_impl::css::StyleTextAlignmentHorz::Right => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_text_alignment_horz_deep_copy(object: &AzStyleTextAlignmentHorz) -> AzStyleTextAlignmentHorz { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_text_alignment_horz_fmt_debug(object: &AzStyleTextAlignmentHorz) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleTextColor` struct
pub type AzStyleTextColorTT = azul_impl::css::StyleTextColor;
#[no_mangle] pub use AzStyleTextColorTT as AzStyleTextColor;
/// Destructor: Takes ownership of the `StyleTextColor` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_text_color_delete(object: &mut AzStyleTextColor) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_text_color_deep_copy(object: &AzStyleTextColor) -> AzStyleTextColor { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_text_color_fmt_debug(object: &AzStyleTextColor) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleWordSpacing` struct
pub type AzStyleWordSpacingTT = azul_impl::css::StyleWordSpacing;
#[no_mangle] pub use AzStyleWordSpacingTT as AzStyleWordSpacing;
/// Destructor: Takes ownership of the `StyleWordSpacing` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_word_spacing_delete(object: &mut AzStyleWordSpacing) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_word_spacing_deep_copy(object: &AzStyleWordSpacing) -> AzStyleWordSpacing { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_word_spacing_fmt_debug(object: &AzStyleWordSpacing) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `BoxShadowPreDisplayItemValue` struct
pub type AzBoxShadowPreDisplayItemValueTT = azul_impl::css::CssPropertyValue::<BoxShadowPreDisplayItem>;
#[no_mangle] pub use AzBoxShadowPreDisplayItemValueTT as AzBoxShadowPreDisplayItemValue;
/// Destructor: Takes ownership of the `BoxShadowPreDisplayItemValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_box_shadow_pre_display_item_value_delete(object: &mut AzBoxShadowPreDisplayItemValue) { match object { azul_impl::css::CssPropertyValue::<BoxShadowPreDisplayItem>::Auto => { }, azul_impl::css::CssPropertyValue::<BoxShadowPreDisplayItem>::None => { }, azul_impl::css::CssPropertyValue::<BoxShadowPreDisplayItem>::Inherit => { }, azul_impl::css::CssPropertyValue::<BoxShadowPreDisplayItem>::Initial => { }, azul_impl::css::CssPropertyValue::<BoxShadowPreDisplayItem>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_box_shadow_pre_display_item_value_deep_copy(object: &AzBoxShadowPreDisplayItemValue) -> AzBoxShadowPreDisplayItemValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_box_shadow_pre_display_item_value_fmt_debug(object: &AzBoxShadowPreDisplayItemValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutAlignContentValue` struct
pub type AzLayoutAlignContentValueTT = azul_impl::css::CssPropertyValue::<LayoutAlignContent>;
#[no_mangle] pub use AzLayoutAlignContentValueTT as AzLayoutAlignContentValue;
/// Destructor: Takes ownership of the `LayoutAlignContentValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_align_content_value_delete(object: &mut AzLayoutAlignContentValue) { match object { azul_impl::css::CssPropertyValue::<LayoutAlignContent>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutAlignContent>::None => { }, azul_impl::css::CssPropertyValue::<LayoutAlignContent>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutAlignContent>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutAlignContent>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_align_content_value_deep_copy(object: &AzLayoutAlignContentValue) -> AzLayoutAlignContentValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_align_content_value_fmt_debug(object: &AzLayoutAlignContentValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutAlignItemsValue` struct
pub type AzLayoutAlignItemsValueTT = azul_impl::css::CssPropertyValue::<LayoutAlignItems>;
#[no_mangle] pub use AzLayoutAlignItemsValueTT as AzLayoutAlignItemsValue;
/// Destructor: Takes ownership of the `LayoutAlignItemsValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_align_items_value_delete(object: &mut AzLayoutAlignItemsValue) { match object { azul_impl::css::CssPropertyValue::<LayoutAlignItems>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutAlignItems>::None => { }, azul_impl::css::CssPropertyValue::<LayoutAlignItems>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutAlignItems>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutAlignItems>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_align_items_value_deep_copy(object: &AzLayoutAlignItemsValue) -> AzLayoutAlignItemsValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_align_items_value_fmt_debug(object: &AzLayoutAlignItemsValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutBottomValue` struct
pub type AzLayoutBottomValueTT = azul_impl::css::CssPropertyValue::<LayoutBottom>;
#[no_mangle] pub use AzLayoutBottomValueTT as AzLayoutBottomValue;
/// Destructor: Takes ownership of the `LayoutBottomValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_bottom_value_delete(object: &mut AzLayoutBottomValue) { match object { azul_impl::css::CssPropertyValue::<LayoutBottom>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutBottom>::None => { }, azul_impl::css::CssPropertyValue::<LayoutBottom>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutBottom>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutBottom>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_bottom_value_deep_copy(object: &AzLayoutBottomValue) -> AzLayoutBottomValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_bottom_value_fmt_debug(object: &AzLayoutBottomValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutBoxSizingValue` struct
pub type AzLayoutBoxSizingValueTT = azul_impl::css::CssPropertyValue::<LayoutBoxSizing>;
#[no_mangle] pub use AzLayoutBoxSizingValueTT as AzLayoutBoxSizingValue;
/// Destructor: Takes ownership of the `LayoutBoxSizingValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_box_sizing_value_delete(object: &mut AzLayoutBoxSizingValue) { match object { azul_impl::css::CssPropertyValue::<LayoutBoxSizing>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutBoxSizing>::None => { }, azul_impl::css::CssPropertyValue::<LayoutBoxSizing>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutBoxSizing>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutBoxSizing>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_box_sizing_value_deep_copy(object: &AzLayoutBoxSizingValue) -> AzLayoutBoxSizingValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_box_sizing_value_fmt_debug(object: &AzLayoutBoxSizingValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutDirectionValue` struct
pub type AzLayoutDirectionValueTT = azul_impl::css::CssPropertyValue::<LayoutDirection>;
#[no_mangle] pub use AzLayoutDirectionValueTT as AzLayoutDirectionValue;
/// Destructor: Takes ownership of the `LayoutDirectionValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_direction_value_delete(object: &mut AzLayoutDirectionValue) { match object { azul_impl::css::CssPropertyValue::<LayoutDirection>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutDirection>::None => { }, azul_impl::css::CssPropertyValue::<LayoutDirection>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutDirection>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutDirection>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_direction_value_deep_copy(object: &AzLayoutDirectionValue) -> AzLayoutDirectionValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_direction_value_fmt_debug(object: &AzLayoutDirectionValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutDisplayValue` struct
pub type AzLayoutDisplayValueTT = azul_impl::css::CssPropertyValue::<LayoutDisplay>;
#[no_mangle] pub use AzLayoutDisplayValueTT as AzLayoutDisplayValue;
/// Destructor: Takes ownership of the `LayoutDisplayValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_display_value_delete(object: &mut AzLayoutDisplayValue) { match object { azul_impl::css::CssPropertyValue::<LayoutDisplay>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutDisplay>::None => { }, azul_impl::css::CssPropertyValue::<LayoutDisplay>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutDisplay>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutDisplay>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_display_value_deep_copy(object: &AzLayoutDisplayValue) -> AzLayoutDisplayValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_display_value_fmt_debug(object: &AzLayoutDisplayValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutFlexGrowValue` struct
pub type AzLayoutFlexGrowValueTT = azul_impl::css::CssPropertyValue::<LayoutFlexGrow>;
#[no_mangle] pub use AzLayoutFlexGrowValueTT as AzLayoutFlexGrowValue;
/// Destructor: Takes ownership of the `LayoutFlexGrowValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_flex_grow_value_delete(object: &mut AzLayoutFlexGrowValue) { match object { azul_impl::css::CssPropertyValue::<LayoutFlexGrow>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutFlexGrow>::None => { }, azul_impl::css::CssPropertyValue::<LayoutFlexGrow>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutFlexGrow>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutFlexGrow>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_flex_grow_value_deep_copy(object: &AzLayoutFlexGrowValue) -> AzLayoutFlexGrowValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_flex_grow_value_fmt_debug(object: &AzLayoutFlexGrowValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutFlexShrinkValue` struct
pub type AzLayoutFlexShrinkValueTT = azul_impl::css::CssPropertyValue::<LayoutFlexShrink>;
#[no_mangle] pub use AzLayoutFlexShrinkValueTT as AzLayoutFlexShrinkValue;
/// Destructor: Takes ownership of the `LayoutFlexShrinkValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_flex_shrink_value_delete(object: &mut AzLayoutFlexShrinkValue) { match object { azul_impl::css::CssPropertyValue::<LayoutFlexShrink>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutFlexShrink>::None => { }, azul_impl::css::CssPropertyValue::<LayoutFlexShrink>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutFlexShrink>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutFlexShrink>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_flex_shrink_value_deep_copy(object: &AzLayoutFlexShrinkValue) -> AzLayoutFlexShrinkValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_flex_shrink_value_fmt_debug(object: &AzLayoutFlexShrinkValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutFloatValue` struct
pub type AzLayoutFloatValueTT = azul_impl::css::CssPropertyValue::<LayoutFloat>;
#[no_mangle] pub use AzLayoutFloatValueTT as AzLayoutFloatValue;
/// Destructor: Takes ownership of the `LayoutFloatValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_float_value_delete(object: &mut AzLayoutFloatValue) { match object { azul_impl::css::CssPropertyValue::<LayoutFloat>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutFloat>::None => { }, azul_impl::css::CssPropertyValue::<LayoutFloat>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutFloat>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutFloat>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_float_value_deep_copy(object: &AzLayoutFloatValue) -> AzLayoutFloatValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_float_value_fmt_debug(object: &AzLayoutFloatValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutHeightValue` struct
pub type AzLayoutHeightValueTT = azul_impl::css::CssPropertyValue::<LayoutHeight>;
#[no_mangle] pub use AzLayoutHeightValueTT as AzLayoutHeightValue;
/// Destructor: Takes ownership of the `LayoutHeightValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_height_value_delete(object: &mut AzLayoutHeightValue) { match object { azul_impl::css::CssPropertyValue::<LayoutHeight>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutHeight>::None => { }, azul_impl::css::CssPropertyValue::<LayoutHeight>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutHeight>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutHeight>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_height_value_deep_copy(object: &AzLayoutHeightValue) -> AzLayoutHeightValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_height_value_fmt_debug(object: &AzLayoutHeightValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutJustifyContentValue` struct
pub type AzLayoutJustifyContentValueTT = azul_impl::css::CssPropertyValue::<LayoutJustifyContent>;
#[no_mangle] pub use AzLayoutJustifyContentValueTT as AzLayoutJustifyContentValue;
/// Destructor: Takes ownership of the `LayoutJustifyContentValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_justify_content_value_delete(object: &mut AzLayoutJustifyContentValue) { match object { azul_impl::css::CssPropertyValue::<LayoutJustifyContent>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutJustifyContent>::None => { }, azul_impl::css::CssPropertyValue::<LayoutJustifyContent>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutJustifyContent>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutJustifyContent>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_justify_content_value_deep_copy(object: &AzLayoutJustifyContentValue) -> AzLayoutJustifyContentValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_justify_content_value_fmt_debug(object: &AzLayoutJustifyContentValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutLeftValue` struct
pub type AzLayoutLeftValueTT = azul_impl::css::CssPropertyValue::<LayoutLeft>;
#[no_mangle] pub use AzLayoutLeftValueTT as AzLayoutLeftValue;
/// Destructor: Takes ownership of the `LayoutLeftValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_left_value_delete(object: &mut AzLayoutLeftValue) { match object { azul_impl::css::CssPropertyValue::<LayoutLeft>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutLeft>::None => { }, azul_impl::css::CssPropertyValue::<LayoutLeft>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutLeft>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutLeft>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_left_value_deep_copy(object: &AzLayoutLeftValue) -> AzLayoutLeftValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_left_value_fmt_debug(object: &AzLayoutLeftValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutMarginBottomValue` struct
pub type AzLayoutMarginBottomValueTT = azul_impl::css::CssPropertyValue::<LayoutMarginBottom>;
#[no_mangle] pub use AzLayoutMarginBottomValueTT as AzLayoutMarginBottomValue;
/// Destructor: Takes ownership of the `LayoutMarginBottomValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_margin_bottom_value_delete(object: &mut AzLayoutMarginBottomValue) { match object { azul_impl::css::CssPropertyValue::<LayoutMarginBottom>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutMarginBottom>::None => { }, azul_impl::css::CssPropertyValue::<LayoutMarginBottom>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutMarginBottom>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutMarginBottom>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_margin_bottom_value_deep_copy(object: &AzLayoutMarginBottomValue) -> AzLayoutMarginBottomValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_margin_bottom_value_fmt_debug(object: &AzLayoutMarginBottomValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutMarginLeftValue` struct
pub type AzLayoutMarginLeftValueTT = azul_impl::css::CssPropertyValue::<LayoutMarginLeft>;
#[no_mangle] pub use AzLayoutMarginLeftValueTT as AzLayoutMarginLeftValue;
/// Destructor: Takes ownership of the `LayoutMarginLeftValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_margin_left_value_delete(object: &mut AzLayoutMarginLeftValue) { match object { azul_impl::css::CssPropertyValue::<LayoutMarginLeft>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutMarginLeft>::None => { }, azul_impl::css::CssPropertyValue::<LayoutMarginLeft>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutMarginLeft>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutMarginLeft>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_margin_left_value_deep_copy(object: &AzLayoutMarginLeftValue) -> AzLayoutMarginLeftValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_margin_left_value_fmt_debug(object: &AzLayoutMarginLeftValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutMarginRightValue` struct
pub type AzLayoutMarginRightValueTT = azul_impl::css::CssPropertyValue::<LayoutMarginRight>;
#[no_mangle] pub use AzLayoutMarginRightValueTT as AzLayoutMarginRightValue;
/// Destructor: Takes ownership of the `LayoutMarginRightValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_margin_right_value_delete(object: &mut AzLayoutMarginRightValue) { match object { azul_impl::css::CssPropertyValue::<LayoutMarginRight>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutMarginRight>::None => { }, azul_impl::css::CssPropertyValue::<LayoutMarginRight>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutMarginRight>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutMarginRight>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_margin_right_value_deep_copy(object: &AzLayoutMarginRightValue) -> AzLayoutMarginRightValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_margin_right_value_fmt_debug(object: &AzLayoutMarginRightValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutMarginTopValue` struct
pub type AzLayoutMarginTopValueTT = azul_impl::css::CssPropertyValue::<LayoutMarginTop>;
#[no_mangle] pub use AzLayoutMarginTopValueTT as AzLayoutMarginTopValue;
/// Destructor: Takes ownership of the `LayoutMarginTopValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_margin_top_value_delete(object: &mut AzLayoutMarginTopValue) { match object { azul_impl::css::CssPropertyValue::<LayoutMarginTop>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutMarginTop>::None => { }, azul_impl::css::CssPropertyValue::<LayoutMarginTop>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutMarginTop>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutMarginTop>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_margin_top_value_deep_copy(object: &AzLayoutMarginTopValue) -> AzLayoutMarginTopValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_margin_top_value_fmt_debug(object: &AzLayoutMarginTopValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutMaxHeightValue` struct
pub type AzLayoutMaxHeightValueTT = azul_impl::css::CssPropertyValue::<LayoutMaxHeight>;
#[no_mangle] pub use AzLayoutMaxHeightValueTT as AzLayoutMaxHeightValue;
/// Destructor: Takes ownership of the `LayoutMaxHeightValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_max_height_value_delete(object: &mut AzLayoutMaxHeightValue) { match object { azul_impl::css::CssPropertyValue::<LayoutMaxHeight>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutMaxHeight>::None => { }, azul_impl::css::CssPropertyValue::<LayoutMaxHeight>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutMaxHeight>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutMaxHeight>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_max_height_value_deep_copy(object: &AzLayoutMaxHeightValue) -> AzLayoutMaxHeightValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_max_height_value_fmt_debug(object: &AzLayoutMaxHeightValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutMaxWidthValue` struct
pub type AzLayoutMaxWidthValueTT = azul_impl::css::CssPropertyValue::<LayoutMaxWidth>;
#[no_mangle] pub use AzLayoutMaxWidthValueTT as AzLayoutMaxWidthValue;
/// Destructor: Takes ownership of the `LayoutMaxWidthValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_max_width_value_delete(object: &mut AzLayoutMaxWidthValue) { match object { azul_impl::css::CssPropertyValue::<LayoutMaxWidth>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutMaxWidth>::None => { }, azul_impl::css::CssPropertyValue::<LayoutMaxWidth>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutMaxWidth>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutMaxWidth>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_max_width_value_deep_copy(object: &AzLayoutMaxWidthValue) -> AzLayoutMaxWidthValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_max_width_value_fmt_debug(object: &AzLayoutMaxWidthValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutMinHeightValue` struct
pub type AzLayoutMinHeightValueTT = azul_impl::css::CssPropertyValue::<LayoutMinHeight>;
#[no_mangle] pub use AzLayoutMinHeightValueTT as AzLayoutMinHeightValue;
/// Destructor: Takes ownership of the `LayoutMinHeightValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_min_height_value_delete(object: &mut AzLayoutMinHeightValue) { match object { azul_impl::css::CssPropertyValue::<LayoutMinHeight>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutMinHeight>::None => { }, azul_impl::css::CssPropertyValue::<LayoutMinHeight>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutMinHeight>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutMinHeight>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_min_height_value_deep_copy(object: &AzLayoutMinHeightValue) -> AzLayoutMinHeightValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_min_height_value_fmt_debug(object: &AzLayoutMinHeightValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutMinWidthValue` struct
pub type AzLayoutMinWidthValueTT = azul_impl::css::CssPropertyValue::<LayoutMinWidth>;
#[no_mangle] pub use AzLayoutMinWidthValueTT as AzLayoutMinWidthValue;
/// Destructor: Takes ownership of the `LayoutMinWidthValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_min_width_value_delete(object: &mut AzLayoutMinWidthValue) { match object { azul_impl::css::CssPropertyValue::<LayoutMinWidth>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutMinWidth>::None => { }, azul_impl::css::CssPropertyValue::<LayoutMinWidth>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutMinWidth>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutMinWidth>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_min_width_value_deep_copy(object: &AzLayoutMinWidthValue) -> AzLayoutMinWidthValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_min_width_value_fmt_debug(object: &AzLayoutMinWidthValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutPaddingBottomValue` struct
pub type AzLayoutPaddingBottomValueTT = azul_impl::css::CssPropertyValue::<LayoutPaddingBottom>;
#[no_mangle] pub use AzLayoutPaddingBottomValueTT as AzLayoutPaddingBottomValue;
/// Destructor: Takes ownership of the `LayoutPaddingBottomValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_padding_bottom_value_delete(object: &mut AzLayoutPaddingBottomValue) { match object { azul_impl::css::CssPropertyValue::<LayoutPaddingBottom>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutPaddingBottom>::None => { }, azul_impl::css::CssPropertyValue::<LayoutPaddingBottom>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutPaddingBottom>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutPaddingBottom>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_padding_bottom_value_deep_copy(object: &AzLayoutPaddingBottomValue) -> AzLayoutPaddingBottomValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_padding_bottom_value_fmt_debug(object: &AzLayoutPaddingBottomValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutPaddingLeftValue` struct
pub type AzLayoutPaddingLeftValueTT = azul_impl::css::CssPropertyValue::<LayoutPaddingLeft>;
#[no_mangle] pub use AzLayoutPaddingLeftValueTT as AzLayoutPaddingLeftValue;
/// Destructor: Takes ownership of the `LayoutPaddingLeftValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_padding_left_value_delete(object: &mut AzLayoutPaddingLeftValue) { match object { azul_impl::css::CssPropertyValue::<LayoutPaddingLeft>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutPaddingLeft>::None => { }, azul_impl::css::CssPropertyValue::<LayoutPaddingLeft>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutPaddingLeft>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutPaddingLeft>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_padding_left_value_deep_copy(object: &AzLayoutPaddingLeftValue) -> AzLayoutPaddingLeftValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_padding_left_value_fmt_debug(object: &AzLayoutPaddingLeftValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutPaddingRightValue` struct
pub type AzLayoutPaddingRightValueTT = azul_impl::css::CssPropertyValue::<LayoutPaddingRight>;
#[no_mangle] pub use AzLayoutPaddingRightValueTT as AzLayoutPaddingRightValue;
/// Destructor: Takes ownership of the `LayoutPaddingRightValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_padding_right_value_delete(object: &mut AzLayoutPaddingRightValue) { match object { azul_impl::css::CssPropertyValue::<LayoutPaddingRight>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutPaddingRight>::None => { }, azul_impl::css::CssPropertyValue::<LayoutPaddingRight>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutPaddingRight>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutPaddingRight>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_padding_right_value_deep_copy(object: &AzLayoutPaddingRightValue) -> AzLayoutPaddingRightValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_padding_right_value_fmt_debug(object: &AzLayoutPaddingRightValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutPaddingTopValue` struct
pub type AzLayoutPaddingTopValueTT = azul_impl::css::CssPropertyValue::<LayoutPaddingTop>;
#[no_mangle] pub use AzLayoutPaddingTopValueTT as AzLayoutPaddingTopValue;
/// Destructor: Takes ownership of the `LayoutPaddingTopValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_padding_top_value_delete(object: &mut AzLayoutPaddingTopValue) { match object { azul_impl::css::CssPropertyValue::<LayoutPaddingTop>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutPaddingTop>::None => { }, azul_impl::css::CssPropertyValue::<LayoutPaddingTop>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutPaddingTop>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutPaddingTop>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_padding_top_value_deep_copy(object: &AzLayoutPaddingTopValue) -> AzLayoutPaddingTopValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_padding_top_value_fmt_debug(object: &AzLayoutPaddingTopValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutPositionValue` struct
pub type AzLayoutPositionValueTT = azul_impl::css::CssPropertyValue::<LayoutPosition>;
#[no_mangle] pub use AzLayoutPositionValueTT as AzLayoutPositionValue;
/// Destructor: Takes ownership of the `LayoutPositionValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_position_value_delete(object: &mut AzLayoutPositionValue) { match object { azul_impl::css::CssPropertyValue::<LayoutPosition>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutPosition>::None => { }, azul_impl::css::CssPropertyValue::<LayoutPosition>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutPosition>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutPosition>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_position_value_deep_copy(object: &AzLayoutPositionValue) -> AzLayoutPositionValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_position_value_fmt_debug(object: &AzLayoutPositionValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutRightValue` struct
pub type AzLayoutRightValueTT = azul_impl::css::CssPropertyValue::<LayoutRight>;
#[no_mangle] pub use AzLayoutRightValueTT as AzLayoutRightValue;
/// Destructor: Takes ownership of the `LayoutRightValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_right_value_delete(object: &mut AzLayoutRightValue) { match object { azul_impl::css::CssPropertyValue::<LayoutRight>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutRight>::None => { }, azul_impl::css::CssPropertyValue::<LayoutRight>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutRight>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutRight>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_right_value_deep_copy(object: &AzLayoutRightValue) -> AzLayoutRightValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_right_value_fmt_debug(object: &AzLayoutRightValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutTopValue` struct
pub type AzLayoutTopValueTT = azul_impl::css::CssPropertyValue::<LayoutTop>;
#[no_mangle] pub use AzLayoutTopValueTT as AzLayoutTopValue;
/// Destructor: Takes ownership of the `LayoutTopValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_top_value_delete(object: &mut AzLayoutTopValue) { match object { azul_impl::css::CssPropertyValue::<LayoutTop>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutTop>::None => { }, azul_impl::css::CssPropertyValue::<LayoutTop>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutTop>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutTop>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_top_value_deep_copy(object: &AzLayoutTopValue) -> AzLayoutTopValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_top_value_fmt_debug(object: &AzLayoutTopValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutWidthValue` struct
pub type AzLayoutWidthValueTT = azul_impl::css::CssPropertyValue::<LayoutWidth>;
#[no_mangle] pub use AzLayoutWidthValueTT as AzLayoutWidthValue;
/// Destructor: Takes ownership of the `LayoutWidthValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_width_value_delete(object: &mut AzLayoutWidthValue) { match object { azul_impl::css::CssPropertyValue::<LayoutWidth>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutWidth>::None => { }, azul_impl::css::CssPropertyValue::<LayoutWidth>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutWidth>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutWidth>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_width_value_deep_copy(object: &AzLayoutWidthValue) -> AzLayoutWidthValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_width_value_fmt_debug(object: &AzLayoutWidthValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LayoutWrapValue` struct
pub type AzLayoutWrapValueTT = azul_impl::css::CssPropertyValue::<LayoutWrap>;
#[no_mangle] pub use AzLayoutWrapValueTT as AzLayoutWrapValue;
/// Destructor: Takes ownership of the `LayoutWrapValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_wrap_value_delete(object: &mut AzLayoutWrapValue) { match object { azul_impl::css::CssPropertyValue::<LayoutWrap>::Auto => { }, azul_impl::css::CssPropertyValue::<LayoutWrap>::None => { }, azul_impl::css::CssPropertyValue::<LayoutWrap>::Inherit => { }, azul_impl::css::CssPropertyValue::<LayoutWrap>::Initial => { }, azul_impl::css::CssPropertyValue::<LayoutWrap>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_layout_wrap_value_deep_copy(object: &AzLayoutWrapValue) -> AzLayoutWrapValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_layout_wrap_value_fmt_debug(object: &AzLayoutWrapValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OverflowValue` struct
pub type AzOverflowValueTT = azul_impl::css::CssPropertyValue::<Overflow>;
#[no_mangle] pub use AzOverflowValueTT as AzOverflowValue;
/// Destructor: Takes ownership of the `OverflowValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_overflow_value_delete(object: &mut AzOverflowValue) { match object { azul_impl::css::CssPropertyValue::<Overflow>::Auto => { }, azul_impl::css::CssPropertyValue::<Overflow>::None => { }, azul_impl::css::CssPropertyValue::<Overflow>::Inherit => { }, azul_impl::css::CssPropertyValue::<Overflow>::Initial => { }, azul_impl::css::CssPropertyValue::<Overflow>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_overflow_value_deep_copy(object: &AzOverflowValue) -> AzOverflowValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_overflow_value_fmt_debug(object: &AzOverflowValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBackgroundContentValue` struct
pub type AzStyleBackgroundContentValueTT = azul_impl::css::CssPropertyValue::<StyleBackgroundContent>;
#[no_mangle] pub use AzStyleBackgroundContentValueTT as AzStyleBackgroundContentValue;
/// Destructor: Takes ownership of the `StyleBackgroundContentValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_background_content_value_delete(object: &mut AzStyleBackgroundContentValue) { match object { azul_impl::css::CssPropertyValue::<StyleBackgroundContent>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleBackgroundContent>::None => { }, azul_impl::css::CssPropertyValue::<StyleBackgroundContent>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleBackgroundContent>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleBackgroundContent>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_background_content_value_deep_copy(object: &AzStyleBackgroundContentValue) -> AzStyleBackgroundContentValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_background_content_value_fmt_debug(object: &AzStyleBackgroundContentValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBackgroundPositionValue` struct
pub type AzStyleBackgroundPositionValueTT = azul_impl::css::CssPropertyValue::<StyleBackgroundPosition>;
#[no_mangle] pub use AzStyleBackgroundPositionValueTT as AzStyleBackgroundPositionValue;
/// Destructor: Takes ownership of the `StyleBackgroundPositionValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_background_position_value_delete(object: &mut AzStyleBackgroundPositionValue) { match object { azul_impl::css::CssPropertyValue::<StyleBackgroundPosition>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleBackgroundPosition>::None => { }, azul_impl::css::CssPropertyValue::<StyleBackgroundPosition>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleBackgroundPosition>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleBackgroundPosition>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_background_position_value_deep_copy(object: &AzStyleBackgroundPositionValue) -> AzStyleBackgroundPositionValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_background_position_value_fmt_debug(object: &AzStyleBackgroundPositionValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBackgroundRepeatValue` struct
pub type AzStyleBackgroundRepeatValueTT = azul_impl::css::CssPropertyValue::<StyleBackgroundRepeat>;
#[no_mangle] pub use AzStyleBackgroundRepeatValueTT as AzStyleBackgroundRepeatValue;
/// Destructor: Takes ownership of the `StyleBackgroundRepeatValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_background_repeat_value_delete(object: &mut AzStyleBackgroundRepeatValue) { match object { azul_impl::css::CssPropertyValue::<StyleBackgroundRepeat>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleBackgroundRepeat>::None => { }, azul_impl::css::CssPropertyValue::<StyleBackgroundRepeat>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleBackgroundRepeat>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleBackgroundRepeat>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_background_repeat_value_deep_copy(object: &AzStyleBackgroundRepeatValue) -> AzStyleBackgroundRepeatValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_background_repeat_value_fmt_debug(object: &AzStyleBackgroundRepeatValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBackgroundSizeValue` struct
pub type AzStyleBackgroundSizeValueTT = azul_impl::css::CssPropertyValue::<StyleBackgroundSize>;
#[no_mangle] pub use AzStyleBackgroundSizeValueTT as AzStyleBackgroundSizeValue;
/// Destructor: Takes ownership of the `StyleBackgroundSizeValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_background_size_value_delete(object: &mut AzStyleBackgroundSizeValue) { match object { azul_impl::css::CssPropertyValue::<StyleBackgroundSize>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleBackgroundSize>::None => { }, azul_impl::css::CssPropertyValue::<StyleBackgroundSize>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleBackgroundSize>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleBackgroundSize>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_background_size_value_deep_copy(object: &AzStyleBackgroundSizeValue) -> AzStyleBackgroundSizeValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_background_size_value_fmt_debug(object: &AzStyleBackgroundSizeValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderBottomColorValue` struct
pub type AzStyleBorderBottomColorValueTT = azul_impl::css::CssPropertyValue::<StyleBorderBottomColor>;
#[no_mangle] pub use AzStyleBorderBottomColorValueTT as AzStyleBorderBottomColorValue;
/// Destructor: Takes ownership of the `StyleBorderBottomColorValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_bottom_color_value_delete(object: &mut AzStyleBorderBottomColorValue) { match object { azul_impl::css::CssPropertyValue::<StyleBorderBottomColor>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleBorderBottomColor>::None => { }, azul_impl::css::CssPropertyValue::<StyleBorderBottomColor>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleBorderBottomColor>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleBorderBottomColor>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_bottom_color_value_deep_copy(object: &AzStyleBorderBottomColorValue) -> AzStyleBorderBottomColorValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_bottom_color_value_fmt_debug(object: &AzStyleBorderBottomColorValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderBottomLeftRadiusValue` struct
pub type AzStyleBorderBottomLeftRadiusValueTT = azul_impl::css::CssPropertyValue::<StyleBorderBottomLeftRadius>;
#[no_mangle] pub use AzStyleBorderBottomLeftRadiusValueTT as AzStyleBorderBottomLeftRadiusValue;
/// Destructor: Takes ownership of the `StyleBorderBottomLeftRadiusValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_bottom_left_radius_value_delete(object: &mut AzStyleBorderBottomLeftRadiusValue) { match object { azul_impl::css::CssPropertyValue::<StyleBorderBottomLeftRadius>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleBorderBottomLeftRadius>::None => { }, azul_impl::css::CssPropertyValue::<StyleBorderBottomLeftRadius>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleBorderBottomLeftRadius>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleBorderBottomLeftRadius>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_bottom_left_radius_value_deep_copy(object: &AzStyleBorderBottomLeftRadiusValue) -> AzStyleBorderBottomLeftRadiusValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_bottom_left_radius_value_fmt_debug(object: &AzStyleBorderBottomLeftRadiusValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderBottomRightRadiusValue` struct
pub type AzStyleBorderBottomRightRadiusValueTT = azul_impl::css::CssPropertyValue::<StyleBorderBottomRightRadius>;
#[no_mangle] pub use AzStyleBorderBottomRightRadiusValueTT as AzStyleBorderBottomRightRadiusValue;
/// Destructor: Takes ownership of the `StyleBorderBottomRightRadiusValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_bottom_right_radius_value_delete(object: &mut AzStyleBorderBottomRightRadiusValue) { match object { azul_impl::css::CssPropertyValue::<StyleBorderBottomRightRadius>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleBorderBottomRightRadius>::None => { }, azul_impl::css::CssPropertyValue::<StyleBorderBottomRightRadius>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleBorderBottomRightRadius>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleBorderBottomRightRadius>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_bottom_right_radius_value_deep_copy(object: &AzStyleBorderBottomRightRadiusValue) -> AzStyleBorderBottomRightRadiusValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_bottom_right_radius_value_fmt_debug(object: &AzStyleBorderBottomRightRadiusValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderBottomStyleValue` struct
pub type AzStyleBorderBottomStyleValueTT = azul_impl::css::CssPropertyValue::<StyleBorderBottomStyle>;
#[no_mangle] pub use AzStyleBorderBottomStyleValueTT as AzStyleBorderBottomStyleValue;
/// Destructor: Takes ownership of the `StyleBorderBottomStyleValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_bottom_style_value_delete(object: &mut AzStyleBorderBottomStyleValue) { match object { azul_impl::css::CssPropertyValue::<StyleBorderBottomStyle>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleBorderBottomStyle>::None => { }, azul_impl::css::CssPropertyValue::<StyleBorderBottomStyle>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleBorderBottomStyle>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleBorderBottomStyle>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_bottom_style_value_deep_copy(object: &AzStyleBorderBottomStyleValue) -> AzStyleBorderBottomStyleValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_bottom_style_value_fmt_debug(object: &AzStyleBorderBottomStyleValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderBottomWidthValue` struct
pub type AzStyleBorderBottomWidthValueTT = azul_impl::css::CssPropertyValue::<StyleBorderBottomWidth>;
#[no_mangle] pub use AzStyleBorderBottomWidthValueTT as AzStyleBorderBottomWidthValue;
/// Destructor: Takes ownership of the `StyleBorderBottomWidthValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_bottom_width_value_delete(object: &mut AzStyleBorderBottomWidthValue) { match object { azul_impl::css::CssPropertyValue::<StyleBorderBottomWidth>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleBorderBottomWidth>::None => { }, azul_impl::css::CssPropertyValue::<StyleBorderBottomWidth>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleBorderBottomWidth>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleBorderBottomWidth>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_bottom_width_value_deep_copy(object: &AzStyleBorderBottomWidthValue) -> AzStyleBorderBottomWidthValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_bottom_width_value_fmt_debug(object: &AzStyleBorderBottomWidthValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderLeftColorValue` struct
pub type AzStyleBorderLeftColorValueTT = azul_impl::css::CssPropertyValue::<StyleBorderLeftColor>;
#[no_mangle] pub use AzStyleBorderLeftColorValueTT as AzStyleBorderLeftColorValue;
/// Destructor: Takes ownership of the `StyleBorderLeftColorValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_left_color_value_delete(object: &mut AzStyleBorderLeftColorValue) { match object { azul_impl::css::CssPropertyValue::<StyleBorderLeftColor>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleBorderLeftColor>::None => { }, azul_impl::css::CssPropertyValue::<StyleBorderLeftColor>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleBorderLeftColor>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleBorderLeftColor>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_left_color_value_deep_copy(object: &AzStyleBorderLeftColorValue) -> AzStyleBorderLeftColorValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_left_color_value_fmt_debug(object: &AzStyleBorderLeftColorValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderLeftStyleValue` struct
pub type AzStyleBorderLeftStyleValueTT = azul_impl::css::CssPropertyValue::<StyleBorderLeftStyle>;
#[no_mangle] pub use AzStyleBorderLeftStyleValueTT as AzStyleBorderLeftStyleValue;
/// Destructor: Takes ownership of the `StyleBorderLeftStyleValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_left_style_value_delete(object: &mut AzStyleBorderLeftStyleValue) { match object { azul_impl::css::CssPropertyValue::<StyleBorderLeftStyle>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleBorderLeftStyle>::None => { }, azul_impl::css::CssPropertyValue::<StyleBorderLeftStyle>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleBorderLeftStyle>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleBorderLeftStyle>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_left_style_value_deep_copy(object: &AzStyleBorderLeftStyleValue) -> AzStyleBorderLeftStyleValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_left_style_value_fmt_debug(object: &AzStyleBorderLeftStyleValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderLeftWidthValue` struct
pub type AzStyleBorderLeftWidthValueTT = azul_impl::css::CssPropertyValue::<StyleBorderLeftWidth>;
#[no_mangle] pub use AzStyleBorderLeftWidthValueTT as AzStyleBorderLeftWidthValue;
/// Destructor: Takes ownership of the `StyleBorderLeftWidthValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_left_width_value_delete(object: &mut AzStyleBorderLeftWidthValue) { match object { azul_impl::css::CssPropertyValue::<StyleBorderLeftWidth>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleBorderLeftWidth>::None => { }, azul_impl::css::CssPropertyValue::<StyleBorderLeftWidth>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleBorderLeftWidth>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleBorderLeftWidth>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_left_width_value_deep_copy(object: &AzStyleBorderLeftWidthValue) -> AzStyleBorderLeftWidthValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_left_width_value_fmt_debug(object: &AzStyleBorderLeftWidthValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderRightColorValue` struct
pub type AzStyleBorderRightColorValueTT = azul_impl::css::CssPropertyValue::<StyleBorderRightColor>;
#[no_mangle] pub use AzStyleBorderRightColorValueTT as AzStyleBorderRightColorValue;
/// Destructor: Takes ownership of the `StyleBorderRightColorValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_right_color_value_delete(object: &mut AzStyleBorderRightColorValue) { match object { azul_impl::css::CssPropertyValue::<StyleBorderRightColor>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleBorderRightColor>::None => { }, azul_impl::css::CssPropertyValue::<StyleBorderRightColor>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleBorderRightColor>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleBorderRightColor>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_right_color_value_deep_copy(object: &AzStyleBorderRightColorValue) -> AzStyleBorderRightColorValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_right_color_value_fmt_debug(object: &AzStyleBorderRightColorValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderRightStyleValue` struct
pub type AzStyleBorderRightStyleValueTT = azul_impl::css::CssPropertyValue::<StyleBorderRightStyle>;
#[no_mangle] pub use AzStyleBorderRightStyleValueTT as AzStyleBorderRightStyleValue;
/// Destructor: Takes ownership of the `StyleBorderRightStyleValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_right_style_value_delete(object: &mut AzStyleBorderRightStyleValue) { match object { azul_impl::css::CssPropertyValue::<StyleBorderRightStyle>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleBorderRightStyle>::None => { }, azul_impl::css::CssPropertyValue::<StyleBorderRightStyle>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleBorderRightStyle>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleBorderRightStyle>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_right_style_value_deep_copy(object: &AzStyleBorderRightStyleValue) -> AzStyleBorderRightStyleValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_right_style_value_fmt_debug(object: &AzStyleBorderRightStyleValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderRightWidthValue` struct
pub type AzStyleBorderRightWidthValueTT = azul_impl::css::CssPropertyValue::<StyleBorderRightWidth>;
#[no_mangle] pub use AzStyleBorderRightWidthValueTT as AzStyleBorderRightWidthValue;
/// Destructor: Takes ownership of the `StyleBorderRightWidthValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_right_width_value_delete(object: &mut AzStyleBorderRightWidthValue) { match object { azul_impl::css::CssPropertyValue::<StyleBorderRightWidth>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleBorderRightWidth>::None => { }, azul_impl::css::CssPropertyValue::<StyleBorderRightWidth>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleBorderRightWidth>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleBorderRightWidth>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_right_width_value_deep_copy(object: &AzStyleBorderRightWidthValue) -> AzStyleBorderRightWidthValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_right_width_value_fmt_debug(object: &AzStyleBorderRightWidthValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderTopColorValue` struct
pub type AzStyleBorderTopColorValueTT = azul_impl::css::CssPropertyValue::<StyleBorderTopColor>;
#[no_mangle] pub use AzStyleBorderTopColorValueTT as AzStyleBorderTopColorValue;
/// Destructor: Takes ownership of the `StyleBorderTopColorValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_top_color_value_delete(object: &mut AzStyleBorderTopColorValue) { match object { azul_impl::css::CssPropertyValue::<StyleBorderTopColor>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleBorderTopColor>::None => { }, azul_impl::css::CssPropertyValue::<StyleBorderTopColor>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleBorderTopColor>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleBorderTopColor>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_top_color_value_deep_copy(object: &AzStyleBorderTopColorValue) -> AzStyleBorderTopColorValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_top_color_value_fmt_debug(object: &AzStyleBorderTopColorValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderTopLeftRadiusValue` struct
pub type AzStyleBorderTopLeftRadiusValueTT = azul_impl::css::CssPropertyValue::<StyleBorderTopLeftRadius>;
#[no_mangle] pub use AzStyleBorderTopLeftRadiusValueTT as AzStyleBorderTopLeftRadiusValue;
/// Destructor: Takes ownership of the `StyleBorderTopLeftRadiusValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_top_left_radius_value_delete(object: &mut AzStyleBorderTopLeftRadiusValue) { match object { azul_impl::css::CssPropertyValue::<StyleBorderTopLeftRadius>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleBorderTopLeftRadius>::None => { }, azul_impl::css::CssPropertyValue::<StyleBorderTopLeftRadius>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleBorderTopLeftRadius>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleBorderTopLeftRadius>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_top_left_radius_value_deep_copy(object: &AzStyleBorderTopLeftRadiusValue) -> AzStyleBorderTopLeftRadiusValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_top_left_radius_value_fmt_debug(object: &AzStyleBorderTopLeftRadiusValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderTopRightRadiusValue` struct
pub type AzStyleBorderTopRightRadiusValueTT = azul_impl::css::CssPropertyValue::<StyleBorderTopRightRadius>;
#[no_mangle] pub use AzStyleBorderTopRightRadiusValueTT as AzStyleBorderTopRightRadiusValue;
/// Destructor: Takes ownership of the `StyleBorderTopRightRadiusValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_top_right_radius_value_delete(object: &mut AzStyleBorderTopRightRadiusValue) { match object { azul_impl::css::CssPropertyValue::<StyleBorderTopRightRadius>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleBorderTopRightRadius>::None => { }, azul_impl::css::CssPropertyValue::<StyleBorderTopRightRadius>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleBorderTopRightRadius>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleBorderTopRightRadius>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_top_right_radius_value_deep_copy(object: &AzStyleBorderTopRightRadiusValue) -> AzStyleBorderTopRightRadiusValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_top_right_radius_value_fmt_debug(object: &AzStyleBorderTopRightRadiusValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderTopStyleValue` struct
pub type AzStyleBorderTopStyleValueTT = azul_impl::css::CssPropertyValue::<StyleBorderTopStyle>;
#[no_mangle] pub use AzStyleBorderTopStyleValueTT as AzStyleBorderTopStyleValue;
/// Destructor: Takes ownership of the `StyleBorderTopStyleValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_top_style_value_delete(object: &mut AzStyleBorderTopStyleValue) { match object { azul_impl::css::CssPropertyValue::<StyleBorderTopStyle>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleBorderTopStyle>::None => { }, azul_impl::css::CssPropertyValue::<StyleBorderTopStyle>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleBorderTopStyle>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleBorderTopStyle>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_top_style_value_deep_copy(object: &AzStyleBorderTopStyleValue) -> AzStyleBorderTopStyleValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_top_style_value_fmt_debug(object: &AzStyleBorderTopStyleValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleBorderTopWidthValue` struct
pub type AzStyleBorderTopWidthValueTT = azul_impl::css::CssPropertyValue::<StyleBorderTopWidth>;
#[no_mangle] pub use AzStyleBorderTopWidthValueTT as AzStyleBorderTopWidthValue;
/// Destructor: Takes ownership of the `StyleBorderTopWidthValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_border_top_width_value_delete(object: &mut AzStyleBorderTopWidthValue) { match object { azul_impl::css::CssPropertyValue::<StyleBorderTopWidth>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleBorderTopWidth>::None => { }, azul_impl::css::CssPropertyValue::<StyleBorderTopWidth>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleBorderTopWidth>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleBorderTopWidth>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_border_top_width_value_deep_copy(object: &AzStyleBorderTopWidthValue) -> AzStyleBorderTopWidthValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_border_top_width_value_fmt_debug(object: &AzStyleBorderTopWidthValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleCursorValue` struct
pub type AzStyleCursorValueTT = azul_impl::css::CssPropertyValue::<StyleCursor>;
#[no_mangle] pub use AzStyleCursorValueTT as AzStyleCursorValue;
/// Destructor: Takes ownership of the `StyleCursorValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_cursor_value_delete(object: &mut AzStyleCursorValue) { match object { azul_impl::css::CssPropertyValue::<StyleCursor>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleCursor>::None => { }, azul_impl::css::CssPropertyValue::<StyleCursor>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleCursor>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleCursor>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_cursor_value_deep_copy(object: &AzStyleCursorValue) -> AzStyleCursorValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_cursor_value_fmt_debug(object: &AzStyleCursorValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleFontFamilyValue` struct
pub type AzStyleFontFamilyValueTT = azul_impl::css::CssPropertyValue::<StyleFontFamily>;
#[no_mangle] pub use AzStyleFontFamilyValueTT as AzStyleFontFamilyValue;
/// Destructor: Takes ownership of the `StyleFontFamilyValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_font_family_value_delete(object: &mut AzStyleFontFamilyValue) { match object { azul_impl::css::CssPropertyValue::<StyleFontFamily>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleFontFamily>::None => { }, azul_impl::css::CssPropertyValue::<StyleFontFamily>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleFontFamily>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleFontFamily>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_font_family_value_deep_copy(object: &AzStyleFontFamilyValue) -> AzStyleFontFamilyValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_font_family_value_fmt_debug(object: &AzStyleFontFamilyValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleFontSizeValue` struct
pub type AzStyleFontSizeValueTT = azul_impl::css::CssPropertyValue::<StyleFontSize>;
#[no_mangle] pub use AzStyleFontSizeValueTT as AzStyleFontSizeValue;
/// Destructor: Takes ownership of the `StyleFontSizeValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_font_size_value_delete(object: &mut AzStyleFontSizeValue) { match object { azul_impl::css::CssPropertyValue::<StyleFontSize>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleFontSize>::None => { }, azul_impl::css::CssPropertyValue::<StyleFontSize>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleFontSize>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleFontSize>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_font_size_value_deep_copy(object: &AzStyleFontSizeValue) -> AzStyleFontSizeValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_font_size_value_fmt_debug(object: &AzStyleFontSizeValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleLetterSpacingValue` struct
pub type AzStyleLetterSpacingValueTT = azul_impl::css::CssPropertyValue::<StyleLetterSpacing>;
#[no_mangle] pub use AzStyleLetterSpacingValueTT as AzStyleLetterSpacingValue;
/// Destructor: Takes ownership of the `StyleLetterSpacingValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_letter_spacing_value_delete(object: &mut AzStyleLetterSpacingValue) { match object { azul_impl::css::CssPropertyValue::<StyleLetterSpacing>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleLetterSpacing>::None => { }, azul_impl::css::CssPropertyValue::<StyleLetterSpacing>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleLetterSpacing>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleLetterSpacing>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_letter_spacing_value_deep_copy(object: &AzStyleLetterSpacingValue) -> AzStyleLetterSpacingValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_letter_spacing_value_fmt_debug(object: &AzStyleLetterSpacingValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleLineHeightValue` struct
pub type AzStyleLineHeightValueTT = azul_impl::css::CssPropertyValue::<StyleLineHeight>;
#[no_mangle] pub use AzStyleLineHeightValueTT as AzStyleLineHeightValue;
/// Destructor: Takes ownership of the `StyleLineHeightValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_line_height_value_delete(object: &mut AzStyleLineHeightValue) { match object { azul_impl::css::CssPropertyValue::<StyleLineHeight>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleLineHeight>::None => { }, azul_impl::css::CssPropertyValue::<StyleLineHeight>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleLineHeight>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleLineHeight>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_line_height_value_deep_copy(object: &AzStyleLineHeightValue) -> AzStyleLineHeightValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_line_height_value_fmt_debug(object: &AzStyleLineHeightValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleTabWidthValue` struct
pub type AzStyleTabWidthValueTT = azul_impl::css::CssPropertyValue::<StyleTabWidth>;
#[no_mangle] pub use AzStyleTabWidthValueTT as AzStyleTabWidthValue;
/// Destructor: Takes ownership of the `StyleTabWidthValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_tab_width_value_delete(object: &mut AzStyleTabWidthValue) { match object { azul_impl::css::CssPropertyValue::<StyleTabWidth>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleTabWidth>::None => { }, azul_impl::css::CssPropertyValue::<StyleTabWidth>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleTabWidth>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleTabWidth>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_tab_width_value_deep_copy(object: &AzStyleTabWidthValue) -> AzStyleTabWidthValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_tab_width_value_fmt_debug(object: &AzStyleTabWidthValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleTextAlignmentHorzValue` struct
pub type AzStyleTextAlignmentHorzValueTT = azul_impl::css::CssPropertyValue::<StyleTextAlignmentHorz>;
#[no_mangle] pub use AzStyleTextAlignmentHorzValueTT as AzStyleTextAlignmentHorzValue;
/// Destructor: Takes ownership of the `StyleTextAlignmentHorzValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_text_alignment_horz_value_delete(object: &mut AzStyleTextAlignmentHorzValue) { match object { azul_impl::css::CssPropertyValue::<StyleTextAlignmentHorz>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleTextAlignmentHorz>::None => { }, azul_impl::css::CssPropertyValue::<StyleTextAlignmentHorz>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleTextAlignmentHorz>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleTextAlignmentHorz>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_text_alignment_horz_value_deep_copy(object: &AzStyleTextAlignmentHorzValue) -> AzStyleTextAlignmentHorzValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_text_alignment_horz_value_fmt_debug(object: &AzStyleTextAlignmentHorzValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleTextColorValue` struct
pub type AzStyleTextColorValueTT = azul_impl::css::CssPropertyValue::<StyleTextColor>;
#[no_mangle] pub use AzStyleTextColorValueTT as AzStyleTextColorValue;
/// Destructor: Takes ownership of the `StyleTextColorValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_text_color_value_delete(object: &mut AzStyleTextColorValue) { match object { azul_impl::css::CssPropertyValue::<StyleTextColor>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleTextColor>::None => { }, azul_impl::css::CssPropertyValue::<StyleTextColor>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleTextColor>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleTextColor>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_text_color_value_deep_copy(object: &AzStyleTextColorValue) -> AzStyleTextColorValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_text_color_value_fmt_debug(object: &AzStyleTextColorValue) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StyleWordSpacingValue` struct
pub type AzStyleWordSpacingValueTT = azul_impl::css::CssPropertyValue::<StyleWordSpacing>;
#[no_mangle] pub use AzStyleWordSpacingValueTT as AzStyleWordSpacingValue;
/// Destructor: Takes ownership of the `StyleWordSpacingValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_word_spacing_value_delete(object: &mut AzStyleWordSpacingValue) { match object { azul_impl::css::CssPropertyValue::<StyleWordSpacing>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleWordSpacing>::None => { }, azul_impl::css::CssPropertyValue::<StyleWordSpacing>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleWordSpacing>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleWordSpacing>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_word_spacing_value_deep_copy(object: &AzStyleWordSpacingValue) -> AzStyleWordSpacingValue { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_style_word_spacing_value_fmt_debug(object: &AzStyleWordSpacingValue) -> AzString { format!("{:#?}", object).into() }

/// Parsed CSS key-value pair
pub type AzCssPropertyTT = azul_impl::css::CssProperty;
#[no_mangle] pub use AzCssPropertyTT as AzCssProperty;
/// Destructor: Takes ownership of the `CssProperty` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_css_property_delete(object: &mut AzCssProperty) { match object { azul_impl::css::CssProperty::TextColor(_) => { }, azul_impl::css::CssProperty::FontSize(_) => { }, azul_impl::css::CssProperty::FontFamily(_) => { }, azul_impl::css::CssProperty::TextAlign(_) => { }, azul_impl::css::CssProperty::LetterSpacing(_) => { }, azul_impl::css::CssProperty::LineHeight(_) => { }, azul_impl::css::CssProperty::WordSpacing(_) => { }, azul_impl::css::CssProperty::TabWidth(_) => { }, azul_impl::css::CssProperty::Cursor(_) => { }, azul_impl::css::CssProperty::Display(_) => { }, azul_impl::css::CssProperty::Float(_) => { }, azul_impl::css::CssProperty::BoxSizing(_) => { }, azul_impl::css::CssProperty::Width(_) => { }, azul_impl::css::CssProperty::Height(_) => { }, azul_impl::css::CssProperty::MinWidth(_) => { }, azul_impl::css::CssProperty::MinHeight(_) => { }, azul_impl::css::CssProperty::MaxWidth(_) => { }, azul_impl::css::CssProperty::MaxHeight(_) => { }, azul_impl::css::CssProperty::Position(_) => { }, azul_impl::css::CssProperty::Top(_) => { }, azul_impl::css::CssProperty::Right(_) => { }, azul_impl::css::CssProperty::Left(_) => { }, azul_impl::css::CssProperty::Bottom(_) => { }, azul_impl::css::CssProperty::FlexWrap(_) => { }, azul_impl::css::CssProperty::FlexDirection(_) => { }, azul_impl::css::CssProperty::FlexGrow(_) => { }, azul_impl::css::CssProperty::FlexShrink(_) => { }, azul_impl::css::CssProperty::JustifyContent(_) => { }, azul_impl::css::CssProperty::AlignItems(_) => { }, azul_impl::css::CssProperty::AlignContent(_) => { }, azul_impl::css::CssProperty::BackgroundContent(_) => { }, azul_impl::css::CssProperty::BackgroundPosition(_) => { }, azul_impl::css::CssProperty::BackgroundSize(_) => { }, azul_impl::css::CssProperty::BackgroundRepeat(_) => { }, azul_impl::css::CssProperty::OverflowX(_) => { }, azul_impl::css::CssProperty::OverflowY(_) => { }, azul_impl::css::CssProperty::PaddingTop(_) => { }, azul_impl::css::CssProperty::PaddingLeft(_) => { }, azul_impl::css::CssProperty::PaddingRight(_) => { }, azul_impl::css::CssProperty::PaddingBottom(_) => { }, azul_impl::css::CssProperty::MarginTop(_) => { }, azul_impl::css::CssProperty::MarginLeft(_) => { }, azul_impl::css::CssProperty::MarginRight(_) => { }, azul_impl::css::CssProperty::MarginBottom(_) => { }, azul_impl::css::CssProperty::BorderTopLeftRadius(_) => { }, azul_impl::css::CssProperty::BorderTopRightRadius(_) => { }, azul_impl::css::CssProperty::BorderBottomLeftRadius(_) => { }, azul_impl::css::CssProperty::BorderBottomRightRadius(_) => { }, azul_impl::css::CssProperty::BorderTopColor(_) => { }, azul_impl::css::CssProperty::BorderRightColor(_) => { }, azul_impl::css::CssProperty::BorderLeftColor(_) => { }, azul_impl::css::CssProperty::BorderBottomColor(_) => { }, azul_impl::css::CssProperty::BorderTopStyle(_) => { }, azul_impl::css::CssProperty::BorderRightStyle(_) => { }, azul_impl::css::CssProperty::BorderLeftStyle(_) => { }, azul_impl::css::CssProperty::BorderBottomStyle(_) => { }, azul_impl::css::CssProperty::BorderTopWidth(_) => { }, azul_impl::css::CssProperty::BorderRightWidth(_) => { }, azul_impl::css::CssProperty::BorderLeftWidth(_) => { }, azul_impl::css::CssProperty::BorderBottomWidth(_) => { }, azul_impl::css::CssProperty::BoxShadowLeft(_) => { }, azul_impl::css::CssProperty::BoxShadowRight(_) => { }, azul_impl::css::CssProperty::BoxShadowTop(_) => { }, azul_impl::css::CssProperty::BoxShadowBottom(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_css_property_deep_copy(object: &AzCssProperty) -> AzCssProperty { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_css_property_fmt_debug(object: &AzCssProperty) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `Dom` struct
pub type AzDomTT = azul_impl::dom::Dom;
#[no_mangle] pub use AzDomTT as AzDom;
/// Creates a new node with the given `NodeType`
#[no_mangle] pub extern "C" fn az_dom_new(node_type: AzNodeType) -> AzDom { Dom::new(node_type) }
/// Creates a new `div` node
#[no_mangle] pub extern "C" fn az_dom_div() -> AzDom { Dom::div() }
/// Creates a new `body` node
#[no_mangle] pub extern "C" fn az_dom_body() -> AzDom { Dom::body() }
/// Creates a new `p` node with a given `String` as the text contents
#[no_mangle] pub extern "C" fn az_dom_label(text: AzString) -> AzDom { Dom::label(text) }
/// Creates a new `p` node from a (cached) text referenced by a `TextId`
#[no_mangle] pub extern "C" fn az_dom_text(text_id: AzTextId) -> AzDom { Dom::text(text_id) }
/// Creates a new `img` node from a (cached) text referenced by a `ImageId`
#[no_mangle] pub extern "C" fn az_dom_image(image_id: AzImageId) -> AzDom { Dom::image(image_id) }
/// Creates a new node which will render an OpenGL texture after the layout step is finished. See the documentation for [GlCallback]() for more info about OpenGL rendering callbacks.
#[no_mangle] pub extern "C" fn az_dom_gl_texture(data: AzRefAny, callback: AzGlCallbackType) -> AzDom { Dom::gl_texture(callback, data) }
/// Creates a new node with a callback that will return a `Dom` after being layouted. See the documentation for [IFrameCallback]() for more info about iframe callbacks.
#[no_mangle] pub extern "C" fn az_dom_iframe(data: AzRefAny, callback: AzIFrameCallbackType) -> AzDom { Dom::iframe(callback, data) }
/// Adds a CSS ID (`#something`) to the DOM node
#[no_mangle] pub extern "C" fn az_dom_add_id(dom: &mut AzDom, id: AzString) { dom.add_id(id); }
/// Same as [`Dom::add_id`](#method.add_id), but as a builder method
#[no_mangle] pub extern "C" fn az_dom_with_id(mut dom: AzDom, id: AzString) -> AzDom { az_dom_add_id(&mut dom, id); dom }
/// Same as calling [`Dom::add_id`](#method.add_id) for each CSS ID, but this function **replaces** all current CSS IDs
#[no_mangle] pub extern "C" fn az_dom_set_ids(dom: &mut AzDom, ids: AzStringVec) { dom.set_ids(ids); }
/// Same as [`Dom::set_ids`](#method.set_ids), but as a builder method
#[no_mangle] pub extern "C" fn az_dom_with_ids(mut dom: AzDom, ids: AzStringVec) -> AzDom { az_dom_set_ids(&mut dom, ids); dom }
/// Adds a CSS class (`.something`) to the DOM node
#[no_mangle] pub extern "C" fn az_dom_add_class(dom: &mut AzDom, class: AzString) { dom.add_class(class); }
/// Same as [`Dom::add_class`](#method.add_class), but as a builder method
#[no_mangle] pub extern "C" fn az_dom_with_class(mut dom: AzDom, class: AzString) -> AzDom { az_dom_add_class(&mut dom, class); dom }
/// Same as calling [`Dom::add_class`](#method.add_class) for each class, but this function **replaces** all current classes
#[no_mangle] pub extern "C" fn az_dom_set_classes(dom: &mut AzDom, classes: AzStringVec) { dom.set_classes(classes); }
/// Same as [`Dom::set_classes`](#method.set_classes), but as a builder method
#[no_mangle] pub extern "C" fn az_dom_with_classes(mut dom: AzDom, classes: AzStringVec) -> AzDom { az_dom_set_classes(&mut dom, classes); dom }
/// Adds a [`Callback`](callbacks/type.Callback) that acts on the `data` the `event` happens
#[no_mangle] pub extern "C" fn az_dom_add_callback(dom: &mut AzDom, event: AzEventFilter, data: AzRefAny, callback: AzCallbackType) { dom.add_callback(event, callback, data); }
/// Same as [`Dom::add_callback`](#method.add_callback), but as a builder method
#[no_mangle] pub extern "C" fn az_dom_with_callback(mut dom: AzDom, event: AzEventFilter, data: AzRefAny, callback: AzCallbackType) -> AzDom { az_dom_add_callback(&mut dom, event, data, callback); dom }
/// Overrides the CSS property of this DOM node with a value (for example `"width = 200px"`)
#[no_mangle] pub extern "C" fn az_dom_add_css_override(dom: &mut AzDom, id: AzString, prop: AzCssProperty) { dom.add_css_override(id, prop); }
/// Same as [`Dom::add_css_override`](#method.add_css_override), but as a builder method
#[no_mangle] pub extern "C" fn az_dom_with_css_override(mut dom: AzDom, id: AzString, prop: AzCssProperty) -> AzDom { az_dom_add_css_override(&mut dom, id, prop); dom }
/// Sets the `is_draggable` attribute of this DOM node (default: false)
#[no_mangle] pub extern "C" fn az_dom_set_is_draggable(dom: &mut AzDom, is_draggable: bool) { dom.set_is_draggable(is_draggable); }
/// Same as [`Dom::set_is_draggable`](#method.set_is_draggable), but as a builder method
#[no_mangle] pub extern "C" fn az_dom_is_draggable(mut dom: AzDom, is_draggable: bool) -> AzDom { az_dom_set_is_draggable(&mut dom, is_draggable); dom }
/// Sets the `tabindex` attribute of this DOM node (makes an element focusable - default: None)
#[no_mangle] pub extern "C" fn az_dom_set_tab_index(dom: &mut AzDom, tab_index: AzOptionTabIndex) { dom.set_tab_index(tab_index); }
/// Same as [`Dom::set_tab_index`](#method.set_tab_index), but as a builder method
#[no_mangle] pub extern "C" fn az_dom_with_tab_index(mut dom: AzDom, tab_index: AzOptionTabIndex) -> AzDom { az_dom_set_tab_index(&mut dom, tab_index); dom }
/// Returns if the DOM node has a certain CSS ID
#[no_mangle] pub extern "C" fn az_dom_has_id(dom: &mut AzDom, id: AzString) -> bool { dom.has_id(id.as_ref()) }
/// Returns if the DOM node has a certain CSS class
#[no_mangle] pub extern "C" fn az_dom_has_class(dom: &mut AzDom, class: AzString) -> bool { dom.has_class(class.as_ref()) }
/// Reparents another `Dom` to be the child node of this `Dom`
#[no_mangle] pub extern "C" fn az_dom_add_child(dom: &mut AzDom, child: AzDom) { dom.add_child(child); }
/// Same as [`Dom::add_child`](#method.add_child), but as a builder method
#[no_mangle] pub extern "C" fn az_dom_with_child(mut dom: AzDom, child: AzDom) -> AzDom { az_dom_add_child(&mut dom, child); dom }
/// Returns the HTML String for this DOM
#[no_mangle] pub extern "C" fn az_dom_get_html_string(dom: &AzDom) -> AzString { dom.get_html_string().into() }
/// Destructor: Takes ownership of the `Dom` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_dom_delete(object: &mut AzDom) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_dom_deep_copy(object: &AzDom) -> AzDom { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_dom_fmt_debug(object: &AzDom) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `GlTextureNode` struct
pub type AzGlTextureNodeTT = azul_impl::dom::GlTextureNode;
#[no_mangle] pub use AzGlTextureNodeTT as AzGlTextureNode;
/// Destructor: Takes ownership of the `GlTextureNode` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_gl_texture_node_delete(object: &mut AzGlTextureNode) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_gl_texture_node_deep_copy(object: &AzGlTextureNode) -> AzGlTextureNode { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_gl_texture_node_fmt_debug(object: &AzGlTextureNode) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `IFrameNode` struct
pub type AzIFrameNodeTT = azul_impl::dom::IFrameNode;
#[no_mangle] pub use AzIFrameNodeTT as AzIFrameNode;
/// Destructor: Takes ownership of the `IFrameNode` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_i_frame_node_delete(object: &mut AzIFrameNode) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_i_frame_node_deep_copy(object: &AzIFrameNode) -> AzIFrameNode { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_i_frame_node_fmt_debug(object: &AzIFrameNode) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `CallbackData` struct
pub type AzCallbackDataTT = azul_impl::dom::CallbackData;
#[no_mangle] pub use AzCallbackDataTT as AzCallbackData;
/// Destructor: Takes ownership of the `CallbackData` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_callback_data_delete(object: &mut AzCallbackData) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_callback_data_deep_copy(object: &AzCallbackData) -> AzCallbackData { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_callback_data_fmt_debug(object: &AzCallbackData) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `OverrideProperty` struct
pub type AzOverridePropertyTT = azul_impl::dom::OverrideProperty;
#[no_mangle] pub use AzOverridePropertyTT as AzOverrideProperty;
/// Destructor: Takes ownership of the `OverrideProperty` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_override_property_delete(object: &mut AzOverrideProperty) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_override_property_deep_copy(object: &AzOverrideProperty) -> AzOverrideProperty { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_override_property_fmt_debug(object: &AzOverrideProperty) -> AzString { format!("{:#?}", object).into() }

/// Represents one single DOM node (node type, classes, ids and callbacks are stored here)
pub type AzNodeDataTT = azul_impl::dom::NodeData;
#[no_mangle] pub use AzNodeDataTT as AzNodeData;
/// Creates a new node without any classes or ids from a NodeType
#[no_mangle] pub extern "C" fn az_node_data_new(node_type: AzNodeType) -> AzNodeData { NodeData::new(node_type) }
/// Creates a new `div` node
#[no_mangle] pub extern "C" fn az_node_data_div() -> AzNodeData { NodeData::div() }
/// Creates a new `body` node
#[no_mangle] pub extern "C" fn az_node_data_body() -> AzNodeData { NodeData::body() }
/// Creates a new `p` node with a given `String` as the text contents
#[no_mangle] pub extern "C" fn az_node_data_label(text: AzString) -> AzNodeData { NodeData::label(text) }
/// Creates a new `p` node from a (cached) text referenced by a `TextId`
#[no_mangle] pub extern "C" fn az_node_data_text(text_id: AzTextId) -> AzNodeData { NodeData::text(text_id) }
/// Creates a new `img` node from a (cached) text referenced by a `ImageId`
#[no_mangle] pub extern "C" fn az_node_data_image(image_id: AzImageId) -> AzNodeData { NodeData::image(image_id) }
/// Creates a new node which will render an OpenGL texture after the layout step is finished. See the documentation for [GlCallback]() for more info about OpenGL rendering callbacks.
#[no_mangle] pub extern "C" fn az_node_data_gl_texture(data: AzRefAny, callback: AzGlCallbackType) -> AzNodeData { NodeData::gl_texture(callback, data) }
/// Creates a `NodeData` with a callback that will return a `Dom` after being layouted. See the documentation for [IFrameCallback]() for more info about iframe callbacks.
#[no_mangle] pub extern "C" fn az_node_data_iframe(data: AzRefAny, callback: AzIFrameCallbackType) -> AzNodeData { NodeData::iframe(callback, data) }
/// Creates a default (div) node without any classes
#[no_mangle] pub extern "C" fn az_node_data_default() -> AzNodeData { NodeData::default() }
/// Adds a CSS ID (`#something`) to the `NodeData`
#[no_mangle] pub extern "C" fn az_node_data_add_id(nodedata: &mut AzNodeData, id: AzString) { nodedata.add_id(id); }
/// Same as [`NodeData::add_id`](#method.add_id), but as a builder method
#[no_mangle] pub extern "C" fn az_node_data_with_id(mut nodedata: AzNodeData, id: AzString) -> AzNodeData { az_node_data_add_id(&mut nodedata, id); nodedata }
/// Same as calling [`NodeData::add_id`](#method.add_id) for each CSS ID, but this function **replaces** all current CSS IDs
#[no_mangle] pub extern "C" fn az_node_data_set_ids(nodedata: &mut AzNodeData, ids: AzStringVec) { nodedata.set_ids(ids); }
/// Same as [`NodeData::set_ids`](#method.set_ids), but as a builder method
#[no_mangle] pub extern "C" fn az_node_data_with_ids(mut nodedata: AzNodeData, ids: AzStringVec) -> AzNodeData { az_node_data_set_ids(&mut nodedata, ids); nodedata }
/// Adds a CSS class (`.something`) to the `NodeData`
#[no_mangle] pub extern "C" fn az_node_data_add_class(nodedata: &mut AzNodeData, class: AzString) { nodedata.add_class(class); }
/// Same as [`NodeData::add_class`](#method.add_class), but as a builder method
#[no_mangle] pub extern "C" fn az_node_data_with_class(mut nodedata: AzNodeData, class: AzString) -> AzNodeData { az_node_data_add_class(&mut nodedata, class); nodedata }
/// Same as calling [`NodeData::add_class`](#method.add_class) for each class, but this function **replaces** all current classes
#[no_mangle] pub extern "C" fn az_node_data_set_classes(nodedata: &mut AzNodeData, classes: AzStringVec) { nodedata.set_classes(classes); }
/// Same as [`NodeData::set_classes`](#method.set_classes), but as a builder method
#[no_mangle] pub extern "C" fn az_node_data_with_classes(mut nodedata: AzNodeData, classes: AzStringVec) -> AzNodeData { az_node_data_set_classes(&mut nodedata, classes); nodedata }
/// Adds a [`Callback`](callbacks/type.Callback) that acts on the `data` the `event` happens
#[no_mangle] pub extern "C" fn az_node_data_add_callback(nodedata: &mut AzNodeData, event: AzEventFilter, data: AzRefAny, callback: AzCallbackType) { nodedata.add_callback(event, callback, data); }
/// Same as [`NodeData::add_callback`](#method.add_callback), but as a builder method
#[no_mangle] pub extern "C" fn az_node_data_with_callback(mut nodedata: AzNodeData, event: AzEventFilter, data: AzRefAny, callback: AzCallbackType) -> AzNodeData { az_node_data_add_callback(&mut nodedata, event, data, callback); nodedata }
/// Overrides the CSS property of this `NodeData` node with a value (for example `"width = 200px"`)
#[no_mangle] pub extern "C" fn az_node_data_add_css_override(nodedata: &mut AzNodeData, id: AzString, prop: AzCssProperty) { nodedata.add_css_override(id, prop); }
/// Same as [`NodeData::add_css_override`](#method.add_css_override), but as a builder method
#[no_mangle] pub extern "C" fn az_node_data_with_css_override(mut nodedata: AzNodeData, id: AzString, prop: AzCssProperty) -> AzNodeData { az_node_data_add_css_override(&mut nodedata, id, prop); nodedata }
/// Sets the `is_draggable` attribute of this `NodeData` (default: false)
#[no_mangle] pub extern "C" fn az_node_data_set_is_draggable(nodedata: &mut AzNodeData, is_draggable: bool) { nodedata.set_is_draggable(is_draggable); }
/// Same as [`NodeData::set_is_draggable`](#method.set_is_draggable), but as a builder method
#[no_mangle] pub extern "C" fn az_node_data_is_draggable(mut nodedata: AzNodeData, is_draggable: bool) -> AzNodeData { az_node_data_set_is_draggable(&mut nodedata, is_draggable); nodedata }
/// Sets the `tabindex` attribute of this `NodeData` (makes an element focusable - default: None)
#[no_mangle] pub extern "C" fn az_node_data_set_tab_index(nodedata: &mut AzNodeData, tab_index: AzOptionTabIndex) { nodedata.set_tab_index(tab_index); }
/// Same as [`NodeData::set_tab_index`](#method.set_tab_index), but as a builder method
#[no_mangle] pub extern "C" fn az_node_data_with_tab_index(mut nodedata: AzNodeData, tab_index: AzOptionTabIndex) -> AzNodeData { az_node_data_set_tab_index(&mut nodedata, tab_index); nodedata }
/// Returns if the `NodeData` has a certain CSS ID
#[no_mangle] pub extern "C" fn az_node_data_has_id(nodedata: &mut AzNodeData, id: AzString) -> bool { nodedata.has_id(id.as_ref()) }
/// Returns if the `NodeData` has a certain CSS class
#[no_mangle] pub extern "C" fn az_node_data_has_class(nodedata: &mut AzNodeData, class: AzString) -> bool { nodedata.has_class(class.as_ref()) }
/// Destructor: Takes ownership of the `NodeData` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_node_data_delete(object: &mut AzNodeData) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_node_data_deep_copy(object: &AzNodeData) -> AzNodeData { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_node_data_fmt_debug(object: &AzNodeData) -> AzString { format!("{:#?}", object).into() }

/// List of core DOM node types built-into by `azul`
pub type AzNodeTypeTT = azul_impl::dom::NodeType;
#[no_mangle] pub use AzNodeTypeTT as AzNodeType;
/// Destructor: Takes ownership of the `NodeType` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_node_type_delete(object: &mut AzNodeType) { match object { azul_impl::dom::NodeType::Div => { }, azul_impl::dom::NodeType::Body => { }, azul_impl::dom::NodeType::Label(_) => { }, azul_impl::dom::NodeType::Text(_) => { }, azul_impl::dom::NodeType::Image(_) => { }, azul_impl::dom::NodeType::GlTexture(_) => { }, azul_impl::dom::NodeType::IFrame(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_node_type_deep_copy(object: &AzNodeType) -> AzNodeType { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_node_type_fmt_debug(object: &AzNodeType) -> AzString { format!("{:#?}", object).into() }

/// When to call a callback action - `On::MouseOver`, `On::MouseOut`, etc.
pub type AzOnTT = azul_impl::dom::On;
#[no_mangle] pub use AzOnTT as AzOn;
/// Converts the `On` shorthand into a `EventFilter`
#[no_mangle] pub extern "C" fn az_on_into_event_filter(on: AzOn) -> AzEventFilter { on.into() }
/// Destructor: Takes ownership of the `On` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_on_delete(object: &mut AzOn) { match object { azul_impl::dom::On::MouseOver => { }, azul_impl::dom::On::MouseDown => { }, azul_impl::dom::On::LeftMouseDown => { }, azul_impl::dom::On::MiddleMouseDown => { }, azul_impl::dom::On::RightMouseDown => { }, azul_impl::dom::On::MouseUp => { }, azul_impl::dom::On::LeftMouseUp => { }, azul_impl::dom::On::MiddleMouseUp => { }, azul_impl::dom::On::RightMouseUp => { }, azul_impl::dom::On::MouseEnter => { }, azul_impl::dom::On::MouseLeave => { }, azul_impl::dom::On::Scroll => { }, azul_impl::dom::On::TextInput => { }, azul_impl::dom::On::VirtualKeyDown => { }, azul_impl::dom::On::VirtualKeyUp => { }, azul_impl::dom::On::HoveredFile => { }, azul_impl::dom::On::DroppedFile => { }, azul_impl::dom::On::HoveredFileCancelled => { }, azul_impl::dom::On::FocusReceived => { }, azul_impl::dom::On::FocusLost => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_on_deep_copy(object: &AzOn) -> AzOn { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_on_fmt_debug(object: &AzOn) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `EventFilter` struct
pub type AzEventFilterTT = azul_impl::dom::EventFilter;
#[no_mangle] pub use AzEventFilterTT as AzEventFilter;
/// Destructor: Takes ownership of the `EventFilter` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_event_filter_delete(object: &mut AzEventFilter) { match object { azul_impl::dom::EventFilter::Hover(_) => { }, azul_impl::dom::EventFilter::Not(_) => { }, azul_impl::dom::EventFilter::Focus(_) => { }, azul_impl::dom::EventFilter::Window(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_event_filter_deep_copy(object: &AzEventFilter) -> AzEventFilter { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_event_filter_fmt_debug(object: &AzEventFilter) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `HoverEventFilter` struct
pub type AzHoverEventFilterTT = azul_impl::dom::HoverEventFilter;
#[no_mangle] pub use AzHoverEventFilterTT as AzHoverEventFilter;
/// Destructor: Takes ownership of the `HoverEventFilter` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_hover_event_filter_delete(object: &mut AzHoverEventFilter) { match object { azul_impl::dom::HoverEventFilter::MouseOver => { }, azul_impl::dom::HoverEventFilter::MouseDown => { }, azul_impl::dom::HoverEventFilter::LeftMouseDown => { }, azul_impl::dom::HoverEventFilter::RightMouseDown => { }, azul_impl::dom::HoverEventFilter::MiddleMouseDown => { }, azul_impl::dom::HoverEventFilter::MouseUp => { }, azul_impl::dom::HoverEventFilter::LeftMouseUp => { }, azul_impl::dom::HoverEventFilter::RightMouseUp => { }, azul_impl::dom::HoverEventFilter::MiddleMouseUp => { }, azul_impl::dom::HoverEventFilter::MouseEnter => { }, azul_impl::dom::HoverEventFilter::MouseLeave => { }, azul_impl::dom::HoverEventFilter::Scroll => { }, azul_impl::dom::HoverEventFilter::ScrollStart => { }, azul_impl::dom::HoverEventFilter::ScrollEnd => { }, azul_impl::dom::HoverEventFilter::TextInput => { }, azul_impl::dom::HoverEventFilter::VirtualKeyDown => { }, azul_impl::dom::HoverEventFilter::VirtualKeyUp => { }, azul_impl::dom::HoverEventFilter::HoveredFile => { }, azul_impl::dom::HoverEventFilter::DroppedFile => { }, azul_impl::dom::HoverEventFilter::HoveredFileCancelled => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_hover_event_filter_deep_copy(object: &AzHoverEventFilter) -> AzHoverEventFilter { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_hover_event_filter_fmt_debug(object: &AzHoverEventFilter) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `FocusEventFilter` struct
pub type AzFocusEventFilterTT = azul_impl::dom::FocusEventFilter;
#[no_mangle] pub use AzFocusEventFilterTT as AzFocusEventFilter;
/// Destructor: Takes ownership of the `FocusEventFilter` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_focus_event_filter_delete(object: &mut AzFocusEventFilter) { match object { azul_impl::dom::FocusEventFilter::MouseOver => { }, azul_impl::dom::FocusEventFilter::MouseDown => { }, azul_impl::dom::FocusEventFilter::LeftMouseDown => { }, azul_impl::dom::FocusEventFilter::RightMouseDown => { }, azul_impl::dom::FocusEventFilter::MiddleMouseDown => { }, azul_impl::dom::FocusEventFilter::MouseUp => { }, azul_impl::dom::FocusEventFilter::LeftMouseUp => { }, azul_impl::dom::FocusEventFilter::RightMouseUp => { }, azul_impl::dom::FocusEventFilter::MiddleMouseUp => { }, azul_impl::dom::FocusEventFilter::MouseEnter => { }, azul_impl::dom::FocusEventFilter::MouseLeave => { }, azul_impl::dom::FocusEventFilter::Scroll => { }, azul_impl::dom::FocusEventFilter::ScrollStart => { }, azul_impl::dom::FocusEventFilter::ScrollEnd => { }, azul_impl::dom::FocusEventFilter::TextInput => { }, azul_impl::dom::FocusEventFilter::VirtualKeyDown => { }, azul_impl::dom::FocusEventFilter::VirtualKeyUp => { }, azul_impl::dom::FocusEventFilter::FocusReceived => { }, azul_impl::dom::FocusEventFilter::FocusLost => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_focus_event_filter_deep_copy(object: &AzFocusEventFilter) -> AzFocusEventFilter { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_focus_event_filter_fmt_debug(object: &AzFocusEventFilter) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `NotEventFilter` struct
pub type AzNotEventFilterTT = azul_impl::dom::NotEventFilter;
#[no_mangle] pub use AzNotEventFilterTT as AzNotEventFilter;
/// Destructor: Takes ownership of the `NotEventFilter` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_not_event_filter_delete(object: &mut AzNotEventFilter) { match object { azul_impl::dom::NotEventFilter::Hover(_) => { }, azul_impl::dom::NotEventFilter::Focus(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_not_event_filter_deep_copy(object: &AzNotEventFilter) -> AzNotEventFilter { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_not_event_filter_fmt_debug(object: &AzNotEventFilter) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `WindowEventFilter` struct
pub type AzWindowEventFilterTT = azul_impl::dom::WindowEventFilter;
#[no_mangle] pub use AzWindowEventFilterTT as AzWindowEventFilter;
/// Destructor: Takes ownership of the `WindowEventFilter` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_window_event_filter_delete(object: &mut AzWindowEventFilter) { match object { azul_impl::dom::WindowEventFilter::MouseOver => { }, azul_impl::dom::WindowEventFilter::MouseDown => { }, azul_impl::dom::WindowEventFilter::LeftMouseDown => { }, azul_impl::dom::WindowEventFilter::RightMouseDown => { }, azul_impl::dom::WindowEventFilter::MiddleMouseDown => { }, azul_impl::dom::WindowEventFilter::MouseUp => { }, azul_impl::dom::WindowEventFilter::LeftMouseUp => { }, azul_impl::dom::WindowEventFilter::RightMouseUp => { }, azul_impl::dom::WindowEventFilter::MiddleMouseUp => { }, azul_impl::dom::WindowEventFilter::MouseEnter => { }, azul_impl::dom::WindowEventFilter::MouseLeave => { }, azul_impl::dom::WindowEventFilter::Scroll => { }, azul_impl::dom::WindowEventFilter::ScrollStart => { }, azul_impl::dom::WindowEventFilter::ScrollEnd => { }, azul_impl::dom::WindowEventFilter::TextInput => { }, azul_impl::dom::WindowEventFilter::VirtualKeyDown => { }, azul_impl::dom::WindowEventFilter::VirtualKeyUp => { }, azul_impl::dom::WindowEventFilter::HoveredFile => { }, azul_impl::dom::WindowEventFilter::DroppedFile => { }, azul_impl::dom::WindowEventFilter::HoveredFileCancelled => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_window_event_filter_deep_copy(object: &AzWindowEventFilter) -> AzWindowEventFilter { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_window_event_filter_fmt_debug(object: &AzWindowEventFilter) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `TabIndex` struct
pub type AzTabIndexTT = azul_impl::dom::TabIndex;
#[no_mangle] pub use AzTabIndexTT as AzTabIndex;
/// Destructor: Takes ownership of the `TabIndex` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_tab_index_delete(object: &mut AzTabIndex) { match object { azul_impl::dom::TabIndex::Auto => { }, azul_impl::dom::TabIndex::OverrideInParent(_) => { }, azul_impl::dom::TabIndex::NoKeyboardFocus => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_tab_index_deep_copy(object: &AzTabIndex) -> AzTabIndex { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_tab_index_fmt_debug(object: &AzTabIndex) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `GlType` struct
pub type AzGlTypeTT = azul_impl::gl::AzGlType;
#[no_mangle] pub use AzGlTypeTT as AzGlType;
/// Destructor: Takes ownership of the `GlType` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_gl_type_delete(object: &mut AzGlType) { match object { azul_impl::gl::AzGlType::Gl => { }, azul_impl::gl::AzGlType::Gles => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_gl_type_deep_copy(object: &AzGlType) -> AzGlType { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_gl_type_fmt_debug(object: &AzGlType) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `DebugMessage` struct
pub type AzDebugMessageTT = azul_impl::gl::AzDebugMessage;
#[no_mangle] pub use AzDebugMessageTT as AzDebugMessage;
/// Destructor: Takes ownership of the `DebugMessage` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_debug_message_delete(object: &mut AzDebugMessage) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_debug_message_deep_copy(object: &AzDebugMessage) -> AzDebugMessage { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_debug_message_fmt_debug(object: &AzDebugMessage) -> AzString { format!("{:#?}", object).into() }

/// C-ABI stable reexport of `&[u8]`
pub type AzU8VecRefTT = azul_impl::gl::U8VecRef;
#[no_mangle] pub use AzU8VecRefTT as AzU8VecRef;
/// Destructor: Takes ownership of the `U8VecRef` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_u8_vec_ref_delete(object: &mut AzU8VecRef) { }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_u8_vec_ref_fmt_debug(object: &AzU8VecRef) -> AzString { format!("{:#?}", object).into() }

/// C-ABI stable reexport of `&mut [u8]`
pub type AzU8VecRefMutTT = azul_impl::gl::U8VecRefMut;
#[no_mangle] pub use AzU8VecRefMutTT as AzU8VecRefMut;
/// Destructor: Takes ownership of the `U8VecRefMut` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_u8_vec_ref_mut_delete(object: &mut AzU8VecRefMut) { }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_u8_vec_ref_mut_fmt_debug(object: &AzU8VecRefMut) -> AzString { format!("{:#?}", object).into() }

/// C-ABI stable reexport of `&[f32]`
pub type AzF32VecRefTT = azul_impl::gl::F32VecRef;
#[no_mangle] pub use AzF32VecRefTT as AzF32VecRef;
/// Destructor: Takes ownership of the `F32VecRef` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_f32_vec_ref_delete(object: &mut AzF32VecRef) { }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_f32_vec_ref_fmt_debug(object: &AzF32VecRef) -> AzString { format!("{:#?}", object).into() }

/// C-ABI stable reexport of `&[i32]`
pub type AzI32VecRefTT = azul_impl::gl::I32VecRef;
#[no_mangle] pub use AzI32VecRefTT as AzI32VecRef;
/// Destructor: Takes ownership of the `I32VecRef` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_i32_vec_ref_delete(object: &mut AzI32VecRef) { }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_i32_vec_ref_fmt_debug(object: &AzI32VecRef) -> AzString { format!("{:#?}", object).into() }

/// C-ABI stable reexport of `&[GLuint]` aka `&[u32]`
pub type AzGLuintVecRefTT = azul_impl::gl::GLuintVecRef;
#[no_mangle] pub use AzGLuintVecRefTT as AzGLuintVecRef;
/// Destructor: Takes ownership of the `GLuintVecRef` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_g_luint_vec_ref_delete(object: &mut AzGLuintVecRef) { }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_g_luint_vec_ref_fmt_debug(object: &AzGLuintVecRef) -> AzString { format!("{:#?}", object).into() }

/// C-ABI stable reexport of `&[GLenum]` aka `&[u32]`
pub type AzGLenumVecRefTT = azul_impl::gl::GLenumVecRef;
#[no_mangle] pub use AzGLenumVecRefTT as AzGLenumVecRef;
/// Destructor: Takes ownership of the `GLenumVecRef` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_g_lenum_vec_ref_delete(object: &mut AzGLenumVecRef) { }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_g_lenum_vec_ref_fmt_debug(object: &AzGLenumVecRef) -> AzString { format!("{:#?}", object).into() }

/// C-ABI stable reexport of `&mut [GLint]` aka `&mut [i32]`
pub type AzGLintVecRefMutTT = azul_impl::gl::GLintVecRefMut;
#[no_mangle] pub use AzGLintVecRefMutTT as AzGLintVecRefMut;
/// Destructor: Takes ownership of the `GLintVecRefMut` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_g_lint_vec_ref_mut_delete(object: &mut AzGLintVecRefMut) { }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_g_lint_vec_ref_mut_fmt_debug(object: &AzGLintVecRefMut) -> AzString { format!("{:#?}", object).into() }

/// C-ABI stable reexport of `&mut [GLint64]` aka `&mut [i64]`
pub type AzGLint64VecRefMutTT = azul_impl::gl::GLint64VecRefMut;
#[no_mangle] pub use AzGLint64VecRefMutTT as AzGLint64VecRefMut;
/// Destructor: Takes ownership of the `GLint64VecRefMut` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_g_lint64_vec_ref_mut_delete(object: &mut AzGLint64VecRefMut) { }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_g_lint64_vec_ref_mut_fmt_debug(object: &AzGLint64VecRefMut) -> AzString { format!("{:#?}", object).into() }

/// C-ABI stable reexport of `&mut [GLboolean]` aka `&mut [u8]`
pub type AzGLbooleanVecRefMutTT = azul_impl::gl::GLbooleanVecRefMut;
#[no_mangle] pub use AzGLbooleanVecRefMutTT as AzGLbooleanVecRefMut;
/// Destructor: Takes ownership of the `GLbooleanVecRefMut` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_g_lboolean_vec_ref_mut_delete(object: &mut AzGLbooleanVecRefMut) { }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_g_lboolean_vec_ref_mut_fmt_debug(object: &AzGLbooleanVecRefMut) -> AzString { format!("{:#?}", object).into() }

/// C-ABI stable reexport of `&mut [GLfloat]` aka `&mut [f32]`
pub type AzGLfloatVecRefMutTT = azul_impl::gl::GLfloatVecRefMut;
#[no_mangle] pub use AzGLfloatVecRefMutTT as AzGLfloatVecRefMut;
/// Destructor: Takes ownership of the `GLfloatVecRefMut` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_g_lfloat_vec_ref_mut_delete(object: &mut AzGLfloatVecRefMut) { }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_g_lfloat_vec_ref_mut_fmt_debug(object: &AzGLfloatVecRefMut) -> AzString { format!("{:#?}", object).into() }

/// C-ABI stable reexport of `&[Refstr]` aka `&mut [&str]`
pub type AzRefstrVecRefTT = azul_impl::gl::RefstrVecRef;
#[no_mangle] pub use AzRefstrVecRefTT as AzRefstrVecRef;
/// Destructor: Takes ownership of the `RefstrVecRef` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_refstr_vec_ref_delete(object: &mut AzRefstrVecRef) { }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_refstr_vec_ref_fmt_debug(object: &AzRefstrVecRef) -> AzString { format!("{:#?}", object).into() }

/// C-ABI stable reexport of `&str`
pub type AzRefstrTT = azul_impl::gl::Refstr;
#[no_mangle] pub use AzRefstrTT as AzRefstr;
/// Destructor: Takes ownership of the `Refstr` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_refstr_delete(object: &mut AzRefstr) { }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_refstr_fmt_debug(object: &AzRefstr) -> AzString { format!("{:#?}", object).into() }

/// C-ABI stable reexport of `(U8Vec, u32)`
pub type AzGetProgramBinaryReturnTT = azul_impl::gl::GetProgramBinaryReturn;
#[no_mangle] pub use AzGetProgramBinaryReturnTT as AzGetProgramBinaryReturn;
/// Destructor: Takes ownership of the `GetProgramBinaryReturn` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_get_program_binary_return_delete(object: &mut AzGetProgramBinaryReturn) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_get_program_binary_return_deep_copy(object: &AzGetProgramBinaryReturn) -> AzGetProgramBinaryReturn { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_get_program_binary_return_fmt_debug(object: &AzGetProgramBinaryReturn) -> AzString { format!("{:#?}", object).into() }

/// C-ABI stable reexport of `(i32, u32, AzString)`
pub type AzGetActiveAttribReturnTT = azul_impl::gl::GetActiveAttribReturn;
#[no_mangle] pub use AzGetActiveAttribReturnTT as AzGetActiveAttribReturn;
/// Destructor: Takes ownership of the `GetActiveAttribReturn` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_get_active_attrib_return_delete(object: &mut AzGetActiveAttribReturn) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_get_active_attrib_return_deep_copy(object: &AzGetActiveAttribReturn) -> AzGetActiveAttribReturn { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_get_active_attrib_return_fmt_debug(object: &AzGetActiveAttribReturn) -> AzString { format!("{:#?}", object).into() }

/// C-ABI stable reexport of `*const gleam::gl::GLsync`
pub type AzGLsyncPtrTT = azul_impl::gl::GLsyncPtr;
#[no_mangle] pub use AzGLsyncPtrTT as AzGLsyncPtr;
/// Destructor: Takes ownership of the `GLsyncPtr` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_g_lsync_ptr_delete(object: &mut AzGLsyncPtr) { }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_g_lsync_ptr_fmt_debug(object: &AzGLsyncPtr) -> AzString { format!("{:#?}", object).into() }

/// C-ABI stable reexport of `(i32, u32, AzString)`
pub type AzGetActiveUniformReturnTT = azul_impl::gl::GetActiveUniformReturn;
#[no_mangle] pub use AzGetActiveUniformReturnTT as AzGetActiveUniformReturn;
/// Destructor: Takes ownership of the `GetActiveUniformReturn` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_get_active_uniform_return_delete(object: &mut AzGetActiveUniformReturn) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_get_active_uniform_return_deep_copy(object: &AzGetActiveUniformReturn) -> AzGetActiveUniformReturn { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_get_active_uniform_return_fmt_debug(object: &AzGetActiveUniformReturn) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `GlContextPtr` struct
pub type AzGlContextPtrTT = azul_impl::gl::GlContextPtr;
#[no_mangle] pub use AzGlContextPtrTT as AzGlContextPtr;
// Equivalent to the Rust `GlContextPtr::get_type()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_type(glcontextptr: &AzGlContextPtr) -> AzGlType { glcontextptr.get_type() }
// Equivalent to the Rust `GlContextPtr::buffer_data_untyped()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_buffer_data_untyped(glcontextptr: &AzGlContextPtr, target: u32, size: isize, data: *const c_void, usage: u32) { glcontextptr.buffer_data_untyped(target, size, data, usage) }
// Equivalent to the Rust `GlContextPtr::buffer_sub_data_untyped()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_buffer_sub_data_untyped(glcontextptr: &AzGlContextPtr, target: u32, offset: isize, size: isize, data: *const c_void) { glcontextptr.buffer_sub_data_untyped(target, offset, size, data) }
// Equivalent to the Rust `GlContextPtr::map_buffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_map_buffer(glcontextptr: &AzGlContextPtr, target: u32, access: u32) -> *mut c_void { glcontextptr.map_buffer(target, access) }
// Equivalent to the Rust `GlContextPtr::map_buffer_range()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_map_buffer_range(glcontextptr: &AzGlContextPtr, target: u32, offset: isize, length: isize, access: u32) -> *mut c_void { glcontextptr.map_buffer_range(target, offset, length, access) }
// Equivalent to the Rust `GlContextPtr::unmap_buffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_unmap_buffer(glcontextptr: &AzGlContextPtr, target: u32) -> u8 { glcontextptr.unmap_buffer(target) }
// Equivalent to the Rust `GlContextPtr::tex_buffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_tex_buffer(glcontextptr: &AzGlContextPtr, target: u32, internal_format: u32, buffer: u32) { glcontextptr.tex_buffer(target, internal_format, buffer) }
// Equivalent to the Rust `GlContextPtr::shader_source()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_shader_source(glcontextptr: &AzGlContextPtr, shader: u32, strings: AzStringVec) { glcontextptr.shader_source(shader, strings) }
// Equivalent to the Rust `GlContextPtr::read_buffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_read_buffer(glcontextptr: &AzGlContextPtr, mode: u32) { glcontextptr.read_buffer(mode) }
// Equivalent to the Rust `GlContextPtr::read_pixels_into_buffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_read_pixels_into_buffer(glcontextptr: &AzGlContextPtr, x: i32, y: i32, width: i32, height: i32, format: u32, pixel_type: u32, dst_buffer: AzU8VecRefMut) { glcontextptr.read_pixels_into_buffer(x, y, width, height, format, pixel_type, dst_buffer) }
// Equivalent to the Rust `GlContextPtr::read_pixels()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_read_pixels(glcontextptr: &AzGlContextPtr, x: i32, y: i32, width: i32, height: i32, format: u32, pixel_type: u32) -> AzU8Vec { glcontextptr.read_pixels(x, y, width, height, format, pixel_type) }
// Equivalent to the Rust `GlContextPtr::read_pixels_into_pbo()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_read_pixels_into_pbo(glcontextptr: &AzGlContextPtr, x: i32, y: i32, width: i32, height: i32, format: u32, pixel_type: u32) { glcontextptr.read_pixels_into_pbo(x, y, width, height, format, pixel_type) }
// Equivalent to the Rust `GlContextPtr::sample_coverage()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_sample_coverage(glcontextptr: &AzGlContextPtr, value: f32, invert: bool) { glcontextptr.sample_coverage(value, invert) }
// Equivalent to the Rust `GlContextPtr::polygon_offset()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_polygon_offset(glcontextptr: &AzGlContextPtr, factor: f32, units: f32) { glcontextptr.polygon_offset(factor, units) }
// Equivalent to the Rust `GlContextPtr::pixel_store_i()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_pixel_store_i(glcontextptr: &AzGlContextPtr, name: u32, param: i32) { glcontextptr.pixel_store_i(name, param) }
// Equivalent to the Rust `GlContextPtr::gen_buffers()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_gen_buffers(glcontextptr: &AzGlContextPtr, n: i32) -> AzGLuintVec { glcontextptr.gen_buffers(n) }
// Equivalent to the Rust `GlContextPtr::gen_renderbuffers()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_gen_renderbuffers(glcontextptr: &AzGlContextPtr, n: i32) -> AzGLuintVec { glcontextptr.gen_renderbuffers(n) }
// Equivalent to the Rust `GlContextPtr::gen_framebuffers()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_gen_framebuffers(glcontextptr: &AzGlContextPtr, n: i32) -> AzGLuintVec { glcontextptr.gen_framebuffers(n) }
// Equivalent to the Rust `GlContextPtr::gen_textures()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_gen_textures(glcontextptr: &AzGlContextPtr, n: i32) -> AzGLuintVec { glcontextptr.gen_textures(n) }
// Equivalent to the Rust `GlContextPtr::gen_vertex_arrays()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_gen_vertex_arrays(glcontextptr: &AzGlContextPtr, n: i32) -> AzGLuintVec { glcontextptr.gen_vertex_arrays(n) }
// Equivalent to the Rust `GlContextPtr::gen_queries()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_gen_queries(glcontextptr: &AzGlContextPtr, n: i32) -> AzGLuintVec { glcontextptr.gen_queries(n) }
// Equivalent to the Rust `GlContextPtr::begin_query()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_begin_query(glcontextptr: &AzGlContextPtr, target: u32, id: u32) { glcontextptr.begin_query(target, id) }
// Equivalent to the Rust `GlContextPtr::end_query()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_end_query(glcontextptr: &AzGlContextPtr, target: u32) { glcontextptr.end_query(target) }
// Equivalent to the Rust `GlContextPtr::query_counter()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_query_counter(glcontextptr: &AzGlContextPtr, id: u32, target: u32) { glcontextptr.query_counter(id, target) }
// Equivalent to the Rust `GlContextPtr::get_query_object_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_query_object_iv(glcontextptr: &AzGlContextPtr, id: u32, pname: u32) -> i32 { glcontextptr.get_query_object_iv(id, pname) }
// Equivalent to the Rust `GlContextPtr::get_query_object_uiv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_query_object_uiv(glcontextptr: &AzGlContextPtr, id: u32, pname: u32) -> u32 { glcontextptr.get_query_object_uiv(id, pname) }
// Equivalent to the Rust `GlContextPtr::get_query_object_i64v()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_query_object_i64v(glcontextptr: &AzGlContextPtr, id: u32, pname: u32) -> i64 { glcontextptr.get_query_object_i64v(id, pname) }
// Equivalent to the Rust `GlContextPtr::get_query_object_ui64v()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_query_object_ui64v(glcontextptr: &AzGlContextPtr, id: u32, pname: u32) -> u64 { glcontextptr.get_query_object_ui64v(id, pname) }
// Equivalent to the Rust `GlContextPtr::delete_queries()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_delete_queries(glcontextptr: &AzGlContextPtr, queries: AzGLuintVecRef) { glcontextptr.delete_queries(queries) }
// Equivalent to the Rust `GlContextPtr::delete_vertex_arrays()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_delete_vertex_arrays(glcontextptr: &AzGlContextPtr, vertex_arrays: AzGLuintVecRef) { glcontextptr.delete_vertex_arrays(vertex_arrays) }
// Equivalent to the Rust `GlContextPtr::delete_buffers()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_delete_buffers(glcontextptr: &AzGlContextPtr, buffers: AzGLuintVecRef) { glcontextptr.delete_buffers(buffers) }
// Equivalent to the Rust `GlContextPtr::delete_renderbuffers()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_delete_renderbuffers(glcontextptr: &AzGlContextPtr, renderbuffers: AzGLuintVecRef) { glcontextptr.delete_renderbuffers(renderbuffers) }
// Equivalent to the Rust `GlContextPtr::delete_framebuffers()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_delete_framebuffers(glcontextptr: &AzGlContextPtr, framebuffers: AzGLuintVecRef) { glcontextptr.delete_framebuffers(framebuffers) }
// Equivalent to the Rust `GlContextPtr::delete_textures()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_delete_textures(glcontextptr: &AzGlContextPtr, textures: AzGLuintVecRef) { glcontextptr.delete_textures(textures) }
// Equivalent to the Rust `GlContextPtr::framebuffer_renderbuffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_framebuffer_renderbuffer(glcontextptr: &AzGlContextPtr, target: u32, attachment: u32, renderbuffertarget: u32, renderbuffer: u32) { glcontextptr.framebuffer_renderbuffer(target, attachment, renderbuffertarget, renderbuffer) }
// Equivalent to the Rust `GlContextPtr::renderbuffer_storage()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_renderbuffer_storage(glcontextptr: &AzGlContextPtr, target: u32, internalformat: u32, width: i32, height: i32) { glcontextptr.renderbuffer_storage(target, internalformat, width, height) }
// Equivalent to the Rust `GlContextPtr::depth_func()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_depth_func(glcontextptr: &AzGlContextPtr, func: u32) { glcontextptr.depth_func(func) }
// Equivalent to the Rust `GlContextPtr::active_texture()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_active_texture(glcontextptr: &AzGlContextPtr, texture: u32) { glcontextptr.active_texture(texture) }
// Equivalent to the Rust `GlContextPtr::attach_shader()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_attach_shader(glcontextptr: &AzGlContextPtr, program: u32, shader: u32) { glcontextptr.attach_shader(program, shader) }
// Equivalent to the Rust `GlContextPtr::bind_attrib_location()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_bind_attrib_location(glcontextptr: &AzGlContextPtr, program: u32, index: u32, name: AzRefstr) { glcontextptr.bind_attrib_location(program, index, name) }
// Equivalent to the Rust `GlContextPtr::get_uniform_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_uniform_iv(glcontextptr: &AzGlContextPtr, program: u32, location: i32, result: AzGLintVecRefMut) { glcontextptr.get_uniform_iv(program, location, result) }
// Equivalent to the Rust `GlContextPtr::get_uniform_fv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_uniform_fv(glcontextptr: &AzGlContextPtr, program: u32, location: i32, result: AzGLfloatVecRefMut) { glcontextptr.get_uniform_fv(program, location, result) }
// Equivalent to the Rust `GlContextPtr::get_uniform_block_index()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_uniform_block_index(glcontextptr: &AzGlContextPtr, program: u32, name: AzRefstr) -> u32 { glcontextptr.get_uniform_block_index(program, name) }
// Equivalent to the Rust `GlContextPtr::get_uniform_indices()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_uniform_indices(glcontextptr: &AzGlContextPtr, program: u32, names: AzRefstrVecRef) -> AzGLuintVec { glcontextptr.get_uniform_indices(program, names) }
// Equivalent to the Rust `GlContextPtr::bind_buffer_base()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_bind_buffer_base(glcontextptr: &AzGlContextPtr, target: u32, index: u32, buffer: u32) { glcontextptr.bind_buffer_base(target, index, buffer) }
// Equivalent to the Rust `GlContextPtr::bind_buffer_range()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_bind_buffer_range(glcontextptr: &AzGlContextPtr, target: u32, index: u32, buffer: u32, offset: isize, size: isize) { glcontextptr.bind_buffer_range(target, index, buffer, offset, size) }
// Equivalent to the Rust `GlContextPtr::uniform_block_binding()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_block_binding(glcontextptr: &AzGlContextPtr, program: u32, uniform_block_index: u32, uniform_block_binding: u32) { glcontextptr.uniform_block_binding(program, uniform_block_index, uniform_block_binding) }
// Equivalent to the Rust `GlContextPtr::bind_buffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_bind_buffer(glcontextptr: &AzGlContextPtr, target: u32, buffer: u32) { glcontextptr.bind_buffer(target, buffer) }
// Equivalent to the Rust `GlContextPtr::bind_vertex_array()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_bind_vertex_array(glcontextptr: &AzGlContextPtr, vao: u32) { glcontextptr.bind_vertex_array(vao) }
// Equivalent to the Rust `GlContextPtr::bind_renderbuffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_bind_renderbuffer(glcontextptr: &AzGlContextPtr, target: u32, renderbuffer: u32) { glcontextptr.bind_renderbuffer(target, renderbuffer) }
// Equivalent to the Rust `GlContextPtr::bind_framebuffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_bind_framebuffer(glcontextptr: &AzGlContextPtr, target: u32, framebuffer: u32) { glcontextptr.bind_framebuffer(target, framebuffer) }
// Equivalent to the Rust `GlContextPtr::bind_texture()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_bind_texture(glcontextptr: &AzGlContextPtr, target: u32, texture: u32) { glcontextptr.bind_texture(target, texture) }
// Equivalent to the Rust `GlContextPtr::draw_buffers()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_draw_buffers(glcontextptr: &AzGlContextPtr, bufs: AzGLenumVecRef) { glcontextptr.draw_buffers(bufs) }
// Equivalent to the Rust `GlContextPtr::tex_image_2d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_tex_image_2d(glcontextptr: &AzGlContextPtr, target: u32, level: i32, internal_format: i32, width: i32, height: i32, border: i32, format: u32, ty: u32, opt_data: AzOptionU8VecRef) { glcontextptr.tex_image_2d(target, level, internal_format, width, height, border, format, ty, opt_data) }
// Equivalent to the Rust `GlContextPtr::compressed_tex_image_2d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_compressed_tex_image_2d(glcontextptr: &AzGlContextPtr, target: u32, level: i32, internal_format: u32, width: i32, height: i32, border: i32, data: AzU8VecRef) { glcontextptr.compressed_tex_image_2d(target, level, internal_format, width, height, border, data) }
// Equivalent to the Rust `GlContextPtr::compressed_tex_sub_image_2d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_compressed_tex_sub_image_2d(glcontextptr: &AzGlContextPtr, target: u32, level: i32, xoffset: i32, yoffset: i32, width: i32, height: i32, format: u32, data: AzU8VecRef) { glcontextptr.compressed_tex_sub_image_2d(target, level, xoffset, yoffset, width, height, format, data) }
// Equivalent to the Rust `GlContextPtr::tex_image_3d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_tex_image_3d(glcontextptr: &AzGlContextPtr, target: u32, level: i32, internal_format: i32, width: i32, height: i32, depth: i32, border: i32, format: u32, ty: u32, opt_data: AzOptionU8VecRef) { glcontextptr.tex_image_3d(target, level, internal_format, width, height, depth, border, format, ty, opt_data) }
// Equivalent to the Rust `GlContextPtr::copy_tex_image_2d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_copy_tex_image_2d(glcontextptr: &AzGlContextPtr, target: u32, level: i32, internal_format: u32, x: i32, y: i32, width: i32, height: i32, border: i32) { glcontextptr.copy_tex_image_2d(target, level, internal_format, x, y, width, height, border) }
// Equivalent to the Rust `GlContextPtr::copy_tex_sub_image_2d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_copy_tex_sub_image_2d(glcontextptr: &AzGlContextPtr, target: u32, level: i32, xoffset: i32, yoffset: i32, x: i32, y: i32, width: i32, height: i32) { glcontextptr.copy_tex_sub_image_2d(target, level, xoffset, yoffset, x, y, width, height) }
// Equivalent to the Rust `GlContextPtr::copy_tex_sub_image_3d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_copy_tex_sub_image_3d(glcontextptr: &AzGlContextPtr, target: u32, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, x: i32, y: i32, width: i32, height: i32) { glcontextptr.copy_tex_sub_image_3d(target, level, xoffset, yoffset, zoffset, x, y, width, height) }
// Equivalent to the Rust `GlContextPtr::tex_sub_image_2d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_tex_sub_image_2d(glcontextptr: &AzGlContextPtr, target: u32, level: i32, xoffset: i32, yoffset: i32, width: i32, height: i32, format: u32, ty: u32, data: AzU8VecRef) { glcontextptr.tex_sub_image_2d(target, level, xoffset, yoffset, width, height, format, ty, data) }
// Equivalent to the Rust `GlContextPtr::tex_sub_image_2d_pbo()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_tex_sub_image_2d_pbo(glcontextptr: &AzGlContextPtr, target: u32, level: i32, xoffset: i32, yoffset: i32, width: i32, height: i32, format: u32, ty: u32, offset: usize) { glcontextptr.tex_sub_image_2d_pbo(target, level, xoffset, yoffset, width, height, format, ty, offset) }
// Equivalent to the Rust `GlContextPtr::tex_sub_image_3d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_tex_sub_image_3d(glcontextptr: &AzGlContextPtr, target: u32, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32, height: i32, depth: i32, format: u32, ty: u32, data: AzU8VecRef) { glcontextptr.tex_sub_image_3d(target, level, xoffset, yoffset, zoffset, width, height, depth, format, ty, data) }
// Equivalent to the Rust `GlContextPtr::tex_sub_image_3d_pbo()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_tex_sub_image_3d_pbo(glcontextptr: &AzGlContextPtr, target: u32, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32, height: i32, depth: i32, format: u32, ty: u32, offset: usize) { glcontextptr.tex_sub_image_3d_pbo(target, level, xoffset, yoffset, zoffset, width, height, depth, format, ty, offset) }
// Equivalent to the Rust `GlContextPtr::tex_storage_2d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_tex_storage_2d(glcontextptr: &AzGlContextPtr, target: u32, levels: i32, internal_format: u32, width: i32, height: i32) { glcontextptr.tex_storage_2d(target, levels, internal_format, width, height) }
// Equivalent to the Rust `GlContextPtr::tex_storage_3d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_tex_storage_3d(glcontextptr: &AzGlContextPtr, target: u32, levels: i32, internal_format: u32, width: i32, height: i32, depth: i32) { glcontextptr.tex_storage_3d(target, levels, internal_format, width, height, depth) }
// Equivalent to the Rust `GlContextPtr::get_tex_image_into_buffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_tex_image_into_buffer(glcontextptr: &AzGlContextPtr, target: u32, level: i32, format: u32, ty: u32, output: AzU8VecRefMut) { glcontextptr.get_tex_image_into_buffer(target, level, format, ty, output) }
// Equivalent to the Rust `GlContextPtr::copy_image_sub_data()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_copy_image_sub_data(glcontextptr: &AzGlContextPtr, src_name: u32, src_target: u32, src_level: i32, src_x: i32, src_y: i32, src_z: i32, dst_name: u32, dst_target: u32, dst_level: i32, dst_x: i32, dst_y: i32, dst_z: i32, src_width: i32, src_height: i32, src_depth: i32) { glcontextptr.copy_image_sub_data(src_name, src_target, src_level, src_x, src_y, src_z, dst_name, dst_target, dst_level, dst_x, dst_y, dst_z, src_width, src_height, src_depth) }
// Equivalent to the Rust `GlContextPtr::invalidate_framebuffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_invalidate_framebuffer(glcontextptr: &AzGlContextPtr, target: u32, attachments: AzGLenumVecRef) { glcontextptr.invalidate_framebuffer(target, attachments) }
// Equivalent to the Rust `GlContextPtr::invalidate_sub_framebuffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_invalidate_sub_framebuffer(glcontextptr: &AzGlContextPtr, target: u32, attachments: AzGLenumVecRef, xoffset: i32, yoffset: i32, width: i32, height: i32) { glcontextptr.invalidate_sub_framebuffer(target, attachments, xoffset, yoffset, width, height) }
// Equivalent to the Rust `GlContextPtr::get_integer_v()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_integer_v(glcontextptr: &AzGlContextPtr, name: u32, result: AzGLintVecRefMut) { glcontextptr.get_integer_v(name, result) }
// Equivalent to the Rust `GlContextPtr::get_integer_64v()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_integer_64v(glcontextptr: &AzGlContextPtr, name: u32, result: AzGLint64VecRefMut) { glcontextptr.get_integer_64v(name, result) }
// Equivalent to the Rust `GlContextPtr::get_integer_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_integer_iv(glcontextptr: &AzGlContextPtr, name: u32, index: u32, result: AzGLintVecRefMut) { glcontextptr.get_integer_iv(name, index, result) }
// Equivalent to the Rust `GlContextPtr::get_integer_64iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_integer_64iv(glcontextptr: &AzGlContextPtr, name: u32, index: u32, result: AzGLint64VecRefMut) { glcontextptr.get_integer_64iv(name, index, result) }
// Equivalent to the Rust `GlContextPtr::get_boolean_v()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_boolean_v(glcontextptr: &AzGlContextPtr, name: u32, result: AzGLbooleanVecRefMut) { glcontextptr.get_boolean_v(name, result) }
// Equivalent to the Rust `GlContextPtr::get_float_v()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_float_v(glcontextptr: &AzGlContextPtr, name: u32, result: AzGLfloatVecRefMut) { glcontextptr.get_float_v(name, result) }
// Equivalent to the Rust `GlContextPtr::get_framebuffer_attachment_parameter_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_framebuffer_attachment_parameter_iv(glcontextptr: &AzGlContextPtr, target: u32, attachment: u32, pname: u32) -> i32 { glcontextptr.get_framebuffer_attachment_parameter_iv(target, attachment, pname) }
// Equivalent to the Rust `GlContextPtr::get_renderbuffer_parameter_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_renderbuffer_parameter_iv(glcontextptr: &AzGlContextPtr, target: u32, pname: u32) -> i32 { glcontextptr.get_renderbuffer_parameter_iv(target, pname) }
// Equivalent to the Rust `GlContextPtr::get_tex_parameter_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_tex_parameter_iv(glcontextptr: &AzGlContextPtr, target: u32, name: u32) -> i32 { glcontextptr.get_tex_parameter_iv(target, name) }
// Equivalent to the Rust `GlContextPtr::get_tex_parameter_fv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_tex_parameter_fv(glcontextptr: &AzGlContextPtr, target: u32, name: u32) -> f32 { glcontextptr.get_tex_parameter_fv(target, name) }
// Equivalent to the Rust `GlContextPtr::tex_parameter_i()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_tex_parameter_i(glcontextptr: &AzGlContextPtr, target: u32, pname: u32, param: i32) { glcontextptr.tex_parameter_i(target, pname, param) }
// Equivalent to the Rust `GlContextPtr::tex_parameter_f()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_tex_parameter_f(glcontextptr: &AzGlContextPtr, target: u32, pname: u32, param: f32) { glcontextptr.tex_parameter_f(target, pname, param) }
// Equivalent to the Rust `GlContextPtr::framebuffer_texture_2d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_framebuffer_texture_2d(glcontextptr: &AzGlContextPtr, target: u32, attachment: u32, textarget: u32, texture: u32, level: i32) { glcontextptr.framebuffer_texture_2d(target, attachment, textarget, texture, level) }
// Equivalent to the Rust `GlContextPtr::framebuffer_texture_layer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_framebuffer_texture_layer(glcontextptr: &AzGlContextPtr, target: u32, attachment: u32, texture: u32, level: i32, layer: i32) { glcontextptr.framebuffer_texture_layer(target, attachment, texture, level, layer) }
// Equivalent to the Rust `GlContextPtr::blit_framebuffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_blit_framebuffer(glcontextptr: &AzGlContextPtr, src_x0: i32, src_y0: i32, src_x1: i32, src_y1: i32, dst_x0: i32, dst_y0: i32, dst_x1: i32, dst_y1: i32, mask: u32, filter: u32) { glcontextptr.blit_framebuffer(src_x0, src_y0, src_x1, src_y1, dst_x0, dst_y0, dst_x1, dst_y1, mask, filter) }
// Equivalent to the Rust `GlContextPtr::vertex_attrib_4f()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_vertex_attrib_4f(glcontextptr: &AzGlContextPtr, index: u32, x: f32, y: f32, z: f32, w: f32) { glcontextptr.vertex_attrib_4f(index, x, y, z, w) }
// Equivalent to the Rust `GlContextPtr::vertex_attrib_pointer_f32()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_vertex_attrib_pointer_f32(glcontextptr: &AzGlContextPtr, index: u32, size: i32, normalized: bool, stride: i32, offset: u32) { glcontextptr.vertex_attrib_pointer_f32(index, size, normalized, stride, offset) }
// Equivalent to the Rust `GlContextPtr::vertex_attrib_pointer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_vertex_attrib_pointer(glcontextptr: &AzGlContextPtr, index: u32, size: i32, type_: u32, normalized: bool, stride: i32, offset: u32) { glcontextptr.vertex_attrib_pointer(index, size, type_, normalized, stride, offset) }
// Equivalent to the Rust `GlContextPtr::vertex_attrib_i_pointer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_vertex_attrib_i_pointer(glcontextptr: &AzGlContextPtr, index: u32, size: i32, type_: u32, stride: i32, offset: u32) { glcontextptr.vertex_attrib_i_pointer(index, size, type_, stride, offset) }
// Equivalent to the Rust `GlContextPtr::vertex_attrib_divisor()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_vertex_attrib_divisor(glcontextptr: &AzGlContextPtr, index: u32, divisor: u32) { glcontextptr.vertex_attrib_divisor(index, divisor) }
// Equivalent to the Rust `GlContextPtr::viewport()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_viewport(glcontextptr: &AzGlContextPtr, x: i32, y: i32, width: i32, height: i32) { glcontextptr.viewport(x, y, width, height) }
// Equivalent to the Rust `GlContextPtr::scissor()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_scissor(glcontextptr: &AzGlContextPtr, x: i32, y: i32, width: i32, height: i32) { glcontextptr.scissor(x, y, width, height) }
// Equivalent to the Rust `GlContextPtr::line_width()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_line_width(glcontextptr: &AzGlContextPtr, width: f32) { glcontextptr.line_width(width) }
// Equivalent to the Rust `GlContextPtr::use_program()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_use_program(glcontextptr: &AzGlContextPtr, program: u32) { glcontextptr.use_program(program) }
// Equivalent to the Rust `GlContextPtr::validate_program()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_validate_program(glcontextptr: &AzGlContextPtr, program: u32) { glcontextptr.validate_program(program) }
// Equivalent to the Rust `GlContextPtr::draw_arrays()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_draw_arrays(glcontextptr: &AzGlContextPtr, mode: u32, first: i32, count: i32) { glcontextptr.draw_arrays(mode, first, count) }
// Equivalent to the Rust `GlContextPtr::draw_arrays_instanced()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_draw_arrays_instanced(glcontextptr: &AzGlContextPtr, mode: u32, first: i32, count: i32, primcount: i32) { glcontextptr.draw_arrays_instanced(mode, first, count, primcount) }
// Equivalent to the Rust `GlContextPtr::draw_elements()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_draw_elements(glcontextptr: &AzGlContextPtr, mode: u32, count: i32, element_type: u32, indices_offset: u32) { glcontextptr.draw_elements(mode, count, element_type, indices_offset) }
// Equivalent to the Rust `GlContextPtr::draw_elements_instanced()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_draw_elements_instanced(glcontextptr: &AzGlContextPtr, mode: u32, count: i32, element_type: u32, indices_offset: u32, primcount: i32) { glcontextptr.draw_elements_instanced(mode, count, element_type, indices_offset, primcount) }
// Equivalent to the Rust `GlContextPtr::blend_color()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_blend_color(glcontextptr: &AzGlContextPtr, r: f32, g: f32, b: f32, a: f32) { glcontextptr.blend_color(r, g, b, a) }
// Equivalent to the Rust `GlContextPtr::blend_func()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_blend_func(glcontextptr: &AzGlContextPtr, sfactor: u32, dfactor: u32) { glcontextptr.blend_func(sfactor, dfactor) }
// Equivalent to the Rust `GlContextPtr::blend_func_separate()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_blend_func_separate(glcontextptr: &AzGlContextPtr, src_rgb: u32, dest_rgb: u32, src_alpha: u32, dest_alpha: u32) { glcontextptr.blend_func_separate(src_rgb, dest_rgb, src_alpha, dest_alpha) }
// Equivalent to the Rust `GlContextPtr::blend_equation()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_blend_equation(glcontextptr: &AzGlContextPtr, mode: u32) { glcontextptr.blend_equation(mode) }
// Equivalent to the Rust `GlContextPtr::blend_equation_separate()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_blend_equation_separate(glcontextptr: &AzGlContextPtr, mode_rgb: u32, mode_alpha: u32) { glcontextptr.blend_equation_separate(mode_rgb, mode_alpha) }
// Equivalent to the Rust `GlContextPtr::color_mask()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_color_mask(glcontextptr: &AzGlContextPtr, r: bool, g: bool, b: bool, a: bool) { glcontextptr.color_mask(r, g, b, a) }
// Equivalent to the Rust `GlContextPtr::cull_face()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_cull_face(glcontextptr: &AzGlContextPtr, mode: u32) { glcontextptr.cull_face(mode) }
// Equivalent to the Rust `GlContextPtr::front_face()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_front_face(glcontextptr: &AzGlContextPtr, mode: u32) { glcontextptr.front_face(mode) }
// Equivalent to the Rust `GlContextPtr::enable()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_enable(glcontextptr: &AzGlContextPtr, cap: u32) { glcontextptr.enable(cap) }
// Equivalent to the Rust `GlContextPtr::disable()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_disable(glcontextptr: &AzGlContextPtr, cap: u32) { glcontextptr.disable(cap) }
// Equivalent to the Rust `GlContextPtr::hint()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_hint(glcontextptr: &AzGlContextPtr, param_name: u32, param_val: u32) { glcontextptr.hint(param_name, param_val) }
// Equivalent to the Rust `GlContextPtr::is_enabled()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_is_enabled(glcontextptr: &AzGlContextPtr, cap: u32) -> u8 { glcontextptr.is_enabled(cap) }
// Equivalent to the Rust `GlContextPtr::is_shader()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_is_shader(glcontextptr: &AzGlContextPtr, shader: u32) -> u8 { glcontextptr.is_shader(shader) }
// Equivalent to the Rust `GlContextPtr::is_texture()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_is_texture(glcontextptr: &AzGlContextPtr, texture: u32) -> u8 { glcontextptr.is_texture(texture) }
// Equivalent to the Rust `GlContextPtr::is_framebuffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_is_framebuffer(glcontextptr: &AzGlContextPtr, framebuffer: u32) -> u8 { glcontextptr.is_framebuffer(framebuffer) }
// Equivalent to the Rust `GlContextPtr::is_renderbuffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_is_renderbuffer(glcontextptr: &AzGlContextPtr, renderbuffer: u32) -> u8 { glcontextptr.is_renderbuffer(renderbuffer) }
// Equivalent to the Rust `GlContextPtr::check_frame_buffer_status()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_check_frame_buffer_status(glcontextptr: &AzGlContextPtr, target: u32) -> u32 { glcontextptr.check_frame_buffer_status(target) }
// Equivalent to the Rust `GlContextPtr::enable_vertex_attrib_array()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_enable_vertex_attrib_array(glcontextptr: &AzGlContextPtr, index: u32) { glcontextptr.enable_vertex_attrib_array(index) }
// Equivalent to the Rust `GlContextPtr::disable_vertex_attrib_array()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_disable_vertex_attrib_array(glcontextptr: &AzGlContextPtr, index: u32) { glcontextptr.disable_vertex_attrib_array(index) }
// Equivalent to the Rust `GlContextPtr::uniform_1f()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_1f(glcontextptr: &AzGlContextPtr, location: i32, v0: f32) { glcontextptr.uniform_1f(location, v0) }
// Equivalent to the Rust `GlContextPtr::uniform_1fv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_1fv(glcontextptr: &AzGlContextPtr, location: i32, values: AzF32VecRef) { glcontextptr.uniform_1fv(location, values) }
// Equivalent to the Rust `GlContextPtr::uniform_1i()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_1i(glcontextptr: &AzGlContextPtr, location: i32, v0: i32) { glcontextptr.uniform_1i(location, v0) }
// Equivalent to the Rust `GlContextPtr::uniform_1iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_1iv(glcontextptr: &AzGlContextPtr, location: i32, values: AzI32VecRef) { glcontextptr.uniform_1iv(location, values) }
// Equivalent to the Rust `GlContextPtr::uniform_1ui()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_1ui(glcontextptr: &AzGlContextPtr, location: i32, v0: u32) { glcontextptr.uniform_1ui(location, v0) }
// Equivalent to the Rust `GlContextPtr::uniform_2f()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_2f(glcontextptr: &AzGlContextPtr, location: i32, v0: f32, v1: f32) { glcontextptr.uniform_2f(location, v0, v1) }
// Equivalent to the Rust `GlContextPtr::uniform_2fv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_2fv(glcontextptr: &AzGlContextPtr, location: i32, values: AzF32VecRef) { glcontextptr.uniform_2fv(location, values) }
// Equivalent to the Rust `GlContextPtr::uniform_2i()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_2i(glcontextptr: &AzGlContextPtr, location: i32, v0: i32, v1: i32) { glcontextptr.uniform_2i(location, v0, v1) }
// Equivalent to the Rust `GlContextPtr::uniform_2iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_2iv(glcontextptr: &AzGlContextPtr, location: i32, values: AzI32VecRef) { glcontextptr.uniform_2iv(location, values) }
// Equivalent to the Rust `GlContextPtr::uniform_2ui()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_2ui(glcontextptr: &AzGlContextPtr, location: i32, v0: u32, v1: u32) { glcontextptr.uniform_2ui(location, v0, v1) }
// Equivalent to the Rust `GlContextPtr::uniform_3f()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_3f(glcontextptr: &AzGlContextPtr, location: i32, v0: f32, v1: f32, v2: f32) { glcontextptr.uniform_3f(location, v0, v1, v2) }
// Equivalent to the Rust `GlContextPtr::uniform_3fv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_3fv(glcontextptr: &AzGlContextPtr, location: i32, values: AzF32VecRef) { glcontextptr.uniform_3fv(location, values) }
// Equivalent to the Rust `GlContextPtr::uniform_3i()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_3i(glcontextptr: &AzGlContextPtr, location: i32, v0: i32, v1: i32, v2: i32) { glcontextptr.uniform_3i(location, v0, v1, v2) }
// Equivalent to the Rust `GlContextPtr::uniform_3iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_3iv(glcontextptr: &AzGlContextPtr, location: i32, values: AzI32VecRef) { glcontextptr.uniform_3iv(location, values) }
// Equivalent to the Rust `GlContextPtr::uniform_3ui()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_3ui(glcontextptr: &AzGlContextPtr, location: i32, v0: u32, v1: u32, v2: u32) { glcontextptr.uniform_3ui(location, v0, v1, v2) }
// Equivalent to the Rust `GlContextPtr::uniform_4f()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_4f(glcontextptr: &AzGlContextPtr, location: i32, x: f32, y: f32, z: f32, w: f32) { glcontextptr.uniform_4f(location, x, y, z, w) }
// Equivalent to the Rust `GlContextPtr::uniform_4i()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_4i(glcontextptr: &AzGlContextPtr, location: i32, x: i32, y: i32, z: i32, w: i32) { glcontextptr.uniform_4i(location, x, y, z, w) }
// Equivalent to the Rust `GlContextPtr::uniform_4iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_4iv(glcontextptr: &AzGlContextPtr, location: i32, values: AzI32VecRef) { glcontextptr.uniform_4iv(location, values) }
// Equivalent to the Rust `GlContextPtr::uniform_4ui()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_4ui(glcontextptr: &AzGlContextPtr, location: i32, x: u32, y: u32, z: u32, w: u32) { glcontextptr.uniform_4ui(location, x, y, z, w) }
// Equivalent to the Rust `GlContextPtr::uniform_4fv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_4fv(glcontextptr: &AzGlContextPtr, location: i32, values: AzF32VecRef) { glcontextptr.uniform_4fv(location, values) }
// Equivalent to the Rust `GlContextPtr::uniform_matrix_2fv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_matrix_2fv(glcontextptr: &AzGlContextPtr, location: i32, transpose: bool, value: AzF32VecRef) { glcontextptr.uniform_matrix_2fv(location, transpose, value) }
// Equivalent to the Rust `GlContextPtr::uniform_matrix_3fv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_matrix_3fv(glcontextptr: &AzGlContextPtr, location: i32, transpose: bool, value: AzF32VecRef) { glcontextptr.uniform_matrix_3fv(location, transpose, value) }
// Equivalent to the Rust `GlContextPtr::uniform_matrix_4fv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_matrix_4fv(glcontextptr: &AzGlContextPtr, location: i32, transpose: bool, value: AzF32VecRef) { glcontextptr.uniform_matrix_4fv(location, transpose, value) }
// Equivalent to the Rust `GlContextPtr::depth_mask()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_depth_mask(glcontextptr: &AzGlContextPtr, flag: bool) { glcontextptr.depth_mask(flag) }
// Equivalent to the Rust `GlContextPtr::depth_range()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_depth_range(glcontextptr: &AzGlContextPtr, near: f64, far: f64) { glcontextptr.depth_range(near, far) }
// Equivalent to the Rust `GlContextPtr::get_active_attrib()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_active_attrib(glcontextptr: &AzGlContextPtr, program: u32, index: u32) -> AzGetActiveAttribReturn { glcontextptr.get_active_attrib(program, index) }
// Equivalent to the Rust `GlContextPtr::get_active_uniform()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_active_uniform(glcontextptr: &AzGlContextPtr, program: u32, index: u32) -> AzGetActiveUniformReturn { glcontextptr.get_active_uniform(program, index) }
// Equivalent to the Rust `GlContextPtr::get_active_uniforms_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_active_uniforms_iv(glcontextptr: &AzGlContextPtr, program: u32, indices: AzGLuintVec, pname: u32) -> AzGLintVec { glcontextptr.get_active_uniforms_iv(program, indices, pname) }
// Equivalent to the Rust `GlContextPtr::get_active_uniform_block_i()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_active_uniform_block_i(glcontextptr: &AzGlContextPtr, program: u32, index: u32, pname: u32) -> i32 { glcontextptr.get_active_uniform_block_i(program, index, pname) }
// Equivalent to the Rust `GlContextPtr::get_active_uniform_block_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_active_uniform_block_iv(glcontextptr: &AzGlContextPtr, program: u32, index: u32, pname: u32) -> AzGLintVec { glcontextptr.get_active_uniform_block_iv(program, index, pname) }
// Equivalent to the Rust `GlContextPtr::get_active_uniform_block_name()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_active_uniform_block_name(glcontextptr: &AzGlContextPtr, program: u32, index: u32) -> AzString { glcontextptr.get_active_uniform_block_name(program, index) }
// Equivalent to the Rust `GlContextPtr::get_attrib_location()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_attrib_location(glcontextptr: &AzGlContextPtr, program: u32, name: AzRefstr) -> i32 { glcontextptr.get_attrib_location(program, name) }
// Equivalent to the Rust `GlContextPtr::get_frag_data_location()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_frag_data_location(glcontextptr: &AzGlContextPtr, program: u32, name: AzRefstr) -> i32 { glcontextptr.get_frag_data_location(program, name) }
// Equivalent to the Rust `GlContextPtr::get_uniform_location()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_uniform_location(glcontextptr: &AzGlContextPtr, program: u32, name: AzRefstr) -> i32 { glcontextptr.get_uniform_location(program, name) }
// Equivalent to the Rust `GlContextPtr::get_program_info_log()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_program_info_log(glcontextptr: &AzGlContextPtr, program: u32) -> AzString { glcontextptr.get_program_info_log(program) }
// Equivalent to the Rust `GlContextPtr::get_program_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_program_iv(glcontextptr: &AzGlContextPtr, program: u32, pname: u32, result: AzGLintVecRefMut) { glcontextptr.get_program_iv(program, pname, result) }
// Equivalent to the Rust `GlContextPtr::get_program_binary()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_program_binary(glcontextptr: &AzGlContextPtr, program: u32) -> AzGetProgramBinaryReturn { glcontextptr.get_program_binary(program) }
// Equivalent to the Rust `GlContextPtr::program_binary()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_program_binary(glcontextptr: &AzGlContextPtr, program: u32, format: u32, binary: AzU8VecRef) { glcontextptr.program_binary(program, format, binary) }
// Equivalent to the Rust `GlContextPtr::program_parameter_i()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_program_parameter_i(glcontextptr: &AzGlContextPtr, program: u32, pname: u32, value: i32) { glcontextptr.program_parameter_i(program, pname, value) }
// Equivalent to the Rust `GlContextPtr::get_vertex_attrib_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_vertex_attrib_iv(glcontextptr: &AzGlContextPtr, index: u32, pname: u32, result: AzGLintVecRefMut) { glcontextptr.get_vertex_attrib_iv(index, pname, result) }
// Equivalent to the Rust `GlContextPtr::get_vertex_attrib_fv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_vertex_attrib_fv(glcontextptr: &AzGlContextPtr, index: u32, pname: u32, result: AzGLfloatVecRefMut) { glcontextptr.get_vertex_attrib_fv(index, pname, result) }
// Equivalent to the Rust `GlContextPtr::get_vertex_attrib_pointer_v()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_vertex_attrib_pointer_v(glcontextptr: &AzGlContextPtr, index: u32, pname: u32) -> isize { glcontextptr.get_vertex_attrib_pointer_v(index, pname) }
// Equivalent to the Rust `GlContextPtr::get_buffer_parameter_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_buffer_parameter_iv(glcontextptr: &AzGlContextPtr, target: u32, pname: u32) -> i32 { glcontextptr.get_buffer_parameter_iv(target, pname) }
// Equivalent to the Rust `GlContextPtr::get_shader_info_log()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_shader_info_log(glcontextptr: &AzGlContextPtr, shader: u32) -> AzString { glcontextptr.get_shader_info_log(shader) }
// Equivalent to the Rust `GlContextPtr::get_string()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_string(glcontextptr: &AzGlContextPtr, which: u32) -> AzString { glcontextptr.get_string(which) }
// Equivalent to the Rust `GlContextPtr::get_string_i()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_string_i(glcontextptr: &AzGlContextPtr, which: u32, index: u32) -> AzString { glcontextptr.get_string_i(which, index) }
// Equivalent to the Rust `GlContextPtr::get_shader_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_shader_iv(glcontextptr: &AzGlContextPtr, shader: u32, pname: u32, result: AzGLintVecRefMut) { glcontextptr.get_shader_iv(shader, pname, result) }
// Equivalent to the Rust `GlContextPtr::get_shader_precision_format()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_shader_precision_format(glcontextptr: &AzGlContextPtr, shader_type: u32, precision_type: u32) -> [i32;3] { glcontextptr.get_shader_precision_format(shader_type, precision_type) }
// Equivalent to the Rust `GlContextPtr::compile_shader()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_compile_shader(glcontextptr: &AzGlContextPtr, shader: u32) { glcontextptr.compile_shader(shader) }
// Equivalent to the Rust `GlContextPtr::create_program()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_create_program(glcontextptr: &AzGlContextPtr) -> u32 { glcontextptr.create_program() }
// Equivalent to the Rust `GlContextPtr::delete_program()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_delete_program(glcontextptr: &AzGlContextPtr, program: u32) { glcontextptr.delete_program(program) }
// Equivalent to the Rust `GlContextPtr::create_shader()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_create_shader(glcontextptr: &AzGlContextPtr, shader_type: u32) -> u32 { glcontextptr.create_shader(shader_type) }
// Equivalent to the Rust `GlContextPtr::delete_shader()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_delete_shader(glcontextptr: &AzGlContextPtr, shader: u32) { glcontextptr.delete_shader(shader) }
// Equivalent to the Rust `GlContextPtr::detach_shader()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_detach_shader(glcontextptr: &AzGlContextPtr, program: u32, shader: u32) { glcontextptr.detach_shader(program, shader) }
// Equivalent to the Rust `GlContextPtr::link_program()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_link_program(glcontextptr: &AzGlContextPtr, program: u32) { glcontextptr.link_program(program) }
// Equivalent to the Rust `GlContextPtr::clear_color()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_clear_color(glcontextptr: &AzGlContextPtr, r: f32, g: f32, b: f32, a: f32) { glcontextptr.clear_color(r, g, b, a) }
// Equivalent to the Rust `GlContextPtr::clear()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_clear(glcontextptr: &AzGlContextPtr, buffer_mask: u32) { glcontextptr.clear(buffer_mask) }
// Equivalent to the Rust `GlContextPtr::clear_depth()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_clear_depth(glcontextptr: &AzGlContextPtr, depth: f64) { glcontextptr.clear_depth(depth) }
// Equivalent to the Rust `GlContextPtr::clear_stencil()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_clear_stencil(glcontextptr: &AzGlContextPtr, s: i32) { glcontextptr.clear_stencil(s) }
// Equivalent to the Rust `GlContextPtr::flush()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_flush(glcontextptr: &AzGlContextPtr) { glcontextptr.flush() }
// Equivalent to the Rust `GlContextPtr::finish()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_finish(glcontextptr: &AzGlContextPtr) { glcontextptr.finish() }
// Equivalent to the Rust `GlContextPtr::get_error()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_error(glcontextptr: &AzGlContextPtr) -> u32 { glcontextptr.get_error() }
// Equivalent to the Rust `GlContextPtr::stencil_mask()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_stencil_mask(glcontextptr: &AzGlContextPtr, mask: u32) { glcontextptr.stencil_mask(mask) }
// Equivalent to the Rust `GlContextPtr::stencil_mask_separate()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_stencil_mask_separate(glcontextptr: &AzGlContextPtr, face: u32, mask: u32) { glcontextptr.stencil_mask_separate(face, mask) }
// Equivalent to the Rust `GlContextPtr::stencil_func()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_stencil_func(glcontextptr: &AzGlContextPtr, func: u32, ref_: i32, mask: u32) { glcontextptr.stencil_func(func, ref_, mask) }
// Equivalent to the Rust `GlContextPtr::stencil_func_separate()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_stencil_func_separate(glcontextptr: &AzGlContextPtr, face: u32, func: u32, ref_: i32, mask: u32) { glcontextptr.stencil_func_separate(face, func, ref_, mask) }
// Equivalent to the Rust `GlContextPtr::stencil_op()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_stencil_op(glcontextptr: &AzGlContextPtr, sfail: u32, dpfail: u32, dppass: u32) { glcontextptr.stencil_op(sfail, dpfail, dppass) }
// Equivalent to the Rust `GlContextPtr::stencil_op_separate()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_stencil_op_separate(glcontextptr: &AzGlContextPtr, face: u32, sfail: u32, dpfail: u32, dppass: u32) { glcontextptr.stencil_op_separate(face, sfail, dpfail, dppass) }
// Equivalent to the Rust `GlContextPtr::egl_image_target_texture2d_oes()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_egl_image_target_texture2d_oes(glcontextptr: &AzGlContextPtr, target: u32, image: *const c_void) { glcontextptr.egl_image_target_texture2d_oes(target, image) }
// Equivalent to the Rust `GlContextPtr::generate_mipmap()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_generate_mipmap(glcontextptr: &AzGlContextPtr, target: u32) { glcontextptr.generate_mipmap(target) }
// Equivalent to the Rust `GlContextPtr::insert_event_marker_ext()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_insert_event_marker_ext(glcontextptr: &AzGlContextPtr, message: AzRefstr) { glcontextptr.insert_event_marker_ext(message) }
// Equivalent to the Rust `GlContextPtr::push_group_marker_ext()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_push_group_marker_ext(glcontextptr: &AzGlContextPtr, message: AzRefstr) { glcontextptr.push_group_marker_ext(message) }
// Equivalent to the Rust `GlContextPtr::pop_group_marker_ext()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_pop_group_marker_ext(glcontextptr: &AzGlContextPtr) { glcontextptr.pop_group_marker_ext() }
// Equivalent to the Rust `GlContextPtr::debug_message_insert_khr()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_debug_message_insert_khr(glcontextptr: &AzGlContextPtr, source: u32, type_: u32, id: u32, severity: u32, message: AzRefstr) { glcontextptr.debug_message_insert_khr(source, type_, id, severity, message) }
// Equivalent to the Rust `GlContextPtr::push_debug_group_khr()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_push_debug_group_khr(glcontextptr: &AzGlContextPtr, source: u32, id: u32, message: AzRefstr) { glcontextptr.push_debug_group_khr(source, id, message) }
// Equivalent to the Rust `GlContextPtr::pop_debug_group_khr()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_pop_debug_group_khr(glcontextptr: &AzGlContextPtr) { glcontextptr.pop_debug_group_khr() }
// Equivalent to the Rust `GlContextPtr::fence_sync()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_fence_sync(glcontextptr: &AzGlContextPtr, condition: u32, flags: u32) -> AzGLsyncPtr { glcontextptr.fence_sync(condition, flags) }
// Equivalent to the Rust `GlContextPtr::client_wait_sync()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_client_wait_sync(glcontextptr: &AzGlContextPtr, sync: AzGLsyncPtr, flags: u32, timeout: u64) { glcontextptr.client_wait_sync(sync, flags, timeout) }
// Equivalent to the Rust `GlContextPtr::wait_sync()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_wait_sync(glcontextptr: &AzGlContextPtr, sync: AzGLsyncPtr, flags: u32, timeout: u64) { glcontextptr.wait_sync(sync, flags, timeout) }
// Equivalent to the Rust `GlContextPtr::delete_sync()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_delete_sync(glcontextptr: &AzGlContextPtr, sync: AzGLsyncPtr) { glcontextptr.delete_sync(sync) }
// Equivalent to the Rust `GlContextPtr::texture_range_apple()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_texture_range_apple(glcontextptr: &AzGlContextPtr, target: u32, data: AzU8VecRef) { glcontextptr.texture_range_apple(target, data) }
// Equivalent to the Rust `GlContextPtr::gen_fences_apple()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_gen_fences_apple(glcontextptr: &AzGlContextPtr, n: i32) -> AzGLuintVec { glcontextptr.gen_fences_apple(n) }
// Equivalent to the Rust `GlContextPtr::delete_fences_apple()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_delete_fences_apple(glcontextptr: &AzGlContextPtr, fences: AzGLuintVecRef) { glcontextptr.delete_fences_apple(fences) }
// Equivalent to the Rust `GlContextPtr::set_fence_apple()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_set_fence_apple(glcontextptr: &AzGlContextPtr, fence: u32) { glcontextptr.set_fence_apple(fence) }
// Equivalent to the Rust `GlContextPtr::finish_fence_apple()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_finish_fence_apple(glcontextptr: &AzGlContextPtr, fence: u32) { glcontextptr.finish_fence_apple(fence) }
// Equivalent to the Rust `GlContextPtr::test_fence_apple()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_test_fence_apple(glcontextptr: &AzGlContextPtr, fence: u32) { glcontextptr.test_fence_apple(fence) }
// Equivalent to the Rust `GlContextPtr::test_object_apple()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_test_object_apple(glcontextptr: &AzGlContextPtr, object: u32, name: u32) -> u8 { glcontextptr.test_object_apple(object, name) }
// Equivalent to the Rust `GlContextPtr::finish_object_apple()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_finish_object_apple(glcontextptr: &AzGlContextPtr, object: u32, name: u32) { glcontextptr.finish_object_apple(object, name) }
// Equivalent to the Rust `GlContextPtr::get_frag_data_index()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_frag_data_index(glcontextptr: &AzGlContextPtr, program: u32, name: AzRefstr) -> i32 { glcontextptr.get_frag_data_index(program, name) }
// Equivalent to the Rust `GlContextPtr::blend_barrier_khr()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_blend_barrier_khr(glcontextptr: &AzGlContextPtr) { glcontextptr.blend_barrier_khr() }
// Equivalent to the Rust `GlContextPtr::bind_frag_data_location_indexed()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_bind_frag_data_location_indexed(glcontextptr: &AzGlContextPtr, program: u32, color_number: u32, index: u32, name: AzRefstr) { glcontextptr.bind_frag_data_location_indexed(program, color_number, index, name) }
// Equivalent to the Rust `GlContextPtr::get_debug_messages()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_debug_messages(glcontextptr: &AzGlContextPtr) -> AzDebugMessageVec { glcontextptr.get_debug_messages() }
// Equivalent to the Rust `GlContextPtr::provoking_vertex_angle()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_provoking_vertex_angle(glcontextptr: &AzGlContextPtr, mode: u32) { glcontextptr.provoking_vertex_angle(mode) }
// Equivalent to the Rust `GlContextPtr::gen_vertex_arrays_apple()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_gen_vertex_arrays_apple(glcontextptr: &AzGlContextPtr, n: i32) -> AzGLuintVec { glcontextptr.gen_vertex_arrays_apple(n) }
// Equivalent to the Rust `GlContextPtr::bind_vertex_array_apple()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_bind_vertex_array_apple(glcontextptr: &AzGlContextPtr, vao: u32) { glcontextptr.bind_vertex_array_apple(vao) }
// Equivalent to the Rust `GlContextPtr::delete_vertex_arrays_apple()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_delete_vertex_arrays_apple(glcontextptr: &AzGlContextPtr, vertex_arrays: AzGLuintVecRef) { glcontextptr.delete_vertex_arrays_apple(vertex_arrays) }
// Equivalent to the Rust `GlContextPtr::copy_texture_chromium()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_copy_texture_chromium(glcontextptr: &AzGlContextPtr, source_id: u32, source_level: i32, dest_target: u32, dest_id: u32, dest_level: i32, internal_format: i32, dest_type: u32, unpack_flip_y: u8, unpack_premultiply_alpha: u8, unpack_unmultiply_alpha: u8) { glcontextptr.copy_texture_chromium(source_id, source_level, dest_target, dest_id, dest_level, internal_format, dest_type, unpack_flip_y, unpack_premultiply_alpha, unpack_unmultiply_alpha) }
// Equivalent to the Rust `GlContextPtr::copy_sub_texture_chromium()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_copy_sub_texture_chromium(glcontextptr: &AzGlContextPtr, source_id: u32, source_level: i32, dest_target: u32, dest_id: u32, dest_level: i32, x_offset: i32, y_offset: i32, x: i32, y: i32, width: i32, height: i32, unpack_flip_y: u8, unpack_premultiply_alpha: u8, unpack_unmultiply_alpha: u8) { glcontextptr.copy_sub_texture_chromium(source_id, source_level, dest_target, dest_id, dest_level, x_offset, y_offset, x, y, width, height, unpack_flip_y, unpack_premultiply_alpha, unpack_unmultiply_alpha) }
// Equivalent to the Rust `GlContextPtr::egl_image_target_renderbuffer_storage_oes()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_egl_image_target_renderbuffer_storage_oes(glcontextptr: &AzGlContextPtr, target: u32, image: *const c_void) { glcontextptr.egl_image_target_renderbuffer_storage_oes(target, image) }
// Equivalent to the Rust `GlContextPtr::copy_texture_3d_angle()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_copy_texture_3d_angle(glcontextptr: &AzGlContextPtr, source_id: u32, source_level: i32, dest_target: u32, dest_id: u32, dest_level: i32, internal_format: i32, dest_type: u32, unpack_flip_y: u8, unpack_premultiply_alpha: u8, unpack_unmultiply_alpha: u8) { glcontextptr.copy_texture_3d_angle(source_id, source_level, dest_target, dest_id, dest_level, internal_format, dest_type, unpack_flip_y, unpack_premultiply_alpha, unpack_unmultiply_alpha) }
// Equivalent to the Rust `GlContextPtr::copy_sub_texture_3d_angle()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_copy_sub_texture_3d_angle(glcontextptr: &AzGlContextPtr, source_id: u32, source_level: i32, dest_target: u32, dest_id: u32, dest_level: i32, x_offset: i32, y_offset: i32, z_offset: i32, x: i32, y: i32, z: i32, width: i32, height: i32, depth: i32, unpack_flip_y: u8, unpack_premultiply_alpha: u8, unpack_unmultiply_alpha: u8) { glcontextptr.copy_sub_texture_3d_angle(source_id, source_level, dest_target, dest_id, dest_level, x_offset, y_offset, z_offset, x, y, z, width, height, depth, unpack_flip_y, unpack_premultiply_alpha, unpack_unmultiply_alpha) }
/// Destructor: Takes ownership of the `GlContextPtr` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_gl_context_ptr_delete(object: &mut AzGlContextPtr) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_gl_context_ptr_deep_copy(object: &AzGlContextPtr) -> AzGlContextPtr { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_gl_context_ptr_fmt_debug(object: &AzGlContextPtr) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `Texture` struct
pub type AzTextureTT = azul_impl::gl::Texture;
#[no_mangle] pub use AzTextureTT as AzTexture;
/// Destructor: Takes ownership of the `Texture` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_texture_delete(object: &mut AzTexture) { }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_texture_fmt_debug(object: &AzTexture) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `TextureFlags` struct
pub type AzTextureFlagsTT = azul_impl::gl::TextureFlags;
#[no_mangle] pub use AzTextureFlagsTT as AzTextureFlags;
/// Destructor: Takes ownership of the `TextureFlags` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_texture_flags_delete(object: &mut AzTextureFlags) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_texture_flags_deep_copy(object: &AzTextureFlags) -> AzTextureFlags { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_texture_flags_fmt_debug(object: &AzTextureFlags) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `TextId` struct
pub type AzTextIdTT = azul_impl::resources::TextId;
#[no_mangle] pub use AzTextIdTT as AzTextId;
/// Creates a new, unique `TextId`
#[no_mangle] pub extern "C" fn az_text_id_new() -> AzTextId { TextId::new() }
/// Destructor: Takes ownership of the `TextId` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_text_id_delete(object: &mut AzTextId) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_text_id_deep_copy(object: &AzTextId) -> AzTextId { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_text_id_fmt_debug(object: &AzTextId) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `ImageId` struct
pub type AzImageIdTT = azul_impl::resources::ImageId;
#[no_mangle] pub use AzImageIdTT as AzImageId;
/// Creates a new, unique `ImageId`
#[no_mangle] pub extern "C" fn az_image_id_new() -> AzImageId { ImageId::new() }
/// Destructor: Takes ownership of the `ImageId` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_image_id_delete(object: &mut AzImageId) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_image_id_deep_copy(object: &AzImageId) -> AzImageId { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_image_id_fmt_debug(object: &AzImageId) -> AzString { format!("{:#?}", object).into() }
/// Compares two instances of `AzImageId` for equality
#[no_mangle] pub extern "C" fn az_image_id_partial_eq(a: &AzImageId, b: &AzImageId) -> bool { a.eq(b) }
/// Compares two instances of `AzImageId` for ordering. Returns 0 for None (equality), 1 on Some(Less), 2 on Some(Equal) and 3 on Some(Greater). 
#[no_mangle] pub extern "C" fn az_image_id_partial_cmp(a: &AzImageId, b: &AzImageId) -> u8 { use std::cmp::Ordering::*;match a.partial_cmp(b) { None => 0, Some(Less) => 1, Some(Equal) => 2, Some(Greater) => 3 } }
/// Compares two instances of `AzImageId` for full ordering. Returns 0 for Less, 1 for Equal, 2 for Greater. 
#[no_mangle] pub extern "C" fn az_image_id_cmp(a: &AzImageId, b: &AzImageId) -> u8 { use std::cmp::Ordering::*; match a.cmp(b) { Less => 0, Equal => 1, Greater => 2 } }
/// Returns the hash of a `AzImageId` instance 
#[no_mangle] pub extern "C" fn az_image_id_hash(object: &AzImageId) -> u64 { use std::collections::hash_map::DefaultHasher; use std::hash::{Hash, Hasher}; let mut hasher = DefaultHasher::new(); object.hash(&mut hasher); hasher.finish() }

/// Re-export of rust-allocated (stack based) `FontId` struct
pub type AzFontIdTT = azul_impl::resources::FontId;
#[no_mangle] pub use AzFontIdTT as AzFontId;
/// Creates a new, unique `FontId`
#[no_mangle] pub extern "C" fn az_font_id_new() -> AzFontId { FontId::new() }
/// Destructor: Takes ownership of the `FontId` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_font_id_delete(object: &mut AzFontId) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_font_id_deep_copy(object: &AzFontId) -> AzFontId { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_font_id_fmt_debug(object: &AzFontId) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `ImageSource` struct
pub type AzImageSourceTT = azul_impl::resources::ImageSource;
#[no_mangle] pub use AzImageSourceTT as AzImageSource;
/// Destructor: Takes ownership of the `ImageSource` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_image_source_delete(object: &mut AzImageSource) { match object { azul_impl::resources::ImageSource::Embedded(_) => { }, azul_impl::resources::ImageSource::File(_) => { }, azul_impl::resources::ImageSource::Raw(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_image_source_deep_copy(object: &AzImageSource) -> AzImageSource { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_image_source_fmt_debug(object: &AzImageSource) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `FontSource` struct
pub type AzFontSourceTT = azul_impl::resources::FontSource;
#[no_mangle] pub use AzFontSourceTT as AzFontSource;
/// Destructor: Takes ownership of the `FontSource` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_font_source_delete(object: &mut AzFontSource) { match object { azul_impl::resources::FontSource::Embedded(_) => { }, azul_impl::resources::FontSource::File(_) => { }, azul_impl::resources::FontSource::System(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_font_source_deep_copy(object: &AzFontSource) -> AzFontSource { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_font_source_fmt_debug(object: &AzFontSource) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `RawImage` struct
pub type AzRawImageTT = azul_impl::resources::RawImage;
#[no_mangle] pub use AzRawImageTT as AzRawImage;
/// Creates a new `RawImage` by loading the decoded bytes
#[no_mangle] pub extern "C" fn az_raw_image_new(decoded_pixels: AzU8Vec, width: usize, height: usize, data_format: AzRawImageFormat) -> AzRawImage { RawImage { pixels: decoded_pixels, width, height, data_format: data_format } }
/// Destructor: Takes ownership of the `RawImage` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_raw_image_delete(object: &mut AzRawImage) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_raw_image_deep_copy(object: &AzRawImage) -> AzRawImage { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_raw_image_fmt_debug(object: &AzRawImage) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `RawImageFormat` struct
pub type AzRawImageFormatTT = azul_impl::resources::RawImageFormat;
#[no_mangle] pub use AzRawImageFormatTT as AzRawImageFormat;
/// Destructor: Takes ownership of the `RawImageFormat` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_raw_image_format_delete(object: &mut AzRawImageFormat) { match object { azul_impl::resources::RawImageFormat::R8 => { }, azul_impl::resources::RawImageFormat::R16 => { }, azul_impl::resources::RawImageFormat::RG16 => { }, azul_impl::resources::RawImageFormat::BGRA8 => { }, azul_impl::resources::RawImageFormat::RGBAF32 => { }, azul_impl::resources::RawImageFormat::RG8 => { }, azul_impl::resources::RawImageFormat::RGBAI32 => { }, azul_impl::resources::RawImageFormat::RGBA8 => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_raw_image_format_deep_copy(object: &AzRawImageFormat) -> AzRawImageFormat { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_raw_image_format_fmt_debug(object: &AzRawImageFormat) -> AzString { format!("{:#?}", object).into() }

/// Pointer to rust-allocated `Box<DropCheckPtr>` struct
pub type AzDropCheckPtrPtrTT = azul_impl::task::DropCheckPtr;
#[no_mangle] pub use AzDropCheckPtrPtrTT as AzDropCheckPtrPtr;
/// Destructor: Takes ownership of the `DropCheckPtr` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_drop_check_ptr_ptr_delete(ptr: &mut AzDropCheckPtrPtr) { let _ = unsafe { Box::<azul_impl::task::DropCheck>::from_raw(ptr.ptr  as *mut azul_impl::task::DropCheck) };}
/// (private): Downcasts the `AzDropCheckPtrPtr` to a `Box<azul_impl::task::DropCheck>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_drop_check_ptr_ptr_downcast(ptr: AzDropCheckPtrPtr) -> Box<azul_impl::task::DropCheck> {     unsafe { Box::<azul_impl::task::DropCheck>::from_raw(ptr.ptr  as *mut azul_impl::task::DropCheck) }}
/// (private): Downcasts the `AzDropCheckPtrPtr` to a `&mut Box<azul_impl::task::DropCheck>` and runs the `func` closure on it
#[inline(always)] fn az_drop_check_ptr_ptr_downcast_refmut<P, F: FnOnce(&mut azul_impl::task::DropCheck) -> P>(ptr: &mut AzDropCheckPtrPtr, func: F) -> P {     func(unsafe { &mut *(ptr.ptr as *mut azul_impl::task::DropCheck) })}
/// (private): Downcasts the `AzDropCheckPtrPtr` to a `&Box<azul_impl::task::DropCheck>` and runs the `func` closure on it
#[inline(always)] fn az_drop_check_ptr_ptr_downcast_ref<P, F: FnOnce(&azul_impl::task::DropCheck) -> P>(ptr: &AzDropCheckPtrPtr, func: F) -> P {     func(unsafe { &*(ptr.ptr as *const azul_impl::task::DropCheck) })}
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_drop_check_ptr_ptr_fmt_debug(object: &AzDropCheckPtrPtr) -> AzString { az_drop_check_ptr_ptr_downcast_ref(object, |o| format!("{:#?}", o)).into() }

/// Pointer to rust-allocated `Box<ArcMutexRefAny>` struct
pub type AzArcMutexRefAnyPtrTT = azul_impl::task::ArcMutexRefAnyPtr;
#[no_mangle] pub use AzArcMutexRefAnyPtrTT as AzArcMutexRefAnyPtr;
/// Destructor: Takes ownership of the `ArcMutexRefAny` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_arc_mutex_ref_any_ptr_delete(ptr: &mut AzArcMutexRefAnyPtr) { let _ = unsafe { Box::<std::sync::Arc<std::sync::Mutex<RefAny>>>::from_raw(ptr.ptr  as *mut std::sync::Arc<std::sync::Mutex<RefAny>>) };}
/// (private): Downcasts the `AzArcMutexRefAnyPtr` to a `Box<std::sync::Arc<std::sync::Mutex<RefAny>>>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_arc_mutex_ref_any_ptr_downcast(ptr: AzArcMutexRefAnyPtr) -> Box<std::sync::Arc<std::sync::Mutex<RefAny>>> {     unsafe { Box::<std::sync::Arc<std::sync::Mutex<RefAny>>>::from_raw(ptr.ptr  as *mut std::sync::Arc<std::sync::Mutex<RefAny>>) }}
/// (private): Downcasts the `AzArcMutexRefAnyPtr` to a `&mut Box<std::sync::Arc<std::sync::Mutex<RefAny>>>` and runs the `func` closure on it
#[inline(always)] fn az_arc_mutex_ref_any_ptr_downcast_refmut<P, F: FnOnce(&mut std::sync::Arc<std::sync::Mutex<RefAny>>) -> P>(ptr: &mut AzArcMutexRefAnyPtr, func: F) -> P {     func(unsafe { &mut *(ptr.ptr as *mut std::sync::Arc<std::sync::Mutex<RefAny>>) })}
/// (private): Downcasts the `AzArcMutexRefAnyPtr` to a `&Box<std::sync::Arc<std::sync::Mutex<RefAny>>>` and runs the `func` closure on it
#[inline(always)] fn az_arc_mutex_ref_any_ptr_downcast_ref<P, F: FnOnce(&std::sync::Arc<std::sync::Mutex<RefAny>>) -> P>(ptr: &AzArcMutexRefAnyPtr, func: F) -> P {     func(unsafe { &*(ptr.ptr as *const std::sync::Arc<std::sync::Mutex<RefAny>>) })}
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_arc_mutex_ref_any_ptr_fmt_debug(object: &AzArcMutexRefAnyPtr) -> AzString { az_arc_mutex_ref_any_ptr_downcast_ref(object, |o| format!("{:#?}", o)).into() }

/// Re-export of rust-allocated (stack based) `Timer` struct
pub type AzTimerTT = azul_impl::task::Timer;
#[no_mangle] pub use AzTimerTT as AzTimer;
/// Destructor: Takes ownership of the `Timer` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_timer_delete(object: &mut AzTimer) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_timer_deep_copy(object: &AzTimer) -> AzTimer { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_timer_fmt_debug(object: &AzTimer) -> AzString { format!("{:#?}", object).into() }

/// Pointer to rust-allocated `Box<Task>` struct
#[no_mangle] #[repr(C)] pub struct AzTaskPtr { pub ptr: *mut c_void }
/// Creates and starts a new `Task`
#[no_mangle] pub extern "C" fn az_task_ptr_new(data: AzArcMutexRefAnyPtr, callback: AzTaskCallbackType) -> AzTaskPtr { let object: Task = azul_impl::task::Task::new(data, callback); let ptr = Box::into_raw(Box::new(object)) as *mut c_void; AzTaskPtr { ptr } }
/// Creates and starts a new `Task`
#[no_mangle] pub extern "C" fn az_task_ptr_then(task: AzTaskPtr, timer: AzTimer) -> AzTaskPtr { AzTaskPtr { ptr: Box::into_raw(Box::new(az_task_ptr_downcast(task).then(timer))) as *mut c_void } }
/// Destructor: Takes ownership of the `Task` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_task_ptr_delete(ptr: &mut AzTaskPtr) { let _ = unsafe { Box::<Task>::from_raw(ptr.ptr  as *mut Task) };}
/// (private): Downcasts the `AzTaskPtr` to a `Box<Task>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_task_ptr_downcast(ptr: AzTaskPtr) -> Box<Task> {     unsafe { Box::<Task>::from_raw(ptr.ptr  as *mut Task) }}
/// (private): Downcasts the `AzTaskPtr` to a `&mut Box<Task>` and runs the `func` closure on it
#[inline(always)] fn az_task_ptr_downcast_refmut<P, F: FnOnce(&mut Task) -> P>(ptr: &mut AzTaskPtr, func: F) -> P {     func(unsafe { &mut *(ptr.ptr as *mut Task) })}
/// (private): Downcasts the `AzTaskPtr` to a `&Box<Task>` and runs the `func` closure on it
#[inline(always)] fn az_task_ptr_downcast_ref<P, F: FnOnce(&Task) -> P>(ptr: &AzTaskPtr, func: F) -> P {     func(unsafe { &*(ptr.ptr as *const Task) })}
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_task_ptr_fmt_debug(object: &AzTaskPtr) -> AzString { az_task_ptr_downcast_ref(object, |o| format!("{:#?}", o)).into() }

/// Pointer to rust-allocated `Box<Thread>` struct
#[no_mangle] #[repr(C)] pub struct AzThreadPtr { pub ptr: *mut c_void }
/// Creates and starts a new thread that calls the `callback` on the `data`.
#[no_mangle] pub extern "C" fn az_thread_ptr_new(data: AzRefAny, callback: AzThreadCallbackType) -> AzThreadPtr { let object: Thread = Thread::new(data, callback); let ptr = Box::into_raw(Box::new(object)) as *mut c_void; AzThreadPtr { ptr } }
/// Blocks until the internal thread has finished and returns the result of the operation
#[no_mangle] pub extern "C" fn az_thread_ptr_block(thread: AzThreadPtr) -> AzResultRefAnyBlockError { (*az_thread_ptr_downcast(thread)).block() }
/// Destructor: Takes ownership of the `Thread` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_thread_ptr_delete(ptr: &mut AzThreadPtr) { let _ = unsafe { Box::<Thread>::from_raw(ptr.ptr  as *mut Thread) };}
/// (private): Downcasts the `AzThreadPtr` to a `Box<Thread>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_thread_ptr_downcast(ptr: AzThreadPtr) -> Box<Thread> {     unsafe { Box::<Thread>::from_raw(ptr.ptr  as *mut Thread) }}
/// (private): Downcasts the `AzThreadPtr` to a `&mut Box<Thread>` and runs the `func` closure on it
#[inline(always)] fn az_thread_ptr_downcast_refmut<P, F: FnOnce(&mut Thread) -> P>(ptr: &mut AzThreadPtr, func: F) -> P {     func(unsafe { &mut *(ptr.ptr as *mut Thread) })}
/// (private): Downcasts the `AzThreadPtr` to a `&Box<Thread>` and runs the `func` closure on it
#[inline(always)] fn az_thread_ptr_downcast_ref<P, F: FnOnce(&Thread) -> P>(ptr: &AzThreadPtr, func: F) -> P {     func(unsafe { &*(ptr.ptr as *const Thread) })}
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_thread_ptr_fmt_debug(object: &AzThreadPtr) -> AzString { az_thread_ptr_downcast_ref(object, |o| format!("{:#?}", o)).into() }

/// Pointer to rust-allocated `Box<DropCheck>` struct
pub type AzDropCheckPtrTT = azul_impl::task::DropCheckPtr;
#[no_mangle] pub use AzDropCheckPtrTT as AzDropCheckPtr;
/// Destructor: Takes ownership of the `DropCheck` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_drop_check_ptr_delete(ptr: &mut AzDropCheckPtr) { let _ = unsafe { Box::<DropCheck>::from_raw(ptr.ptr  as *mut DropCheck) };}
/// (private): Downcasts the `AzDropCheckPtr` to a `Box<DropCheck>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_drop_check_ptr_downcast(ptr: AzDropCheckPtr) -> Box<DropCheck> {     unsafe { Box::<DropCheck>::from_raw(ptr.ptr  as *mut DropCheck) }}
/// (private): Downcasts the `AzDropCheckPtr` to a `&mut Box<DropCheck>` and runs the `func` closure on it
#[inline(always)] fn az_drop_check_ptr_downcast_refmut<P, F: FnOnce(&mut DropCheck) -> P>(ptr: &mut AzDropCheckPtr, func: F) -> P {     func(unsafe { &mut *(ptr.ptr as *mut DropCheck) })}
/// (private): Downcasts the `AzDropCheckPtr` to a `&Box<DropCheck>` and runs the `func` closure on it
#[inline(always)] fn az_drop_check_ptr_downcast_ref<P, F: FnOnce(&DropCheck) -> P>(ptr: &AzDropCheckPtr, func: F) -> P {     func(unsafe { &*(ptr.ptr as *const DropCheck) })}
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_drop_check_ptr_fmt_debug(object: &AzDropCheckPtr) -> AzString { az_drop_check_ptr_downcast_ref(object, |o| format!("{:#?}", o)).into() }

/// Re-export of rust-allocated (stack based) `TimerId` struct
pub type AzTimerIdTT = azul_impl::task::TimerId;
#[no_mangle] pub use AzTimerIdTT as AzTimerId;
/// Destructor: Takes ownership of the `TimerId` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_timer_id_delete(object: &mut AzTimerId) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_timer_id_deep_copy(object: &AzTimerId) -> AzTimerId { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_timer_id_fmt_debug(object: &AzTimerId) -> AzString { format!("{:#?}", object).into() }

/// Should a timer terminate or not - used to remove active timers
pub type AzTerminateTimerTT = azul_impl::task::TerminateTimer;
#[no_mangle] pub use AzTerminateTimerTT as AzTerminateTimer;
/// Destructor: Takes ownership of the `TerminateTimer` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_terminate_timer_delete(object: &mut AzTerminateTimer) { match object { azul_impl::task::TerminateTimer::Terminate => { }, azul_impl::task::TerminateTimer::Continue => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_terminate_timer_deep_copy(object: &AzTerminateTimer) -> AzTerminateTimer { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_terminate_timer_fmt_debug(object: &AzTerminateTimer) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `BlockError` struct
pub type AzBlockErrorTT = azul_impl::task::BlockError;
#[no_mangle] pub use AzBlockErrorTT as AzBlockError;
/// Destructor: Takes ownership of the `BlockError` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_block_error_delete(object: &mut AzBlockError) { match object { azul_impl::task::BlockError::ArcUnlockError => { }, azul_impl::task::BlockError::ThreadJoinError => { }, azul_impl::task::BlockError::MutexIntoInnerError => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_block_error_deep_copy(object: &AzBlockError) -> AzBlockError { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_block_error_fmt_debug(object: &AzBlockError) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `TaskBarIcon` struct
pub type AzTaskBarIconTT = azul_impl::window::TaskBarIcon;
#[no_mangle] pub use AzTaskBarIconTT as AzTaskBarIcon;
/// Destructor: Takes ownership of the `TaskBarIcon` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_task_bar_icon_delete(object: &mut AzTaskBarIcon) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_task_bar_icon_deep_copy(object: &AzTaskBarIcon) -> AzTaskBarIcon { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_task_bar_icon_fmt_debug(object: &AzTaskBarIcon) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `XWindowType` struct
pub type AzXWindowTypeTT = azul_impl::window::XWindowType;
#[no_mangle] pub use AzXWindowTypeTT as AzXWindowType;
/// Destructor: Takes ownership of the `XWindowType` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_x_window_type_delete(object: &mut AzXWindowType) { match object { azul_impl::window::XWindowType::Desktop => { }, azul_impl::window::XWindowType::Dock => { }, azul_impl::window::XWindowType::Toolbar => { }, azul_impl::window::XWindowType::Menu => { }, azul_impl::window::XWindowType::Utility => { }, azul_impl::window::XWindowType::Splash => { }, azul_impl::window::XWindowType::Dialog => { }, azul_impl::window::XWindowType::DropdownMenu => { }, azul_impl::window::XWindowType::PopupMenu => { }, azul_impl::window::XWindowType::Tooltip => { }, azul_impl::window::XWindowType::Notification => { }, azul_impl::window::XWindowType::Combo => { }, azul_impl::window::XWindowType::Dnd => { }, azul_impl::window::XWindowType::Normal => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_x_window_type_deep_copy(object: &AzXWindowType) -> AzXWindowType { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_x_window_type_fmt_debug(object: &AzXWindowType) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `PhysicalPositionI32` struct
pub type AzPhysicalPositionI32TT = azul_impl::window::PhysicalPosition<i32>;
#[no_mangle] pub use AzPhysicalPositionI32TT as AzPhysicalPositionI32;
/// Destructor: Takes ownership of the `PhysicalPositionI32` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_physical_position_i32_delete(object: &mut AzPhysicalPositionI32) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_physical_position_i32_deep_copy(object: &AzPhysicalPositionI32) -> AzPhysicalPositionI32 { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_physical_position_i32_fmt_debug(object: &AzPhysicalPositionI32) -> AzString { format!("{:#?}", object).into() }
/// Compares two instances of `AzPhysicalPositionI32` for equality
#[no_mangle] pub extern "C" fn az_physical_position_i32_partial_eq(a: &AzPhysicalPositionI32, b: &AzPhysicalPositionI32) -> bool { a.eq(b) }
/// Compares two instances of `AzPhysicalPositionI32` for ordering. Returns 0 for None (equality), 1 on Some(Less), 2 on Some(Equal) and 3 on Some(Greater). 
#[no_mangle] pub extern "C" fn az_physical_position_i32_partial_cmp(a: &AzPhysicalPositionI32, b: &AzPhysicalPositionI32) -> u8 { use std::cmp::Ordering::*;match a.partial_cmp(b) { None => 0, Some(Less) => 1, Some(Equal) => 2, Some(Greater) => 3 } }
/// Compares two instances of `AzPhysicalPositionI32` for full ordering. Returns 0 for Less, 1 for Equal, 2 for Greater. 
#[no_mangle] pub extern "C" fn az_physical_position_i32_cmp(a: &AzPhysicalPositionI32, b: &AzPhysicalPositionI32) -> u8 { use std::cmp::Ordering::*; match a.cmp(b) { Less => 0, Equal => 1, Greater => 2 } }
/// Returns the hash of a `AzPhysicalPositionI32` instance 
#[no_mangle] pub extern "C" fn az_physical_position_i32_hash(object: &AzPhysicalPositionI32) -> u64 { use std::collections::hash_map::DefaultHasher; use std::hash::{Hash, Hasher}; let mut hasher = DefaultHasher::new(); object.hash(&mut hasher); hasher.finish() }

/// Re-export of rust-allocated (stack based) `PhysicalSizeU32` struct
pub type AzPhysicalSizeU32TT = azul_impl::window::PhysicalSize<u32>;
#[no_mangle] pub use AzPhysicalSizeU32TT as AzPhysicalSizeU32;
/// Destructor: Takes ownership of the `PhysicalSizeU32` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_physical_size_u32_delete(object: &mut AzPhysicalSizeU32) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_physical_size_u32_deep_copy(object: &AzPhysicalSizeU32) -> AzPhysicalSizeU32 { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_physical_size_u32_fmt_debug(object: &AzPhysicalSizeU32) -> AzString { format!("{:#?}", object).into() }
/// Compares two instances of `AzPhysicalSizeU32` for equality
#[no_mangle] pub extern "C" fn az_physical_size_u32_partial_eq(a: &AzPhysicalSizeU32, b: &AzPhysicalSizeU32) -> bool { a.eq(b) }
/// Compares two instances of `AzPhysicalSizeU32` for ordering. Returns 0 for None (equality), 1 on Some(Less), 2 on Some(Equal) and 3 on Some(Greater). 
#[no_mangle] pub extern "C" fn az_physical_size_u32_partial_cmp(a: &AzPhysicalSizeU32, b: &AzPhysicalSizeU32) -> u8 { use std::cmp::Ordering::*;match a.partial_cmp(b) { None => 0, Some(Less) => 1, Some(Equal) => 2, Some(Greater) => 3 } }
/// Compares two instances of `AzPhysicalSizeU32` for full ordering. Returns 0 for Less, 1 for Equal, 2 for Greater. 
#[no_mangle] pub extern "C" fn az_physical_size_u32_cmp(a: &AzPhysicalSizeU32, b: &AzPhysicalSizeU32) -> u8 { use std::cmp::Ordering::*; match a.cmp(b) { Less => 0, Equal => 1, Greater => 2 } }
/// Returns the hash of a `AzPhysicalSizeU32` instance 
#[no_mangle] pub extern "C" fn az_physical_size_u32_hash(object: &AzPhysicalSizeU32) -> u64 { use std::collections::hash_map::DefaultHasher; use std::hash::{Hash, Hasher}; let mut hasher = DefaultHasher::new(); object.hash(&mut hasher); hasher.finish() }

/// Re-export of rust-allocated (stack based) `LogicalPosition` struct
pub type AzLogicalPositionTT = azul_impl::window::LogicalPosition;
#[no_mangle] pub use AzLogicalPositionTT as AzLogicalPosition;
/// Destructor: Takes ownership of the `LogicalPosition` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_logical_position_delete(object: &mut AzLogicalPosition) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_logical_position_deep_copy(object: &AzLogicalPosition) -> AzLogicalPosition { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_logical_position_fmt_debug(object: &AzLogicalPosition) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `IconKey` struct
pub type AzIconKeyTT = azul_impl::window::IconKey;
#[no_mangle] pub use AzIconKeyTT as AzIconKey;
/// Destructor: Takes ownership of the `IconKey` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_icon_key_delete(object: &mut AzIconKey) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_icon_key_deep_copy(object: &AzIconKey) -> AzIconKey { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_icon_key_fmt_debug(object: &AzIconKey) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `SmallWindowIconBytes` struct
pub type AzSmallWindowIconBytesTT = azul_impl::window::SmallWindowIconBytes;
#[no_mangle] pub use AzSmallWindowIconBytesTT as AzSmallWindowIconBytes;
/// Destructor: Takes ownership of the `SmallWindowIconBytes` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_small_window_icon_bytes_delete(object: &mut AzSmallWindowIconBytes) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_small_window_icon_bytes_deep_copy(object: &AzSmallWindowIconBytes) -> AzSmallWindowIconBytes { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_small_window_icon_bytes_fmt_debug(object: &AzSmallWindowIconBytes) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LargeWindowIconBytes` struct
pub type AzLargeWindowIconBytesTT = azul_impl::window::LargeWindowIconBytes;
#[no_mangle] pub use AzLargeWindowIconBytesTT as AzLargeWindowIconBytes;
/// Destructor: Takes ownership of the `LargeWindowIconBytes` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_large_window_icon_bytes_delete(object: &mut AzLargeWindowIconBytes) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_large_window_icon_bytes_deep_copy(object: &AzLargeWindowIconBytes) -> AzLargeWindowIconBytes { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_large_window_icon_bytes_fmt_debug(object: &AzLargeWindowIconBytes) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `WindowIcon` struct
pub type AzWindowIconTT = azul_impl::window::WindowIcon;
#[no_mangle] pub use AzWindowIconTT as AzWindowIcon;
/// Destructor: Takes ownership of the `WindowIcon` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_window_icon_delete(object: &mut AzWindowIcon) { match object { azul_impl::window::WindowIcon::Small(_) => { }, azul_impl::window::WindowIcon::Large(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_window_icon_deep_copy(object: &AzWindowIcon) -> AzWindowIcon { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_window_icon_fmt_debug(object: &AzWindowIcon) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `VirtualKeyCode` struct
pub type AzVirtualKeyCodeTT = azul_impl::window::VirtualKeyCode;
#[no_mangle] pub use AzVirtualKeyCodeTT as AzVirtualKeyCode;
/// Destructor: Takes ownership of the `VirtualKeyCode` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_virtual_key_code_delete(object: &mut AzVirtualKeyCode) { match object { azul_impl::window::VirtualKeyCode::Key1 => { }, azul_impl::window::VirtualKeyCode::Key2 => { }, azul_impl::window::VirtualKeyCode::Key3 => { }, azul_impl::window::VirtualKeyCode::Key4 => { }, azul_impl::window::VirtualKeyCode::Key5 => { }, azul_impl::window::VirtualKeyCode::Key6 => { }, azul_impl::window::VirtualKeyCode::Key7 => { }, azul_impl::window::VirtualKeyCode::Key8 => { }, azul_impl::window::VirtualKeyCode::Key9 => { }, azul_impl::window::VirtualKeyCode::Key0 => { }, azul_impl::window::VirtualKeyCode::A => { }, azul_impl::window::VirtualKeyCode::B => { }, azul_impl::window::VirtualKeyCode::C => { }, azul_impl::window::VirtualKeyCode::D => { }, azul_impl::window::VirtualKeyCode::E => { }, azul_impl::window::VirtualKeyCode::F => { }, azul_impl::window::VirtualKeyCode::G => { }, azul_impl::window::VirtualKeyCode::H => { }, azul_impl::window::VirtualKeyCode::I => { }, azul_impl::window::VirtualKeyCode::J => { }, azul_impl::window::VirtualKeyCode::K => { }, azul_impl::window::VirtualKeyCode::L => { }, azul_impl::window::VirtualKeyCode::M => { }, azul_impl::window::VirtualKeyCode::N => { }, azul_impl::window::VirtualKeyCode::O => { }, azul_impl::window::VirtualKeyCode::P => { }, azul_impl::window::VirtualKeyCode::Q => { }, azul_impl::window::VirtualKeyCode::R => { }, azul_impl::window::VirtualKeyCode::S => { }, azul_impl::window::VirtualKeyCode::T => { }, azul_impl::window::VirtualKeyCode::U => { }, azul_impl::window::VirtualKeyCode::V => { }, azul_impl::window::VirtualKeyCode::W => { }, azul_impl::window::VirtualKeyCode::X => { }, azul_impl::window::VirtualKeyCode::Y => { }, azul_impl::window::VirtualKeyCode::Z => { }, azul_impl::window::VirtualKeyCode::Escape => { }, azul_impl::window::VirtualKeyCode::F1 => { }, azul_impl::window::VirtualKeyCode::F2 => { }, azul_impl::window::VirtualKeyCode::F3 => { }, azul_impl::window::VirtualKeyCode::F4 => { }, azul_impl::window::VirtualKeyCode::F5 => { }, azul_impl::window::VirtualKeyCode::F6 => { }, azul_impl::window::VirtualKeyCode::F7 => { }, azul_impl::window::VirtualKeyCode::F8 => { }, azul_impl::window::VirtualKeyCode::F9 => { }, azul_impl::window::VirtualKeyCode::F10 => { }, azul_impl::window::VirtualKeyCode::F11 => { }, azul_impl::window::VirtualKeyCode::F12 => { }, azul_impl::window::VirtualKeyCode::F13 => { }, azul_impl::window::VirtualKeyCode::F14 => { }, azul_impl::window::VirtualKeyCode::F15 => { }, azul_impl::window::VirtualKeyCode::F16 => { }, azul_impl::window::VirtualKeyCode::F17 => { }, azul_impl::window::VirtualKeyCode::F18 => { }, azul_impl::window::VirtualKeyCode::F19 => { }, azul_impl::window::VirtualKeyCode::F20 => { }, azul_impl::window::VirtualKeyCode::F21 => { }, azul_impl::window::VirtualKeyCode::F22 => { }, azul_impl::window::VirtualKeyCode::F23 => { }, azul_impl::window::VirtualKeyCode::F24 => { }, azul_impl::window::VirtualKeyCode::Snapshot => { }, azul_impl::window::VirtualKeyCode::Scroll => { }, azul_impl::window::VirtualKeyCode::Pause => { }, azul_impl::window::VirtualKeyCode::Insert => { }, azul_impl::window::VirtualKeyCode::Home => { }, azul_impl::window::VirtualKeyCode::Delete => { }, azul_impl::window::VirtualKeyCode::End => { }, azul_impl::window::VirtualKeyCode::PageDown => { }, azul_impl::window::VirtualKeyCode::PageUp => { }, azul_impl::window::VirtualKeyCode::Left => { }, azul_impl::window::VirtualKeyCode::Up => { }, azul_impl::window::VirtualKeyCode::Right => { }, azul_impl::window::VirtualKeyCode::Down => { }, azul_impl::window::VirtualKeyCode::Back => { }, azul_impl::window::VirtualKeyCode::Return => { }, azul_impl::window::VirtualKeyCode::Space => { }, azul_impl::window::VirtualKeyCode::Compose => { }, azul_impl::window::VirtualKeyCode::Caret => { }, azul_impl::window::VirtualKeyCode::Numlock => { }, azul_impl::window::VirtualKeyCode::Numpad0 => { }, azul_impl::window::VirtualKeyCode::Numpad1 => { }, azul_impl::window::VirtualKeyCode::Numpad2 => { }, azul_impl::window::VirtualKeyCode::Numpad3 => { }, azul_impl::window::VirtualKeyCode::Numpad4 => { }, azul_impl::window::VirtualKeyCode::Numpad5 => { }, azul_impl::window::VirtualKeyCode::Numpad6 => { }, azul_impl::window::VirtualKeyCode::Numpad7 => { }, azul_impl::window::VirtualKeyCode::Numpad8 => { }, azul_impl::window::VirtualKeyCode::Numpad9 => { }, azul_impl::window::VirtualKeyCode::AbntC1 => { }, azul_impl::window::VirtualKeyCode::AbntC2 => { }, azul_impl::window::VirtualKeyCode::Add => { }, azul_impl::window::VirtualKeyCode::Apostrophe => { }, azul_impl::window::VirtualKeyCode::Apps => { }, azul_impl::window::VirtualKeyCode::At => { }, azul_impl::window::VirtualKeyCode::Ax => { }, azul_impl::window::VirtualKeyCode::Backslash => { }, azul_impl::window::VirtualKeyCode::Calculator => { }, azul_impl::window::VirtualKeyCode::Capital => { }, azul_impl::window::VirtualKeyCode::Colon => { }, azul_impl::window::VirtualKeyCode::Comma => { }, azul_impl::window::VirtualKeyCode::Convert => { }, azul_impl::window::VirtualKeyCode::Decimal => { }, azul_impl::window::VirtualKeyCode::Divide => { }, azul_impl::window::VirtualKeyCode::Equals => { }, azul_impl::window::VirtualKeyCode::Grave => { }, azul_impl::window::VirtualKeyCode::Kana => { }, azul_impl::window::VirtualKeyCode::Kanji => { }, azul_impl::window::VirtualKeyCode::LAlt => { }, azul_impl::window::VirtualKeyCode::LBracket => { }, azul_impl::window::VirtualKeyCode::LControl => { }, azul_impl::window::VirtualKeyCode::LShift => { }, azul_impl::window::VirtualKeyCode::LWin => { }, azul_impl::window::VirtualKeyCode::Mail => { }, azul_impl::window::VirtualKeyCode::MediaSelect => { }, azul_impl::window::VirtualKeyCode::MediaStop => { }, azul_impl::window::VirtualKeyCode::Minus => { }, azul_impl::window::VirtualKeyCode::Multiply => { }, azul_impl::window::VirtualKeyCode::Mute => { }, azul_impl::window::VirtualKeyCode::MyComputer => { }, azul_impl::window::VirtualKeyCode::NavigateForward => { }, azul_impl::window::VirtualKeyCode::NavigateBackward => { }, azul_impl::window::VirtualKeyCode::NextTrack => { }, azul_impl::window::VirtualKeyCode::NoConvert => { }, azul_impl::window::VirtualKeyCode::NumpadComma => { }, azul_impl::window::VirtualKeyCode::NumpadEnter => { }, azul_impl::window::VirtualKeyCode::NumpadEquals => { }, azul_impl::window::VirtualKeyCode::OEM102 => { }, azul_impl::window::VirtualKeyCode::Period => { }, azul_impl::window::VirtualKeyCode::PlayPause => { }, azul_impl::window::VirtualKeyCode::Power => { }, azul_impl::window::VirtualKeyCode::PrevTrack => { }, azul_impl::window::VirtualKeyCode::RAlt => { }, azul_impl::window::VirtualKeyCode::RBracket => { }, azul_impl::window::VirtualKeyCode::RControl => { }, azul_impl::window::VirtualKeyCode::RShift => { }, azul_impl::window::VirtualKeyCode::RWin => { }, azul_impl::window::VirtualKeyCode::Semicolon => { }, azul_impl::window::VirtualKeyCode::Slash => { }, azul_impl::window::VirtualKeyCode::Sleep => { }, azul_impl::window::VirtualKeyCode::Stop => { }, azul_impl::window::VirtualKeyCode::Subtract => { }, azul_impl::window::VirtualKeyCode::Sysrq => { }, azul_impl::window::VirtualKeyCode::Tab => { }, azul_impl::window::VirtualKeyCode::Underline => { }, azul_impl::window::VirtualKeyCode::Unlabeled => { }, azul_impl::window::VirtualKeyCode::VolumeDown => { }, azul_impl::window::VirtualKeyCode::VolumeUp => { }, azul_impl::window::VirtualKeyCode::Wake => { }, azul_impl::window::VirtualKeyCode::WebBack => { }, azul_impl::window::VirtualKeyCode::WebFavorites => { }, azul_impl::window::VirtualKeyCode::WebForward => { }, azul_impl::window::VirtualKeyCode::WebHome => { }, azul_impl::window::VirtualKeyCode::WebRefresh => { }, azul_impl::window::VirtualKeyCode::WebSearch => { }, azul_impl::window::VirtualKeyCode::WebStop => { }, azul_impl::window::VirtualKeyCode::Yen => { }, azul_impl::window::VirtualKeyCode::Copy => { }, azul_impl::window::VirtualKeyCode::Paste => { }, azul_impl::window::VirtualKeyCode::Cut => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_virtual_key_code_deep_copy(object: &AzVirtualKeyCode) -> AzVirtualKeyCode { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_virtual_key_code_fmt_debug(object: &AzVirtualKeyCode) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `AcceleratorKey` struct
pub type AzAcceleratorKeyTT = azul_impl::window::AcceleratorKey;
#[no_mangle] pub use AzAcceleratorKeyTT as AzAcceleratorKey;
/// Destructor: Takes ownership of the `AcceleratorKey` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_accelerator_key_delete(object: &mut AzAcceleratorKey) { match object { azul_impl::window::AcceleratorKey::Ctrl => { }, azul_impl::window::AcceleratorKey::Alt => { }, azul_impl::window::AcceleratorKey::Shift => { }, azul_impl::window::AcceleratorKey::Key(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_accelerator_key_deep_copy(object: &AzAcceleratorKey) -> AzAcceleratorKey { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_accelerator_key_fmt_debug(object: &AzAcceleratorKey) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `WindowSize` struct
pub type AzWindowSizeTT = azul_impl::window::WindowSize;
#[no_mangle] pub use AzWindowSizeTT as AzWindowSize;
/// Destructor: Takes ownership of the `WindowSize` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_window_size_delete(object: &mut AzWindowSize) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_window_size_deep_copy(object: &AzWindowSize) -> AzWindowSize { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_window_size_fmt_debug(object: &AzWindowSize) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `WindowFlags` struct
pub type AzWindowFlagsTT = azul_impl::window::WindowFlags;
#[no_mangle] pub use AzWindowFlagsTT as AzWindowFlags;
/// Destructor: Takes ownership of the `WindowFlags` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_window_flags_delete(object: &mut AzWindowFlags) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_window_flags_deep_copy(object: &AzWindowFlags) -> AzWindowFlags { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_window_flags_fmt_debug(object: &AzWindowFlags) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `DebugState` struct
pub type AzDebugStateTT = azul_impl::window::DebugState;
#[no_mangle] pub use AzDebugStateTT as AzDebugState;
/// Destructor: Takes ownership of the `DebugState` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_debug_state_delete(object: &mut AzDebugState) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_debug_state_deep_copy(object: &AzDebugState) -> AzDebugState { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_debug_state_fmt_debug(object: &AzDebugState) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `KeyboardState` struct
pub type AzKeyboardStateTT = azul_impl::window::KeyboardState;
#[no_mangle] pub use AzKeyboardStateTT as AzKeyboardState;
/// Destructor: Takes ownership of the `KeyboardState` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_keyboard_state_delete(object: &mut AzKeyboardState) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_keyboard_state_deep_copy(object: &AzKeyboardState) -> AzKeyboardState { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_keyboard_state_fmt_debug(object: &AzKeyboardState) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `MouseCursorType` struct
pub type AzMouseCursorTypeTT = azul_impl::window::MouseCursorType;
#[no_mangle] pub use AzMouseCursorTypeTT as AzMouseCursorType;
/// Destructor: Takes ownership of the `MouseCursorType` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_mouse_cursor_type_delete(object: &mut AzMouseCursorType) { match object { azul_impl::window::MouseCursorType::Default => { }, azul_impl::window::MouseCursorType::Crosshair => { }, azul_impl::window::MouseCursorType::Hand => { }, azul_impl::window::MouseCursorType::Arrow => { }, azul_impl::window::MouseCursorType::Move => { }, azul_impl::window::MouseCursorType::Text => { }, azul_impl::window::MouseCursorType::Wait => { }, azul_impl::window::MouseCursorType::Help => { }, azul_impl::window::MouseCursorType::Progress => { }, azul_impl::window::MouseCursorType::NotAllowed => { }, azul_impl::window::MouseCursorType::ContextMenu => { }, azul_impl::window::MouseCursorType::Cell => { }, azul_impl::window::MouseCursorType::VerticalText => { }, azul_impl::window::MouseCursorType::Alias => { }, azul_impl::window::MouseCursorType::Copy => { }, azul_impl::window::MouseCursorType::NoDrop => { }, azul_impl::window::MouseCursorType::Grab => { }, azul_impl::window::MouseCursorType::Grabbing => { }, azul_impl::window::MouseCursorType::AllScroll => { }, azul_impl::window::MouseCursorType::ZoomIn => { }, azul_impl::window::MouseCursorType::ZoomOut => { }, azul_impl::window::MouseCursorType::EResize => { }, azul_impl::window::MouseCursorType::NResize => { }, azul_impl::window::MouseCursorType::NeResize => { }, azul_impl::window::MouseCursorType::NwResize => { }, azul_impl::window::MouseCursorType::SResize => { }, azul_impl::window::MouseCursorType::SeResize => { }, azul_impl::window::MouseCursorType::SwResize => { }, azul_impl::window::MouseCursorType::WResize => { }, azul_impl::window::MouseCursorType::EwResize => { }, azul_impl::window::MouseCursorType::NsResize => { }, azul_impl::window::MouseCursorType::NeswResize => { }, azul_impl::window::MouseCursorType::NwseResize => { }, azul_impl::window::MouseCursorType::ColResize => { }, azul_impl::window::MouseCursorType::RowResize => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_mouse_cursor_type_deep_copy(object: &AzMouseCursorType) -> AzMouseCursorType { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_mouse_cursor_type_fmt_debug(object: &AzMouseCursorType) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `CursorPosition` struct
pub type AzCursorPositionTT = azul_impl::window::CursorPosition;
#[no_mangle] pub use AzCursorPositionTT as AzCursorPosition;
/// Destructor: Takes ownership of the `CursorPosition` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_cursor_position_delete(object: &mut AzCursorPosition) { match object { azul_impl::window::CursorPosition::OutOfWindow => { }, azul_impl::window::CursorPosition::Uninitialized => { }, azul_impl::window::CursorPosition::InWindow(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_cursor_position_deep_copy(object: &AzCursorPosition) -> AzCursorPosition { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_cursor_position_fmt_debug(object: &AzCursorPosition) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `MouseState` struct
pub type AzMouseStateTT = azul_impl::window::MouseState;
#[no_mangle] pub use AzMouseStateTT as AzMouseState;
/// Destructor: Takes ownership of the `MouseState` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_mouse_state_delete(object: &mut AzMouseState) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_mouse_state_deep_copy(object: &AzMouseState) -> AzMouseState { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_mouse_state_fmt_debug(object: &AzMouseState) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `PlatformSpecificOptions` struct
pub type AzPlatformSpecificOptionsTT = azul_impl::window::PlatformSpecificOptions;
#[no_mangle] pub use AzPlatformSpecificOptionsTT as AzPlatformSpecificOptions;
/// Destructor: Takes ownership of the `PlatformSpecificOptions` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_platform_specific_options_delete(object: &mut AzPlatformSpecificOptions) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_platform_specific_options_deep_copy(object: &AzPlatformSpecificOptions) -> AzPlatformSpecificOptions { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_platform_specific_options_fmt_debug(object: &AzPlatformSpecificOptions) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `WindowsWindowOptions` struct
pub type AzWindowsWindowOptionsTT = azul_impl::window::WindowsWindowOptions;
#[no_mangle] pub use AzWindowsWindowOptionsTT as AzWindowsWindowOptions;
/// Destructor: Takes ownership of the `WindowsWindowOptions` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_windows_window_options_delete(object: &mut AzWindowsWindowOptions) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_windows_window_options_deep_copy(object: &AzWindowsWindowOptions) -> AzWindowsWindowOptions { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_windows_window_options_fmt_debug(object: &AzWindowsWindowOptions) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `WaylandTheme` struct
pub type AzWaylandThemeTT = azul_impl::window::WaylandTheme;
#[no_mangle] pub use AzWaylandThemeTT as AzWaylandTheme;
/// Destructor: Takes ownership of the `WaylandTheme` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_wayland_theme_delete(object: &mut AzWaylandTheme) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_wayland_theme_deep_copy(object: &AzWaylandTheme) -> AzWaylandTheme { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_wayland_theme_fmt_debug(object: &AzWaylandTheme) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `RendererType` struct
pub type AzRendererTypeTT = azul_impl::window::RendererType;
#[no_mangle] pub use AzRendererTypeTT as AzRendererType;
/// Destructor: Takes ownership of the `RendererType` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_renderer_type_delete(object: &mut AzRendererType) { match object { azul_impl::window::RendererType::Default => { }, azul_impl::window::RendererType::ForceHardware => { }, azul_impl::window::RendererType::ForceSoftware => { }, azul_impl::window::RendererType::Custom(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_renderer_type_deep_copy(object: &AzRendererType) -> AzRendererType { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_renderer_type_fmt_debug(object: &AzRendererType) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `StringPair` struct
pub type AzStringPairTT = azul_impl::window::AzStringPair;
#[no_mangle] pub use AzStringPairTT as AzStringPair;
/// Destructor: Takes ownership of the `StringPair` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_string_pair_delete(object: &mut AzStringPair) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_string_pair_deep_copy(object: &AzStringPair) -> AzStringPair { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_string_pair_fmt_debug(object: &AzStringPair) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LinuxWindowOptions` struct
pub type AzLinuxWindowOptionsTT = azul_impl::window::LinuxWindowOptions;
#[no_mangle] pub use AzLinuxWindowOptionsTT as AzLinuxWindowOptions;
/// Destructor: Takes ownership of the `LinuxWindowOptions` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_linux_window_options_delete(object: &mut AzLinuxWindowOptions) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_linux_window_options_deep_copy(object: &AzLinuxWindowOptions) -> AzLinuxWindowOptions { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_linux_window_options_fmt_debug(object: &AzLinuxWindowOptions) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `MacWindowOptions` struct
pub type AzMacWindowOptionsTT = azul_impl::window::MacWindowOptions;
#[no_mangle] pub use AzMacWindowOptionsTT as AzMacWindowOptions;
/// Destructor: Takes ownership of the `MacWindowOptions` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_mac_window_options_delete(object: &mut AzMacWindowOptions) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_mac_window_options_deep_copy(object: &AzMacWindowOptions) -> AzMacWindowOptions { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_mac_window_options_fmt_debug(object: &AzMacWindowOptions) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `WasmWindowOptions` struct
pub type AzWasmWindowOptionsTT = azul_impl::window::WasmWindowOptions;
#[no_mangle] pub use AzWasmWindowOptionsTT as AzWasmWindowOptions;
/// Destructor: Takes ownership of the `WasmWindowOptions` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_wasm_window_options_delete(object: &mut AzWasmWindowOptions) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_wasm_window_options_deep_copy(object: &AzWasmWindowOptions) -> AzWasmWindowOptions { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_wasm_window_options_fmt_debug(object: &AzWasmWindowOptions) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `FullScreenMode` struct
pub type AzFullScreenModeTT = azul_impl::window::FullScreenMode;
#[no_mangle] pub use AzFullScreenModeTT as AzFullScreenMode;
/// Destructor: Takes ownership of the `FullScreenMode` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_full_screen_mode_delete(object: &mut AzFullScreenMode) { match object { azul_impl::window::FullScreenMode::SlowFullScreen => { }, azul_impl::window::FullScreenMode::FastFullScreen => { }, azul_impl::window::FullScreenMode::SlowWindowed => { }, azul_impl::window::FullScreenMode::FastWindowed => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_full_screen_mode_deep_copy(object: &AzFullScreenMode) -> AzFullScreenMode { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_full_screen_mode_fmt_debug(object: &AzFullScreenMode) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `WindowState` struct
pub type AzWindowStateTT = azul_impl::window::WindowState;
#[no_mangle] pub use AzWindowStateTT as AzWindowState;
/// Destructor: Takes ownership of the `WindowState` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_window_state_delete(object: &mut AzWindowState) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_window_state_deep_copy(object: &AzWindowState) -> AzWindowState { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_window_state_fmt_debug(object: &AzWindowState) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `LogicalSize` struct
pub type AzLogicalSizeTT = azul_impl::window::LogicalSize;
#[no_mangle] pub use AzLogicalSizeTT as AzLogicalSize;
/// Destructor: Takes ownership of the `LogicalSize` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_logical_size_delete(object: &mut AzLogicalSize) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_logical_size_deep_copy(object: &AzLogicalSize) -> AzLogicalSize { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_logical_size_fmt_debug(object: &AzLogicalSize) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `HotReloadOptions` struct
pub type AzHotReloadOptionsTT = azul_impl::window::HotReloadOptions;
#[no_mangle] pub use AzHotReloadOptionsTT as AzHotReloadOptions;
/// Destructor: Takes ownership of the `HotReloadOptions` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_hot_reload_options_delete(object: &mut AzHotReloadOptions) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_hot_reload_options_deep_copy(object: &AzHotReloadOptions) -> AzHotReloadOptions { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_hot_reload_options_fmt_debug(object: &AzHotReloadOptions) -> AzString { format!("{:#?}", object).into() }

/// Re-export of rust-allocated (stack based) `WindowCreateOptions` struct
pub type AzWindowCreateOptionsTT = azul_impl::window::WindowCreateOptions;
#[no_mangle] pub use AzWindowCreateOptionsTT as AzWindowCreateOptions;
// Creates a new `WindowCreateOptions` instance whose memory is owned by the rust allocator
// Equivalent to the Rust `WindowCreateOptions::new()` constructor.
#[no_mangle] pub extern "C" fn az_window_create_options_new(css: AzCss) -> AzWindowCreateOptions { WindowCreateOptions::new(css) }
/// Destructor: Takes ownership of the `WindowCreateOptions` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_window_create_options_delete(object: &mut AzWindowCreateOptions) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_window_create_options_deep_copy(object: &AzWindowCreateOptions) -> AzWindowCreateOptions { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_window_create_options_fmt_debug(object: &AzWindowCreateOptions) -> AzString { format!("{:#?}", object).into() }

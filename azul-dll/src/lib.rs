#![crate_type = "cdylib"]
#![deny(improper_ctypes_definitions)]
// WARNING: autogenerated code for azul api version 0.1.0


//! Public API for Azul
//!
//! A single function can have multiple implementations depending on whether it is
//! compiled for the Rust-desktop target, the Rust-wasm target or the C API.
//!
//! For now, the crate simply re-exports azul_core and calls the c_api functions

#![doc(
    html_logo_url = "https://raw.githubusercontent.com/maps4print/azul/master/assets/images/azul_logo_full_min.svg.png",
    html_favicon_url = "https://raw.githubusercontent.com/maps4print/azul/master/assets/images/favicon.ico",
)]

#![allow(dead_code)]
#![allow(unused_imports)]

extern crate azul_core;
#[cfg(target_arch = "wasm32")]
extern crate azul_web as azul_impl;
#[cfg(not(target_arch = "wasm32"))]
extern crate azul_desktop as azul_impl;

use core::ffi::c_void;
use std::{path::PathBuf, vec::Vec, string::String, time::Duration};
use azul_impl::{
    css::{self, *},
    dom::{Dom, NodeData},
    callbacks::{
        RefAny, LayoutInfo,
        Callback, CallbackInfo, CallbackType,
        TimerCallback, TimerCallbackType, TimerCallbackInfo, TimerCallbackReturn,
        GlCallback, GlCallbackInfo, GlCallbackReturn, ThreadCallbackType,
        IFrameCallback, IFrameCallbackInfo, IFrameCallbackReturn
    },
    window::{WindowCreateOptions, WindowState},
    resources::{RawImage, AppConfig, RawImageFormat, FontId, TextId, ImageId},
    app::App,
    task::{OptionDuration, Timer, TimerId, Thread},
    gl::{OptionTexture, TextureFlags, Texture, GlContextPtr},
};

fn deallocate_vec<T>(ptr: *mut T, cap: usize) {

    if cap == 0 {
        return;
    }

    let layout = match std::alloc::Layout::array::<T>(cap) {
        Ok(o) => o,
        Err(_) => { std::process::exit(-1); },
    };

    unsafe { std::alloc::dealloc(ptr as *mut u8, layout); }
}
/// Re-export of rust-allocated (stack based) `String` struct
pub type AzStringTT = azul_impl::css::AzString;
pub use AzStringTT as AzString;
/// Creates + allocates a Rust `String` by **copying** it from another utf8-encoded string
#[no_mangle] pub extern "C" fn az_string_from_utf8_unchecked(ptr: *const u8, len: usize) -> AzString { AzString::from_utf8_unchecked(ptr, len) }
/// Creates + allocates a Rust `String` by **copying** it from another utf8-encoded string
#[no_mangle] pub extern "C" fn az_string_from_utf8_lossy(ptr: *const u8, len: usize) -> AzString { AzString::from_utf8_lossy(ptr, len) }
/// Returns the internal bytes of the String as a `U8Vec`
#[no_mangle] pub extern "C" fn az_string_into_bytes(string: AzString) -> AzU8Vec { string.into_bytes() }
/// Destructor: Takes ownership of the `String` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_string_delete(object: &mut AzString) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_string_deep_copy(object: &AzString) -> AzString { object.clone() }

/// Wrapper over a Rust-allocated `Vec<StyleTransform>`
pub type AzStyleTransformVecTT = azul_impl::css::StyleTransformVec;
pub use AzStyleTransformVecTT as AzStyleTransformVec;
/// Creates a new, empty Rust `Vec<StyleTransform>`
#[no_mangle] pub extern "C" fn az_style_transform_vec_new() -> AzStyleTransformVec { Vec::<AzStyleTransform>::new().into() }
/// Creates a new, empty Rust `Vec<StyleTransform>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_style_transform_vec_with_capacity(cap: usize) -> AzStyleTransformVec { Vec::<AzStyleTransform>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<StyleTransform>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_style_transform_vec_copy_from(ptr: *const AzStyleTransform, len: usize) -> AzStyleTransformVec { unsafe { std::slice::from_raw_parts(ptr, len).to_vec() }.into() }
/// Destructor: Takes ownership of the `StyleTransformVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_transform_vec_delete(object: &mut AzStyleTransformVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_transform_vec_deep_copy(object: &AzStyleTransformVec) -> AzStyleTransformVec { object.clone() }

/// Wrapper over a Rust-allocated `Vec<ContentGroup>`
pub type AzContentGroupVecTT = azul_impl::styled_dom::ContentGroupVec;
pub use AzContentGroupVecTT as AzContentGroupVec;
/// Creates a new, empty Rust `Vec<ContentGroup>`
#[no_mangle] pub extern "C" fn az_content_group_vec_new() -> AzContentGroupVec { Vec::<AzContentGroup>::new().into() }
/// Creates a new, empty Rust `Vec<ContentGroup>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_content_group_vec_with_capacity(cap: usize) -> AzContentGroupVec { Vec::<AzContentGroup>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<ContentGroup>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_content_group_vec_copy_from(ptr: *const AzContentGroup, len: usize) -> AzContentGroupVec { unsafe { std::slice::from_raw_parts(ptr, len).to_vec() }.into() }
/// Destructor: Takes ownership of the `ContentGroupVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_content_group_vec_delete(object: &mut AzContentGroupVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_content_group_vec_deep_copy(object: &AzContentGroupVec) -> AzContentGroupVec { object.clone() }

/// Wrapper over a Rust-allocated `Vec<CssProperty>`
pub type AzCssPropertyVecTT = azul_impl::css::CssPropertyVec;
pub use AzCssPropertyVecTT as AzCssPropertyVec;
/// Creates a new, empty Rust `Vec<CssProperty>`
#[no_mangle] pub extern "C" fn az_css_property_vec_new() -> AzCssPropertyVec { Vec::<AzCssProperty>::new().into() }
/// Creates a new, empty Rust `Vec<CssProperty>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_css_property_vec_with_capacity(cap: usize) -> AzCssPropertyVec { Vec::<AzCssProperty>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<CssProperty>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_css_property_vec_copy_from(ptr: *const AzCssProperty, len: usize) -> AzCssPropertyVec { unsafe { std::slice::from_raw_parts(ptr, len).to_vec() }.into() }
/// Destructor: Takes ownership of the `CssPropertyVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_css_property_vec_delete(object: &mut AzCssPropertyVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_css_property_vec_deep_copy(object: &AzCssPropertyVec) -> AzCssPropertyVec { object.clone() }

/// Wrapper over a Rust-allocated `Vec<SvgMultiPolygon>`
pub type AzSvgMultiPolygonVecTT = azul_impl::svg::SvgMultiPolygonVec;
pub use AzSvgMultiPolygonVecTT as AzSvgMultiPolygonVec;
/// Creates a new, empty Rust `Vec<SvgMultiPolygon>`
#[no_mangle] pub extern "C" fn az_svg_multi_polygon_vec_new() -> AzSvgMultiPolygonVec { Vec::<AzSvgMultiPolygon>::new().into() }
/// Creates a new, empty Rust `Vec<SvgMultiPolygon>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_svg_multi_polygon_vec_with_capacity(cap: usize) -> AzSvgMultiPolygonVec { Vec::<AzSvgMultiPolygon>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<SvgMultiPolygon>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_svg_multi_polygon_vec_copy_from(ptr: *const AzSvgMultiPolygon, len: usize) -> AzSvgMultiPolygonVec { unsafe { std::slice::from_raw_parts(ptr, len).to_vec() }.into() }
/// Destructor: Takes ownership of the `SvgMultiPolygonVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_svg_multi_polygon_vec_delete(object: &mut AzSvgMultiPolygonVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_svg_multi_polygon_vec_deep_copy(object: &AzSvgMultiPolygonVec) -> AzSvgMultiPolygonVec { object.clone() }

/// Wrapper over a Rust-allocated `Vec<SvgPath>`
pub type AzSvgPathVecTT = azul_impl::svg::SvgPathVec;
pub use AzSvgPathVecTT as AzSvgPathVec;
/// Creates a new, empty Rust `Vec<SvgPath>`
#[no_mangle] pub extern "C" fn az_svg_path_vec_new() -> AzSvgPathVec { Vec::<AzSvgPath>::new().into() }
/// Creates a new, empty Rust `Vec<SvgPath>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_svg_path_vec_with_capacity(cap: usize) -> AzSvgPathVec { Vec::<AzSvgPath>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<SvgPath>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_svg_path_vec_copy_from(ptr: *const AzSvgPath, len: usize) -> AzSvgPathVec { unsafe { std::slice::from_raw_parts(ptr, len).to_vec() }.into() }
/// Destructor: Takes ownership of the `SvgPathVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_svg_path_vec_delete(object: &mut AzSvgPathVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_svg_path_vec_deep_copy(object: &AzSvgPathVec) -> AzSvgPathVec { object.clone() }

/// Wrapper over a Rust-allocated `Vec<VertexAttribute>`
pub type AzVertexAttributeVecTT = azul_impl::gl::VertexAttributeVec;
pub use AzVertexAttributeVecTT as AzVertexAttributeVec;
/// Creates a new, empty Rust `Vec<VertexAttribute>`
#[no_mangle] pub extern "C" fn az_vertex_attribute_vec_new() -> AzVertexAttributeVec { Vec::<AzVertexAttribute>::new().into() }
/// Creates a new, empty Rust `Vec<VertexAttribute>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_vertex_attribute_vec_with_capacity(cap: usize) -> AzVertexAttributeVec { Vec::<AzVertexAttribute>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<VertexAttribute>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_vertex_attribute_vec_copy_from(ptr: *const AzVertexAttribute, len: usize) -> AzVertexAttributeVec { unsafe { std::slice::from_raw_parts(ptr, len).to_vec() }.into() }
/// Destructor: Takes ownership of the `VertexAttributeVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_vertex_attribute_vec_delete(object: &mut AzVertexAttributeVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_vertex_attribute_vec_deep_copy(object: &AzVertexAttributeVec) -> AzVertexAttributeVec { object.clone() }

/// Wrapper over a Rust-allocated `VertexAttribute`
pub type AzSvgPathElementVecTT = azul_impl::svg::SvgPathElementVec;
pub use AzSvgPathElementVecTT as AzSvgPathElementVec;
/// Creates a new, empty Rust `Vec<SvgPathElement>`
#[no_mangle] pub extern "C" fn az_svg_path_element_vec_new() -> AzSvgPathElementVec { Vec::<AzSvgPathElement>::new().into() }
/// Creates a new, empty Rust `Vec<SvgPathElement>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_svg_path_element_vec_with_capacity(cap: usize) -> AzSvgPathElementVec { Vec::<AzSvgPathElement>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<SvgPathElement>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_svg_path_element_vec_copy_from(ptr: *const AzSvgPathElement, len: usize) -> AzSvgPathElementVec { unsafe { std::slice::from_raw_parts(ptr, len).to_vec() }.into() }
/// Destructor: Takes ownership of the `SvgPathElementVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_svg_path_element_vec_delete(object: &mut AzSvgPathElementVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_svg_path_element_vec_deep_copy(object: &AzSvgPathElementVec) -> AzSvgPathElementVec { object.clone() }

/// Wrapper over a Rust-allocated `SvgVertex`
pub type AzSvgVertexVecTT = azul_impl::svg::SvgVertexVec;
pub use AzSvgVertexVecTT as AzSvgVertexVec;
/// Creates a new, empty Rust `Vec<SvgVertex>`
#[no_mangle] pub extern "C" fn az_svg_vertex_vec_new() -> AzSvgVertexVec { Vec::<AzSvgVertex>::new().into() }
/// Creates a new, empty Rust `Vec<SvgVertex>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_svg_vertex_vec_with_capacity(cap: usize) -> AzSvgVertexVec { Vec::<AzSvgVertex>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<SvgVertex>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_svg_vertex_vec_copy_from(ptr: *const AzSvgVertex, len: usize) -> AzSvgVertexVec { unsafe { std::slice::from_raw_parts(ptr, len).to_vec() }.into() }
/// Destructor: Takes ownership of the `SvgVertexVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_svg_vertex_vec_delete(object: &mut AzSvgVertexVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_svg_vertex_vec_deep_copy(object: &AzSvgVertexVec) -> AzSvgVertexVec { object.clone() }

/// Wrapper over a Rust-allocated `Vec<u32>`
pub type AzU32VecTT = azul_impl::svg::U32Vec;
pub use AzU32VecTT as AzU32Vec;
/// Creates a new, empty Rust `Vec<u32>`
#[no_mangle] pub extern "C" fn az_u32_vec_new() -> AzU32Vec { Vec::<u32>::new().into() }
/// Creates a new, empty Rust `Vec<u32>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_u32_vec_with_capacity(cap: usize) -> AzU32Vec { Vec::<u32>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<u32>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_u32_vec_copy_from(ptr: *const u32, len: usize) -> AzU32Vec { unsafe { std::slice::from_raw_parts(ptr, len).to_vec() }.into() }
/// Destructor: Takes ownership of the `U32Vec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_u32_vec_delete(object: &mut AzU32Vec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_u32_vec_deep_copy(object: &AzU32Vec) -> AzU32Vec { object.clone() }

/// Wrapper over a Rust-allocated `XWindowType`
pub type AzXWindowTypeVecTT = azul_impl::window::XWindowTypeVec;
pub use AzXWindowTypeVecTT as AzXWindowTypeVec;
/// Creates a new, empty Rust `Vec<XWindowType>`
#[no_mangle] pub extern "C" fn az_x_window_type_vec_new() -> AzXWindowTypeVec { Vec::<AzXWindowType>::new().into() }
/// Creates a new, empty Rust `Vec<XWindowType>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_x_window_type_vec_with_capacity(cap: usize) -> AzXWindowTypeVec { Vec::<AzXWindowType>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<XWindowType>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_x_window_type_vec_copy_from(ptr: *const AzXWindowType, len: usize) -> AzXWindowTypeVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `XWindowTypeVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_x_window_type_vec_delete(object: &mut AzXWindowTypeVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_x_window_type_vec_deep_copy(object: &AzXWindowTypeVec) -> AzXWindowTypeVec { object.clone() }

/// Wrapper over a Rust-allocated `VirtualKeyCode`
pub type AzVirtualKeyCodeVecTT = azul_impl::window::VirtualKeyCodeVec;
pub use AzVirtualKeyCodeVecTT as AzVirtualKeyCodeVec;
/// Creates a new, empty Rust `Vec<VirtualKeyCode>`
#[no_mangle] pub extern "C" fn az_virtual_key_code_vec_new() -> AzVirtualKeyCodeVec { Vec::<AzVirtualKeyCode>::new().into() }
/// Creates a new, empty Rust `Vec<VirtualKeyCode>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_virtual_key_code_vec_with_capacity(cap: usize) -> AzVirtualKeyCodeVec { Vec::<AzVirtualKeyCode>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<VirtualKeyCode>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_virtual_key_code_vec_copy_from(ptr: *const AzVirtualKeyCode, len: usize) -> AzVirtualKeyCodeVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `VirtualKeyCodeVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_virtual_key_code_vec_delete(object: &mut AzVirtualKeyCodeVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_virtual_key_code_vec_deep_copy(object: &AzVirtualKeyCodeVec) -> AzVirtualKeyCodeVec { object.clone() }

/// Wrapper over a Rust-allocated `CascadeInfo`
pub type AzCascadeInfoVecTT = azul_impl::style::CascadeInfoVec;
pub use AzCascadeInfoVecTT as AzCascadeInfoVec;
/// Creates a new, empty Rust `Vec<CascadeInfo>`
#[no_mangle] pub extern "C" fn az_cascade_info_vec_new() -> AzCascadeInfoVec { Vec::<AzCascadeInfo>::new().into() }
/// Creates a new, empty Rust `Vec<CascadeInfo>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_cascade_info_vec_with_capacity(cap: usize) -> AzCascadeInfoVec { Vec::<AzCascadeInfo>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<CascadeInfo>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_cascade_info_vec_copy_from(ptr: *const AzCascadeInfo, len: usize) -> AzCascadeInfoVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `CascadeInfoVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_cascade_info_vec_delete(object: &mut AzCascadeInfoVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_cascade_info_vec_deep_copy(object: &AzCascadeInfoVec) -> AzCascadeInfoVec { object.clone() }

/// Wrapper over a Rust-allocated `ScanCode`
pub type AzScanCodeVecTT = azul_impl::window::ScanCodeVec;
pub use AzScanCodeVecTT as AzScanCodeVec;
/// Creates a new, empty Rust `Vec<ScanCode>`
#[no_mangle] pub extern "C" fn az_scan_code_vec_new() -> AzScanCodeVec { Vec::<u32>::new().into() }
/// Creates a new, empty Rust `Vec<ScanCode>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_scan_code_vec_with_capacity(cap: usize) -> AzScanCodeVec { Vec::<u32>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<ScanCode>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_scan_code_vec_copy_from(ptr: *const u32, len: usize) -> AzScanCodeVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `ScanCodeVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_scan_code_vec_delete(object: &mut AzScanCodeVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_scan_code_vec_deep_copy(object: &AzScanCodeVec) -> AzScanCodeVec { object.clone() }

/// Wrapper over a Rust-allocated `CssDeclaration`
pub type AzCssDeclarationVecTT = azul_impl::css::CssDeclarationVec;
pub use AzCssDeclarationVecTT as AzCssDeclarationVec;
/// Creates a new, empty Rust `Vec<CssDeclaration>`
#[no_mangle] pub extern "C" fn az_css_declaration_vec_new() -> AzCssDeclarationVec { Vec::<AzCssDeclaration>::new().into() }
/// Creates a new, empty Rust `Vec<CssDeclaration>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_css_declaration_vec_with_capacity(cap: usize) -> AzCssDeclarationVec { Vec::<AzCssDeclaration>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<CssDeclaration>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_css_declaration_vec_copy_from(ptr: *const AzCssDeclaration, len: usize) -> AzCssDeclarationVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `CssDeclarationVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_css_declaration_vec_delete(object: &mut AzCssDeclarationVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_css_declaration_vec_deep_copy(object: &AzCssDeclarationVec) -> AzCssDeclarationVec { object.clone() }

/// Wrapper over a Rust-allocated `CssPathSelector`
pub type AzCssPathSelectorVecTT = azul_impl::css::CssPathSelectorVec;
pub use AzCssPathSelectorVecTT as AzCssPathSelectorVec;
/// Creates a new, empty Rust `Vec<CssPathSelector>`
#[no_mangle] pub extern "C" fn az_css_path_selector_vec_new() -> AzCssPathSelectorVec { Vec::<AzCssPathSelector>::new().into() }
/// Creates a new, empty Rust `Vec<CssPathSelector>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_css_path_selector_vec_with_capacity(cap: usize) -> AzCssPathSelectorVec { Vec::<AzCssPathSelector>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<CssPathSelector>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_css_path_selector_vec_copy_from(ptr: *const AzCssPathSelector, len: usize) -> AzCssPathSelectorVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `CssPathSelectorVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_css_path_selector_vec_delete(object: &mut AzCssPathSelectorVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_css_path_selector_vec_deep_copy(object: &AzCssPathSelectorVec) -> AzCssPathSelectorVec { object.clone() }

/// Wrapper over a Rust-allocated `Stylesheet`
pub type AzStylesheetVecTT = azul_impl::css::StylesheetVec;
pub use AzStylesheetVecTT as AzStylesheetVec;
/// Creates a new, empty Rust `Vec<Stylesheet>`
#[no_mangle] pub extern "C" fn az_stylesheet_vec_new() -> AzStylesheetVec { Vec::<AzStylesheet>::new().into() }
/// Creates a new, empty Rust `Vec<Stylesheet>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_stylesheet_vec_with_capacity(cap: usize) -> AzStylesheetVec { Vec::<AzStylesheet>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<Stylesheet>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_stylesheet_vec_copy_from(ptr: *const AzStylesheet, len: usize) -> AzStylesheetVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `StylesheetVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_stylesheet_vec_delete(object: &mut AzStylesheetVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_stylesheet_vec_deep_copy(object: &AzStylesheetVec) -> AzStylesheetVec { object.clone() }

/// Wrapper over a Rust-allocated `CssRuleBlock`
pub type AzCssRuleBlockVecTT = azul_impl::css::CssRuleBlockVec;
pub use AzCssRuleBlockVecTT as AzCssRuleBlockVec;
/// Creates a new, empty Rust `Vec<CssRuleBlock>`
#[no_mangle] pub extern "C" fn az_css_rule_block_vec_new() -> AzCssRuleBlockVec { Vec::<AzCssRuleBlock>::new().into() }
/// Creates a new, empty Rust `Vec<CssRuleBlock>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_css_rule_block_vec_with_capacity(cap: usize) -> AzCssRuleBlockVec { Vec::<AzCssRuleBlock>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<CssRuleBlock>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_css_rule_block_vec_copy_from(ptr: *const AzCssRuleBlock, len: usize) -> AzCssRuleBlockVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `CssRuleBlockVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_css_rule_block_vec_delete(object: &mut AzCssRuleBlockVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_css_rule_block_vec_deep_copy(object: &AzCssRuleBlockVec) -> AzCssRuleBlockVec { object.clone() }

/// Wrapper over a Rust-allocated `U8Vec`
pub type AzU8VecTT = azul_impl::css::U8Vec;
pub use AzU8VecTT as AzU8Vec;
/// Creates a new, empty Rust `Vec<u8>`
#[no_mangle] pub extern "C" fn az_u8_vec_new() -> AzU8Vec { Vec::<u8>::new().into() }
/// Creates a new, empty Rust `Vec<u8>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_u8_vec_with_capacity(cap: usize) -> AzU8Vec { Vec::<u8>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<u8>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_u8_vec_copy_from(ptr: *const u8, len: usize) -> AzU8Vec { unsafe { std::slice::from_raw_parts(ptr, len).to_vec() }.into() }
/// Destructor: Takes ownership of the `U8Vec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_u8_vec_delete(object: &mut AzU8Vec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_u8_vec_deep_copy(object: &AzU8Vec) -> AzU8Vec { object.clone() }

/// Wrapper over a Rust-allocated `CallbackData`
pub type AzCallbackDataVecTT = azul_impl::dom::CallbackDataVec;
pub use AzCallbackDataVecTT as AzCallbackDataVec;
/// Creates a new, empty Rust `Vec<CallbackData>`
#[no_mangle] pub extern "C" fn az_callback_data_vec_new() -> AzCallbackDataVec { Vec::<AzCallbackData>::new().into() }
/// Creates a new, empty Rust `Vec<CallbackData>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_callback_data_vec_with_capacity(cap: usize) -> AzCallbackDataVec { Vec::<AzCallbackData>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<CallbackData>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_callback_data_vec_copy_from(ptr: *const AzCallbackData, len: usize) -> AzCallbackDataVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `CallbackDataVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_callback_data_vec_delete(object: &mut AzCallbackDataVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_callback_data_vec_deep_copy(object: &AzCallbackDataVec) -> AzCallbackDataVec { object.clone() }

/// Wrapper over a Rust-allocated `Vec<DebugMessage>`
pub type AzDebugMessageVecTT = azul_impl::gl::AzDebugMessageVec;
pub use AzDebugMessageVecTT as AzDebugMessageVec;
/// Creates a new, empty Rust `Vec<DebugMessage>`
#[no_mangle] pub extern "C" fn az_debug_message_vec_new() -> AzDebugMessageVec { Vec::<AzDebugMessage>::new().into() }
/// Creates a new, empty Rust `Vec<DebugMessage>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_debug_message_vec_with_capacity(cap: usize) -> AzDebugMessageVec { Vec::<AzDebugMessage>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<DebugMessage>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_debug_message_vec_copy_from(ptr: *const AzDebugMessage, len: usize) -> AzDebugMessageVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `DebugMessageVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_debug_message_vec_delete(object: &mut AzDebugMessageVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_debug_message_vec_deep_copy(object: &AzDebugMessageVec) -> AzDebugMessageVec { object.clone() }

/// Wrapper over a Rust-allocated `U32Vec`
pub type AzGLuintVecTT = azul_impl::gl::GLuintVec;
pub use AzGLuintVecTT as AzGLuintVec;
/// Creates a new, empty Rust `Vec<u32>`
#[no_mangle] pub extern "C" fn az_g_luint_vec_new() -> AzGLuintVec { Vec::<u32>::new().into() }
/// Creates a new, empty Rust `Vec<u32>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_g_luint_vec_with_capacity(cap: usize) -> AzGLuintVec { Vec::<u32>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<u32>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_g_luint_vec_copy_from(ptr: *const u32, len: usize) -> AzGLuintVec { unsafe { std::slice::from_raw_parts(ptr, len).to_vec() }.into() }
/// Destructor: Takes ownership of the `GLuintVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_g_luint_vec_delete(object: &mut AzGLuintVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_g_luint_vec_deep_copy(object: &AzGLuintVec) -> AzGLuintVec { object.clone() }

/// Wrapper over a Rust-allocated `GLintVec`
pub type AzGLintVecTT = azul_impl::gl::GLintVec;
pub use AzGLintVecTT as AzGLintVec;
/// Creates a new, empty Rust `Vec<GLint>`
#[no_mangle] pub extern "C" fn az_g_lint_vec_new() -> AzGLintVec { Vec::<i32>::new().into() }
/// Creates a new, empty Rust `Vec<GLint>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_g_lint_vec_with_capacity(cap: usize) -> AzGLintVec { Vec::<i32>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<GLint>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_g_lint_vec_copy_from(ptr: *const i32, len: usize) -> AzGLintVec { unsafe { std::slice::from_raw_parts(ptr, len).to_vec() }.into() }
/// Destructor: Takes ownership of the `GLintVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_g_lint_vec_delete(object: &mut AzGLintVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_g_lint_vec_deep_copy(object: &AzGLintVec) -> AzGLintVec { object.clone() }

/// Wrapper over a Rust-allocated `DomVec`
pub type AzDomVecTT = azul_impl::dom::DomVec;
pub use AzDomVecTT as AzDomVec;
/// Creates a new, empty Rust `Vec<Dom>`
#[no_mangle] pub extern "C" fn az_dom_vec_new() -> AzDomVec { Vec::<AzDom>::new().into() }
/// Creates a new, empty Rust `Vec<Dom>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_dom_vec_with_capacity(cap: usize) -> AzDomVec { Vec::<AzDom>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<Dom>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_dom_vec_copy_from(ptr: *const AzDom, len: usize) -> AzDomVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `DomVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_dom_vec_delete(object: &mut AzDomVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_dom_vec_deep_copy(object: &AzDomVec) -> AzDomVec { object.clone() }

/// Wrapper over a Rust-allocated `StringVec`
pub type AzStringVecTT = azul_impl::css::StringVec;
pub use AzStringVecTT as AzStringVec;
/// Creates a new, empty Rust `Vec<String>`
#[no_mangle] pub extern "C" fn az_string_vec_new() -> AzStringVec { Vec::<AzString>::new().into() }
/// Creates a new, empty Rust `Vec<String>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_string_vec_with_capacity(cap: usize) -> AzStringVec { Vec::<AzString>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<String>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_string_vec_copy_from(ptr: *const AzString, len: usize) -> AzStringVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `StringVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_string_vec_delete(object: &mut AzStringVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_string_vec_deep_copy(object: &AzStringVec) -> AzStringVec { object.clone() }

/// Wrapper over a Rust-allocated `StringPairVec`
pub type AzStringPairVecTT = azul_impl::window::StringPairVec;
pub use AzStringPairVecTT as AzStringPairVec;
/// Creates a new, empty Rust `Vec<StringPair>`
#[no_mangle] pub extern "C" fn az_string_pair_vec_new() -> AzStringPairVec { Vec::<AzStringPair>::new().into() }
/// Creates a new, empty Rust `Vec<StringPair>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_string_pair_vec_with_capacity(cap: usize) -> AzStringPairVec { Vec::<AzStringPair>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<StringPair>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_string_pair_vec_copy_from(ptr: *const AzStringPair, len: usize) -> AzStringPairVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `StringPairVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_string_pair_vec_delete(object: &mut AzStringPairVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_string_pair_vec_deep_copy(object: &AzStringPairVec) -> AzStringPairVec { object.clone() }

/// Wrapper over a Rust-allocated `GradientStopPreVec`
pub type AzGradientStopPreVecTT = azul_impl::css::GradientStopPreVec;
pub use AzGradientStopPreVecTT as AzGradientStopPreVec;
/// Creates a new, empty Rust `Vec<GradientStopPre>`
#[no_mangle] pub extern "C" fn az_gradient_stop_pre_vec_new() -> AzGradientStopPreVec { Vec::<AzGradientStopPre>::new().into() }
/// Creates a new, empty Rust `Vec<GradientStopPre>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_gradient_stop_pre_vec_with_capacity(cap: usize) -> AzGradientStopPreVec { Vec::<AzGradientStopPre>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<GradientStopPre>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_gradient_stop_pre_vec_copy_from(ptr: *const AzGradientStopPre, len: usize) -> AzGradientStopPreVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `GradientStopPreVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_gradient_stop_pre_vec_delete(object: &mut AzGradientStopPreVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_gradient_stop_pre_vec_deep_copy(object: &AzGradientStopPreVec) -> AzGradientStopPreVec { object.clone() }

/// Wrapper over a Rust-allocated `CascadedCssPropertyWithSourceVec`
pub type AzCascadedCssPropertyWithSourceVecTT = azul_impl::styled_dom::CascadedCssPropertyWithSourceVec;
pub use AzCascadedCssPropertyWithSourceVecTT as AzCascadedCssPropertyWithSourceVec;
/// Creates a new, empty Rust `Vec<CascadedCssPropertyWithSource>`
#[no_mangle] pub extern "C" fn az_cascaded_css_property_with_source_vec_new() -> AzCascadedCssPropertyWithSourceVec { Vec::<AzCascadedCssPropertyWithSource>::new().into() }
/// Creates a new, empty Rust `Vec<CascadedCssPropertyWithSource>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_cascaded_css_property_with_source_vec_with_capacity(cap: usize) -> AzCascadedCssPropertyWithSourceVec { Vec::<AzCascadedCssPropertyWithSource>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<CascadedCssPropertyWithSource>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_cascaded_css_property_with_source_vec_copy_from(ptr: *const AzCascadedCssPropertyWithSource, len: usize) -> AzCascadedCssPropertyWithSourceVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `CascadedCssPropertyWithSourceVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_cascaded_css_property_with_source_vec_delete(object: &mut AzCascadedCssPropertyWithSourceVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_cascaded_css_property_with_source_vec_deep_copy(object: &AzCascadedCssPropertyWithSourceVec) -> AzCascadedCssPropertyWithSourceVec { object.clone() }

/// Wrapper over a Rust-allocated `NodeIdVec`
pub type AzNodeIdVecTT = azul_impl::styled_dom::NodeIdVec;
pub use AzNodeIdVecTT as AzNodeIdVec;
/// Creates a new, empty Rust `Vec<NodeId>`
#[no_mangle] pub extern "C" fn az_node_id_vec_new() -> AzNodeIdVec { Vec::<AzNodeId>::new().into() }
/// Creates a new, empty Rust `Vec<NodeId>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_node_id_vec_with_capacity(cap: usize) -> AzNodeIdVec { Vec::<AzNodeId>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<NodeId>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_node_id_vec_copy_from(ptr: *const AzNodeId, len: usize) -> AzNodeIdVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `NodeIdVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_node_id_vec_delete(object: &mut AzNodeIdVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_node_id_vec_deep_copy(object: &AzNodeIdVec) -> AzNodeIdVec { object.clone() }

/// Wrapper over a Rust-allocated `NodeVec`
pub type AzNodeVecTT = azul_impl::styled_dom::AzNodeVec;
pub use AzNodeVecTT as AzNodeVec;
/// Creates a new, empty Rust `Vec<Node>`
#[no_mangle] pub extern "C" fn az_node_vec_new() -> AzNodeVec { Vec::<AzNode>::new().into() }
/// Creates a new, empty Rust `Vec<Node>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_node_vec_with_capacity(cap: usize) -> AzNodeVec { Vec::<AzNode>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<Node>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_node_vec_copy_from(ptr: *const AzNode, len: usize) -> AzNodeVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `NodeVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_node_vec_delete(object: &mut AzNodeVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_node_vec_deep_copy(object: &AzNodeVec) -> AzNodeVec { object.clone() }

/// Wrapper over a Rust-allocated `StyledNodeVec`
pub type AzStyledNodeVecTT = azul_impl::styled_dom::StyledNodeVec;
pub use AzStyledNodeVecTT as AzStyledNodeVec;
/// Creates a new, empty Rust `Vec<StyledNode>`
#[no_mangle] pub extern "C" fn az_styled_node_vec_new() -> AzStyledNodeVec { Vec::<AzStyledNode>::new().into() }
/// Creates a new, empty Rust `Vec<StyledNode>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_styled_node_vec_with_capacity(cap: usize) -> AzStyledNodeVec { Vec::<AzStyledNode>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<StyledNode>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_styled_node_vec_copy_from(ptr: *const AzStyledNode, len: usize) -> AzStyledNodeVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `StyledNodeVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_styled_node_vec_delete(object: &mut AzStyledNodeVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_styled_node_vec_deep_copy(object: &AzStyledNodeVec) -> AzStyledNodeVec { object.clone() }

/// Wrapper over a Rust-allocated `TagIdsToNodeIdsMappingVec`
pub type AzTagIdsToNodeIdsMappingVecTT = azul_impl::styled_dom::TagIdsToNodeIdsMappingVec;
pub use AzTagIdsToNodeIdsMappingVecTT as AzTagIdsToNodeIdsMappingVec;
/// Creates a new, empty Rust `Vec<TagIdToNodeIdMapping>`
#[no_mangle] pub extern "C" fn az_tag_ids_to_node_ids_mapping_vec_new() -> AzTagIdsToNodeIdsMappingVec { Vec::<AzTagIdToNodeIdMapping>::new().into() }
/// Creates a new, empty Rust `Vec<TagIdToNodeIdMapping>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_tag_ids_to_node_ids_mapping_vec_with_capacity(cap: usize) -> AzTagIdsToNodeIdsMappingVec { Vec::<AzTagIdToNodeIdMapping>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<TagIdToNodeIdMapping>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_tag_ids_to_node_ids_mapping_vec_copy_from(ptr: *const AzTagIdToNodeIdMapping, len: usize) -> AzTagIdsToNodeIdsMappingVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `TagIdsToNodeIdsMappingVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_tag_ids_to_node_ids_mapping_vec_delete(object: &mut AzTagIdsToNodeIdsMappingVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_tag_ids_to_node_ids_mapping_vec_deep_copy(object: &AzTagIdsToNodeIdsMappingVec) -> AzTagIdsToNodeIdsMappingVec { object.clone() }

/// Wrapper over a Rust-allocated `ParentWithNodeDepthVec`
pub type AzParentWithNodeDepthVecTT = azul_impl::styled_dom::ParentWithNodeDepthVec;
pub use AzParentWithNodeDepthVecTT as AzParentWithNodeDepthVec;
/// Creates a new, empty Rust `Vec<ParentWithNodeDepth>`
#[no_mangle] pub extern "C" fn az_parent_with_node_depth_vec_new() -> AzParentWithNodeDepthVec { Vec::<AzParentWithNodeDepth>::new().into() }
/// Creates a new, empty Rust `Vec<ParentWithNodeDepth>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_parent_with_node_depth_vec_with_capacity(cap: usize) -> AzParentWithNodeDepthVec { Vec::<AzParentWithNodeDepth>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<ParentWithNodeDepth>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_parent_with_node_depth_vec_copy_from(ptr: *const AzParentWithNodeDepth, len: usize) -> AzParentWithNodeDepthVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `ParentWithNodeDepthVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_parent_with_node_depth_vec_delete(object: &mut AzParentWithNodeDepthVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_parent_with_node_depth_vec_deep_copy(object: &AzParentWithNodeDepthVec) -> AzParentWithNodeDepthVec { object.clone() }

/// Wrapper over a Rust-allocated `NodeDataVec`
pub type AzNodeDataVecTT = azul_impl::styled_dom::NodeDataVec;
pub use AzNodeDataVecTT as AzNodeDataVec;
/// Creates a new, empty Rust `Vec<NodeData>`
#[no_mangle] pub extern "C" fn az_node_data_vec_new() -> AzNodeDataVec { Vec::<NodeData>::new().into() }
/// Creates a new, empty Rust `Vec<NodeData>` with a given, pre-allocated capacity
#[no_mangle] pub extern "C" fn az_node_data_vec_with_capacity(cap: usize) -> AzNodeDataVec { Vec::<NodeData>::with_capacity(cap).into() }
/// Creates + allocates a Rust `Vec<NodeData>` by **copying** it from a bytes source
#[no_mangle] pub extern "C" fn az_node_data_vec_copy_from(ptr: *const AzNodeData, len: usize) -> AzNodeDataVec { unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into() }
/// Destructor: Takes ownership of the `NodeDataVec` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_node_data_vec_delete(object: &mut AzNodeDataVec) { unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());}
/// Clones the object
#[no_mangle] pub extern "C" fn az_node_data_vec_deep_copy(object: &AzNodeDataVec) -> AzNodeDataVec { object.clone() }

/// Re-export of rust-allocated (stack based) `OptionRendererOptions` struct
pub type AzOptionRendererOptionsTT = azul_impl::window::OptionRendererOptions;
pub use AzOptionRendererOptionsTT as AzOptionRendererOptions;

/// Re-export of rust-allocated (stack based) `OptionCallback` struct
pub type AzOptionCallbackTT = azul_impl::callbacks::OptionCallback;
pub use AzOptionCallbackTT as AzOptionCallback;

/// Re-export of rust-allocated (stack based) `OptionThreadSendMsg` struct
pub type AzOptionThreadSendMsgTT = azul_impl::task::OptionThreadSendMsg;
pub use AzOptionThreadSendMsgTT as AzOptionThreadSendMsg;

/// Re-export of rust-allocated (stack based) `OptionLayoutRect` struct
pub type AzOptionLayoutRectTT = azul_impl::css::OptionLayoutRect;
pub use AzOptionLayoutRectTT as AzOptionLayoutRect;

/// Re-export of rust-allocated (stack based) `OptionRefAny` struct
pub type AzOptionRefAnyTT = azul_impl::callbacks::OptionRefAny;
pub use AzOptionRefAnyTT as AzOptionRefAny;
/// Destructor: Takes ownership of the `OptionRefAny` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_ref_any_delete(object: &mut AzOptionRefAny) { match object { azul_impl::callbacks::OptionRefAny::None => { }, azul_impl::callbacks::OptionRefAny::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_ref_any_deep_copy(object: &AzOptionRefAny) -> AzOptionRefAny { object.clone() }

/// Re-export of rust-allocated (stack based) `OptionStyleOpacityValue` struct
pub type AzOptionStyleOpacityValueTT = azul_impl::css::OptionStyleOpacityValue;
pub use AzOptionStyleOpacityValueTT as AzOptionStyleOpacityValue;

/// Re-export of rust-allocated (stack based) `OptionStyleTransformVecValue` struct
pub type AzOptionStyleTransformVecValueTT = azul_impl::css::OptionStyleTransformVecValue;
pub use AzOptionStyleTransformVecValueTT as AzOptionStyleTransformVecValue;
/// Destructor: Takes ownership of the `OptionStyleTransformVecValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_style_transform_vec_value_delete(object: &mut AzOptionStyleTransformVecValue) { match object { azul_impl::css::OptionStyleTransformVecValue::None => { }, azul_impl::css::OptionStyleTransformVecValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_style_transform_vec_value_deep_copy(object: &AzOptionStyleTransformVecValue) -> AzOptionStyleTransformVecValue { object.clone() }

/// Re-export of rust-allocated (stack based) `OptionStyleTransformOriginValue` struct
pub type AzOptionStyleTransformOriginValueTT = azul_impl::css::OptionStyleTransformOriginValue;
pub use AzOptionStyleTransformOriginValueTT as AzOptionStyleTransformOriginValue;

/// Re-export of rust-allocated (stack based) `OptionStylePerspectiveOriginValue` struct
pub type AzOptionStylePerspectiveOriginValueTT = azul_impl::css::OptionStylePerspectiveOriginValue;
pub use AzOptionStylePerspectiveOriginValueTT as AzOptionStylePerspectiveOriginValue;

/// Re-export of rust-allocated (stack based) `OptionStyleBackfaceVisibilityValue` struct
pub type AzOptionStyleBackfaceVisibilityValueTT = azul_impl::css::OptionStyleBackfaceVisibilityValue;
pub use AzOptionStyleBackfaceVisibilityValueTT as AzOptionStyleBackfaceVisibilityValue;

/// Re-export of rust-allocated (stack based) `OptionLayoutPoint` struct
pub type AzOptionLayoutPointTT = azul_impl::css::OptionLayoutPoint;
pub use AzOptionLayoutPointTT as AzOptionLayoutPoint;

/// Re-export of rust-allocated (stack based) `OptionWindowTheme` struct
pub type AzOptionWindowThemeTT = azul_impl::window::OptionWindowTheme;
pub use AzOptionWindowThemeTT as AzOptionWindowTheme;

/// Re-export of rust-allocated (stack based) `OptionNodeId` struct
pub type AzOptionNodeIdTT = azul_impl::styled_dom::OptionNodeId;
pub use AzOptionNodeIdTT as AzOptionNodeId;

/// Re-export of rust-allocated (stack based) `OptionDomNodeId` struct
pub type AzOptionDomNodeIdTT = azul_impl::callbacks::OptionDomNodeId;
pub use AzOptionDomNodeIdTT as AzOptionDomNodeId;

/// Re-export of rust-allocated (stack based) `OptionColorU` struct
pub type AzOptionColorUTT = azul_impl::css::OptionColorU;
pub use AzOptionColorUTT as AzOptionColorU;

/// Re-export of rust-allocated (stack based) `OptionRawImage` struct
pub type AzOptionRawImageTT = azul_impl::resources::OptionRawImage;
pub use AzOptionRawImageTT as AzOptionRawImage;
/// Destructor: Takes ownership of the `OptionRawImage` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_raw_image_delete(object: &mut AzOptionRawImage) { match object { azul_impl::resources::OptionRawImage::None => { }, azul_impl::resources::OptionRawImage::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_raw_image_deep_copy(object: &AzOptionRawImage) -> AzOptionRawImage { object.clone() }

/// Re-export of rust-allocated (stack based) `OptionSvgDashPattern` struct
pub type AzOptionSvgDashPatternTT = azul_impl::svg::OptionSvgDashPattern;
pub use AzOptionSvgDashPatternTT as AzOptionSvgDashPattern;

/// Re-export of rust-allocated (stack based) `OptionWaylandTheme` struct
pub type AzOptionWaylandThemeTT = azul_impl::window::OptionWaylandTheme;
pub use AzOptionWaylandThemeTT as AzOptionWaylandTheme;
/// Destructor: Takes ownership of the `OptionWaylandTheme` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_wayland_theme_delete(object: &mut AzOptionWaylandTheme) { match object { azul_impl::window::OptionWaylandTheme::None => { }, azul_impl::window::OptionWaylandTheme::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_wayland_theme_deep_copy(object: &AzOptionWaylandTheme) -> AzOptionWaylandTheme { object.clone() }

/// Re-export of rust-allocated (stack based) `OptionTaskBarIcon` struct
pub type AzOptionTaskBarIconTT = azul_impl::window::OptionTaskBarIcon;
pub use AzOptionTaskBarIconTT as AzOptionTaskBarIcon;
/// Destructor: Takes ownership of the `OptionTaskBarIcon` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_task_bar_icon_delete(object: &mut AzOptionTaskBarIcon) { match object { azul_impl::window::OptionTaskBarIcon::None => { }, azul_impl::window::OptionTaskBarIcon::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_task_bar_icon_deep_copy(object: &AzOptionTaskBarIcon) -> AzOptionTaskBarIcon { object.clone() }

/// Re-export of rust-allocated (stack based) `OptionHwndHandle` struct
pub type AzOptionHwndHandleTT = azul_impl::window::OptionHwndHandle;
pub use AzOptionHwndHandleTT as AzOptionHwndHandle;

/// Re-export of rust-allocated (stack based) `OptionLogicalPosition` struct
pub type AzOptionLogicalPositionTT = azul_impl::window::OptionLogicalPosition;
pub use AzOptionLogicalPositionTT as AzOptionLogicalPosition;

/// Re-export of rust-allocated (stack based) `OptionPhysicalPositionI32` struct
pub type AzOptionPhysicalPositionI32TT = azul_impl::window::OptionPhysicalPositionI32;
pub use AzOptionPhysicalPositionI32TT as AzOptionPhysicalPositionI32;

/// Re-export of rust-allocated (stack based) `OptionWindowIcon` struct
pub type AzOptionWindowIconTT = azul_impl::window::OptionWindowIcon;
pub use AzOptionWindowIconTT as AzOptionWindowIcon;
/// Destructor: Takes ownership of the `OptionWindowIcon` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_window_icon_delete(object: &mut AzOptionWindowIcon) { match object { azul_impl::window::OptionWindowIcon::None => { }, azul_impl::window::OptionWindowIcon::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_window_icon_deep_copy(object: &AzOptionWindowIcon) -> AzOptionWindowIcon { object.clone() }

/// Re-export of rust-allocated (stack based) `OptionString` struct
pub type AzOptionStringTT = azul_impl::window::OptionAzString;
pub use AzOptionStringTT as AzOptionString;
/// Destructor: Takes ownership of the `OptionString` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_string_delete(object: &mut AzOptionString) { match object { azul_impl::window::OptionAzString::None => { }, azul_impl::window::OptionAzString::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_string_deep_copy(object: &AzOptionString) -> AzOptionString { object.clone() }

/// Re-export of rust-allocated (stack based) `OptionX11Visual` struct
pub type AzOptionX11VisualTT = azul_impl::window::OptionX11Visual;
pub use AzOptionX11VisualTT as AzOptionX11Visual;

/// Re-export of rust-allocated (stack based) `OptionI32` struct
pub type AzOptionI32TT = azul_impl::window::OptionI32;
pub use AzOptionI32TT as AzOptionI32;

/// Re-export of rust-allocated (stack based) `OptionF32` struct
pub type AzOptionF32TT = azul_impl::window::OptionF32;
pub use AzOptionF32TT as AzOptionF32;

/// Re-export of rust-allocated (stack based) `OptionMouseCursorType` struct
pub type AzOptionMouseCursorTypeTT = azul_impl::window::OptionMouseCursorType;
pub use AzOptionMouseCursorTypeTT as AzOptionMouseCursorType;

/// Re-export of rust-allocated (stack based) `OptionLogicalSize` struct
pub type AzOptionLogicalSizeTT = azul_impl::window::OptionLogicalSize;
pub use AzOptionLogicalSizeTT as AzOptionLogicalSize;

/// Option<char> but the char is a u32, for C FFI stability reasons
pub type AzOptionCharTT = azul_impl::window::OptionChar;
pub use AzOptionCharTT as AzOptionChar;

/// Re-export of rust-allocated (stack based) `OptionVirtualKeyCode` struct
pub type AzOptionVirtualKeyCodeTT = azul_impl::window::OptionVirtualKeyCode;
pub use AzOptionVirtualKeyCodeTT as AzOptionVirtualKeyCode;

/// Re-export of rust-allocated (stack based) `OptionPercentageValue` struct
pub type AzOptionPercentageValueTT = azul_impl::css::OptionPercentageValue;
pub use AzOptionPercentageValueTT as AzOptionPercentageValue;

/// Re-export of rust-allocated (stack based) `OptionDom` struct
pub type AzOptionDomTT = azul_impl::dom::OptionDom;
pub use AzOptionDomTT as AzOptionDom;
/// Destructor: Takes ownership of the `OptionDom` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_dom_delete(object: &mut AzOptionDom) { match object { azul_impl::dom::OptionDom::None => { }, azul_impl::dom::OptionDom::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_dom_deep_copy(object: &AzOptionDom) -> AzOptionDom { object.clone() }

/// Re-export of rust-allocated (stack based) `OptionTexture` struct
pub type AzOptionTextureTT = azul_impl::gl::OptionTexture;
pub use AzOptionTextureTT as AzOptionTexture;
/// Destructor: Takes ownership of the `OptionTexture` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_texture_delete(object: &mut AzOptionTexture) { match object { azul_impl::gl::OptionTexture::None => { }, azul_impl::gl::OptionTexture::Some(_) => { }, }
}

/// Re-export of rust-allocated (stack based) `OptionImageMask` struct
pub type AzOptionImageMaskTT = azul_impl::dom::OptionImageMask;
pub use AzOptionImageMaskTT as AzOptionImageMask;
/// Destructor: Takes ownership of the `OptionImageMask` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_image_mask_delete(object: &mut AzOptionImageMask) { match object { azul_impl::dom::OptionImageMask::None => { }, azul_impl::dom::OptionImageMask::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_image_mask_deep_copy(object: &AzOptionImageMask) -> AzOptionImageMask { object.clone() }

/// Re-export of rust-allocated (stack based) `OptionTabIndex` struct
pub type AzOptionTabIndexTT = azul_impl::dom::OptionTabIndex;
pub use AzOptionTabIndexTT as AzOptionTabIndex;

/// Re-export of rust-allocated (stack based) `OptionStyleBackgroundContentValue` struct
pub type AzOptionStyleBackgroundContentValueTT = azul_impl::css::OptionStyleBackgroundContentValue;
pub use AzOptionStyleBackgroundContentValueTT as AzOptionStyleBackgroundContentValue;
/// Destructor: Takes ownership of the `OptionStyleBackgroundContentValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_style_background_content_value_delete(object: &mut AzOptionStyleBackgroundContentValue) { match object { azul_impl::css::OptionStyleBackgroundContentValue::None => { }, azul_impl::css::OptionStyleBackgroundContentValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_style_background_content_value_deep_copy(object: &AzOptionStyleBackgroundContentValue) -> AzOptionStyleBackgroundContentValue { object.clone() }

/// Re-export of rust-allocated (stack based) `OptionStyleBackgroundPositionValue` struct
pub type AzOptionStyleBackgroundPositionValueTT = azul_impl::css::OptionStyleBackgroundPositionValue;
pub use AzOptionStyleBackgroundPositionValueTT as AzOptionStyleBackgroundPositionValue;

/// Re-export of rust-allocated (stack based) `OptionStyleBackgroundSizeValue` struct
pub type AzOptionStyleBackgroundSizeValueTT = azul_impl::css::OptionStyleBackgroundSizeValue;
pub use AzOptionStyleBackgroundSizeValueTT as AzOptionStyleBackgroundSizeValue;

/// Re-export of rust-allocated (stack based) `OptionStyleBackgroundRepeatValue` struct
pub type AzOptionStyleBackgroundRepeatValueTT = azul_impl::css::OptionStyleBackgroundRepeatValue;
pub use AzOptionStyleBackgroundRepeatValueTT as AzOptionStyleBackgroundRepeatValue;

/// Re-export of rust-allocated (stack based) `OptionStyleFontSizeValue` struct
pub type AzOptionStyleFontSizeValueTT = azul_impl::css::OptionStyleFontSizeValue;
pub use AzOptionStyleFontSizeValueTT as AzOptionStyleFontSizeValue;

/// Re-export of rust-allocated (stack based) `OptionStyleFontFamilyValue` struct
pub type AzOptionStyleFontFamilyValueTT = azul_impl::css::OptionStyleFontFamilyValue;
pub use AzOptionStyleFontFamilyValueTT as AzOptionStyleFontFamilyValue;
/// Destructor: Takes ownership of the `OptionStyleFontFamilyValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_style_font_family_value_delete(object: &mut AzOptionStyleFontFamilyValue) { match object { azul_impl::css::OptionStyleFontFamilyValue::None => { }, azul_impl::css::OptionStyleFontFamilyValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_style_font_family_value_deep_copy(object: &AzOptionStyleFontFamilyValue) -> AzOptionStyleFontFamilyValue { object.clone() }

/// Re-export of rust-allocated (stack based) `OptionStyleTextColorValue` struct
pub type AzOptionStyleTextColorValueTT = azul_impl::css::OptionStyleTextColorValue;
pub use AzOptionStyleTextColorValueTT as AzOptionStyleTextColorValue;

/// Re-export of rust-allocated (stack based) `OptionStyleTextAlignmentHorzValue` struct
pub type AzOptionStyleTextAlignmentHorzValueTT = azul_impl::css::OptionStyleTextAlignmentHorzValue;
pub use AzOptionStyleTextAlignmentHorzValueTT as AzOptionStyleTextAlignmentHorzValue;

/// Re-export of rust-allocated (stack based) `OptionStyleLineHeightValue` struct
pub type AzOptionStyleLineHeightValueTT = azul_impl::css::OptionStyleLineHeightValue;
pub use AzOptionStyleLineHeightValueTT as AzOptionStyleLineHeightValue;

/// Re-export of rust-allocated (stack based) `OptionStyleLetterSpacingValue` struct
pub type AzOptionStyleLetterSpacingValueTT = azul_impl::css::OptionStyleLetterSpacingValue;
pub use AzOptionStyleLetterSpacingValueTT as AzOptionStyleLetterSpacingValue;

/// Re-export of rust-allocated (stack based) `OptionStyleWordSpacingValue` struct
pub type AzOptionStyleWordSpacingValueTT = azul_impl::css::OptionStyleWordSpacingValue;
pub use AzOptionStyleWordSpacingValueTT as AzOptionStyleWordSpacingValue;

/// Re-export of rust-allocated (stack based) `OptionStyleTabWidthValue` struct
pub type AzOptionStyleTabWidthValueTT = azul_impl::css::OptionStyleTabWidthValue;
pub use AzOptionStyleTabWidthValueTT as AzOptionStyleTabWidthValue;

/// Re-export of rust-allocated (stack based) `OptionStyleCursorValue` struct
pub type AzOptionStyleCursorValueTT = azul_impl::css::OptionStyleCursorValue;
pub use AzOptionStyleCursorValueTT as AzOptionStyleCursorValue;

/// Re-export of rust-allocated (stack based) `OptionBoxShadowPreDisplayItemValue` struct
pub type AzOptionBoxShadowPreDisplayItemValueTT = azul_impl::css::OptionBoxShadowPreDisplayItemValue;
pub use AzOptionBoxShadowPreDisplayItemValueTT as AzOptionBoxShadowPreDisplayItemValue;
/// Destructor: Takes ownership of the `OptionBoxShadowPreDisplayItemValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_box_shadow_pre_display_item_value_delete(object: &mut AzOptionBoxShadowPreDisplayItemValue) { match object { azul_impl::css::OptionBoxShadowPreDisplayItemValue::None => { }, azul_impl::css::OptionBoxShadowPreDisplayItemValue::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_box_shadow_pre_display_item_value_deep_copy(object: &AzOptionBoxShadowPreDisplayItemValue) -> AzOptionBoxShadowPreDisplayItemValue { object.clone() }

/// Re-export of rust-allocated (stack based) `OptionStyleBorderTopColorValue` struct
pub type AzOptionStyleBorderTopColorValueTT = azul_impl::css::OptionStyleBorderTopColorValue;
pub use AzOptionStyleBorderTopColorValueTT as AzOptionStyleBorderTopColorValue;

/// Re-export of rust-allocated (stack based) `OptionStyleBorderLeftColorValue` struct
pub type AzOptionStyleBorderLeftColorValueTT = azul_impl::css::OptionStyleBorderLeftColorValue;
pub use AzOptionStyleBorderLeftColorValueTT as AzOptionStyleBorderLeftColorValue;

/// Re-export of rust-allocated (stack based) `OptionStyleBorderRightColorValue` struct
pub type AzOptionStyleBorderRightColorValueTT = azul_impl::css::OptionStyleBorderRightColorValue;
pub use AzOptionStyleBorderRightColorValueTT as AzOptionStyleBorderRightColorValue;

/// Re-export of rust-allocated (stack based) `OptionStyleBorderBottomColorValue` struct
pub type AzOptionStyleBorderBottomColorValueTT = azul_impl::css::OptionStyleBorderBottomColorValue;
pub use AzOptionStyleBorderBottomColorValueTT as AzOptionStyleBorderBottomColorValue;

/// Re-export of rust-allocated (stack based) `OptionStyleBorderTopStyleValue` struct
pub type AzOptionStyleBorderTopStyleValueTT = azul_impl::css::OptionStyleBorderTopStyleValue;
pub use AzOptionStyleBorderTopStyleValueTT as AzOptionStyleBorderTopStyleValue;

/// Re-export of rust-allocated (stack based) `OptionStyleBorderLeftStyleValue` struct
pub type AzOptionStyleBorderLeftStyleValueTT = azul_impl::css::OptionStyleBorderLeftStyleValue;
pub use AzOptionStyleBorderLeftStyleValueTT as AzOptionStyleBorderLeftStyleValue;

/// Re-export of rust-allocated (stack based) `OptionStyleBorderRightStyleValue` struct
pub type AzOptionStyleBorderRightStyleValueTT = azul_impl::css::OptionStyleBorderRightStyleValue;
pub use AzOptionStyleBorderRightStyleValueTT as AzOptionStyleBorderRightStyleValue;

/// Re-export of rust-allocated (stack based) `OptionStyleBorderBottomStyleValue` struct
pub type AzOptionStyleBorderBottomStyleValueTT = azul_impl::css::OptionStyleBorderBottomStyleValue;
pub use AzOptionStyleBorderBottomStyleValueTT as AzOptionStyleBorderBottomStyleValue;

/// Re-export of rust-allocated (stack based) `OptionStyleBorderTopLeftRadiusValue` struct
pub type AzOptionStyleBorderTopLeftRadiusValueTT = azul_impl::css::OptionStyleBorderTopLeftRadiusValue;
pub use AzOptionStyleBorderTopLeftRadiusValueTT as AzOptionStyleBorderTopLeftRadiusValue;

/// Re-export of rust-allocated (stack based) `OptionStyleBorderTopRightRadiusValue` struct
pub type AzOptionStyleBorderTopRightRadiusValueTT = azul_impl::css::OptionStyleBorderTopRightRadiusValue;
pub use AzOptionStyleBorderTopRightRadiusValueTT as AzOptionStyleBorderTopRightRadiusValue;

/// Re-export of rust-allocated (stack based) `OptionStyleBorderBottomLeftRadiusValue` struct
pub type AzOptionStyleBorderBottomLeftRadiusValueTT = azul_impl::css::OptionStyleBorderBottomLeftRadiusValue;
pub use AzOptionStyleBorderBottomLeftRadiusValueTT as AzOptionStyleBorderBottomLeftRadiusValue;

/// Re-export of rust-allocated (stack based) `OptionStyleBorderBottomRightRadiusValue` struct
pub type AzOptionStyleBorderBottomRightRadiusValueTT = azul_impl::css::OptionStyleBorderBottomRightRadiusValue;
pub use AzOptionStyleBorderBottomRightRadiusValueTT as AzOptionStyleBorderBottomRightRadiusValue;

/// Re-export of rust-allocated (stack based) `OptionLayoutDisplayValue` struct
pub type AzOptionLayoutDisplayValueTT = azul_impl::css::OptionLayoutDisplayValue;
pub use AzOptionLayoutDisplayValueTT as AzOptionLayoutDisplayValue;

/// Re-export of rust-allocated (stack based) `OptionLayoutFloatValue` struct
pub type AzOptionLayoutFloatValueTT = azul_impl::css::OptionLayoutFloatValue;
pub use AzOptionLayoutFloatValueTT as AzOptionLayoutFloatValue;

/// Re-export of rust-allocated (stack based) `OptionLayoutBoxSizingValue` struct
pub type AzOptionLayoutBoxSizingValueTT = azul_impl::css::OptionLayoutBoxSizingValue;
pub use AzOptionLayoutBoxSizingValueTT as AzOptionLayoutBoxSizingValue;

/// Re-export of rust-allocated (stack based) `OptionLayoutWidthValue` struct
pub type AzOptionLayoutWidthValueTT = azul_impl::css::OptionLayoutWidthValue;
pub use AzOptionLayoutWidthValueTT as AzOptionLayoutWidthValue;

/// Re-export of rust-allocated (stack based) `OptionLayoutHeightValue` struct
pub type AzOptionLayoutHeightValueTT = azul_impl::css::OptionLayoutHeightValue;
pub use AzOptionLayoutHeightValueTT as AzOptionLayoutHeightValue;

/// Re-export of rust-allocated (stack based) `OptionLayoutMinWidthValue` struct
pub type AzOptionLayoutMinWidthValueTT = azul_impl::css::OptionLayoutMinWidthValue;
pub use AzOptionLayoutMinWidthValueTT as AzOptionLayoutMinWidthValue;

/// Re-export of rust-allocated (stack based) `OptionLayoutMinHeightValue` struct
pub type AzOptionLayoutMinHeightValueTT = azul_impl::css::OptionLayoutMinHeightValue;
pub use AzOptionLayoutMinHeightValueTT as AzOptionLayoutMinHeightValue;

/// Re-export of rust-allocated (stack based) `OptionLayoutMaxWidthValue` struct
pub type AzOptionLayoutMaxWidthValueTT = azul_impl::css::OptionLayoutMaxWidthValue;
pub use AzOptionLayoutMaxWidthValueTT as AzOptionLayoutMaxWidthValue;

/// Re-export of rust-allocated (stack based) `OptionLayoutMaxHeightValue` struct
pub type AzOptionLayoutMaxHeightValueTT = azul_impl::css::OptionLayoutMaxHeightValue;
pub use AzOptionLayoutMaxHeightValueTT as AzOptionLayoutMaxHeightValue;

/// Re-export of rust-allocated (stack based) `OptionLayoutPositionValue` struct
pub type AzOptionLayoutPositionValueTT = azul_impl::css::OptionLayoutPositionValue;
pub use AzOptionLayoutPositionValueTT as AzOptionLayoutPositionValue;

/// Re-export of rust-allocated (stack based) `OptionLayoutTopValue` struct
pub type AzOptionLayoutTopValueTT = azul_impl::css::OptionLayoutTopValue;
pub use AzOptionLayoutTopValueTT as AzOptionLayoutTopValue;

/// Re-export of rust-allocated (stack based) `OptionLayoutBottomValue` struct
pub type AzOptionLayoutBottomValueTT = azul_impl::css::OptionLayoutBottomValue;
pub use AzOptionLayoutBottomValueTT as AzOptionLayoutBottomValue;

/// Re-export of rust-allocated (stack based) `OptionLayoutRightValue` struct
pub type AzOptionLayoutRightValueTT = azul_impl::css::OptionLayoutRightValue;
pub use AzOptionLayoutRightValueTT as AzOptionLayoutRightValue;

/// Re-export of rust-allocated (stack based) `OptionLayoutLeftValue` struct
pub type AzOptionLayoutLeftValueTT = azul_impl::css::OptionLayoutLeftValue;
pub use AzOptionLayoutLeftValueTT as AzOptionLayoutLeftValue;

/// Re-export of rust-allocated (stack based) `OptionLayoutPaddingTopValue` struct
pub type AzOptionLayoutPaddingTopValueTT = azul_impl::css::OptionLayoutPaddingTopValue;
pub use AzOptionLayoutPaddingTopValueTT as AzOptionLayoutPaddingTopValue;

/// Re-export of rust-allocated (stack based) `OptionLayoutPaddingBottomValue` struct
pub type AzOptionLayoutPaddingBottomValueTT = azul_impl::css::OptionLayoutPaddingBottomValue;
pub use AzOptionLayoutPaddingBottomValueTT as AzOptionLayoutPaddingBottomValue;

/// Re-export of rust-allocated (stack based) `OptionLayoutPaddingLeftValue` struct
pub type AzOptionLayoutPaddingLeftValueTT = azul_impl::css::OptionLayoutPaddingLeftValue;
pub use AzOptionLayoutPaddingLeftValueTT as AzOptionLayoutPaddingLeftValue;

/// Re-export of rust-allocated (stack based) `OptionLayoutPaddingRightValue` struct
pub type AzOptionLayoutPaddingRightValueTT = azul_impl::css::OptionLayoutPaddingRightValue;
pub use AzOptionLayoutPaddingRightValueTT as AzOptionLayoutPaddingRightValue;

/// Re-export of rust-allocated (stack based) `OptionLayoutMarginTopValue` struct
pub type AzOptionLayoutMarginTopValueTT = azul_impl::css::OptionLayoutMarginTopValue;
pub use AzOptionLayoutMarginTopValueTT as AzOptionLayoutMarginTopValue;

/// Re-export of rust-allocated (stack based) `OptionLayoutMarginBottomValue` struct
pub type AzOptionLayoutMarginBottomValueTT = azul_impl::css::OptionLayoutMarginBottomValue;
pub use AzOptionLayoutMarginBottomValueTT as AzOptionLayoutMarginBottomValue;

/// Re-export of rust-allocated (stack based) `OptionLayoutMarginLeftValue` struct
pub type AzOptionLayoutMarginLeftValueTT = azul_impl::css::OptionLayoutMarginLeftValue;
pub use AzOptionLayoutMarginLeftValueTT as AzOptionLayoutMarginLeftValue;

/// Re-export of rust-allocated (stack based) `OptionLayoutMarginRightValue` struct
pub type AzOptionLayoutMarginRightValueTT = azul_impl::css::OptionLayoutMarginRightValue;
pub use AzOptionLayoutMarginRightValueTT as AzOptionLayoutMarginRightValue;

/// Re-export of rust-allocated (stack based) `OptionStyleBorderTopWidthValue` struct
pub type AzOptionStyleBorderTopWidthValueTT = azul_impl::css::OptionStyleBorderTopWidthValue;
pub use AzOptionStyleBorderTopWidthValueTT as AzOptionStyleBorderTopWidthValue;

/// Re-export of rust-allocated (stack based) `OptionStyleBorderLeftWidthValue` struct
pub type AzOptionStyleBorderLeftWidthValueTT = azul_impl::css::OptionStyleBorderLeftWidthValue;
pub use AzOptionStyleBorderLeftWidthValueTT as AzOptionStyleBorderLeftWidthValue;

/// Re-export of rust-allocated (stack based) `OptionStyleBorderRightWidthValue` struct
pub type AzOptionStyleBorderRightWidthValueTT = azul_impl::css::OptionStyleBorderRightWidthValue;
pub use AzOptionStyleBorderRightWidthValueTT as AzOptionStyleBorderRightWidthValue;

/// Re-export of rust-allocated (stack based) `OptionStyleBorderBottomWidthValue` struct
pub type AzOptionStyleBorderBottomWidthValueTT = azul_impl::css::OptionStyleBorderBottomWidthValue;
pub use AzOptionStyleBorderBottomWidthValueTT as AzOptionStyleBorderBottomWidthValue;

/// Re-export of rust-allocated (stack based) `OptionOverflowValue` struct
pub type AzOptionOverflowValueTT = azul_impl::css::OptionOverflowValue;
pub use AzOptionOverflowValueTT as AzOptionOverflowValue;

/// Re-export of rust-allocated (stack based) `OptionLayoutFlexDirectionValue` struct
pub type AzOptionLayoutFlexDirectionValueTT = azul_impl::css::OptionLayoutFlexDirectionValue;
pub use AzOptionLayoutFlexDirectionValueTT as AzOptionLayoutFlexDirectionValue;

/// Re-export of rust-allocated (stack based) `OptionLayoutWrapValue` struct
pub type AzOptionLayoutWrapValueTT = azul_impl::css::OptionLayoutWrapValue;
pub use AzOptionLayoutWrapValueTT as AzOptionLayoutWrapValue;

/// Re-export of rust-allocated (stack based) `OptionLayoutFlexGrowValue` struct
pub type AzOptionLayoutFlexGrowValueTT = azul_impl::css::OptionLayoutFlexGrowValue;
pub use AzOptionLayoutFlexGrowValueTT as AzOptionLayoutFlexGrowValue;

/// Re-export of rust-allocated (stack based) `OptionLayoutFlexShrinkValue` struct
pub type AzOptionLayoutFlexShrinkValueTT = azul_impl::css::OptionLayoutFlexShrinkValue;
pub use AzOptionLayoutFlexShrinkValueTT as AzOptionLayoutFlexShrinkValue;

/// Re-export of rust-allocated (stack based) `OptionLayoutJustifyContentValue` struct
pub type AzOptionLayoutJustifyContentValueTT = azul_impl::css::OptionLayoutJustifyContentValue;
pub use AzOptionLayoutJustifyContentValueTT as AzOptionLayoutJustifyContentValue;

/// Re-export of rust-allocated (stack based) `OptionLayoutAlignItemsValue` struct
pub type AzOptionLayoutAlignItemsValueTT = azul_impl::css::OptionLayoutAlignItemsValue;
pub use AzOptionLayoutAlignItemsValueTT as AzOptionLayoutAlignItemsValue;

/// Re-export of rust-allocated (stack based) `OptionLayoutAlignContentValue` struct
pub type AzOptionLayoutAlignContentValueTT = azul_impl::css::OptionLayoutAlignContentValue;
pub use AzOptionLayoutAlignContentValueTT as AzOptionLayoutAlignContentValue;

/// Re-export of rust-allocated (stack based) `OptionTagId` struct
pub type AzOptionTagIdTT = azul_impl::styled_dom::OptionTagId;
pub use AzOptionTagIdTT as AzOptionTagId;

/// Re-export of rust-allocated (stack based) `OptionDuration` struct
pub type AzOptionDurationTT = azul_impl::task::OptionDuration;
pub use AzOptionDurationTT as AzOptionDuration;

/// Re-export of rust-allocated (stack based) `OptionInstantPtr` struct
pub type AzOptionInstantPtrTT = azul_impl::task::OptionInstantPtr;
pub use AzOptionInstantPtrTT as AzOptionInstantPtr;
/// Destructor: Takes ownership of the `OptionInstantPtr` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_instant_ptr_delete(object: &mut AzOptionInstantPtr) { match object { azul_impl::task::OptionInstantPtr::None => { }, azul_impl::task::OptionInstantPtr::Some(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_option_instant_ptr_deep_copy(object: &AzOptionInstantPtr) -> AzOptionInstantPtr { object.clone() }

/// Re-export of rust-allocated (stack based) `OptionUsize` struct
pub type AzOptionUsizeTT = azul_impl::gl::OptionUsize;
pub use AzOptionUsizeTT as AzOptionUsize;

/// Re-export of rust-allocated (stack based) `OptionU8VecRef` struct
pub type AzOptionU8VecRefTT = azul_impl::gl::OptionU8VecRef;
pub use AzOptionU8VecRefTT as AzOptionU8VecRef;
/// Destructor: Takes ownership of the `OptionU8VecRef` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_option_u8_vec_ref_delete(object: &mut AzOptionU8VecRef) { match object { azul_impl::gl::OptionU8VecRef::None => { }, azul_impl::gl::OptionU8VecRef::Some(_) => { }, }
}

/// Re-export of rust-allocated (stack based) `ResultSvgSvgParseError` struct
pub type AzResultSvgSvgParseErrorTT = azul_impl::svg::ResultSvgSvgParseError;
pub use AzResultSvgSvgParseErrorTT as AzResultSvgSvgParseError;
/// Destructor: Takes ownership of the `ResultSvgSvgParseError` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_result_svg_svg_parse_error_delete(object: &mut AzResultSvgSvgParseError) { match object { azul_impl::svg::ResultSvgSvgParseError::Ok(_) => { }, azul_impl::svg::ResultSvgSvgParseError::Err(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_result_svg_svg_parse_error_deep_copy(object: &AzResultSvgSvgParseError) -> AzResultSvgSvgParseError { object.clone() }

/// Re-export of rust-allocated (stack based) `SvgParseError` struct
pub type AzSvgParseErrorTT = azul_impl::svg::SvgParseError;
pub use AzSvgParseErrorTT as AzSvgParseError;
/// Destructor: Takes ownership of the `SvgParseError` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_svg_parse_error_delete(object: &mut AzSvgParseError) { match object { azul_impl::svg::SvgParseError::InvalidFileSuffix => { }, azul_impl::svg::SvgParseError::FileOpenFailed => { }, azul_impl::svg::SvgParseError::NotAnUtf8Str => { }, azul_impl::svg::SvgParseError::MalformedGZip => { }, azul_impl::svg::SvgParseError::InvalidSize => { }, azul_impl::svg::SvgParseError::ParsingFailed(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_svg_parse_error_deep_copy(object: &AzSvgParseError) -> AzSvgParseError { object.clone() }

/// Re-export of rust-allocated (stack based) `XmlError` struct
pub type AzXmlErrorTT = azul_impl::xml::XmlError;
pub use AzXmlErrorTT as AzXmlError;
/// Destructor: Takes ownership of the `XmlError` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_xml_error_delete(object: &mut AzXmlError) { match object { azul_impl::xml::XmlError::InvalidXmlPrefixUri(_) => { }, azul_impl::xml::XmlError::UnexpectedXmlUri(_) => { }, azul_impl::xml::XmlError::UnexpectedXmlnsUri(_) => { }, azul_impl::xml::XmlError::InvalidElementNamePrefix(_) => { }, azul_impl::xml::XmlError::DuplicatedNamespace(_) => { }, azul_impl::xml::XmlError::UnknownNamespace(_) => { }, azul_impl::xml::XmlError::UnexpectedCloseTag(_) => { }, azul_impl::xml::XmlError::UnexpectedEntityCloseTag(_) => { }, azul_impl::xml::XmlError::UnknownEntityReference(_) => { }, azul_impl::xml::XmlError::MalformedEntityReference(_) => { }, azul_impl::xml::XmlError::EntityReferenceLoop(_) => { }, azul_impl::xml::XmlError::InvalidAttributeValue(_) => { }, azul_impl::xml::XmlError::DuplicatedAttribute(_) => { }, azul_impl::xml::XmlError::NoRootNode => { }, azul_impl::xml::XmlError::SizeLimit => { }, azul_impl::xml::XmlError::ParserError(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_xml_error_deep_copy(object: &AzXmlError) -> AzXmlError { object.clone() }

/// Re-export of rust-allocated (stack based) `DuplicatedNamespaceError` struct
pub type AzDuplicatedNamespaceErrorTT = azul_impl::xml::DuplicatedNamespaceError;
pub use AzDuplicatedNamespaceErrorTT as AzDuplicatedNamespaceError;
/// Destructor: Takes ownership of the `DuplicatedNamespaceError` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_duplicated_namespace_error_delete(object: &mut AzDuplicatedNamespaceError) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_duplicated_namespace_error_deep_copy(object: &AzDuplicatedNamespaceError) -> AzDuplicatedNamespaceError { object.clone() }

/// Re-export of rust-allocated (stack based) `UnknownNamespaceError` struct
pub type AzUnknownNamespaceErrorTT = azul_impl::xml::UnknownNamespaceError;
pub use AzUnknownNamespaceErrorTT as AzUnknownNamespaceError;
/// Destructor: Takes ownership of the `UnknownNamespaceError` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_unknown_namespace_error_delete(object: &mut AzUnknownNamespaceError) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_unknown_namespace_error_deep_copy(object: &AzUnknownNamespaceError) -> AzUnknownNamespaceError { object.clone() }

/// Re-export of rust-allocated (stack based) `UnexpectedCloseTagError` struct
pub type AzUnexpectedCloseTagErrorTT = azul_impl::xml::UnexpectedCloseTagError;
pub use AzUnexpectedCloseTagErrorTT as AzUnexpectedCloseTagError;
/// Destructor: Takes ownership of the `UnexpectedCloseTagError` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_unexpected_close_tag_error_delete(object: &mut AzUnexpectedCloseTagError) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_unexpected_close_tag_error_deep_copy(object: &AzUnexpectedCloseTagError) -> AzUnexpectedCloseTagError { object.clone() }

/// Re-export of rust-allocated (stack based) `UnknownEntityReferenceError` struct
pub type AzUnknownEntityReferenceErrorTT = azul_impl::xml::UnknownEntityReferenceError;
pub use AzUnknownEntityReferenceErrorTT as AzUnknownEntityReferenceError;
/// Destructor: Takes ownership of the `UnknownEntityReferenceError` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_unknown_entity_reference_error_delete(object: &mut AzUnknownEntityReferenceError) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_unknown_entity_reference_error_deep_copy(object: &AzUnknownEntityReferenceError) -> AzUnknownEntityReferenceError { object.clone() }

/// Re-export of rust-allocated (stack based) `DuplicatedAttributeError` struct
pub type AzDuplicatedAttributeErrorTT = azul_impl::xml::DuplicatedAttributeError;
pub use AzDuplicatedAttributeErrorTT as AzDuplicatedAttributeError;
/// Destructor: Takes ownership of the `DuplicatedAttributeError` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_duplicated_attribute_error_delete(object: &mut AzDuplicatedAttributeError) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_duplicated_attribute_error_deep_copy(object: &AzDuplicatedAttributeError) -> AzDuplicatedAttributeError { object.clone() }

/// Re-export of rust-allocated (stack based) `XmlParseError` struct
pub type AzXmlParseErrorTT = azul_impl::xml::XmlParseError;
pub use AzXmlParseErrorTT as AzXmlParseError;
/// Destructor: Takes ownership of the `XmlParseError` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_xml_parse_error_delete(object: &mut AzXmlParseError) { match object { azul_impl::xml::XmlParseError::InvalidDeclaration(_) => { }, azul_impl::xml::XmlParseError::InvalidComment(_) => { }, azul_impl::xml::XmlParseError::InvalidPI(_) => { }, azul_impl::xml::XmlParseError::InvalidDoctype(_) => { }, azul_impl::xml::XmlParseError::InvalidEntity(_) => { }, azul_impl::xml::XmlParseError::InvalidElement(_) => { }, azul_impl::xml::XmlParseError::InvalidAttribute(_) => { }, azul_impl::xml::XmlParseError::InvalidCdata(_) => { }, azul_impl::xml::XmlParseError::InvalidCharData(_) => { }, azul_impl::xml::XmlParseError::UnknownToken(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_xml_parse_error_deep_copy(object: &AzXmlParseError) -> AzXmlParseError { object.clone() }

/// Re-export of rust-allocated (stack based) `XmlTextError` struct
pub type AzXmlTextErrorTT = azul_impl::xml::XmlTextError;
pub use AzXmlTextErrorTT as AzXmlTextError;
/// Destructor: Takes ownership of the `XmlTextError` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_xml_text_error_delete(object: &mut AzXmlTextError) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_xml_text_error_deep_copy(object: &AzXmlTextError) -> AzXmlTextError { object.clone() }

/// Re-export of rust-allocated (stack based) `XmlStreamError` struct
pub type AzXmlStreamErrorTT = azul_impl::xml::XmlStreamError;
pub use AzXmlStreamErrorTT as AzXmlStreamError;
/// Destructor: Takes ownership of the `XmlStreamError` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_xml_stream_error_delete(object: &mut AzXmlStreamError) { match object { azul_impl::xml::XmlStreamError::UnexpectedEndOfStream => { }, azul_impl::xml::XmlStreamError::InvalidName => { }, azul_impl::xml::XmlStreamError::NonXmlChar(_) => { }, azul_impl::xml::XmlStreamError::InvalidChar(_) => { }, azul_impl::xml::XmlStreamError::InvalidCharMultiple(_) => { }, azul_impl::xml::XmlStreamError::InvalidQuote(_) => { }, azul_impl::xml::XmlStreamError::InvalidSpace(_) => { }, azul_impl::xml::XmlStreamError::InvalidString(_) => { }, azul_impl::xml::XmlStreamError::InvalidReference => { }, azul_impl::xml::XmlStreamError::InvalidExternalID => { }, azul_impl::xml::XmlStreamError::InvalidCommentData => { }, azul_impl::xml::XmlStreamError::InvalidCommentEnd => { }, azul_impl::xml::XmlStreamError::InvalidCharacterData => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_xml_stream_error_deep_copy(object: &AzXmlStreamError) -> AzXmlStreamError { object.clone() }

/// Re-export of rust-allocated (stack based) `NonXmlCharError` struct
pub type AzNonXmlCharErrorTT = azul_impl::xml::NonXmlCharError;
pub use AzNonXmlCharErrorTT as AzNonXmlCharError;

/// Re-export of rust-allocated (stack based) `InvalidCharError` struct
pub type AzInvalidCharErrorTT = azul_impl::xml::InvalidCharError;
pub use AzInvalidCharErrorTT as AzInvalidCharError;

/// Re-export of rust-allocated (stack based) `InvalidCharMultipleError` struct
pub type AzInvalidCharMultipleErrorTT = azul_impl::xml::InvalidCharMultipleError;
pub use AzInvalidCharMultipleErrorTT as AzInvalidCharMultipleError;
/// Destructor: Takes ownership of the `InvalidCharMultipleError` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_invalid_char_multiple_error_delete(object: &mut AzInvalidCharMultipleError) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_invalid_char_multiple_error_deep_copy(object: &AzInvalidCharMultipleError) -> AzInvalidCharMultipleError { object.clone() }

/// Re-export of rust-allocated (stack based) `InvalidQuoteError` struct
pub type AzInvalidQuoteErrorTT = azul_impl::xml::InvalidQuoteError;
pub use AzInvalidQuoteErrorTT as AzInvalidQuoteError;

/// Re-export of rust-allocated (stack based) `InvalidSpaceError` struct
pub type AzInvalidSpaceErrorTT = azul_impl::xml::InvalidSpaceError;
pub use AzInvalidSpaceErrorTT as AzInvalidSpaceError;

/// Re-export of rust-allocated (stack based) `InvalidStringError` struct
pub type AzInvalidStringErrorTT = azul_impl::xml::InvalidStringError;
pub use AzInvalidStringErrorTT as AzInvalidStringError;
/// Destructor: Takes ownership of the `InvalidStringError` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_invalid_string_error_delete(object: &mut AzInvalidStringError) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_invalid_string_error_deep_copy(object: &AzInvalidStringError) -> AzInvalidStringError { object.clone() }

/// Re-export of rust-allocated (stack based) `SvgParseErrorPosition` struct
pub type AzSvgParseErrorPositionTT = azul_impl::xml::XmlTextPos;
pub use AzSvgParseErrorPositionTT as AzSvgParseErrorPosition;

/// Pointer to rust-allocated `Box<Instant>` struct
pub type AzInstantPtrTT = azul_impl::task::AzInstantPtr;
pub use AzInstantPtrTT as AzInstantPtr;
/// Creates a new `Instant` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `Instant::now()` constructor.
#[no_mangle] pub extern "C" fn az_instant_ptr_now() -> AzInstantPtr { let object: std::time::Instant = std::time::Instant::now(); let ptr = Box::into_raw(Box::new(object)) as *mut c_void; AzInstantPtr { ptr } }
/// Destructor: Takes ownership of the `Instant` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_instant_ptr_delete(ptr: &mut AzInstantPtr) { let _ = unsafe { Box::<std::time::Instant>::from_raw(ptr.ptr  as *mut std::time::Instant) };}
/// (private): Downcasts the `AzInstantPtr` to a `Box<std::time::Instant>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_instant_ptr_downcast(ptr: AzInstantPtr) -> Box<std::time::Instant> {     unsafe { Box::<std::time::Instant>::from_raw(ptr.ptr  as *mut std::time::Instant) }}
/// (private): Downcasts the `AzInstantPtr` to a `&mut Box<std::time::Instant>` and runs the `func` closure on it
#[inline(always)] fn az_instant_ptr_downcast_refmut<P, F: FnOnce(&mut std::time::Instant) -> P>(ptr: &mut AzInstantPtr, func: F) -> P {     func(unsafe { &mut *(ptr.ptr as *mut std::time::Instant) })}
/// (private): Downcasts the `AzInstantPtr` to a `&Box<std::time::Instant>` and runs the `func` closure on it
#[inline(always)] fn az_instant_ptr_downcast_ref<P, F: FnOnce(&std::time::Instant) -> P>(ptr: &AzInstantPtr, func: F) -> P {     func(unsafe { &*(ptr.ptr as *const std::time::Instant) })}

/// Re-export of rust-allocated (stack based) `Duration` struct
pub type AzDurationTT = azul_impl::task::AzDuration;
pub use AzDurationTT as AzDuration;
/// Creates a new `Duration` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `Duration::milliseconds()` constructor.
#[no_mangle] pub extern "C" fn az_duration_milliseconds(milliseconds: usize) -> AzDuration { std::time::Duration::from_millis(milliseconds as u64).into() }
/// Creates a new `Duration` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `Duration::seconds()` constructor.
#[no_mangle] pub extern "C" fn az_duration_seconds(seconds: usize) -> AzDuration { std::time::Duration::from_secs(seconds as u64).into() }

/// Re-export of rust-allocated (stack based) `AppLogLevel` struct
pub type AzAppLogLevelTT = azul_impl::resources::AppLogLevel;
pub use AzAppLogLevelTT as AzAppLogLevel;

/// Configuration for optional features, such as whether to enable logging or panic hooks
pub type AzAppConfigTT = azul_impl::resources::AppConfig;
pub use AzAppConfigTT as AzAppConfig;
/// Creates a new AppConfig with default values
#[no_mangle] pub extern "C" fn az_app_config_default() -> AzAppConfig { AppConfig::default() }
/// Destructor: Takes ownership of the `AppConfig` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_app_config_delete(object: &mut AzAppConfig) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_app_config_deep_copy(object: &AzAppConfig) -> AzAppConfig { object.clone() }

/// Pointer to rust-allocated `Box<App>` struct
#[repr(C)] pub struct AzAppPtr { ptr: *mut c_void }
/// Creates a new App instance from the given `AppConfig`
#[no_mangle] pub extern "C" fn az_app_ptr_new(data: AzRefAny, config: AzAppConfig) -> AzAppPtr { let object: App = App::new(data, config); let ptr = Box::into_raw(Box::new(object)) as *mut c_void; AzAppPtr { ptr } }
/// Spawn a new window on the screen when the app is run.
#[no_mangle] pub extern "C" fn az_app_ptr_add_window(app: &mut AzAppPtr, window: AzWindowCreateOptions) { az_app_ptr_downcast_refmut(app, |a| a.add_window(window)) }
/// Runs the application. Due to platform restrictions (specifically `WinMain` on Windows), this function never returns.
#[no_mangle] pub extern "C" fn az_app_ptr_run(app: AzAppPtr, window: AzWindowCreateOptions) { az_app_ptr_downcast(app).run(window) }
/// Destructor: Takes ownership of the `App` pointer and deletes it.
#[no_mangle] pub extern "C" fn az_app_ptr_delete(ptr: &mut AzAppPtr) { let _ = unsafe { Box::<App>::from_raw(ptr.ptr  as *mut App) };}
/// (private): Downcasts the `AzAppPtr` to a `Box<App>`. Note that this takes ownership of the pointer.
#[inline(always)] fn az_app_ptr_downcast(ptr: AzAppPtr) -> Box<App> {     unsafe { Box::<App>::from_raw(ptr.ptr  as *mut App) }}
/// (private): Downcasts the `AzAppPtr` to a `&mut Box<App>` and runs the `func` closure on it
#[inline(always)] fn az_app_ptr_downcast_refmut<P, F: FnOnce(&mut App) -> P>(ptr: &mut AzAppPtr, func: F) -> P {     func(unsafe { &mut *(ptr.ptr as *mut App) })}
/// (private): Downcasts the `AzAppPtr` to a `&Box<App>` and runs the `func` closure on it
#[inline(always)] fn az_app_ptr_downcast_ref<P, F: FnOnce(&App) -> P>(ptr: &AzAppPtr, func: F) -> P {     func(unsafe { &*(ptr.ptr as *const App) })}

/// Re-export of rust-allocated (stack based) `NodeId` struct
pub type AzNodeIdTT = azul_impl::styled_dom::AzNodeId;
pub use AzNodeIdTT as AzNodeId;

/// Re-export of rust-allocated (stack based) `DomId` struct
pub type AzDomIdTT = azul_impl::styled_dom::DomId;
pub use AzDomIdTT as AzDomId;

/// Re-export of rust-allocated (stack based) `DomNodeId` struct
pub type AzDomNodeIdTT = azul_impl::callbacks::DomNodeId;
pub use AzDomNodeIdTT as AzDomNodeId;

/// Re-export of rust-allocated (stack based) `HidpiAdjustedBounds` struct
pub type AzHidpiAdjustedBoundsTT = azul_impl::callbacks::HidpiAdjustedBounds;
pub use AzHidpiAdjustedBoundsTT as AzHidpiAdjustedBounds;
/// Returns the size of the bounds in logical units
#[no_mangle] pub extern "C" fn az_hidpi_adjusted_bounds_get_logical_size(hidpiadjustedbounds: &AzHidpiAdjustedBounds) -> AzLogicalSize { hidpiadjustedbounds.get_logical_size() }
/// Returns the size of the bounds in physical units
#[no_mangle] pub extern "C" fn az_hidpi_adjusted_bounds_get_physical_size(hidpiadjustedbounds: &AzHidpiAdjustedBounds) -> AzPhysicalSizeU32 { hidpiadjustedbounds.get_physical_size() }
/// Returns the hidpi factor of the bounds
#[no_mangle] pub extern "C" fn az_hidpi_adjusted_bounds_get_hidpi_factor(hidpiadjustedbounds: &AzHidpiAdjustedBounds) -> f32 { hidpiadjustedbounds.get_hidpi_factor() }

/// Re-export of rust-allocated (stack based) `LayoutCallback` struct
pub type AzLayoutCallbackTT = azul_impl::callbacks::LayoutCallback;
pub use AzLayoutCallbackTT as AzLayoutCallback;

/// The layout() callback fn
pub type AzLayoutCallbackType = extern "C" fn(&AzRefAny, AzLayoutInfo) -> AzStyledDom;
/// Re-export of rust-allocated (stack based) `Callback` struct
pub type AzCallbackTT = azul_impl::callbacks::Callback;
pub use AzCallbackTT as AzCallback;

/// Defines the focus target for the next frame
pub type AzFocusTargetTT = azul_impl::callbacks::FocusTarget;
pub use AzFocusTargetTT as AzFocusTarget;
/// Destructor: Takes ownership of the `FocusTarget` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_focus_target_delete(object: &mut AzFocusTarget) { match object { azul_impl::callbacks::FocusTarget::Id(_) => { }, azul_impl::callbacks::FocusTarget::Path(_) => { }, azul_impl::callbacks::FocusTarget::PreviousFocusItem => { }, azul_impl::callbacks::FocusTarget::NextFocusItem => { }, azul_impl::callbacks::FocusTarget::NoFocus => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_focus_target_deep_copy(object: &AzFocusTarget) -> AzFocusTarget { object.clone() }

/// Re-export of rust-allocated (stack based) `FocusTargetPath` struct
pub type AzFocusTargetPathTT = azul_impl::callbacks::FocusTargetPath;
pub use AzFocusTargetPathTT as AzFocusTargetPath;
/// Destructor: Takes ownership of the `FocusTargetPath` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_focus_target_path_delete(object: &mut AzFocusTargetPath) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_focus_target_path_deep_copy(object: &AzFocusTargetPath) -> AzFocusTargetPath { object.clone() }

pub type AzCallbackReturn = AzUpdateScreen;
/// Callback for responding to window events
pub type AzCallbackType = extern "C" fn(&mut AzRefAny, AzCallbackInfo) -> AzCallbackReturn;
/// Re-export of rust-allocated (stack based) `CallbackInfo` struct
pub type AzCallbackInfoTT = azul_impl::callbacks::CallbackInfo;
pub use AzCallbackInfoTT as AzCallbackInfo;
/// Returns the `DomNodeId` of the element that the callback was attached to.
#[no_mangle] pub extern "C" fn az_callback_info_get_hit_node(callbackinfo: &AzCallbackInfo) -> AzDomNodeId { callbackinfo.get_hit_node() }
/// Returns the `LayoutPoint` of the cursor in the viewport (relative to the origin of the `Dom`). Set to `None` if the cursor is not in the current window.
#[no_mangle] pub extern "C" fn az_callback_info_get_cursor_relative_to_viewport(callbackinfo: &AzCallbackInfo) -> AzOptionLayoutPoint { callbackinfo.get_cursor_relative_to_viewport() }
/// Returns the `LayoutPoint` of the cursor in the viewport (relative to the origin of the `Dom`). Set to `None` if the cursor is not hovering over the current node.
#[no_mangle] pub extern "C" fn az_callback_info_get_cursor_relative_to_node(callbackinfo: &AzCallbackInfo) -> AzOptionLayoutPoint { callbackinfo.get_cursor_relative_to_node() }
/// Returns the parent `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid NodeId.
#[no_mangle] pub extern "C" fn az_callback_info_get_parent(callbackinfo: &AzCallbackInfo, node_id: AzDomNodeId) -> AzOptionDomNodeId { callbackinfo.get_parent(node_id).into() }
/// Returns the previous siblings `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid NodeId.
#[no_mangle] pub extern "C" fn az_callback_info_get_previous_sibling(callbackinfo: &AzCallbackInfo, node_id: AzDomNodeId) -> AzOptionDomNodeId { callbackinfo.get_previous_sibling(node_id).into() }
/// Returns the next siblings `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid NodeId.
#[no_mangle] pub extern "C" fn az_callback_info_get_next_sibling(callbackinfo: &AzCallbackInfo, node_id: AzDomNodeId) -> AzOptionDomNodeId { callbackinfo.get_next_sibling(node_id).into() }
/// Returns the next siblings `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid NodeId.
#[no_mangle] pub extern "C" fn az_callback_info_get_first_child(callbackinfo: &AzCallbackInfo, node_id: AzDomNodeId) -> AzOptionDomNodeId { callbackinfo.get_first_child(node_id).into() }
/// Returns the next siblings `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid NodeId.
#[no_mangle] pub extern "C" fn az_callback_info_get_last_child(callbackinfo: &AzCallbackInfo, node_id: AzDomNodeId) -> AzOptionDomNodeId { callbackinfo.get_last_child(node_id).into() }
/// Returns the `Dataset` of the given `DomNodeId`. Returns `None` on an invalid NodeId.
#[no_mangle] pub extern "C" fn az_callback_info_get_dataset(callbackinfo: &AzCallbackInfo, node_id: AzDomNodeId) -> AzOptionRefAny { callbackinfo.get_dataset(node_id).into() }
/// Returns a copy of the current windows `WindowState`.
#[no_mangle] pub extern "C" fn az_callback_info_get_window_state(callbackinfo: &AzCallbackInfo) -> AzWindowState { callbackinfo.get_window_state() }
/// Returns a copy of the internal `KeyboardState`. Same as `self.get_window_state().keyboard_state`
#[no_mangle] pub extern "C" fn az_callback_info_get_keyboard_state(callbackinfo: &AzCallbackInfo) -> AzKeyboardState { callbackinfo.get_keyboard_state() }
/// Returns a copy of the internal `MouseState`. Same as `self.get_window_state().mouse_state`
#[no_mangle] pub extern "C" fn az_callback_info_get_mouse_state(callbackinfo: &AzCallbackInfo) -> AzMouseState { callbackinfo.get_mouse_state() }
/// Returns a copy of the current windows `RawWindowHandle`.
#[no_mangle] pub extern "C" fn az_callback_info_get_current_window_handle(callbackinfo: &AzCallbackInfo) -> AzRawWindowHandle { callbackinfo.get_current_window_handle() }
/// Returns a **reference-counted copy** of the current windows `GlContextPtr`. You can use this to render OpenGL textures.
#[no_mangle] pub extern "C" fn az_callback_info_get_gl_context(callbackinfo: &AzCallbackInfo) -> AzGlContextPtr { callbackinfo.get_gl_context() }
/// Sets the new `WindowState` for the next frame. The window is updated after all callbacks are run.
#[no_mangle] pub extern "C" fn az_callback_info_set_window_state(callbackinfo: &mut AzCallbackInfo, new_state: AzWindowState) { callbackinfo.set_window_state(new_state); }
/// Sets the new `FocusTarget` for the next frame. Note that this will emit a `On::FocusLost` and `On::FocusReceived` event, if the focused node has changed.
#[no_mangle] pub extern "C" fn az_callback_info_set_focus(callbackinfo: &mut AzCallbackInfo, target: AzFocusTarget) { callbackinfo.set_focus(target); }
/// Sets a `CssProperty` on a given ndoe to its new value. If this property change affects the layout, this will automatically trigger a relayout and redraw of the screen.
#[no_mangle] pub extern "C" fn az_callback_info_set_css_property(callbackinfo: &mut AzCallbackInfo, node_id: AzDomNodeId, new_property: AzCssProperty) { callbackinfo.set_css_property(node_id, new_property);  }
/// Stops the propagation of the current callback event type to the parent. Events are bubbled from the inside out (children first, then parents), this event stops the propagation of the event to the parent.
#[no_mangle] pub extern "C" fn az_callback_info_stop_propagation(callbackinfo: &mut AzCallbackInfo) { callbackinfo.stop_propagation(); }
/// Spawns a new window with the given `WindowCreateOptions`.
#[no_mangle] pub extern "C" fn az_callback_info_create_window(callbackinfo: &mut AzCallbackInfo, new_window: AzWindowCreateOptions) { callbackinfo.create_window(new_window); }
/// Starts a new `Thread` to the runtime. See the documentation for `Thread` for more information.
#[no_mangle] pub extern "C" fn az_callback_info_start_thread(callbackinfo: &mut AzCallbackInfo, id: AzThreadId, thread_initialize_data: AzRefAny, writeback_data: AzRefAny, callback: AzThreadCallbackType) { callbackinfo.start_thread(id, thread_initialize_data, writeback_data, callback); }
/// Adds a new `Timer` to the runtime. See the documentation for `Timer` for more information.
#[no_mangle] pub extern "C" fn az_callback_info_start_timer(callbackinfo: &mut AzCallbackInfo, id: AzTimerId, timer: AzTimer) { callbackinfo.start_timer(id, timer); }
/// Destructor: Takes ownership of the `CallbackInfo` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_callback_info_delete(object: &mut AzCallbackInfo) { }

/// Specifies if the screen should be updated after the callback function has returned
pub type AzUpdateScreenTT = azul_impl::callbacks::UpdateScreen;
pub use AzUpdateScreenTT as AzUpdateScreen;

/// Re-export of rust-allocated (stack based) `IFrameCallback` struct
pub type AzIFrameCallbackTT = azul_impl::callbacks::IFrameCallback;
pub use AzIFrameCallbackTT as AzIFrameCallback;

/// Callback for rendering iframes (infinite data structures that have to know how large they are rendered)
pub type AzIFrameCallbackType = extern "C" fn(&AzRefAny, AzIFrameCallbackInfo) -> AzIFrameCallbackReturn;
/// Re-export of rust-allocated (stack based) `IFrameCallbackInfo` struct
pub type AzIFrameCallbackInfoTT = azul_impl::callbacks::IFrameCallbackInfo;
pub use AzIFrameCallbackInfoTT as AzIFrameCallbackInfo;
/// Returns a copy of the IFrame bounds
#[no_mangle] pub extern "C" fn az_i_frame_callback_info_get_bounds(iframecallbackinfo: &AzIFrameCallbackInfo) -> AzHidpiAdjustedBounds { iframecallbackinfo.get_bounds() }
/// Destructor: Takes ownership of the `IFrameCallbackInfo` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_i_frame_callback_info_delete(object: &mut AzIFrameCallbackInfo) { }

/// Re-export of rust-allocated (stack based) `IFrameCallbackReturn` struct
pub type AzIFrameCallbackReturnTT = azul_impl::callbacks::IFrameCallbackReturn;
pub use AzIFrameCallbackReturnTT as AzIFrameCallbackReturn;
/// Destructor: Takes ownership of the `IFrameCallbackReturn` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_i_frame_callback_return_delete(object: &mut AzIFrameCallbackReturn) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_i_frame_callback_return_deep_copy(object: &AzIFrameCallbackReturn) -> AzIFrameCallbackReturn { object.clone() }

/// Re-export of rust-allocated (stack based) `GlCallback` struct
pub type AzGlCallbackTT = azul_impl::callbacks::GlCallback;
pub use AzGlCallbackTT as AzGlCallback;

/// Callback for rendering to an OpenGL texture
pub type AzGlCallbackType = extern "C" fn(&AzRefAny, AzGlCallbackInfo) -> AzGlCallbackReturn;
/// Re-export of rust-allocated (stack based) `GlCallbackInfo` struct
pub type AzGlCallbackInfoTT = azul_impl::callbacks::GlCallbackInfo;
pub use AzGlCallbackInfoTT as AzGlCallbackInfo;
/// Returns a copy of the internal `GlContextPtr`
#[no_mangle] pub extern "C" fn az_gl_callback_info_get_gl_context(glcallbackinfo: &AzGlCallbackInfo) -> AzGlContextPtr { glcallbackinfo.get_gl_context() }
/// Destructor: Takes ownership of the `GlCallbackInfo` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_gl_callback_info_delete(object: &mut AzGlCallbackInfo) { }

/// Re-export of rust-allocated (stack based) `GlCallbackReturn` struct
pub type AzGlCallbackReturnTT = azul_impl::callbacks::GlCallbackReturn;
pub use AzGlCallbackReturnTT as AzGlCallbackReturn;
/// Destructor: Takes ownership of the `GlCallbackReturn` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_gl_callback_return_delete(object: &mut AzGlCallbackReturn) { }

/// Re-export of rust-allocated (stack based) `TimerCallback` struct
pub type AzTimerCallbackTT = azul_impl::callbacks::TimerCallback;
pub use AzTimerCallbackTT as AzTimerCallback;

pub type AzTimerCallbackType = extern "C" fn(&mut AzRefAny, &mut AzRefAny, AzTimerCallbackInfo) -> AzTimerCallbackReturn;
/// Re-export of rust-allocated (stack based) `TimerCallbackInfo` struct
pub type AzTimerCallbackInfoTT = azul_impl::callbacks::TimerCallbackInfo;
pub use AzTimerCallbackInfoTT as AzTimerCallbackInfo;
/// Destructor: Takes ownership of the `TimerCallbackInfo` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_timer_callback_info_delete(object: &mut AzTimerCallbackInfo) { }

/// Re-export of rust-allocated (stack based) `TimerCallbackReturn` struct
pub type AzTimerCallbackReturnTT = azul_impl::callbacks::TimerCallbackReturn;
pub use AzTimerCallbackReturnTT as AzTimerCallbackReturn;
/// Destructor: Takes ownership of the `TimerCallbackReturn` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_timer_callback_return_delete(object: &mut AzTimerCallbackReturn) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_timer_callback_return_deep_copy(object: &AzTimerCallbackReturn) -> AzTimerCallbackReturn { object.clone() }

pub type AzWriteBackCallbackType = extern "C" fn(&mut AzRefAny, AzRefAny, AzCallbackInfo) -> AzUpdateScreen;
/// Re-export of rust-allocated (stack based) `WriteBackCallback` struct
pub type AzWriteBackCallbackTT = azul_impl::callbacks::WriteBackCallback;
pub use AzWriteBackCallbackTT as AzWriteBackCallback;
/// Destructor: Takes ownership of the `WriteBackCallback` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_write_back_callback_delete(object: &mut AzWriteBackCallback) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_write_back_callback_deep_copy(object: &AzWriteBackCallback) -> AzWriteBackCallback { object.clone() }

pub type AzThreadCallbackType = extern "C" fn(AzRefAny, AzThreadSender, AzThreadReceiver);
pub type AzRefAnyDestructorType = extern "C" fn(*const c_void);

/// Re-export of rust-allocated (stack based) `AtomicRefCount` struct
pub type AzAtomicRefCountTT = azul_impl::callbacks::AtomicRefCount;
pub use AzAtomicRefCountTT as AzAtomicRefCount;
/// Equivalent to the Rust `AtomicRefCount::can_be_shared()` function.
#[no_mangle] pub extern "C" fn az_atomic_ref_count_can_be_shared(atomicrefcount: &AzAtomicRefCount) -> bool { atomicrefcount.can_be_shared() }
/// Equivalent to the Rust `AtomicRefCount::can_be_shared_mut()` function.
#[no_mangle] pub extern "C" fn az_atomic_ref_count_can_be_shared_mut(atomicrefcount: &AzAtomicRefCount) -> bool { atomicrefcount.can_be_shared_mut() }
/// Equivalent to the Rust `AtomicRefCount::increase_ref()` function.
#[no_mangle] pub extern "C" fn az_atomic_ref_count_increase_ref(atomicrefcount: &AzAtomicRefCount) { atomicrefcount.increase_ref() }
/// Equivalent to the Rust `AtomicRefCount::decrease_ref()` function.
#[no_mangle] pub extern "C" fn az_atomic_ref_count_decrease_ref(atomicrefcount: &AzAtomicRefCount) { atomicrefcount.decrease_ref() }
/// Equivalent to the Rust `AtomicRefCount::increase_refmut()` function.
#[no_mangle] pub extern "C" fn az_atomic_ref_count_increase_refmut(atomicrefcount: &AzAtomicRefCount) { atomicrefcount.increase_refmut() }
/// Equivalent to the Rust `AtomicRefCount::decrease_refmut()` function.
#[no_mangle] pub extern "C" fn az_atomic_ref_count_decrease_refmut(atomicrefcount: &AzAtomicRefCount) { atomicrefcount.decrease_refmut() }
/// Destructor: Takes ownership of the `AtomicRefCount` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_atomic_ref_count_delete(object: &mut AzAtomicRefCount) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_atomic_ref_count_deep_copy(object: &AzAtomicRefCount) -> AzAtomicRefCount { object.clone() }
/// Creates a string with the debug representation of the object
#[no_mangle] pub extern "C" fn az_atomic_ref_count_fmt_debug(object: &AzAtomicRefCount) -> AzString { format!("{:#?}", object).into() }

/// RefAny is a reference-counted, type-erased pointer, which stores a reference to a struct. `RefAny` can be up- and downcasted (this usually done via generics and can't be expressed in the Rust API)
pub type AzRefAnyTT = azul_impl::callbacks::RefAny;
pub use AzRefAnyTT as AzRefAny;
/// Creates a new `RefAny` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `RefAny::new_c()` constructor.
#[no_mangle] pub extern "C" fn az_ref_any_new_c(ptr: *const c_void, len: usize, type_id: u64, type_name: AzString, destructor: AzRefAnyDestructorType) -> AzRefAny { RefAny::new_c(ptr, len, type_id, type_name, destructor) }
/// Equivalent to the Rust `RefAny::is_type()` function.
#[no_mangle] pub extern "C" fn az_ref_any_is_type(refany: &AzRefAny, type_id: u64) -> bool { refany.is_type(type_id) }
/// Equivalent to the Rust `RefAny::get_type_name()` function.
#[no_mangle] pub extern "C" fn az_ref_any_get_type_name(refany: &AzRefAny) -> AzString { refany.get_type_name() }
/// Equivalent to the Rust `RefAny::can_be_shared()` function.
#[no_mangle] pub extern "C" fn az_ref_any_can_be_shared(refany: &AzRefAny) -> bool { refany.can_be_shared() }
/// Equivalent to the Rust `RefAny::can_be_shared_mut()` function.
#[no_mangle] pub extern "C" fn az_ref_any_can_be_shared_mut(refany: &AzRefAny) -> bool { refany.can_be_shared_mut() }
/// Equivalent to the Rust `RefAny::increase_ref()` function.
#[no_mangle] pub extern "C" fn az_ref_any_increase_ref(refany: &AzRefAny) { refany.increase_ref() }
/// Equivalent to the Rust `RefAny::decrease_ref()` function.
#[no_mangle] pub extern "C" fn az_ref_any_decrease_ref(refany: &AzRefAny) { refany.decrease_ref() }
/// Equivalent to the Rust `RefAny::increase_refmut()` function.
#[no_mangle] pub extern "C" fn az_ref_any_increase_refmut(refany: &AzRefAny) { refany.increase_refmut() }
/// Equivalent to the Rust `RefAny::decrease_refmut()` function.
#[no_mangle] pub extern "C" fn az_ref_any_decrease_refmut(refany: &AzRefAny) { refany.decrease_refmut() }
/// Destructor: Takes ownership of the `RefAny` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_ref_any_delete(object: &mut AzRefAny) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_ref_any_deep_copy(object: &AzRefAny) -> AzRefAny { object.clone() }

/// Re-export of rust-allocated (stack based) `LayoutInfo` struct
pub type AzLayoutInfoTT = azul_impl::callbacks::LayoutInfo;
pub use AzLayoutInfoTT as AzLayoutInfo;
/// Equivalent to the Rust `LayoutInfo::window_width_larger_than()` function.
#[no_mangle] pub extern "C" fn az_layout_info_window_width_larger_than(layoutinfo: &mut AzLayoutInfo, width: f32) -> bool { layoutinfo.window_width_larger_than(width) }
/// Equivalent to the Rust `LayoutInfo::window_width_smaller_than()` function.
#[no_mangle] pub extern "C" fn az_layout_info_window_width_smaller_than(layoutinfo: &mut AzLayoutInfo, width: f32) -> bool { layoutinfo.window_width_smaller_than(width) }
/// Equivalent to the Rust `LayoutInfo::window_height_larger_than()` function.
#[no_mangle] pub extern "C" fn az_layout_info_window_height_larger_than(layoutinfo: &mut AzLayoutInfo, width: f32) -> bool { layoutinfo.window_height_larger_than(width) }
/// Equivalent to the Rust `LayoutInfo::window_height_smaller_than()` function.
#[no_mangle] pub extern "C" fn az_layout_info_window_height_smaller_than(layoutinfo: &mut AzLayoutInfo, width: f32) -> bool { layoutinfo.window_height_smaller_than(width) }
/// Destructor: Takes ownership of the `LayoutInfo` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_layout_info_delete(object: &mut AzLayoutInfo) { }

/// Re-export of rust-allocated (stack based) `CssRuleBlock` struct
pub type AzCssRuleBlockTT = azul_impl::css::CssRuleBlock;
pub use AzCssRuleBlockTT as AzCssRuleBlock;
/// Destructor: Takes ownership of the `CssRuleBlock` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_css_rule_block_delete(object: &mut AzCssRuleBlock) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_css_rule_block_deep_copy(object: &AzCssRuleBlock) -> AzCssRuleBlock { object.clone() }

/// Re-export of rust-allocated (stack based) `CssDeclaration` struct
pub type AzCssDeclarationTT = azul_impl::css::CssDeclaration;
pub use AzCssDeclarationTT as AzCssDeclaration;
/// Destructor: Takes ownership of the `CssDeclaration` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_css_declaration_delete(object: &mut AzCssDeclaration) { match object { azul_impl::css::CssDeclaration::Static(_) => { }, azul_impl::css::CssDeclaration::Dynamic(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_css_declaration_deep_copy(object: &AzCssDeclaration) -> AzCssDeclaration { object.clone() }

/// Re-export of rust-allocated (stack based) `DynamicCssProperty` struct
pub type AzDynamicCssPropertyTT = azul_impl::css::DynamicCssProperty;
pub use AzDynamicCssPropertyTT as AzDynamicCssProperty;
/// Destructor: Takes ownership of the `DynamicCssProperty` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_dynamic_css_property_delete(object: &mut AzDynamicCssProperty) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_dynamic_css_property_deep_copy(object: &AzDynamicCssProperty) -> AzDynamicCssProperty { object.clone() }

/// Re-export of rust-allocated (stack based) `CssPath` struct
pub type AzCssPathTT = azul_impl::css::CssPath;
pub use AzCssPathTT as AzCssPath;
/// Destructor: Takes ownership of the `CssPath` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_css_path_delete(object: &mut AzCssPath) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_css_path_deep_copy(object: &AzCssPath) -> AzCssPath { object.clone() }

/// Re-export of rust-allocated (stack based) `CssPathSelector` struct
pub type AzCssPathSelectorTT = azul_impl::css::CssPathSelector;
pub use AzCssPathSelectorTT as AzCssPathSelector;
/// Destructor: Takes ownership of the `CssPathSelector` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_css_path_selector_delete(object: &mut AzCssPathSelector) { match object { azul_impl::css::CssPathSelector::Global => { }, azul_impl::css::CssPathSelector::Type(_) => { }, azul_impl::css::CssPathSelector::Class(_) => { }, azul_impl::css::CssPathSelector::Id(_) => { }, azul_impl::css::CssPathSelector::PseudoSelector(_) => { }, azul_impl::css::CssPathSelector::DirectChildren => { }, azul_impl::css::CssPathSelector::Children => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_css_path_selector_deep_copy(object: &AzCssPathSelector) -> AzCssPathSelector { object.clone() }

/// Re-export of rust-allocated (stack based) `NodeTypePath` struct
pub type AzNodeTypePathTT = azul_impl::css::NodeTypePath;
pub use AzNodeTypePathTT as AzNodeTypePath;

/// Re-export of rust-allocated (stack based) `CssPathPseudoSelector` struct
pub type AzCssPathPseudoSelectorTT = azul_impl::css::CssPathPseudoSelector;
pub use AzCssPathPseudoSelectorTT as AzCssPathPseudoSelector;

/// Re-export of rust-allocated (stack based) `CssNthChildSelector` struct
pub type AzCssNthChildSelectorTT = azul_impl::css::CssNthChildSelector;
pub use AzCssNthChildSelectorTT as AzCssNthChildSelector;

/// Re-export of rust-allocated (stack based) `CssNthChildPattern` struct
pub type AzCssNthChildPatternTT = azul_impl::css::CssNthChildPattern;
pub use AzCssNthChildPatternTT as AzCssNthChildPattern;

/// Re-export of rust-allocated (stack based) `Stylesheet` struct
pub type AzStylesheetTT = azul_impl::css::Stylesheet;
pub use AzStylesheetTT as AzStylesheet;
/// Destructor: Takes ownership of the `Stylesheet` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_stylesheet_delete(object: &mut AzStylesheet) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_stylesheet_deep_copy(object: &AzStylesheet) -> AzStylesheet { object.clone() }

/// Re-export of rust-allocated (stack based) `Css` struct
pub type AzCssTT = azul_impl::css::Css;
pub use AzCssTT as AzCss;
/// Returns an empty CSS style
#[no_mangle] pub extern "C" fn az_css_empty() -> AzCss { AzCss::empty() }
/// Returns a CSS style parsed from a `String`
#[no_mangle] pub extern "C" fn az_css_from_string(s: AzString) -> AzCss { css::from_str(s.as_str()).unwrap_or_default() }
/// Destructor: Takes ownership of the `Css` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_css_delete(object: &mut AzCss) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_css_deep_copy(object: &AzCss) -> AzCss { object.clone() }

/// Re-export of rust-allocated (stack based) `CssPropertyType` struct
pub type AzCssPropertyTypeTT = azul_impl::css::CssPropertyType;
pub use AzCssPropertyTypeTT as AzCssPropertyType;

/// Re-export of rust-allocated (stack based) `ColorU` struct
pub type AzColorUTT = azul_impl::css::ColorU;
pub use AzColorUTT as AzColorU;
/// Creates a new `ColorU` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `ColorU::from_str()` constructor.
#[no_mangle] pub extern "C" fn az_color_u_from_str(string: AzString) -> AzColorU { azul_impl::css::css_parser::parse_css_color(string.as_str()).ok().unwrap_or(ColorU::BLACK) }
/// Equivalent to the Rust `ColorU::to_hash()` function.
#[no_mangle] pub extern "C" fn az_color_u_to_hash(coloru: &AzColorU) -> AzString { coloru.to_hash().into() }

/// Re-export of rust-allocated (stack based) `SizeMetric` struct
pub type AzSizeMetricTT = azul_impl::css::SizeMetric;
pub use AzSizeMetricTT as AzSizeMetric;

/// Re-export of rust-allocated (stack based) `FloatValue` struct
pub type AzFloatValueTT = azul_impl::css::FloatValue;
pub use AzFloatValueTT as AzFloatValue;

/// Re-export of rust-allocated (stack based) `PixelValue` struct
pub type AzPixelValueTT = azul_impl::css::PixelValue;
pub use AzPixelValueTT as AzPixelValue;

/// Re-export of rust-allocated (stack based) `PixelValueNoPercent` struct
pub type AzPixelValueNoPercentTT = azul_impl::css::PixelValueNoPercent;
pub use AzPixelValueNoPercentTT as AzPixelValueNoPercent;

/// Re-export of rust-allocated (stack based) `BoxShadowClipMode` struct
pub type AzBoxShadowClipModeTT = azul_impl::css::BoxShadowClipMode;
pub use AzBoxShadowClipModeTT as AzBoxShadowClipMode;

/// Re-export of rust-allocated (stack based) `BoxShadowPreDisplayItem` struct
pub type AzBoxShadowPreDisplayItemTT = azul_impl::css::BoxShadowPreDisplayItem;
pub use AzBoxShadowPreDisplayItemTT as AzBoxShadowPreDisplayItem;

/// Re-export of rust-allocated (stack based) `LayoutAlignContent` struct
pub type AzLayoutAlignContentTT = azul_impl::css::LayoutAlignContent;
pub use AzLayoutAlignContentTT as AzLayoutAlignContent;

/// Re-export of rust-allocated (stack based) `LayoutAlignItems` struct
pub type AzLayoutAlignItemsTT = azul_impl::css::LayoutAlignItems;
pub use AzLayoutAlignItemsTT as AzLayoutAlignItems;

/// Re-export of rust-allocated (stack based) `LayoutBottom` struct
pub type AzLayoutBottomTT = azul_impl::css::LayoutBottom;
pub use AzLayoutBottomTT as AzLayoutBottom;

/// Re-export of rust-allocated (stack based) `LayoutBoxSizing` struct
pub type AzLayoutBoxSizingTT = azul_impl::css::LayoutBoxSizing;
pub use AzLayoutBoxSizingTT as AzLayoutBoxSizing;

/// Re-export of rust-allocated (stack based) `LayoutFlexDirection` struct
pub type AzLayoutFlexDirectionTT = azul_impl::css::LayoutFlexDirection;
pub use AzLayoutFlexDirectionTT as AzLayoutFlexDirection;

/// Re-export of rust-allocated (stack based) `LayoutDisplay` struct
pub type AzLayoutDisplayTT = azul_impl::css::LayoutDisplay;
pub use AzLayoutDisplayTT as AzLayoutDisplay;

/// Re-export of rust-allocated (stack based) `LayoutFlexGrow` struct
pub type AzLayoutFlexGrowTT = azul_impl::css::LayoutFlexGrow;
pub use AzLayoutFlexGrowTT as AzLayoutFlexGrow;

/// Re-export of rust-allocated (stack based) `LayoutFlexShrink` struct
pub type AzLayoutFlexShrinkTT = azul_impl::css::LayoutFlexShrink;
pub use AzLayoutFlexShrinkTT as AzLayoutFlexShrink;

/// Re-export of rust-allocated (stack based) `LayoutFloat` struct
pub type AzLayoutFloatTT = azul_impl::css::LayoutFloat;
pub use AzLayoutFloatTT as AzLayoutFloat;

/// Re-export of rust-allocated (stack based) `LayoutHeight` struct
pub type AzLayoutHeightTT = azul_impl::css::LayoutHeight;
pub use AzLayoutHeightTT as AzLayoutHeight;

/// Re-export of rust-allocated (stack based) `LayoutJustifyContent` struct
pub type AzLayoutJustifyContentTT = azul_impl::css::LayoutJustifyContent;
pub use AzLayoutJustifyContentTT as AzLayoutJustifyContent;

/// Re-export of rust-allocated (stack based) `LayoutLeft` struct
pub type AzLayoutLeftTT = azul_impl::css::LayoutLeft;
pub use AzLayoutLeftTT as AzLayoutLeft;

/// Re-export of rust-allocated (stack based) `LayoutMarginBottom` struct
pub type AzLayoutMarginBottomTT = azul_impl::css::LayoutMarginBottom;
pub use AzLayoutMarginBottomTT as AzLayoutMarginBottom;

/// Re-export of rust-allocated (stack based) `LayoutMarginLeft` struct
pub type AzLayoutMarginLeftTT = azul_impl::css::LayoutMarginLeft;
pub use AzLayoutMarginLeftTT as AzLayoutMarginLeft;

/// Re-export of rust-allocated (stack based) `LayoutMarginRight` struct
pub type AzLayoutMarginRightTT = azul_impl::css::LayoutMarginRight;
pub use AzLayoutMarginRightTT as AzLayoutMarginRight;

/// Re-export of rust-allocated (stack based) `LayoutMarginTop` struct
pub type AzLayoutMarginTopTT = azul_impl::css::LayoutMarginTop;
pub use AzLayoutMarginTopTT as AzLayoutMarginTop;

/// Re-export of rust-allocated (stack based) `LayoutMaxHeight` struct
pub type AzLayoutMaxHeightTT = azul_impl::css::LayoutMaxHeight;
pub use AzLayoutMaxHeightTT as AzLayoutMaxHeight;

/// Re-export of rust-allocated (stack based) `LayoutMaxWidth` struct
pub type AzLayoutMaxWidthTT = azul_impl::css::LayoutMaxWidth;
pub use AzLayoutMaxWidthTT as AzLayoutMaxWidth;

/// Re-export of rust-allocated (stack based) `LayoutMinHeight` struct
pub type AzLayoutMinHeightTT = azul_impl::css::LayoutMinHeight;
pub use AzLayoutMinHeightTT as AzLayoutMinHeight;

/// Re-export of rust-allocated (stack based) `LayoutMinWidth` struct
pub type AzLayoutMinWidthTT = azul_impl::css::LayoutMinWidth;
pub use AzLayoutMinWidthTT as AzLayoutMinWidth;

/// Re-export of rust-allocated (stack based) `LayoutPaddingBottom` struct
pub type AzLayoutPaddingBottomTT = azul_impl::css::LayoutPaddingBottom;
pub use AzLayoutPaddingBottomTT as AzLayoutPaddingBottom;

/// Re-export of rust-allocated (stack based) `LayoutPaddingLeft` struct
pub type AzLayoutPaddingLeftTT = azul_impl::css::LayoutPaddingLeft;
pub use AzLayoutPaddingLeftTT as AzLayoutPaddingLeft;

/// Re-export of rust-allocated (stack based) `LayoutPaddingRight` struct
pub type AzLayoutPaddingRightTT = azul_impl::css::LayoutPaddingRight;
pub use AzLayoutPaddingRightTT as AzLayoutPaddingRight;

/// Re-export of rust-allocated (stack based) `LayoutPaddingTop` struct
pub type AzLayoutPaddingTopTT = azul_impl::css::LayoutPaddingTop;
pub use AzLayoutPaddingTopTT as AzLayoutPaddingTop;

/// Re-export of rust-allocated (stack based) `LayoutPosition` struct
pub type AzLayoutPositionTT = azul_impl::css::LayoutPosition;
pub use AzLayoutPositionTT as AzLayoutPosition;

/// Re-export of rust-allocated (stack based) `LayoutRight` struct
pub type AzLayoutRightTT = azul_impl::css::LayoutRight;
pub use AzLayoutRightTT as AzLayoutRight;

/// Re-export of rust-allocated (stack based) `LayoutTop` struct
pub type AzLayoutTopTT = azul_impl::css::LayoutTop;
pub use AzLayoutTopTT as AzLayoutTop;

/// Re-export of rust-allocated (stack based) `LayoutWidth` struct
pub type AzLayoutWidthTT = azul_impl::css::LayoutWidth;
pub use AzLayoutWidthTT as AzLayoutWidth;

/// Re-export of rust-allocated (stack based) `LayoutWrap` struct
pub type AzLayoutWrapTT = azul_impl::css::LayoutWrap;
pub use AzLayoutWrapTT as AzLayoutWrap;

/// Re-export of rust-allocated (stack based) `Overflow` struct
pub type AzOverflowTT = azul_impl::css::Overflow;
pub use AzOverflowTT as AzOverflow;

/// Re-export of rust-allocated (stack based) `PercentageValue` struct
pub type AzPercentageValueTT = azul_impl::css::PercentageValue;
pub use AzPercentageValueTT as AzPercentageValue;

/// Re-export of rust-allocated (stack based) `GradientStopPre` struct
pub type AzGradientStopPreTT = azul_impl::css::GradientStopPre;
pub use AzGradientStopPreTT as AzGradientStopPre;

/// Re-export of rust-allocated (stack based) `DirectionCorner` struct
pub type AzDirectionCornerTT = azul_impl::css::DirectionCorner;
pub use AzDirectionCornerTT as AzDirectionCorner;

/// Re-export of rust-allocated (stack based) `DirectionCorners` struct
pub type AzDirectionCornersTT = azul_impl::css::DirectionCorners;
pub use AzDirectionCornersTT as AzDirectionCorners;

/// Re-export of rust-allocated (stack based) `Direction` struct
pub type AzDirectionTT = azul_impl::css::Direction;
pub use AzDirectionTT as AzDirection;

/// Re-export of rust-allocated (stack based) `ExtendMode` struct
pub type AzExtendModeTT = azul_impl::css::ExtendMode;
pub use AzExtendModeTT as AzExtendMode;

/// Re-export of rust-allocated (stack based) `LinearGradient` struct
pub type AzLinearGradientTT = azul_impl::css::LinearGradient;
pub use AzLinearGradientTT as AzLinearGradient;
/// Destructor: Takes ownership of the `LinearGradient` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_linear_gradient_delete(object: &mut AzLinearGradient) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_linear_gradient_deep_copy(object: &AzLinearGradient) -> AzLinearGradient { object.clone() }

/// Re-export of rust-allocated (stack based) `Shape` struct
pub type AzShapeTT = azul_impl::css::Shape;
pub use AzShapeTT as AzShape;

/// Re-export of rust-allocated (stack based) `RadialGradient` struct
pub type AzRadialGradientTT = azul_impl::css::RadialGradient;
pub use AzRadialGradientTT as AzRadialGradient;
/// Destructor: Takes ownership of the `RadialGradient` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_radial_gradient_delete(object: &mut AzRadialGradient) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_radial_gradient_deep_copy(object: &AzRadialGradient) -> AzRadialGradient { object.clone() }

/// Re-export of rust-allocated (stack based) `CssImageId` struct
pub type AzCssImageIdTT = azul_impl::css::CssImageId;
pub use AzCssImageIdTT as AzCssImageId;
/// Destructor: Takes ownership of the `CssImageId` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_css_image_id_delete(object: &mut AzCssImageId) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_css_image_id_deep_copy(object: &AzCssImageId) -> AzCssImageId { object.clone() }

/// Re-export of rust-allocated (stack based) `StyleBackgroundContent` struct
pub type AzStyleBackgroundContentTT = azul_impl::css::StyleBackgroundContent;
pub use AzStyleBackgroundContentTT as AzStyleBackgroundContent;
/// Destructor: Takes ownership of the `StyleBackgroundContent` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_background_content_delete(object: &mut AzStyleBackgroundContent) { match object { azul_impl::css::StyleBackgroundContent::LinearGradient(_) => { }, azul_impl::css::StyleBackgroundContent::RadialGradient(_) => { }, azul_impl::css::StyleBackgroundContent::Image(_) => { }, azul_impl::css::StyleBackgroundContent::Color(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_background_content_deep_copy(object: &AzStyleBackgroundContent) -> AzStyleBackgroundContent { object.clone() }

/// Re-export of rust-allocated (stack based) `BackgroundPositionHorizontal` struct
pub type AzBackgroundPositionHorizontalTT = azul_impl::css::BackgroundPositionHorizontal;
pub use AzBackgroundPositionHorizontalTT as AzBackgroundPositionHorizontal;

/// Re-export of rust-allocated (stack based) `BackgroundPositionVertical` struct
pub type AzBackgroundPositionVerticalTT = azul_impl::css::BackgroundPositionVertical;
pub use AzBackgroundPositionVerticalTT as AzBackgroundPositionVertical;

/// Re-export of rust-allocated (stack based) `StyleBackgroundPosition` struct
pub type AzStyleBackgroundPositionTT = azul_impl::css::StyleBackgroundPosition;
pub use AzStyleBackgroundPositionTT as AzStyleBackgroundPosition;

/// Re-export of rust-allocated (stack based) `StyleBackgroundRepeat` struct
pub type AzStyleBackgroundRepeatTT = azul_impl::css::StyleBackgroundRepeat;
pub use AzStyleBackgroundRepeatTT as AzStyleBackgroundRepeat;

/// Re-export of rust-allocated (stack based) `StyleBackgroundSize` struct
pub type AzStyleBackgroundSizeTT = azul_impl::css::StyleBackgroundSize;
pub use AzStyleBackgroundSizeTT as AzStyleBackgroundSize;

/// Re-export of rust-allocated (stack based) `StyleBorderBottomColor` struct
pub type AzStyleBorderBottomColorTT = azul_impl::css::StyleBorderBottomColor;
pub use AzStyleBorderBottomColorTT as AzStyleBorderBottomColor;

/// Re-export of rust-allocated (stack based) `StyleBorderBottomLeftRadius` struct
pub type AzStyleBorderBottomLeftRadiusTT = azul_impl::css::StyleBorderBottomLeftRadius;
pub use AzStyleBorderBottomLeftRadiusTT as AzStyleBorderBottomLeftRadius;

/// Re-export of rust-allocated (stack based) `StyleBorderBottomRightRadius` struct
pub type AzStyleBorderBottomRightRadiusTT = azul_impl::css::StyleBorderBottomRightRadius;
pub use AzStyleBorderBottomRightRadiusTT as AzStyleBorderBottomRightRadius;

/// Re-export of rust-allocated (stack based) `BorderStyle` struct
pub type AzBorderStyleTT = azul_impl::css::BorderStyle;
pub use AzBorderStyleTT as AzBorderStyle;

/// Re-export of rust-allocated (stack based) `StyleBorderBottomStyle` struct
pub type AzStyleBorderBottomStyleTT = azul_impl::css::StyleBorderBottomStyle;
pub use AzStyleBorderBottomStyleTT as AzStyleBorderBottomStyle;

/// Re-export of rust-allocated (stack based) `StyleBorderBottomWidth` struct
pub type AzStyleBorderBottomWidthTT = azul_impl::css::StyleBorderBottomWidth;
pub use AzStyleBorderBottomWidthTT as AzStyleBorderBottomWidth;

/// Re-export of rust-allocated (stack based) `StyleBorderLeftColor` struct
pub type AzStyleBorderLeftColorTT = azul_impl::css::StyleBorderLeftColor;
pub use AzStyleBorderLeftColorTT as AzStyleBorderLeftColor;

/// Re-export of rust-allocated (stack based) `StyleBorderLeftStyle` struct
pub type AzStyleBorderLeftStyleTT = azul_impl::css::StyleBorderLeftStyle;
pub use AzStyleBorderLeftStyleTT as AzStyleBorderLeftStyle;

/// Re-export of rust-allocated (stack based) `StyleBorderLeftWidth` struct
pub type AzStyleBorderLeftWidthTT = azul_impl::css::StyleBorderLeftWidth;
pub use AzStyleBorderLeftWidthTT as AzStyleBorderLeftWidth;

/// Re-export of rust-allocated (stack based) `StyleBorderRightColor` struct
pub type AzStyleBorderRightColorTT = azul_impl::css::StyleBorderRightColor;
pub use AzStyleBorderRightColorTT as AzStyleBorderRightColor;

/// Re-export of rust-allocated (stack based) `StyleBorderRightStyle` struct
pub type AzStyleBorderRightStyleTT = azul_impl::css::StyleBorderRightStyle;
pub use AzStyleBorderRightStyleTT as AzStyleBorderRightStyle;

/// Re-export of rust-allocated (stack based) `StyleBorderRightWidth` struct
pub type AzStyleBorderRightWidthTT = azul_impl::css::StyleBorderRightWidth;
pub use AzStyleBorderRightWidthTT as AzStyleBorderRightWidth;

/// Re-export of rust-allocated (stack based) `StyleBorderTopColor` struct
pub type AzStyleBorderTopColorTT = azul_impl::css::StyleBorderTopColor;
pub use AzStyleBorderTopColorTT as AzStyleBorderTopColor;

/// Re-export of rust-allocated (stack based) `StyleBorderTopLeftRadius` struct
pub type AzStyleBorderTopLeftRadiusTT = azul_impl::css::StyleBorderTopLeftRadius;
pub use AzStyleBorderTopLeftRadiusTT as AzStyleBorderTopLeftRadius;

/// Re-export of rust-allocated (stack based) `StyleBorderTopRightRadius` struct
pub type AzStyleBorderTopRightRadiusTT = azul_impl::css::StyleBorderTopRightRadius;
pub use AzStyleBorderTopRightRadiusTT as AzStyleBorderTopRightRadius;

/// Re-export of rust-allocated (stack based) `StyleBorderTopStyle` struct
pub type AzStyleBorderTopStyleTT = azul_impl::css::StyleBorderTopStyle;
pub use AzStyleBorderTopStyleTT as AzStyleBorderTopStyle;

/// Re-export of rust-allocated (stack based) `StyleBorderTopWidth` struct
pub type AzStyleBorderTopWidthTT = azul_impl::css::StyleBorderTopWidth;
pub use AzStyleBorderTopWidthTT as AzStyleBorderTopWidth;

/// Re-export of rust-allocated (stack based) `StyleCursor` struct
pub type AzStyleCursorTT = azul_impl::css::StyleCursor;
pub use AzStyleCursorTT as AzStyleCursor;

/// Re-export of rust-allocated (stack based) `StyleFontFamily` struct
pub type AzStyleFontFamilyTT = azul_impl::css::StyleFontFamily;
pub use AzStyleFontFamilyTT as AzStyleFontFamily;
/// Destructor: Takes ownership of the `StyleFontFamily` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_font_family_delete(object: &mut AzStyleFontFamily) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_font_family_deep_copy(object: &AzStyleFontFamily) -> AzStyleFontFamily { object.clone() }

/// Re-export of rust-allocated (stack based) `StyleFontSize` struct
pub type AzStyleFontSizeTT = azul_impl::css::StyleFontSize;
pub use AzStyleFontSizeTT as AzStyleFontSize;

/// Re-export of rust-allocated (stack based) `StyleLetterSpacing` struct
pub type AzStyleLetterSpacingTT = azul_impl::css::StyleLetterSpacing;
pub use AzStyleLetterSpacingTT as AzStyleLetterSpacing;

/// Re-export of rust-allocated (stack based) `StyleLineHeight` struct
pub type AzStyleLineHeightTT = azul_impl::css::StyleLineHeight;
pub use AzStyleLineHeightTT as AzStyleLineHeight;

/// Re-export of rust-allocated (stack based) `StyleTabWidth` struct
pub type AzStyleTabWidthTT = azul_impl::css::StyleTabWidth;
pub use AzStyleTabWidthTT as AzStyleTabWidth;

/// Re-export of rust-allocated (stack based) `StyleOpacity` struct
pub type AzStyleOpacityTT = azul_impl::css::StyleOpacity;
pub use AzStyleOpacityTT as AzStyleOpacity;

/// Re-export of rust-allocated (stack based) `StyleTransformOrigin` struct
pub type AzStyleTransformOriginTT = azul_impl::css::StyleTransformOrigin;
pub use AzStyleTransformOriginTT as AzStyleTransformOrigin;

/// Re-export of rust-allocated (stack based) `StylePerspectiveOrigin` struct
pub type AzStylePerspectiveOriginTT = azul_impl::css::StyleTransformOrigin;
pub use AzStylePerspectiveOriginTT as AzStylePerspectiveOrigin;

/// Re-export of rust-allocated (stack based) `StyleBackfaceVisibility` struct
pub type AzStyleBackfaceVisibilityTT = azul_impl::css::StyleBackfaceVisibility;
pub use AzStyleBackfaceVisibilityTT as AzStyleBackfaceVisibility;

/// Re-export of rust-allocated (stack based) `StyleTransform` struct
pub type AzStyleTransformTT = azul_impl::css::StyleTransform;
pub use AzStyleTransformTT as AzStyleTransform;

/// Re-export of rust-allocated (stack based) `StyleTransformMatrix2D` struct
pub type AzStyleTransformMatrix2DTT = azul_impl::css::StyleTransformMatrix2D;
pub use AzStyleTransformMatrix2DTT as AzStyleTransformMatrix2D;

/// Re-export of rust-allocated (stack based) `StyleTransformMatrix3D` struct
pub type AzStyleTransformMatrix3DTT = azul_impl::css::StyleTransformMatrix3D;
pub use AzStyleTransformMatrix3DTT as AzStyleTransformMatrix3D;

/// Re-export of rust-allocated (stack based) `StyleTransformTranslate2D` struct
pub type AzStyleTransformTranslate2DTT = azul_impl::css::StyleTransformTranslate2D;
pub use AzStyleTransformTranslate2DTT as AzStyleTransformTranslate2D;

/// Re-export of rust-allocated (stack based) `StyleTransformTranslate3D` struct
pub type AzStyleTransformTranslate3DTT = azul_impl::css::StyleTransformTranslate3D;
pub use AzStyleTransformTranslate3DTT as AzStyleTransformTranslate3D;

/// Re-export of rust-allocated (stack based) `StyleTransformRotate3D` struct
pub type AzStyleTransformRotate3DTT = azul_impl::css::StyleTransformRotate3D;
pub use AzStyleTransformRotate3DTT as AzStyleTransformRotate3D;

/// Re-export of rust-allocated (stack based) `StyleTransformScale2D` struct
pub type AzStyleTransformScale2DTT = azul_impl::css::StyleTransformScale2D;
pub use AzStyleTransformScale2DTT as AzStyleTransformScale2D;

/// Re-export of rust-allocated (stack based) `StyleTransformScale3D` struct
pub type AzStyleTransformScale3DTT = azul_impl::css::StyleTransformScale3D;
pub use AzStyleTransformScale3DTT as AzStyleTransformScale3D;

/// Re-export of rust-allocated (stack based) `StyleTransformSkew2D` struct
pub type AzStyleTransformSkew2DTT = azul_impl::css::StyleTransformSkew2D;
pub use AzStyleTransformSkew2DTT as AzStyleTransformSkew2D;

/// Re-export of rust-allocated (stack based) `StyleTextAlignmentHorz` struct
pub type AzStyleTextAlignmentHorzTT = azul_impl::css::StyleTextAlignmentHorz;
pub use AzStyleTextAlignmentHorzTT as AzStyleTextAlignmentHorz;

/// Re-export of rust-allocated (stack based) `StyleTextColor` struct
pub type AzStyleTextColorTT = azul_impl::css::StyleTextColor;
pub use AzStyleTextColorTT as AzStyleTextColor;

/// Re-export of rust-allocated (stack based) `StyleWordSpacing` struct
pub type AzStyleWordSpacingTT = azul_impl::css::StyleWordSpacing;
pub use AzStyleWordSpacingTT as AzStyleWordSpacing;

/// Re-export of rust-allocated (stack based) `BoxShadowPreDisplayItemValue` struct
pub type AzBoxShadowPreDisplayItemValueTT = azul_impl::css::CssPropertyValue::<BoxShadowPreDisplayItem>;
pub use AzBoxShadowPreDisplayItemValueTT as AzBoxShadowPreDisplayItemValue;

/// Re-export of rust-allocated (stack based) `LayoutAlignContentValue` struct
pub type AzLayoutAlignContentValueTT = azul_impl::css::CssPropertyValue::<LayoutAlignContent>;
pub use AzLayoutAlignContentValueTT as AzLayoutAlignContentValue;

/// Re-export of rust-allocated (stack based) `LayoutAlignItemsValue` struct
pub type AzLayoutAlignItemsValueTT = azul_impl::css::CssPropertyValue::<LayoutAlignItems>;
pub use AzLayoutAlignItemsValueTT as AzLayoutAlignItemsValue;

/// Re-export of rust-allocated (stack based) `LayoutBottomValue` struct
pub type AzLayoutBottomValueTT = azul_impl::css::CssPropertyValue::<LayoutBottom>;
pub use AzLayoutBottomValueTT as AzLayoutBottomValue;

/// Re-export of rust-allocated (stack based) `LayoutBoxSizingValue` struct
pub type AzLayoutBoxSizingValueTT = azul_impl::css::CssPropertyValue::<LayoutBoxSizing>;
pub use AzLayoutBoxSizingValueTT as AzLayoutBoxSizingValue;

/// Re-export of rust-allocated (stack based) `LayoutFlexDirectionValue` struct
pub type AzLayoutFlexDirectionValueTT = azul_impl::css::CssPropertyValue::<LayoutFlexDirection>;
pub use AzLayoutFlexDirectionValueTT as AzLayoutFlexDirectionValue;

/// Re-export of rust-allocated (stack based) `LayoutDisplayValue` struct
pub type AzLayoutDisplayValueTT = azul_impl::css::CssPropertyValue::<LayoutDisplay>;
pub use AzLayoutDisplayValueTT as AzLayoutDisplayValue;

/// Re-export of rust-allocated (stack based) `LayoutFlexGrowValue` struct
pub type AzLayoutFlexGrowValueTT = azul_impl::css::CssPropertyValue::<LayoutFlexGrow>;
pub use AzLayoutFlexGrowValueTT as AzLayoutFlexGrowValue;

/// Re-export of rust-allocated (stack based) `LayoutFlexShrinkValue` struct
pub type AzLayoutFlexShrinkValueTT = azul_impl::css::CssPropertyValue::<LayoutFlexShrink>;
pub use AzLayoutFlexShrinkValueTT as AzLayoutFlexShrinkValue;

/// Re-export of rust-allocated (stack based) `LayoutFloatValue` struct
pub type AzLayoutFloatValueTT = azul_impl::css::CssPropertyValue::<LayoutFloat>;
pub use AzLayoutFloatValueTT as AzLayoutFloatValue;

/// Re-export of rust-allocated (stack based) `LayoutHeightValue` struct
pub type AzLayoutHeightValueTT = azul_impl::css::CssPropertyValue::<LayoutHeight>;
pub use AzLayoutHeightValueTT as AzLayoutHeightValue;

/// Re-export of rust-allocated (stack based) `LayoutJustifyContentValue` struct
pub type AzLayoutJustifyContentValueTT = azul_impl::css::CssPropertyValue::<LayoutJustifyContent>;
pub use AzLayoutJustifyContentValueTT as AzLayoutJustifyContentValue;

/// Re-export of rust-allocated (stack based) `LayoutLeftValue` struct
pub type AzLayoutLeftValueTT = azul_impl::css::CssPropertyValue::<LayoutLeft>;
pub use AzLayoutLeftValueTT as AzLayoutLeftValue;

/// Re-export of rust-allocated (stack based) `LayoutMarginBottomValue` struct
pub type AzLayoutMarginBottomValueTT = azul_impl::css::CssPropertyValue::<LayoutMarginBottom>;
pub use AzLayoutMarginBottomValueTT as AzLayoutMarginBottomValue;

/// Re-export of rust-allocated (stack based) `LayoutMarginLeftValue` struct
pub type AzLayoutMarginLeftValueTT = azul_impl::css::CssPropertyValue::<LayoutMarginLeft>;
pub use AzLayoutMarginLeftValueTT as AzLayoutMarginLeftValue;

/// Re-export of rust-allocated (stack based) `LayoutMarginRightValue` struct
pub type AzLayoutMarginRightValueTT = azul_impl::css::CssPropertyValue::<LayoutMarginRight>;
pub use AzLayoutMarginRightValueTT as AzLayoutMarginRightValue;

/// Re-export of rust-allocated (stack based) `LayoutMarginTopValue` struct
pub type AzLayoutMarginTopValueTT = azul_impl::css::CssPropertyValue::<LayoutMarginTop>;
pub use AzLayoutMarginTopValueTT as AzLayoutMarginTopValue;

/// Re-export of rust-allocated (stack based) `LayoutMaxHeightValue` struct
pub type AzLayoutMaxHeightValueTT = azul_impl::css::CssPropertyValue::<LayoutMaxHeight>;
pub use AzLayoutMaxHeightValueTT as AzLayoutMaxHeightValue;

/// Re-export of rust-allocated (stack based) `LayoutMaxWidthValue` struct
pub type AzLayoutMaxWidthValueTT = azul_impl::css::CssPropertyValue::<LayoutMaxWidth>;
pub use AzLayoutMaxWidthValueTT as AzLayoutMaxWidthValue;

/// Re-export of rust-allocated (stack based) `LayoutMinHeightValue` struct
pub type AzLayoutMinHeightValueTT = azul_impl::css::CssPropertyValue::<LayoutMinHeight>;
pub use AzLayoutMinHeightValueTT as AzLayoutMinHeightValue;

/// Re-export of rust-allocated (stack based) `LayoutMinWidthValue` struct
pub type AzLayoutMinWidthValueTT = azul_impl::css::CssPropertyValue::<LayoutMinWidth>;
pub use AzLayoutMinWidthValueTT as AzLayoutMinWidthValue;

/// Re-export of rust-allocated (stack based) `LayoutPaddingBottomValue` struct
pub type AzLayoutPaddingBottomValueTT = azul_impl::css::CssPropertyValue::<LayoutPaddingBottom>;
pub use AzLayoutPaddingBottomValueTT as AzLayoutPaddingBottomValue;

/// Re-export of rust-allocated (stack based) `LayoutPaddingLeftValue` struct
pub type AzLayoutPaddingLeftValueTT = azul_impl::css::CssPropertyValue::<LayoutPaddingLeft>;
pub use AzLayoutPaddingLeftValueTT as AzLayoutPaddingLeftValue;

/// Re-export of rust-allocated (stack based) `LayoutPaddingRightValue` struct
pub type AzLayoutPaddingRightValueTT = azul_impl::css::CssPropertyValue::<LayoutPaddingRight>;
pub use AzLayoutPaddingRightValueTT as AzLayoutPaddingRightValue;

/// Re-export of rust-allocated (stack based) `LayoutPaddingTopValue` struct
pub type AzLayoutPaddingTopValueTT = azul_impl::css::CssPropertyValue::<LayoutPaddingTop>;
pub use AzLayoutPaddingTopValueTT as AzLayoutPaddingTopValue;

/// Re-export of rust-allocated (stack based) `LayoutPositionValue` struct
pub type AzLayoutPositionValueTT = azul_impl::css::CssPropertyValue::<LayoutPosition>;
pub use AzLayoutPositionValueTT as AzLayoutPositionValue;

/// Re-export of rust-allocated (stack based) `LayoutRightValue` struct
pub type AzLayoutRightValueTT = azul_impl::css::CssPropertyValue::<LayoutRight>;
pub use AzLayoutRightValueTT as AzLayoutRightValue;

/// Re-export of rust-allocated (stack based) `LayoutTopValue` struct
pub type AzLayoutTopValueTT = azul_impl::css::CssPropertyValue::<LayoutTop>;
pub use AzLayoutTopValueTT as AzLayoutTopValue;

/// Re-export of rust-allocated (stack based) `LayoutWidthValue` struct
pub type AzLayoutWidthValueTT = azul_impl::css::CssPropertyValue::<LayoutWidth>;
pub use AzLayoutWidthValueTT as AzLayoutWidthValue;

/// Re-export of rust-allocated (stack based) `LayoutWrapValue` struct
pub type AzLayoutWrapValueTT = azul_impl::css::CssPropertyValue::<LayoutWrap>;
pub use AzLayoutWrapValueTT as AzLayoutWrapValue;

/// Re-export of rust-allocated (stack based) `OverflowValue` struct
pub type AzOverflowValueTT = azul_impl::css::CssPropertyValue::<Overflow>;
pub use AzOverflowValueTT as AzOverflowValue;

/// Re-export of rust-allocated (stack based) `StyleBackgroundContentValue` struct
pub type AzStyleBackgroundContentValueTT = azul_impl::css::CssPropertyValue::<StyleBackgroundContent>;
pub use AzStyleBackgroundContentValueTT as AzStyleBackgroundContentValue;
/// Destructor: Takes ownership of the `StyleBackgroundContentValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_background_content_value_delete(object: &mut AzStyleBackgroundContentValue) { match object { azul_impl::css::CssPropertyValue::<StyleBackgroundContent>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleBackgroundContent>::None => { }, azul_impl::css::CssPropertyValue::<StyleBackgroundContent>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleBackgroundContent>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleBackgroundContent>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_background_content_value_deep_copy(object: &AzStyleBackgroundContentValue) -> AzStyleBackgroundContentValue { object.clone() }

/// Re-export of rust-allocated (stack based) `StyleBackgroundPositionValue` struct
pub type AzStyleBackgroundPositionValueTT = azul_impl::css::CssPropertyValue::<StyleBackgroundPosition>;
pub use AzStyleBackgroundPositionValueTT as AzStyleBackgroundPositionValue;

/// Re-export of rust-allocated (stack based) `StyleBackgroundRepeatValue` struct
pub type AzStyleBackgroundRepeatValueTT = azul_impl::css::CssPropertyValue::<StyleBackgroundRepeat>;
pub use AzStyleBackgroundRepeatValueTT as AzStyleBackgroundRepeatValue;

/// Re-export of rust-allocated (stack based) `StyleBackgroundSizeValue` struct
pub type AzStyleBackgroundSizeValueTT = azul_impl::css::CssPropertyValue::<StyleBackgroundSize>;
pub use AzStyleBackgroundSizeValueTT as AzStyleBackgroundSizeValue;

/// Re-export of rust-allocated (stack based) `StyleBorderBottomColorValue` struct
pub type AzStyleBorderBottomColorValueTT = azul_impl::css::CssPropertyValue::<StyleBorderBottomColor>;
pub use AzStyleBorderBottomColorValueTT as AzStyleBorderBottomColorValue;

/// Re-export of rust-allocated (stack based) `StyleBorderBottomLeftRadiusValue` struct
pub type AzStyleBorderBottomLeftRadiusValueTT = azul_impl::css::CssPropertyValue::<StyleBorderBottomLeftRadius>;
pub use AzStyleBorderBottomLeftRadiusValueTT as AzStyleBorderBottomLeftRadiusValue;

/// Re-export of rust-allocated (stack based) `StyleBorderBottomRightRadiusValue` struct
pub type AzStyleBorderBottomRightRadiusValueTT = azul_impl::css::CssPropertyValue::<StyleBorderBottomRightRadius>;
pub use AzStyleBorderBottomRightRadiusValueTT as AzStyleBorderBottomRightRadiusValue;

/// Re-export of rust-allocated (stack based) `StyleBorderBottomStyleValue` struct
pub type AzStyleBorderBottomStyleValueTT = azul_impl::css::CssPropertyValue::<StyleBorderBottomStyle>;
pub use AzStyleBorderBottomStyleValueTT as AzStyleBorderBottomStyleValue;

/// Re-export of rust-allocated (stack based) `StyleBorderBottomWidthValue` struct
pub type AzStyleBorderBottomWidthValueTT = azul_impl::css::CssPropertyValue::<StyleBorderBottomWidth>;
pub use AzStyleBorderBottomWidthValueTT as AzStyleBorderBottomWidthValue;

/// Re-export of rust-allocated (stack based) `StyleBorderLeftColorValue` struct
pub type AzStyleBorderLeftColorValueTT = azul_impl::css::CssPropertyValue::<StyleBorderLeftColor>;
pub use AzStyleBorderLeftColorValueTT as AzStyleBorderLeftColorValue;

/// Re-export of rust-allocated (stack based) `StyleBorderLeftStyleValue` struct
pub type AzStyleBorderLeftStyleValueTT = azul_impl::css::CssPropertyValue::<StyleBorderLeftStyle>;
pub use AzStyleBorderLeftStyleValueTT as AzStyleBorderLeftStyleValue;

/// Re-export of rust-allocated (stack based) `StyleBorderLeftWidthValue` struct
pub type AzStyleBorderLeftWidthValueTT = azul_impl::css::CssPropertyValue::<StyleBorderLeftWidth>;
pub use AzStyleBorderLeftWidthValueTT as AzStyleBorderLeftWidthValue;

/// Re-export of rust-allocated (stack based) `StyleBorderRightColorValue` struct
pub type AzStyleBorderRightColorValueTT = azul_impl::css::CssPropertyValue::<StyleBorderRightColor>;
pub use AzStyleBorderRightColorValueTT as AzStyleBorderRightColorValue;

/// Re-export of rust-allocated (stack based) `StyleBorderRightStyleValue` struct
pub type AzStyleBorderRightStyleValueTT = azul_impl::css::CssPropertyValue::<StyleBorderRightStyle>;
pub use AzStyleBorderRightStyleValueTT as AzStyleBorderRightStyleValue;

/// Re-export of rust-allocated (stack based) `StyleBorderRightWidthValue` struct
pub type AzStyleBorderRightWidthValueTT = azul_impl::css::CssPropertyValue::<StyleBorderRightWidth>;
pub use AzStyleBorderRightWidthValueTT as AzStyleBorderRightWidthValue;

/// Re-export of rust-allocated (stack based) `StyleBorderTopColorValue` struct
pub type AzStyleBorderTopColorValueTT = azul_impl::css::CssPropertyValue::<StyleBorderTopColor>;
pub use AzStyleBorderTopColorValueTT as AzStyleBorderTopColorValue;

/// Re-export of rust-allocated (stack based) `StyleBorderTopLeftRadiusValue` struct
pub type AzStyleBorderTopLeftRadiusValueTT = azul_impl::css::CssPropertyValue::<StyleBorderTopLeftRadius>;
pub use AzStyleBorderTopLeftRadiusValueTT as AzStyleBorderTopLeftRadiusValue;

/// Re-export of rust-allocated (stack based) `StyleBorderTopRightRadiusValue` struct
pub type AzStyleBorderTopRightRadiusValueTT = azul_impl::css::CssPropertyValue::<StyleBorderTopRightRadius>;
pub use AzStyleBorderTopRightRadiusValueTT as AzStyleBorderTopRightRadiusValue;

/// Re-export of rust-allocated (stack based) `StyleBorderTopStyleValue` struct
pub type AzStyleBorderTopStyleValueTT = azul_impl::css::CssPropertyValue::<StyleBorderTopStyle>;
pub use AzStyleBorderTopStyleValueTT as AzStyleBorderTopStyleValue;

/// Re-export of rust-allocated (stack based) `StyleBorderTopWidthValue` struct
pub type AzStyleBorderTopWidthValueTT = azul_impl::css::CssPropertyValue::<StyleBorderTopWidth>;
pub use AzStyleBorderTopWidthValueTT as AzStyleBorderTopWidthValue;

/// Re-export of rust-allocated (stack based) `StyleCursorValue` struct
pub type AzStyleCursorValueTT = azul_impl::css::CssPropertyValue::<StyleCursor>;
pub use AzStyleCursorValueTT as AzStyleCursorValue;

/// Re-export of rust-allocated (stack based) `StyleFontFamilyValue` struct
pub type AzStyleFontFamilyValueTT = azul_impl::css::CssPropertyValue::<StyleFontFamily>;
pub use AzStyleFontFamilyValueTT as AzStyleFontFamilyValue;
/// Destructor: Takes ownership of the `StyleFontFamilyValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_font_family_value_delete(object: &mut AzStyleFontFamilyValue) { match object { azul_impl::css::CssPropertyValue::<StyleFontFamily>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleFontFamily>::None => { }, azul_impl::css::CssPropertyValue::<StyleFontFamily>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleFontFamily>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleFontFamily>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_font_family_value_deep_copy(object: &AzStyleFontFamilyValue) -> AzStyleFontFamilyValue { object.clone() }

/// Re-export of rust-allocated (stack based) `StyleFontSizeValue` struct
pub type AzStyleFontSizeValueTT = azul_impl::css::CssPropertyValue::<StyleFontSize>;
pub use AzStyleFontSizeValueTT as AzStyleFontSizeValue;

/// Re-export of rust-allocated (stack based) `StyleLetterSpacingValue` struct
pub type AzStyleLetterSpacingValueTT = azul_impl::css::CssPropertyValue::<StyleLetterSpacing>;
pub use AzStyleLetterSpacingValueTT as AzStyleLetterSpacingValue;

/// Re-export of rust-allocated (stack based) `StyleLineHeightValue` struct
pub type AzStyleLineHeightValueTT = azul_impl::css::CssPropertyValue::<StyleLineHeight>;
pub use AzStyleLineHeightValueTT as AzStyleLineHeightValue;

/// Re-export of rust-allocated (stack based) `StyleTabWidthValue` struct
pub type AzStyleTabWidthValueTT = azul_impl::css::CssPropertyValue::<StyleTabWidth>;
pub use AzStyleTabWidthValueTT as AzStyleTabWidthValue;

/// Re-export of rust-allocated (stack based) `StyleTextAlignmentHorzValue` struct
pub type AzStyleTextAlignmentHorzValueTT = azul_impl::css::CssPropertyValue::<StyleTextAlignmentHorz>;
pub use AzStyleTextAlignmentHorzValueTT as AzStyleTextAlignmentHorzValue;

/// Re-export of rust-allocated (stack based) `StyleTextColorValue` struct
pub type AzStyleTextColorValueTT = azul_impl::css::CssPropertyValue::<StyleTextColor>;
pub use AzStyleTextColorValueTT as AzStyleTextColorValue;

/// Re-export of rust-allocated (stack based) `StyleWordSpacingValue` struct
pub type AzStyleWordSpacingValueTT = azul_impl::css::CssPropertyValue::<StyleWordSpacing>;
pub use AzStyleWordSpacingValueTT as AzStyleWordSpacingValue;

/// Re-export of rust-allocated (stack based) `StyleOpacityValue` struct
pub type AzStyleOpacityValueTT = azul_impl::css::CssPropertyValue::<StyleOpacity>;
pub use AzStyleOpacityValueTT as AzStyleOpacityValue;

/// Re-export of rust-allocated (stack based) `StyleTransformVecValue` struct
pub type AzStyleTransformVecValueTT = azul_impl::css::CssPropertyValue::<StyleTransformVec>;
pub use AzStyleTransformVecValueTT as AzStyleTransformVecValue;
/// Destructor: Takes ownership of the `StyleTransformVecValue` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_style_transform_vec_value_delete(object: &mut AzStyleTransformVecValue) { match object { azul_impl::css::CssPropertyValue::<StyleTransformVec>::Auto => { }, azul_impl::css::CssPropertyValue::<StyleTransformVec>::None => { }, azul_impl::css::CssPropertyValue::<StyleTransformVec>::Inherit => { }, azul_impl::css::CssPropertyValue::<StyleTransformVec>::Initial => { }, azul_impl::css::CssPropertyValue::<StyleTransformVec>::Exact(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_style_transform_vec_value_deep_copy(object: &AzStyleTransformVecValue) -> AzStyleTransformVecValue { object.clone() }

/// Re-export of rust-allocated (stack based) `StyleTransformOriginValue` struct
pub type AzStyleTransformOriginValueTT = azul_impl::css::CssPropertyValue::<StyleTransformOrigin>;
pub use AzStyleTransformOriginValueTT as AzStyleTransformOriginValue;

/// Re-export of rust-allocated (stack based) `StylePerspectiveOriginValue` struct
pub type AzStylePerspectiveOriginValueTT = azul_impl::css::CssPropertyValue::<StylePerspectiveOrigin>;
pub use AzStylePerspectiveOriginValueTT as AzStylePerspectiveOriginValue;

/// Re-export of rust-allocated (stack based) `StyleBackfaceVisibilityValue` struct
pub type AzStyleBackfaceVisibilityValueTT = azul_impl::css::CssPropertyValue::<StyleBackfaceVisibility>;
pub use AzStyleBackfaceVisibilityValueTT as AzStyleBackfaceVisibilityValue;

/// Parsed CSS key-value pair
pub type AzCssPropertyTT = azul_impl::css::CssProperty;
pub use AzCssPropertyTT as AzCssProperty;
/// Destructor: Takes ownership of the `CssProperty` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_css_property_delete(object: &mut AzCssProperty) { match object { azul_impl::css::CssProperty::TextColor(_) => { }, azul_impl::css::CssProperty::FontSize(_) => { }, azul_impl::css::CssProperty::FontFamily(_) => { }, azul_impl::css::CssProperty::TextAlign(_) => { }, azul_impl::css::CssProperty::LetterSpacing(_) => { }, azul_impl::css::CssProperty::LineHeight(_) => { }, azul_impl::css::CssProperty::WordSpacing(_) => { }, azul_impl::css::CssProperty::TabWidth(_) => { }, azul_impl::css::CssProperty::Cursor(_) => { }, azul_impl::css::CssProperty::Display(_) => { }, azul_impl::css::CssProperty::Float(_) => { }, azul_impl::css::CssProperty::BoxSizing(_) => { }, azul_impl::css::CssProperty::Width(_) => { }, azul_impl::css::CssProperty::Height(_) => { }, azul_impl::css::CssProperty::MinWidth(_) => { }, azul_impl::css::CssProperty::MinHeight(_) => { }, azul_impl::css::CssProperty::MaxWidth(_) => { }, azul_impl::css::CssProperty::MaxHeight(_) => { }, azul_impl::css::CssProperty::Position(_) => { }, azul_impl::css::CssProperty::Top(_) => { }, azul_impl::css::CssProperty::Right(_) => { }, azul_impl::css::CssProperty::Left(_) => { }, azul_impl::css::CssProperty::Bottom(_) => { }, azul_impl::css::CssProperty::FlexWrap(_) => { }, azul_impl::css::CssProperty::FlexDirection(_) => { }, azul_impl::css::CssProperty::FlexGrow(_) => { }, azul_impl::css::CssProperty::FlexShrink(_) => { }, azul_impl::css::CssProperty::JustifyContent(_) => { }, azul_impl::css::CssProperty::AlignItems(_) => { }, azul_impl::css::CssProperty::AlignContent(_) => { }, azul_impl::css::CssProperty::BackgroundContent(_) => { }, azul_impl::css::CssProperty::BackgroundPosition(_) => { }, azul_impl::css::CssProperty::BackgroundSize(_) => { }, azul_impl::css::CssProperty::BackgroundRepeat(_) => { }, azul_impl::css::CssProperty::OverflowX(_) => { }, azul_impl::css::CssProperty::OverflowY(_) => { }, azul_impl::css::CssProperty::PaddingTop(_) => { }, azul_impl::css::CssProperty::PaddingLeft(_) => { }, azul_impl::css::CssProperty::PaddingRight(_) => { }, azul_impl::css::CssProperty::PaddingBottom(_) => { }, azul_impl::css::CssProperty::MarginTop(_) => { }, azul_impl::css::CssProperty::MarginLeft(_) => { }, azul_impl::css::CssProperty::MarginRight(_) => { }, azul_impl::css::CssProperty::MarginBottom(_) => { }, azul_impl::css::CssProperty::BorderTopLeftRadius(_) => { }, azul_impl::css::CssProperty::BorderTopRightRadius(_) => { }, azul_impl::css::CssProperty::BorderBottomLeftRadius(_) => { }, azul_impl::css::CssProperty::BorderBottomRightRadius(_) => { }, azul_impl::css::CssProperty::BorderTopColor(_) => { }, azul_impl::css::CssProperty::BorderRightColor(_) => { }, azul_impl::css::CssProperty::BorderLeftColor(_) => { }, azul_impl::css::CssProperty::BorderBottomColor(_) => { }, azul_impl::css::CssProperty::BorderTopStyle(_) => { }, azul_impl::css::CssProperty::BorderRightStyle(_) => { }, azul_impl::css::CssProperty::BorderLeftStyle(_) => { }, azul_impl::css::CssProperty::BorderBottomStyle(_) => { }, azul_impl::css::CssProperty::BorderTopWidth(_) => { }, azul_impl::css::CssProperty::BorderRightWidth(_) => { }, azul_impl::css::CssProperty::BorderLeftWidth(_) => { }, azul_impl::css::CssProperty::BorderBottomWidth(_) => { }, azul_impl::css::CssProperty::BoxShadowLeft(_) => { }, azul_impl::css::CssProperty::BoxShadowRight(_) => { }, azul_impl::css::CssProperty::BoxShadowTop(_) => { }, azul_impl::css::CssProperty::BoxShadowBottom(_) => { }, azul_impl::css::CssProperty::Opacity(_) => { }, azul_impl::css::CssProperty::Transform(_) => { }, azul_impl::css::CssProperty::TransformOrigin(_) => { }, azul_impl::css::CssProperty::PerspectiveOrigin(_) => { }, azul_impl::css::CssProperty::BackfaceVisibility(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_css_property_deep_copy(object: &AzCssProperty) -> AzCssProperty { object.clone() }

/// Re-export of rust-allocated (stack based) `Node` struct
pub type AzNodeTT = azul_impl::styled_dom::AzNode;
pub use AzNodeTT as AzNode;

/// Re-export of rust-allocated (stack based) `CascadeInfo` struct
pub type AzCascadeInfoTT = azul_impl::style::CascadeInfo;
pub use AzCascadeInfoTT as AzCascadeInfo;

/// Re-export of rust-allocated (stack based) `RectStyle` struct
pub type AzRectStyleTT = azul_impl::css::RectStyle;
pub use AzRectStyleTT as AzRectStyle;
/// Destructor: Takes ownership of the `RectStyle` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_rect_style_delete(object: &mut AzRectStyle) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_rect_style_deep_copy(object: &AzRectStyle) -> AzRectStyle { object.clone() }

/// Re-export of rust-allocated (stack based) `RectLayout` struct
pub type AzRectLayoutTT = azul_impl::css::RectLayout;
pub use AzRectLayoutTT as AzRectLayout;
/// Destructor: Takes ownership of the `RectLayout` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_rect_layout_delete(object: &mut AzRectLayout) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_rect_layout_deep_copy(object: &AzRectLayout) -> AzRectLayout { object.clone() }

/// Re-export of rust-allocated (stack based) `CascadedCssPropertyWithSource` struct
pub type AzCascadedCssPropertyWithSourceTT = azul_impl::styled_dom::CascadedCssPropertyWithSource;
pub use AzCascadedCssPropertyWithSourceTT as AzCascadedCssPropertyWithSource;
/// Destructor: Takes ownership of the `CascadedCssPropertyWithSource` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_cascaded_css_property_with_source_delete(object: &mut AzCascadedCssPropertyWithSource) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_cascaded_css_property_with_source_deep_copy(object: &AzCascadedCssPropertyWithSource) -> AzCascadedCssPropertyWithSource { object.clone() }

/// Re-export of rust-allocated (stack based) `CssPropertySource` struct
pub type AzCssPropertySourceTT = azul_impl::styled_dom::CssPropertySource;
pub use AzCssPropertySourceTT as AzCssPropertySource;
/// Destructor: Takes ownership of the `CssPropertySource` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_css_property_source_delete(object: &mut AzCssPropertySource) { match object { azul_impl::styled_dom::CssPropertySource::Css(_) => { }, azul_impl::styled_dom::CssPropertySource::Inline => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_css_property_source_deep_copy(object: &AzCssPropertySource) -> AzCssPropertySource { object.clone() }

/// Re-export of rust-allocated (stack based) `StyledNodeState` struct
pub type AzStyledNodeStateTT = azul_impl::styled_dom::StyledNodeState;
pub use AzStyledNodeStateTT as AzStyledNodeState;

/// Re-export of rust-allocated (stack based) `StyledNode` struct
pub type AzStyledNodeTT = azul_impl::styled_dom::StyledNode;
pub use AzStyledNodeTT as AzStyledNode;
/// Destructor: Takes ownership of the `StyledNode` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_styled_node_delete(object: &mut AzStyledNode) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_styled_node_deep_copy(object: &AzStyledNode) -> AzStyledNode { object.clone() }

/// Re-export of rust-allocated (stack based) `TagId` struct
pub type AzTagIdTT = azul_impl::styled_dom::AzTagId;
pub use AzTagIdTT as AzTagId;

/// Re-export of rust-allocated (stack based) `TagIdToNodeIdMapping` struct
pub type AzTagIdToNodeIdMappingTT = azul_impl::styled_dom::TagIdToNodeIdMapping;
pub use AzTagIdToNodeIdMappingTT as AzTagIdToNodeIdMapping;

/// Re-export of rust-allocated (stack based) `ParentWithNodeDepth` struct
pub type AzParentWithNodeDepthTT = azul_impl::styled_dom::ParentWithNodeDepth;
pub use AzParentWithNodeDepthTT as AzParentWithNodeDepth;

/// Re-export of rust-allocated (stack based) `ContentGroup` struct
pub type AzContentGroupTT = azul_impl::styled_dom::ContentGroup;
pub use AzContentGroupTT as AzContentGroup;
/// Destructor: Takes ownership of the `ContentGroup` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_content_group_delete(object: &mut AzContentGroup) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_content_group_deep_copy(object: &AzContentGroup) -> AzContentGroup { object.clone() }

/// Re-export of rust-allocated (stack based) `StyledDom` struct
pub type AzStyledDomTT = azul_impl::styled_dom::StyledDom;
pub use AzStyledDomTT as AzStyledDom;
/// Styles a `Dom` with the given `Css`, returning the `StyledDom` - complexity `O(count(dom_nodes) * count(css_blocks))`: make sure that the `Dom` and the `Css` are as small as possible, use inline CSS if the performance isn't good enough
#[no_mangle] pub extern "C" fn az_styled_dom_new(dom: AzDom, css: AzCss) -> AzStyledDom { AzStyledDom::new(dom, css) }
/// Appends an already styled list of DOM nodes to the current `dom.root` - complexity `O(count(dom.dom_nodes))`
#[no_mangle] pub extern "C" fn az_styled_dom_append(styleddom: &mut AzStyledDom, dom: AzStyledDom) { styleddom.append(dom); }
/// Destructor: Takes ownership of the `StyledDom` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_styled_dom_delete(object: &mut AzStyledDom) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_styled_dom_deep_copy(object: &AzStyledDom) -> AzStyledDom { object.clone() }

/// Re-export of rust-allocated (stack based) `Dom` struct
pub type AzDomTT = azul_impl::dom::Dom;
pub use AzDomTT as AzDom;
/// Creates a new node with the given `NodeType`
#[no_mangle] pub extern "C" fn az_dom_new(node_type: AzNodeType) -> AzDom { Dom::new(node_type) }
/// Creates a new `div` node
#[no_mangle] pub extern "C" fn az_dom_div() -> AzDom { Dom::div() }
/// Creates a new `body` node
#[no_mangle] pub extern "C" fn az_dom_body() -> AzDom { Dom::body() }
/// Creates a new `p` node with a given `String` as the text contents
#[no_mangle] pub extern "C" fn az_dom_label(text: AzString) -> AzDom { Dom::label(text) }
/// Creates a new `p` node from a (cached) text referenced by a `TextId`
#[no_mangle] pub extern "C" fn az_dom_text(text_id: AzTextId) -> AzDom { Dom::text(text_id) }
/// Creates a new `img` node from a (cached) text referenced by a `ImageId`
#[no_mangle] pub extern "C" fn az_dom_image(image_id: AzImageId) -> AzDom { Dom::image(image_id) }
/// Creates a new node which will render an OpenGL texture after the layout step is finished. See the documentation for [GlCallback]() for more info about OpenGL rendering callbacks.
#[no_mangle] pub extern "C" fn az_dom_gl_texture(data: AzRefAny, callback: AzGlCallbackType) -> AzDom { Dom::gl_texture(data, callback) }
/// Creates a new node with a callback that will return a `Dom` after being layouted. See the documentation for [IFrameCallback]() for more info about iframe callbacks.
#[no_mangle] pub extern "C" fn az_dom_iframe(data: AzRefAny, callback: AzIFrameCallbackType) -> AzDom { Dom::iframe(data, callback) }
/// Adds a CSS ID (`#something`) to the DOM node
#[no_mangle] pub extern "C" fn az_dom_add_id(dom: &mut AzDom, id: AzString) { dom.add_id(id); }
/// Same as [`Dom::add_id`](#method.add_id), but as a builder method
#[no_mangle] pub extern "C" fn az_dom_with_id(mut dom: AzDom, id: AzString) -> AzDom { az_dom_add_id(&mut dom, id); dom }
/// Same as calling [`Dom::add_id`](#method.add_id) for each CSS ID, but this function **replaces** all current CSS IDs
#[no_mangle] pub extern "C" fn az_dom_set_ids(dom: &mut AzDom, ids: AzStringVec) { dom.set_ids(ids); }
/// Same as [`Dom::set_ids`](#method.set_ids), but as a builder method
#[no_mangle] pub extern "C" fn az_dom_with_ids(mut dom: AzDom, ids: AzStringVec) -> AzDom { az_dom_set_ids(&mut dom, ids); dom }
/// Adds a CSS class (`.something`) to the DOM node
#[no_mangle] pub extern "C" fn az_dom_add_class(dom: &mut AzDom, class: AzString) { dom.add_class(class); }
/// Same as [`Dom::add_class`](#method.add_class), but as a builder method
#[no_mangle] pub extern "C" fn az_dom_with_class(mut dom: AzDom, class: AzString) -> AzDom { az_dom_add_class(&mut dom, class); dom }
/// Same as calling [`Dom::add_class`](#method.add_class) for each class, but this function **replaces** all current classes
#[no_mangle] pub extern "C" fn az_dom_set_classes(dom: &mut AzDom, classes: AzStringVec) { dom.set_classes(classes); }
/// Same as [`Dom::set_classes`](#method.set_classes), but as a builder method
#[no_mangle] pub extern "C" fn az_dom_with_classes(mut dom: AzDom, classes: AzStringVec) -> AzDom { az_dom_set_classes(&mut dom, classes); dom }
/// Adds a [`Callback`](callbacks/type.Callback) that acts on the `data` the `event` happens
#[no_mangle] pub extern "C" fn az_dom_add_callback(dom: &mut AzDom, event: AzEventFilter, data: AzRefAny, callback: AzCallbackType) { dom.add_callback(event, callback, data); }
/// Same as [`Dom::add_callback`](#method.add_callback), but as a builder method
#[no_mangle] pub extern "C" fn az_dom_with_callback(mut dom: AzDom, event: AzEventFilter, data: AzRefAny, callback: AzCallbackType) -> AzDom { az_dom_add_callback(&mut dom, event, data, callback); dom }
/// Adds a dataset to the `Dom` root
#[no_mangle] pub extern "C" fn az_dom_set_dataset(dom: &mut AzDom, data: AzRefAny) { dom.set_dataset(data); }
/// Same as [`Dom::set_dataset`](#method.set_dataset), but as a builder method
#[no_mangle] pub extern "C" fn az_dom_with_dataset(mut dom: AzDom, data: AzRefAny) -> AzDom { az_dom_set_dataset(&mut dom, data); dom }
/// Overrides the CSS property of this DOM node with a value (for example `"width = 200px"`)
#[no_mangle] pub extern "C" fn az_dom_add_inline_css(dom: &mut AzDom, prop: AzCssProperty) { dom.add_inline_css(prop); }
/// Same as [`Dom::add_inline_css`](#method.add_inline_css), but as a builder method
#[no_mangle] pub extern "C" fn az_dom_with_inline_css(mut dom: AzDom, prop: AzCssProperty) -> AzDom { az_dom_add_inline_css(&mut dom, prop); dom }
/// Equivalent to the Rust `Dom::set_inline_css_props()` function.
#[no_mangle] pub extern "C" fn az_dom_set_inline_css_props(dom: &mut AzDom, props: AzCssPropertyVec) { dom.set_inline_css_props(props); }
/// Same as [`Dom::set_inline_css_props`](#method.set_inline_css_props), but as a builder method
#[no_mangle] pub extern "C" fn az_dom_with_inline_css_props(mut dom: AzDom, props: AzCssPropertyVec) -> AzDom { az_dom_set_inline_css_props(&mut dom, props); dom }
/// Overrides the CSS property of this DOM node with a value (for example `"width = 200px"`)
#[no_mangle] pub extern "C" fn az_dom_add_inline_hover_css(dom: &mut AzDom, prop: AzCssProperty) { dom.add_inline_hover_css(prop); }
/// Same as [`Dom::add_inline_hover_css`](#method.add_inline_hover_css), but as a builder method
#[no_mangle] pub extern "C" fn az_dom_with_inline_hover_css(mut dom: AzDom, prop: AzCssProperty) -> AzDom { az_dom_add_inline_hover_css(&mut dom, prop); dom }
/// Equivalent to the Rust `Dom::set_inline_hover_css_props()` function.
#[no_mangle] pub extern "C" fn az_dom_set_inline_hover_css_props(dom: &mut AzDom, props: AzCssPropertyVec) { dom.set_inline_hover_css_props(props); }
/// Same as [`Dom::set_inline_hover_css_props`](#method.set_inline_hover_css_props), but as a builder method
#[no_mangle] pub extern "C" fn az_dom_with_inline_hover_css_props(mut dom: AzDom, props: AzCssPropertyVec) -> AzDom { az_dom_set_inline_hover_css_props(&mut dom, props); dom }
/// Overrides the CSS property of this DOM node with a value (for example `"width = 200px"`)
#[no_mangle] pub extern "C" fn az_dom_add_inline_active_css(dom: &mut AzDom, prop: AzCssProperty) { dom.add_inline_active_css(prop); }
/// Same as [`Dom::add_inline_active_css`](#method.add_inline_active_css), but as a builder method
#[no_mangle] pub extern "C" fn az_dom_with_inline_active_css(mut dom: AzDom, prop: AzCssProperty) -> AzDom { az_dom_add_inline_active_css(&mut dom, prop); dom }
/// Equivalent to the Rust `Dom::set_inline_active_css_props()` function.
#[no_mangle] pub extern "C" fn az_dom_set_inline_active_css_props(dom: &mut AzDom, props: AzCssPropertyVec) { dom.set_inline_active_css_props(props); }
/// Same as [`Dom::set_inline_active_css_props`](#method.set_inline_active_css_props), but as a builder method
#[no_mangle] pub extern "C" fn az_dom_with_inline_active_css_props(mut dom: AzDom, props: AzCssPropertyVec) -> AzDom { az_dom_set_inline_active_css_props(&mut dom, props); dom }
/// Overrides the CSS property of this DOM node with a value (for example `"width = 200px"`)
#[no_mangle] pub extern "C" fn az_dom_add_inline_focus_css(dom: &mut AzDom, prop: AzCssProperty) { dom.add_inline_focus_css(prop); }
/// Same as [`Dom::add_inline_focus_css`](#method.add_inline_active_css), but as a builder method
#[no_mangle] pub extern "C" fn az_dom_with_inline_focus_css(mut dom: AzDom, prop: AzCssProperty) -> AzDom { az_dom_add_inline_focus_css(&mut dom, prop); dom }
/// Equivalent to the Rust `Dom::set_inline_focus_css_props()` function.
#[no_mangle] pub extern "C" fn az_dom_set_inline_focus_css_props(dom: &mut AzDom, props: AzCssPropertyVec) { dom.set_inline_focus_css_props(props); }
/// Same as [`Dom::set_inline_focus_css_props`](#method.set_inline_focus_css_props), but as a builder method
#[no_mangle] pub extern "C" fn az_dom_with_inline_focus_css_props(mut dom: AzDom, props: AzCssPropertyVec) -> AzDom { az_dom_set_inline_focus_css_props(&mut dom, props); dom }
/// Sets the `is_draggable` attribute of this DOM node (default: false)
#[no_mangle] pub extern "C" fn az_dom_set_is_draggable(dom: &mut AzDom, is_draggable: bool) { dom.set_is_draggable(is_draggable); }
/// Same as [`Dom::set_clip_mask`](#method.set_clip_mask), but as a builder method
#[no_mangle] pub extern "C" fn az_dom_with_clip_mask(mut dom: AzDom, clip_mask: AzOptionImageMask) -> AzDom { az_dom_set_clip_mask(&mut dom, clip_mask); dom }
/// Sets the `clip_mask` attribute of this DOM node (default: None)
#[no_mangle] pub extern "C" fn az_dom_set_clip_mask(dom: &mut AzDom, clip_mask: AzOptionImageMask) { dom.set_clip_mask(clip_mask); }
/// Same as [`Dom::set_is_draggable`](#method.set_is_draggable), but as a builder method
#[no_mangle] pub extern "C" fn az_dom_is_draggable(mut dom: AzDom, is_draggable: bool) -> AzDom { az_dom_set_is_draggable(&mut dom, is_draggable); dom }
/// Sets the `tabindex` attribute of this DOM node (makes an element focusable - default: None)
#[no_mangle] pub extern "C" fn az_dom_set_tab_index(dom: &mut AzDom, tab_index: AzOptionTabIndex) { dom.set_tab_index(tab_index); }
/// Same as [`Dom::set_tab_index`](#method.set_tab_index), but as a builder method
#[no_mangle] pub extern "C" fn az_dom_with_tab_index(mut dom: AzDom, tab_index: AzOptionTabIndex) -> AzDom { az_dom_set_tab_index(&mut dom, tab_index); dom }
/// Reparents another `Dom` to be the child node of this `Dom`
#[no_mangle] pub extern "C" fn az_dom_add_child(dom: &mut AzDom, child: AzDom) { dom.add_child(child); }
/// Same as [`Dom::add_child`](#method.add_child), but as a builder method
#[no_mangle] pub extern "C" fn az_dom_with_child(mut dom: AzDom, child: AzDom) -> AzDom { az_dom_add_child(&mut dom, child); dom }
/// Returns the HTML String for this DOM
#[no_mangle] pub extern "C" fn az_dom_get_html_string(dom: &AzDom) -> AzString { dom.get_html_string().into() }
/// Returns the HTML String for this DOM
#[no_mangle] pub extern "C" fn az_dom_style(dom: AzDom, css: AzCss) -> AzStyledDom { dom.style(css) }
/// Destructor: Takes ownership of the `Dom` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_dom_delete(object: &mut AzDom) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_dom_deep_copy(object: &AzDom) -> AzDom { object.clone() }

/// Re-export of rust-allocated (stack based) `GlTextureNode` struct
pub type AzGlTextureNodeTT = azul_impl::dom::GlTextureNode;
pub use AzGlTextureNodeTT as AzGlTextureNode;
/// Destructor: Takes ownership of the `GlTextureNode` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_gl_texture_node_delete(object: &mut AzGlTextureNode) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_gl_texture_node_deep_copy(object: &AzGlTextureNode) -> AzGlTextureNode { object.clone() }

/// Re-export of rust-allocated (stack based) `IFrameNode` struct
pub type AzIFrameNodeTT = azul_impl::dom::IFrameNode;
pub use AzIFrameNodeTT as AzIFrameNode;
/// Destructor: Takes ownership of the `IFrameNode` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_i_frame_node_delete(object: &mut AzIFrameNode) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_i_frame_node_deep_copy(object: &AzIFrameNode) -> AzIFrameNode { object.clone() }

/// Re-export of rust-allocated (stack based) `CallbackData` struct
pub type AzCallbackDataTT = azul_impl::dom::CallbackData;
pub use AzCallbackDataTT as AzCallbackData;
/// Destructor: Takes ownership of the `CallbackData` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_callback_data_delete(object: &mut AzCallbackData) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_callback_data_deep_copy(object: &AzCallbackData) -> AzCallbackData { object.clone() }

/// Re-export of rust-allocated (stack based) `ImageMask` struct
pub type AzImageMaskTT = azul_impl::dom::ImageMask;
pub use AzImageMaskTT as AzImageMask;
/// Destructor: Takes ownership of the `ImageMask` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_image_mask_delete(object: &mut AzImageMask) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_image_mask_deep_copy(object: &AzImageMask) -> AzImageMask { object.clone() }

/// Represents one single DOM node (node type, classes, ids and callbacks are stored here)
pub type AzNodeDataTT = azul_impl::dom::NodeData;
pub use AzNodeDataTT as AzNodeData;
/// Creates a new node without any classes or ids from a NodeType
#[no_mangle] pub extern "C" fn az_node_data_new(node_type: AzNodeType) -> AzNodeData { NodeData::new(node_type) }
/// Creates a new `div` node
#[no_mangle] pub extern "C" fn az_node_data_div() -> AzNodeData { NodeData::div() }
/// Creates a new `body` node
#[no_mangle] pub extern "C" fn az_node_data_body() -> AzNodeData { NodeData::body() }
/// Creates a new `p` node with a given `String` as the text contents
#[no_mangle] pub extern "C" fn az_node_data_label(text: AzString) -> AzNodeData { NodeData::label(text) }
/// Creates a new `p` node from a (cached) text referenced by a `TextId`
#[no_mangle] pub extern "C" fn az_node_data_text(text_id: AzTextId) -> AzNodeData { NodeData::text(text_id) }
/// Creates a new `img` node from a (cached) text referenced by a `ImageId`
#[no_mangle] pub extern "C" fn az_node_data_image(image_id: AzImageId) -> AzNodeData { NodeData::image(image_id) }
/// Creates a new node which will render an OpenGL texture after the layout step is finished. See the documentation for [GlCallback]() for more info about OpenGL rendering callbacks.
#[no_mangle] pub extern "C" fn az_node_data_gl_texture(data: AzRefAny, callback: AzGlCallbackType) -> AzNodeData { NodeData::gl_texture(data, callback) }
/// Creates a `NodeData` with a callback that will return a `Dom` after being layouted. See the documentation for [IFrameCallback]() for more info about iframe callbacks.
#[no_mangle] pub extern "C" fn az_node_data_iframe(data: AzRefAny, callback: AzIFrameCallbackType) -> AzNodeData { NodeData::iframe(data, callback) }
/// Creates a default (div) node without any classes
#[no_mangle] pub extern "C" fn az_node_data_default() -> AzNodeData { NodeData::default() }
/// Adds a CSS ID (`#something`) to the `NodeData`
#[no_mangle] pub extern "C" fn az_node_data_add_id(nodedata: &mut AzNodeData, id: AzString) { nodedata.add_id(id); }
/// Same as [`NodeData::add_id`](#method.add_id), but as a builder method
#[no_mangle] pub extern "C" fn az_node_data_with_id(mut nodedata: AzNodeData, id: AzString) -> AzNodeData { az_node_data_add_id(&mut nodedata, id); nodedata }
/// Same as calling [`NodeData::add_id`](#method.add_id) for each CSS ID, but this function **replaces** all current CSS IDs
#[no_mangle] pub extern "C" fn az_node_data_set_ids(nodedata: &mut AzNodeData, ids: AzStringVec) { nodedata.set_ids(ids); }
/// Same as [`NodeData::set_ids`](#method.set_ids), but as a builder method
#[no_mangle] pub extern "C" fn az_node_data_with_ids(mut nodedata: AzNodeData, ids: AzStringVec) -> AzNodeData { az_node_data_set_ids(&mut nodedata, ids); nodedata }
/// Adds a CSS class (`.something`) to the `NodeData`
#[no_mangle] pub extern "C" fn az_node_data_add_class(nodedata: &mut AzNodeData, class: AzString) { nodedata.add_class(class); }
/// Same as [`NodeData::add_class`](#method.add_class), but as a builder method
#[no_mangle] pub extern "C" fn az_node_data_with_class(mut nodedata: AzNodeData, class: AzString) -> AzNodeData { az_node_data_add_class(&mut nodedata, class); nodedata }
/// Same as calling [`NodeData::add_class`](#method.add_class) for each class, but this function **replaces** all current classes
#[no_mangle] pub extern "C" fn az_node_data_set_classes(nodedata: &mut AzNodeData, classes: AzStringVec) { nodedata.set_classes(classes); }
/// Same as [`NodeData::set_classes`](#method.set_classes), but as a builder method
#[no_mangle] pub extern "C" fn az_node_data_with_classes(mut nodedata: AzNodeData, classes: AzStringVec) -> AzNodeData { az_node_data_set_classes(&mut nodedata, classes); nodedata }
/// Adds a dataset to the `NodeData`
#[no_mangle] pub extern "C" fn az_node_data_add_dataset(nodedata: &mut AzNodeData, data: AzRefAny) { nodedata.add_dataset(data); }
/// Same as [`NodeData::add_dataset`](#method.add_dataset), but as a builder method
#[no_mangle] pub extern "C" fn az_node_data_with_dataset(mut nodedata: AzNodeData, data: AzRefAny) -> AzNodeData { az_node_data_add_dataset(&mut nodedata, data); nodedata }
/// Adds a [`Callback`](callbacks/type.Callback) that acts on the `data` the `event` happens
#[no_mangle] pub extern "C" fn az_node_data_add_callback(nodedata: &mut AzNodeData, event: AzEventFilter, data: AzRefAny, callback: AzCallbackType) { nodedata.add_callback(event, callback, data); }
/// Same as [`NodeData::add_callback`](#method.add_callback), but as a builder method
#[no_mangle] pub extern "C" fn az_node_data_with_callback(mut nodedata: AzNodeData, event: AzEventFilter, data: AzRefAny, callback: AzCallbackType) -> AzNodeData { az_node_data_add_callback(&mut nodedata, event, data, callback); nodedata }
/// Overrides the CSS property of this `NodeData` node with a value (for example `"width = 200px"`)
#[no_mangle] pub extern "C" fn az_node_data_add_inline_css(nodedata: &mut AzNodeData, prop: AzCssProperty) { nodedata.add_inline_css(prop); }
/// Same as [`NodeData::add_inline_css`](#method.add_inline_css), but as a builder method
#[no_mangle] pub extern "C" fn az_node_data_with_inline_css(mut nodedata: AzNodeData, prop: AzCssProperty) -> AzNodeData { az_node_data_add_inline_css(&mut nodedata, prop); nodedata }
/// Equivalent to the Rust `NodeData::set_inline_css_props()` function.
#[no_mangle] pub extern "C" fn az_node_data_set_inline_css_props(nodedata: &mut AzNodeData, props: AzCssPropertyVec) { nodedata.set_inline_css_props(props); }
/// Same as [`NodeData::set_inline_css_props`](#method.set_inline_active_css_props), but as a builder method
#[no_mangle] pub extern "C" fn az_node_data_with_inline_css_props(mut nodedata: AzNodeData, props: AzCssPropertyVec) -> AzNodeData { az_node_data_set_inline_css_props(&mut nodedata, props); nodedata }
/// Overrides the CSS property of this `NodeData` node with a value (for example `"width = 200px"`)
#[no_mangle] pub extern "C" fn az_node_data_add_inline_hover_css(nodedata: &mut AzNodeData, prop: AzCssProperty) { nodedata.add_inline_hover_css(prop); }
/// Same as [`NodeData::add_inline_hover_css`](#method.add_inline_hover_css), but as a builder method
#[no_mangle] pub extern "C" fn az_node_data_with_inline_hover_css(mut nodedata: AzNodeData, prop: AzCssProperty) -> AzNodeData { az_node_data_add_inline_hover_css(&mut nodedata, prop); nodedata }
/// Equivalent to the Rust `NodeData::set_inline_hover_css_props()` function.
#[no_mangle] pub extern "C" fn az_node_data_set_inline_hover_css_props(nodedata: &mut AzNodeData, props: AzCssPropertyVec) { nodedata.set_inline_hover_css_props(props); }
/// Same as [`NodeData::set_inline_hover_css_props`](#method.set_inline_active_css_props), but as a builder method
#[no_mangle] pub extern "C" fn az_node_data_with_inline_hover_css_props(mut nodedata: AzNodeData, props: AzCssPropertyVec) -> AzNodeData { az_node_data_set_inline_hover_css_props(&mut nodedata, props); nodedata }
/// Overrides the CSS property of this `NodeData` node with a value (for example `"width = 200px"`)
#[no_mangle] pub extern "C" fn az_node_data_add_inline_active_css(nodedata: &mut AzNodeData, prop: AzCssProperty) { nodedata.add_inline_active_css(prop); }
/// Same as [`NodeData::add_inline_active_css`](#method.add_inline_active_css), but as a builder method
#[no_mangle] pub extern "C" fn az_node_data_with_inline_active_css(mut nodedata: AzNodeData, prop: AzCssProperty) -> AzNodeData { az_node_data_add_inline_active_css(&mut nodedata, prop); nodedata }
/// Equivalent to the Rust `NodeData::set_inline_active_css_props()` function.
#[no_mangle] pub extern "C" fn az_node_data_set_inline_active_css_props(nodedata: &mut AzNodeData, props: AzCssPropertyVec) { nodedata.set_inline_active_css_props(props); }
/// Same as [`NodeData::set_inline_active_css_props`](#method.set_inline_active_css_props), but as a builder method
#[no_mangle] pub extern "C" fn az_node_data_with_inline_active_css_props(mut nodedata: AzNodeData, props: AzCssPropertyVec) -> AzNodeData { az_node_data_set_inline_active_css_props(&mut nodedata, props); nodedata }
/// Overrides the CSS property of this `NodeData` node with a value (for example `"width = 200px"`)
#[no_mangle] pub extern "C" fn az_node_data_add_inline_focus_css(nodedata: &mut AzNodeData, prop: AzCssProperty) { nodedata.add_inline_focus_css(prop); }
/// Same as [`NodeData::add_inline_focus_css`](#method.add_inline_focus_css), but as a builder method
#[no_mangle] pub extern "C" fn az_node_data_with_inline_focus_css(mut nodedata: AzNodeData, prop: AzCssProperty) -> AzNodeData { az_node_data_add_inline_focus_css(&mut nodedata, prop); nodedata }
/// Equivalent to the Rust `NodeData::set_inline_focus_css_props()` function.
#[no_mangle] pub extern "C" fn az_node_data_set_inline_focus_css_props(nodedata: &mut AzNodeData, props: AzCssPropertyVec) { nodedata.set_inline_focus_css_props(props); }
/// Same as [`NodeData::set_inline_focus_css_props`](#method.set_inline_focus_css_props), but as a builder method
#[no_mangle] pub extern "C" fn az_node_data_with_inline_focus_css_props(mut nodedata: AzNodeData, props: AzCssPropertyVec) -> AzNodeData { az_node_data_set_inline_focus_css_props(&mut nodedata, props); nodedata }
/// Same as [`NodeData::set_clip_mask`](#method.set_clip_mask), but as a builder method
#[no_mangle] pub extern "C" fn az_node_data_with_clip_mask(mut nodedata: AzNodeData, clip_mask: AzOptionImageMask) -> AzNodeData { az_node_data_set_clip_mask(&mut nodedata, clip_mask); nodedata }
/// Sets the `clip_mask` attribute of this `NodeData` (default: None)
#[no_mangle] pub extern "C" fn az_node_data_set_clip_mask(nodedata: &mut AzNodeData, clip_mask: AzOptionImageMask) { nodedata.set_clip_mask(clip_mask); }
/// Sets the `is_draggable` attribute of this `NodeData` (default: false)
#[no_mangle] pub extern "C" fn az_node_data_set_is_draggable(nodedata: &mut AzNodeData, is_draggable: bool) { nodedata.set_is_draggable(is_draggable); }
/// Same as [`NodeData::set_is_draggable`](#method.set_is_draggable), but as a builder method
#[no_mangle] pub extern "C" fn az_node_data_is_draggable(mut nodedata: AzNodeData, is_draggable: bool) -> AzNodeData { az_node_data_set_is_draggable(&mut nodedata, is_draggable); nodedata }
/// Sets the `tabindex` attribute of this `NodeData` (makes an element focusable - default: None)
#[no_mangle] pub extern "C" fn az_node_data_set_tab_index(nodedata: &mut AzNodeData, tab_index: AzOptionTabIndex) { nodedata.set_tab_index(tab_index); }
/// Same as [`NodeData::set_tab_index`](#method.set_tab_index), but as a builder method
#[no_mangle] pub extern "C" fn az_node_data_with_tab_index(mut nodedata: AzNodeData, tab_index: AzOptionTabIndex) -> AzNodeData { az_node_data_set_tab_index(&mut nodedata, tab_index); nodedata }
/// Destructor: Takes ownership of the `NodeData` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_node_data_delete(object: &mut AzNodeData) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_node_data_deep_copy(object: &AzNodeData) -> AzNodeData { object.clone() }

/// List of core DOM node types built-into by `azul`
pub type AzNodeTypeTT = azul_impl::dom::NodeType;
pub use AzNodeTypeTT as AzNodeType;
/// Destructor: Takes ownership of the `NodeType` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_node_type_delete(object: &mut AzNodeType) { match object { azul_impl::dom::NodeType::Div => { }, azul_impl::dom::NodeType::Body => { }, azul_impl::dom::NodeType::Label(_) => { }, azul_impl::dom::NodeType::Text(_) => { }, azul_impl::dom::NodeType::Image(_) => { }, azul_impl::dom::NodeType::GlTexture(_) => { }, azul_impl::dom::NodeType::IFrame(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_node_type_deep_copy(object: &AzNodeType) -> AzNodeType { object.clone() }

/// When to call a callback action - `On::MouseOver`, `On::MouseOut`, etc.
pub type AzOnTT = azul_impl::dom::On;
pub use AzOnTT as AzOn;
/// Converts the `On` shorthand into a `EventFilter`
#[no_mangle] pub extern "C" fn az_on_into_event_filter(on: AzOn) -> AzEventFilter { on.into() }

/// Re-export of rust-allocated (stack based) `EventFilter` struct
pub type AzEventFilterTT = azul_impl::dom::EventFilter;
pub use AzEventFilterTT as AzEventFilter;

/// Re-export of rust-allocated (stack based) `HoverEventFilter` struct
pub type AzHoverEventFilterTT = azul_impl::dom::HoverEventFilter;
pub use AzHoverEventFilterTT as AzHoverEventFilter;

/// Re-export of rust-allocated (stack based) `FocusEventFilter` struct
pub type AzFocusEventFilterTT = azul_impl::dom::FocusEventFilter;
pub use AzFocusEventFilterTT as AzFocusEventFilter;

/// Re-export of rust-allocated (stack based) `NotEventFilter` struct
pub type AzNotEventFilterTT = azul_impl::dom::NotEventFilter;
pub use AzNotEventFilterTT as AzNotEventFilter;

/// Re-export of rust-allocated (stack based) `WindowEventFilter` struct
pub type AzWindowEventFilterTT = azul_impl::dom::WindowEventFilter;
pub use AzWindowEventFilterTT as AzWindowEventFilter;

/// Re-export of rust-allocated (stack based) `ComponentEventFilter` struct
pub type AzComponentEventFilterTT = azul_impl::dom::ComponentEventFilter;
pub use AzComponentEventFilterTT as AzComponentEventFilter;

/// Re-export of rust-allocated (stack based) `ApplicationEventFilter` struct
pub type AzApplicationEventFilterTT = azul_impl::dom::ApplicationEventFilter;
pub use AzApplicationEventFilterTT as AzApplicationEventFilter;

/// Re-export of rust-allocated (stack based) `TabIndex` struct
pub type AzTabIndexTT = azul_impl::dom::TabIndex;
pub use AzTabIndexTT as AzTabIndex;

/// Re-export of rust-allocated (stack based) `GlShaderPrecisionFormatReturn` struct
pub type AzGlShaderPrecisionFormatReturnTT = azul_impl::gl::GlShaderPrecisionFormatReturn;
pub use AzGlShaderPrecisionFormatReturnTT as AzGlShaderPrecisionFormatReturn;

/// Re-export of rust-allocated (stack based) `VertexAttributeType` struct
pub type AzVertexAttributeTypeTT = azul_impl::gl::VertexAttributeType;
pub use AzVertexAttributeTypeTT as AzVertexAttributeType;

/// Re-export of rust-allocated (stack based) `VertexAttribute` struct
pub type AzVertexAttributeTT = azul_impl::gl::VertexAttribute;
pub use AzVertexAttributeTT as AzVertexAttribute;
/// Destructor: Takes ownership of the `VertexAttribute` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_vertex_attribute_delete(object: &mut AzVertexAttribute) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_vertex_attribute_deep_copy(object: &AzVertexAttribute) -> AzVertexAttribute { object.clone() }

/// Re-export of rust-allocated (stack based) `VertexLayout` struct
pub type AzVertexLayoutTT = azul_impl::gl::VertexLayout;
pub use AzVertexLayoutTT as AzVertexLayout;
/// Destructor: Takes ownership of the `VertexLayout` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_vertex_layout_delete(object: &mut AzVertexLayout) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_vertex_layout_deep_copy(object: &AzVertexLayout) -> AzVertexLayout { object.clone() }

/// Re-export of rust-allocated (stack based) `VertexArrayObject` struct
pub type AzVertexArrayObjectTT = azul_impl::gl::VertexArrayObject;
pub use AzVertexArrayObjectTT as AzVertexArrayObject;
/// Destructor: Takes ownership of the `VertexArrayObject` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_vertex_array_object_delete(object: &mut AzVertexArrayObject) { }

/// Re-export of rust-allocated (stack based) `IndexBufferFormat` struct
pub type AzIndexBufferFormatTT = azul_impl::gl::IndexBufferFormat;
pub use AzIndexBufferFormatTT as AzIndexBufferFormat;

/// Re-export of rust-allocated (stack based) `VertexBuffer` struct
pub type AzVertexBufferTT = azul_impl::gl::VertexBuffer;
pub use AzVertexBufferTT as AzVertexBuffer;
/// Destructor: Takes ownership of the `VertexBuffer` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_vertex_buffer_delete(object: &mut AzVertexBuffer) { }

/// Re-export of rust-allocated (stack based) `GlType` struct
pub type AzGlTypeTT = azul_impl::gl::AzGlType;
pub use AzGlTypeTT as AzGlType;

/// Re-export of rust-allocated (stack based) `DebugMessage` struct
pub type AzDebugMessageTT = azul_impl::gl::AzDebugMessage;
pub use AzDebugMessageTT as AzDebugMessage;
/// Destructor: Takes ownership of the `DebugMessage` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_debug_message_delete(object: &mut AzDebugMessage) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_debug_message_deep_copy(object: &AzDebugMessage) -> AzDebugMessage { object.clone() }

/// C-ABI stable reexport of `&[u8]`
pub type AzU8VecRefTT = azul_impl::gl::U8VecRef;
pub use AzU8VecRefTT as AzU8VecRef;
/// Destructor: Takes ownership of the `U8VecRef` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_u8_vec_ref_delete(object: &mut AzU8VecRef) { }

/// C-ABI stable reexport of `&mut [u8]`
pub type AzU8VecRefMutTT = azul_impl::gl::U8VecRefMut;
pub use AzU8VecRefMutTT as AzU8VecRefMut;
/// Destructor: Takes ownership of the `U8VecRefMut` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_u8_vec_ref_mut_delete(object: &mut AzU8VecRefMut) { }

/// C-ABI stable reexport of `&[f32]`
pub type AzF32VecRefTT = azul_impl::gl::F32VecRef;
pub use AzF32VecRefTT as AzF32VecRef;
/// Destructor: Takes ownership of the `F32VecRef` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_f32_vec_ref_delete(object: &mut AzF32VecRef) { }

/// C-ABI stable reexport of `&[i32]`
pub type AzI32VecRefTT = azul_impl::gl::I32VecRef;
pub use AzI32VecRefTT as AzI32VecRef;
/// Destructor: Takes ownership of the `I32VecRef` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_i32_vec_ref_delete(object: &mut AzI32VecRef) { }

/// C-ABI stable reexport of `&[GLuint]` aka `&[u32]`
pub type AzGLuintVecRefTT = azul_impl::gl::GLuintVecRef;
pub use AzGLuintVecRefTT as AzGLuintVecRef;
/// Destructor: Takes ownership of the `GLuintVecRef` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_g_luint_vec_ref_delete(object: &mut AzGLuintVecRef) { }

/// C-ABI stable reexport of `&[GLenum]` aka `&[u32]`
pub type AzGLenumVecRefTT = azul_impl::gl::GLenumVecRef;
pub use AzGLenumVecRefTT as AzGLenumVecRef;
/// Destructor: Takes ownership of the `GLenumVecRef` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_g_lenum_vec_ref_delete(object: &mut AzGLenumVecRef) { }

/// C-ABI stable reexport of `&mut [GLint]` aka `&mut [i32]`
pub type AzGLintVecRefMutTT = azul_impl::gl::GLintVecRefMut;
pub use AzGLintVecRefMutTT as AzGLintVecRefMut;
/// Destructor: Takes ownership of the `GLintVecRefMut` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_g_lint_vec_ref_mut_delete(object: &mut AzGLintVecRefMut) { }

/// C-ABI stable reexport of `&mut [GLint64]` aka `&mut [i64]`
pub type AzGLint64VecRefMutTT = azul_impl::gl::GLint64VecRefMut;
pub use AzGLint64VecRefMutTT as AzGLint64VecRefMut;
/// Destructor: Takes ownership of the `GLint64VecRefMut` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_g_lint64_vec_ref_mut_delete(object: &mut AzGLint64VecRefMut) { }

/// C-ABI stable reexport of `&mut [GLboolean]` aka `&mut [u8]`
pub type AzGLbooleanVecRefMutTT = azul_impl::gl::GLbooleanVecRefMut;
pub use AzGLbooleanVecRefMutTT as AzGLbooleanVecRefMut;
/// Destructor: Takes ownership of the `GLbooleanVecRefMut` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_g_lboolean_vec_ref_mut_delete(object: &mut AzGLbooleanVecRefMut) { }

/// C-ABI stable reexport of `&mut [GLfloat]` aka `&mut [f32]`
pub type AzGLfloatVecRefMutTT = azul_impl::gl::GLfloatVecRefMut;
pub use AzGLfloatVecRefMutTT as AzGLfloatVecRefMut;
/// Destructor: Takes ownership of the `GLfloatVecRefMut` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_g_lfloat_vec_ref_mut_delete(object: &mut AzGLfloatVecRefMut) { }

/// C-ABI stable reexport of `&[Refstr]` aka `&mut [&str]`
pub type AzRefstrVecRefTT = azul_impl::gl::RefstrVecRef;
pub use AzRefstrVecRefTT as AzRefstrVecRef;
/// Destructor: Takes ownership of the `RefstrVecRef` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_refstr_vec_ref_delete(object: &mut AzRefstrVecRef) { }

/// C-ABI stable reexport of `&str`
pub type AzRefstrTT = azul_impl::gl::Refstr;
pub use AzRefstrTT as AzRefstr;
/// Destructor: Takes ownership of the `Refstr` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_refstr_delete(object: &mut AzRefstr) { }

/// C-ABI stable reexport of `(U8Vec, u32)`
pub type AzGetProgramBinaryReturnTT = azul_impl::gl::GetProgramBinaryReturn;
pub use AzGetProgramBinaryReturnTT as AzGetProgramBinaryReturn;
/// Destructor: Takes ownership of the `GetProgramBinaryReturn` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_get_program_binary_return_delete(object: &mut AzGetProgramBinaryReturn) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_get_program_binary_return_deep_copy(object: &AzGetProgramBinaryReturn) -> AzGetProgramBinaryReturn { object.clone() }

/// C-ABI stable reexport of `(i32, u32, AzString)`
pub type AzGetActiveAttribReturnTT = azul_impl::gl::GetActiveAttribReturn;
pub use AzGetActiveAttribReturnTT as AzGetActiveAttribReturn;
/// Destructor: Takes ownership of the `GetActiveAttribReturn` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_get_active_attrib_return_delete(object: &mut AzGetActiveAttribReturn) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_get_active_attrib_return_deep_copy(object: &AzGetActiveAttribReturn) -> AzGetActiveAttribReturn { object.clone() }

/// C-ABI stable reexport of `*const gleam::gl::GLsync`
pub type AzGLsyncPtrTT = azul_impl::gl::GLsyncPtr;
pub use AzGLsyncPtrTT as AzGLsyncPtr;
/// Destructor: Takes ownership of the `GLsyncPtr` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_g_lsync_ptr_delete(object: &mut AzGLsyncPtr) { }

/// C-ABI stable reexport of `(i32, u32, AzString)`
pub type AzGetActiveUniformReturnTT = azul_impl::gl::GetActiveUniformReturn;
pub use AzGetActiveUniformReturnTT as AzGetActiveUniformReturn;
/// Destructor: Takes ownership of the `GetActiveUniformReturn` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_get_active_uniform_return_delete(object: &mut AzGetActiveUniformReturn) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_get_active_uniform_return_deep_copy(object: &AzGetActiveUniformReturn) -> AzGetActiveUniformReturn { object.clone() }

/// Re-export of rust-allocated (stack based) `GlContextPtr` struct
pub type AzGlContextPtrTT = azul_impl::gl::GlContextPtr;
pub use AzGlContextPtrTT as AzGlContextPtr;
/// Equivalent to the Rust `GlContextPtr::get_type()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_type(glcontextptr: &AzGlContextPtr) -> AzGlType { glcontextptr.get_type() }
/// Equivalent to the Rust `GlContextPtr::buffer_data_untyped()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_buffer_data_untyped(glcontextptr: &AzGlContextPtr, target: u32, size: isize, data: *const c_void, usage: u32) { glcontextptr.buffer_data_untyped(target, size, data, usage) }
/// Equivalent to the Rust `GlContextPtr::buffer_sub_data_untyped()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_buffer_sub_data_untyped(glcontextptr: &AzGlContextPtr, target: u32, offset: isize, size: isize, data: *const c_void) { glcontextptr.buffer_sub_data_untyped(target, offset, size, data) }
/// Equivalent to the Rust `GlContextPtr::map_buffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_map_buffer(glcontextptr: &AzGlContextPtr, target: u32, access: u32) -> *mut c_void { glcontextptr.map_buffer(target, access) }
/// Equivalent to the Rust `GlContextPtr::map_buffer_range()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_map_buffer_range(glcontextptr: &AzGlContextPtr, target: u32, offset: isize, length: isize, access: u32) -> *mut c_void { glcontextptr.map_buffer_range(target, offset, length, access) }
/// Equivalent to the Rust `GlContextPtr::unmap_buffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_unmap_buffer(glcontextptr: &AzGlContextPtr, target: u32) -> u8 { glcontextptr.unmap_buffer(target) }
/// Equivalent to the Rust `GlContextPtr::tex_buffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_tex_buffer(glcontextptr: &AzGlContextPtr, target: u32, internal_format: u32, buffer: u32) { glcontextptr.tex_buffer(target, internal_format, buffer) }
/// Equivalent to the Rust `GlContextPtr::shader_source()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_shader_source(glcontextptr: &AzGlContextPtr, shader: u32, strings: AzStringVec) { glcontextptr.shader_source(shader, strings) }
/// Equivalent to the Rust `GlContextPtr::read_buffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_read_buffer(glcontextptr: &AzGlContextPtr, mode: u32) { glcontextptr.read_buffer(mode) }
/// Equivalent to the Rust `GlContextPtr::read_pixels_into_buffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_read_pixels_into_buffer(glcontextptr: &AzGlContextPtr, x: i32, y: i32, width: i32, height: i32, format: u32, pixel_type: u32, dst_buffer: AzU8VecRefMut) { glcontextptr.read_pixels_into_buffer(x, y, width, height, format, pixel_type, dst_buffer) }
/// Equivalent to the Rust `GlContextPtr::read_pixels()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_read_pixels(glcontextptr: &AzGlContextPtr, x: i32, y: i32, width: i32, height: i32, format: u32, pixel_type: u32) -> AzU8Vec { glcontextptr.read_pixels(x, y, width, height, format, pixel_type) }
/// Equivalent to the Rust `GlContextPtr::read_pixels_into_pbo()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_read_pixels_into_pbo(glcontextptr: &AzGlContextPtr, x: i32, y: i32, width: i32, height: i32, format: u32, pixel_type: u32) { glcontextptr.read_pixels_into_pbo(x, y, width, height, format, pixel_type) }
/// Equivalent to the Rust `GlContextPtr::sample_coverage()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_sample_coverage(glcontextptr: &AzGlContextPtr, value: f32, invert: bool) { glcontextptr.sample_coverage(value, invert) }
/// Equivalent to the Rust `GlContextPtr::polygon_offset()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_polygon_offset(glcontextptr: &AzGlContextPtr, factor: f32, units: f32) { glcontextptr.polygon_offset(factor, units) }
/// Equivalent to the Rust `GlContextPtr::pixel_store_i()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_pixel_store_i(glcontextptr: &AzGlContextPtr, name: u32, param: i32) { glcontextptr.pixel_store_i(name, param) }
/// Equivalent to the Rust `GlContextPtr::gen_buffers()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_gen_buffers(glcontextptr: &AzGlContextPtr, n: i32) -> AzGLuintVec { glcontextptr.gen_buffers(n) }
/// Equivalent to the Rust `GlContextPtr::gen_renderbuffers()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_gen_renderbuffers(glcontextptr: &AzGlContextPtr, n: i32) -> AzGLuintVec { glcontextptr.gen_renderbuffers(n) }
/// Equivalent to the Rust `GlContextPtr::gen_framebuffers()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_gen_framebuffers(glcontextptr: &AzGlContextPtr, n: i32) -> AzGLuintVec { glcontextptr.gen_framebuffers(n) }
/// Equivalent to the Rust `GlContextPtr::gen_textures()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_gen_textures(glcontextptr: &AzGlContextPtr, n: i32) -> AzGLuintVec { glcontextptr.gen_textures(n) }
/// Equivalent to the Rust `GlContextPtr::gen_vertex_arrays()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_gen_vertex_arrays(glcontextptr: &AzGlContextPtr, n: i32) -> AzGLuintVec { glcontextptr.gen_vertex_arrays(n) }
/// Equivalent to the Rust `GlContextPtr::gen_queries()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_gen_queries(glcontextptr: &AzGlContextPtr, n: i32) -> AzGLuintVec { glcontextptr.gen_queries(n) }
/// Equivalent to the Rust `GlContextPtr::begin_query()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_begin_query(glcontextptr: &AzGlContextPtr, target: u32, id: u32) { glcontextptr.begin_query(target, id) }
/// Equivalent to the Rust `GlContextPtr::end_query()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_end_query(glcontextptr: &AzGlContextPtr, target: u32) { glcontextptr.end_query(target) }
/// Equivalent to the Rust `GlContextPtr::query_counter()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_query_counter(glcontextptr: &AzGlContextPtr, id: u32, target: u32) { glcontextptr.query_counter(id, target) }
/// Equivalent to the Rust `GlContextPtr::get_query_object_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_query_object_iv(glcontextptr: &AzGlContextPtr, id: u32, pname: u32) -> i32 { glcontextptr.get_query_object_iv(id, pname) }
/// Equivalent to the Rust `GlContextPtr::get_query_object_uiv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_query_object_uiv(glcontextptr: &AzGlContextPtr, id: u32, pname: u32) -> u32 { glcontextptr.get_query_object_uiv(id, pname) }
/// Equivalent to the Rust `GlContextPtr::get_query_object_i64v()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_query_object_i64v(glcontextptr: &AzGlContextPtr, id: u32, pname: u32) -> i64 { glcontextptr.get_query_object_i64v(id, pname) }
/// Equivalent to the Rust `GlContextPtr::get_query_object_ui64v()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_query_object_ui64v(glcontextptr: &AzGlContextPtr, id: u32, pname: u32) -> u64 { glcontextptr.get_query_object_ui64v(id, pname) }
/// Equivalent to the Rust `GlContextPtr::delete_queries()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_delete_queries(glcontextptr: &AzGlContextPtr, queries: AzGLuintVecRef) { glcontextptr.delete_queries(queries) }
/// Equivalent to the Rust `GlContextPtr::delete_vertex_arrays()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_delete_vertex_arrays(glcontextptr: &AzGlContextPtr, vertex_arrays: AzGLuintVecRef) { glcontextptr.delete_vertex_arrays(vertex_arrays) }
/// Equivalent to the Rust `GlContextPtr::delete_buffers()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_delete_buffers(glcontextptr: &AzGlContextPtr, buffers: AzGLuintVecRef) { glcontextptr.delete_buffers(buffers) }
/// Equivalent to the Rust `GlContextPtr::delete_renderbuffers()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_delete_renderbuffers(glcontextptr: &AzGlContextPtr, renderbuffers: AzGLuintVecRef) { glcontextptr.delete_renderbuffers(renderbuffers) }
/// Equivalent to the Rust `GlContextPtr::delete_framebuffers()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_delete_framebuffers(glcontextptr: &AzGlContextPtr, framebuffers: AzGLuintVecRef) { glcontextptr.delete_framebuffers(framebuffers) }
/// Equivalent to the Rust `GlContextPtr::delete_textures()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_delete_textures(glcontextptr: &AzGlContextPtr, textures: AzGLuintVecRef) { glcontextptr.delete_textures(textures) }
/// Equivalent to the Rust `GlContextPtr::framebuffer_renderbuffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_framebuffer_renderbuffer(glcontextptr: &AzGlContextPtr, target: u32, attachment: u32, renderbuffertarget: u32, renderbuffer: u32) { glcontextptr.framebuffer_renderbuffer(target, attachment, renderbuffertarget, renderbuffer) }
/// Equivalent to the Rust `GlContextPtr::renderbuffer_storage()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_renderbuffer_storage(glcontextptr: &AzGlContextPtr, target: u32, internalformat: u32, width: i32, height: i32) { glcontextptr.renderbuffer_storage(target, internalformat, width, height) }
/// Equivalent to the Rust `GlContextPtr::depth_func()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_depth_func(glcontextptr: &AzGlContextPtr, func: u32) { glcontextptr.depth_func(func) }
/// Equivalent to the Rust `GlContextPtr::active_texture()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_active_texture(glcontextptr: &AzGlContextPtr, texture: u32) { glcontextptr.active_texture(texture) }
/// Equivalent to the Rust `GlContextPtr::attach_shader()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_attach_shader(glcontextptr: &AzGlContextPtr, program: u32, shader: u32) { glcontextptr.attach_shader(program, shader) }
/// Equivalent to the Rust `GlContextPtr::bind_attrib_location()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_bind_attrib_location(glcontextptr: &AzGlContextPtr, program: u32, index: u32, name: AzRefstr) { glcontextptr.bind_attrib_location(program, index, name) }
/// Equivalent to the Rust `GlContextPtr::get_uniform_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_uniform_iv(glcontextptr: &AzGlContextPtr, program: u32, location: i32, result: AzGLintVecRefMut) { glcontextptr.get_uniform_iv(program, location, result) }
/// Equivalent to the Rust `GlContextPtr::get_uniform_fv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_uniform_fv(glcontextptr: &AzGlContextPtr, program: u32, location: i32, result: AzGLfloatVecRefMut) { glcontextptr.get_uniform_fv(program, location, result) }
/// Equivalent to the Rust `GlContextPtr::get_uniform_block_index()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_uniform_block_index(glcontextptr: &AzGlContextPtr, program: u32, name: AzRefstr) -> u32 { glcontextptr.get_uniform_block_index(program, name) }
/// Equivalent to the Rust `GlContextPtr::get_uniform_indices()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_uniform_indices(glcontextptr: &AzGlContextPtr, program: u32, names: AzRefstrVecRef) -> AzGLuintVec { glcontextptr.get_uniform_indices(program, names) }
/// Equivalent to the Rust `GlContextPtr::bind_buffer_base()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_bind_buffer_base(glcontextptr: &AzGlContextPtr, target: u32, index: u32, buffer: u32) { glcontextptr.bind_buffer_base(target, index, buffer) }
/// Equivalent to the Rust `GlContextPtr::bind_buffer_range()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_bind_buffer_range(glcontextptr: &AzGlContextPtr, target: u32, index: u32, buffer: u32, offset: isize, size: isize) { glcontextptr.bind_buffer_range(target, index, buffer, offset, size) }
/// Equivalent to the Rust `GlContextPtr::uniform_block_binding()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_block_binding(glcontextptr: &AzGlContextPtr, program: u32, uniform_block_index: u32, uniform_block_binding: u32) { glcontextptr.uniform_block_binding(program, uniform_block_index, uniform_block_binding) }
/// Equivalent to the Rust `GlContextPtr::bind_buffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_bind_buffer(glcontextptr: &AzGlContextPtr, target: u32, buffer: u32) { glcontextptr.bind_buffer(target, buffer) }
/// Equivalent to the Rust `GlContextPtr::bind_vertex_array()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_bind_vertex_array(glcontextptr: &AzGlContextPtr, vao: u32) { glcontextptr.bind_vertex_array(vao) }
/// Equivalent to the Rust `GlContextPtr::bind_renderbuffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_bind_renderbuffer(glcontextptr: &AzGlContextPtr, target: u32, renderbuffer: u32) { glcontextptr.bind_renderbuffer(target, renderbuffer) }
/// Equivalent to the Rust `GlContextPtr::bind_framebuffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_bind_framebuffer(glcontextptr: &AzGlContextPtr, target: u32, framebuffer: u32) { glcontextptr.bind_framebuffer(target, framebuffer) }
/// Equivalent to the Rust `GlContextPtr::bind_texture()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_bind_texture(glcontextptr: &AzGlContextPtr, target: u32, texture: u32) { glcontextptr.bind_texture(target, texture) }
/// Equivalent to the Rust `GlContextPtr::draw_buffers()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_draw_buffers(glcontextptr: &AzGlContextPtr, bufs: AzGLenumVecRef) { glcontextptr.draw_buffers(bufs) }
/// Equivalent to the Rust `GlContextPtr::tex_image_2d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_tex_image_2d(glcontextptr: &AzGlContextPtr, target: u32, level: i32, internal_format: i32, width: i32, height: i32, border: i32, format: u32, ty: u32, opt_data: AzOptionU8VecRef) { glcontextptr.tex_image_2d(target, level, internal_format, width, height, border, format, ty, opt_data) }
/// Equivalent to the Rust `GlContextPtr::compressed_tex_image_2d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_compressed_tex_image_2d(glcontextptr: &AzGlContextPtr, target: u32, level: i32, internal_format: u32, width: i32, height: i32, border: i32, data: AzU8VecRef) { glcontextptr.compressed_tex_image_2d(target, level, internal_format, width, height, border, data) }
/// Equivalent to the Rust `GlContextPtr::compressed_tex_sub_image_2d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_compressed_tex_sub_image_2d(glcontextptr: &AzGlContextPtr, target: u32, level: i32, xoffset: i32, yoffset: i32, width: i32, height: i32, format: u32, data: AzU8VecRef) { glcontextptr.compressed_tex_sub_image_2d(target, level, xoffset, yoffset, width, height, format, data) }
/// Equivalent to the Rust `GlContextPtr::tex_image_3d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_tex_image_3d(glcontextptr: &AzGlContextPtr, target: u32, level: i32, internal_format: i32, width: i32, height: i32, depth: i32, border: i32, format: u32, ty: u32, opt_data: AzOptionU8VecRef) { glcontextptr.tex_image_3d(target, level, internal_format, width, height, depth, border, format, ty, opt_data) }
/// Equivalent to the Rust `GlContextPtr::copy_tex_image_2d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_copy_tex_image_2d(glcontextptr: &AzGlContextPtr, target: u32, level: i32, internal_format: u32, x: i32, y: i32, width: i32, height: i32, border: i32) { glcontextptr.copy_tex_image_2d(target, level, internal_format, x, y, width, height, border) }
/// Equivalent to the Rust `GlContextPtr::copy_tex_sub_image_2d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_copy_tex_sub_image_2d(glcontextptr: &AzGlContextPtr, target: u32, level: i32, xoffset: i32, yoffset: i32, x: i32, y: i32, width: i32, height: i32) { glcontextptr.copy_tex_sub_image_2d(target, level, xoffset, yoffset, x, y, width, height) }
/// Equivalent to the Rust `GlContextPtr::copy_tex_sub_image_3d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_copy_tex_sub_image_3d(glcontextptr: &AzGlContextPtr, target: u32, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, x: i32, y: i32, width: i32, height: i32) { glcontextptr.copy_tex_sub_image_3d(target, level, xoffset, yoffset, zoffset, x, y, width, height) }
/// Equivalent to the Rust `GlContextPtr::tex_sub_image_2d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_tex_sub_image_2d(glcontextptr: &AzGlContextPtr, target: u32, level: i32, xoffset: i32, yoffset: i32, width: i32, height: i32, format: u32, ty: u32, data: AzU8VecRef) { glcontextptr.tex_sub_image_2d(target, level, xoffset, yoffset, width, height, format, ty, data) }
/// Equivalent to the Rust `GlContextPtr::tex_sub_image_2d_pbo()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_tex_sub_image_2d_pbo(glcontextptr: &AzGlContextPtr, target: u32, level: i32, xoffset: i32, yoffset: i32, width: i32, height: i32, format: u32, ty: u32, offset: usize) { glcontextptr.tex_sub_image_2d_pbo(target, level, xoffset, yoffset, width, height, format, ty, offset) }
/// Equivalent to the Rust `GlContextPtr::tex_sub_image_3d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_tex_sub_image_3d(glcontextptr: &AzGlContextPtr, target: u32, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32, height: i32, depth: i32, format: u32, ty: u32, data: AzU8VecRef) { glcontextptr.tex_sub_image_3d(target, level, xoffset, yoffset, zoffset, width, height, depth, format, ty, data) }
/// Equivalent to the Rust `GlContextPtr::tex_sub_image_3d_pbo()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_tex_sub_image_3d_pbo(glcontextptr: &AzGlContextPtr, target: u32, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32, height: i32, depth: i32, format: u32, ty: u32, offset: usize) { glcontextptr.tex_sub_image_3d_pbo(target, level, xoffset, yoffset, zoffset, width, height, depth, format, ty, offset) }
/// Equivalent to the Rust `GlContextPtr::tex_storage_2d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_tex_storage_2d(glcontextptr: &AzGlContextPtr, target: u32, levels: i32, internal_format: u32, width: i32, height: i32) { glcontextptr.tex_storage_2d(target, levels, internal_format, width, height) }
/// Equivalent to the Rust `GlContextPtr::tex_storage_3d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_tex_storage_3d(glcontextptr: &AzGlContextPtr, target: u32, levels: i32, internal_format: u32, width: i32, height: i32, depth: i32) { glcontextptr.tex_storage_3d(target, levels, internal_format, width, height, depth) }
/// Equivalent to the Rust `GlContextPtr::get_tex_image_into_buffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_tex_image_into_buffer(glcontextptr: &AzGlContextPtr, target: u32, level: i32, format: u32, ty: u32, output: AzU8VecRefMut) { glcontextptr.get_tex_image_into_buffer(target, level, format, ty, output) }
/// Equivalent to the Rust `GlContextPtr::copy_image_sub_data()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_copy_image_sub_data(glcontextptr: &AzGlContextPtr, src_name: u32, src_target: u32, src_level: i32, src_x: i32, src_y: i32, src_z: i32, dst_name: u32, dst_target: u32, dst_level: i32, dst_x: i32, dst_y: i32, dst_z: i32, src_width: i32, src_height: i32, src_depth: i32) { glcontextptr.copy_image_sub_data(src_name, src_target, src_level, src_x, src_y, src_z, dst_name, dst_target, dst_level, dst_x, dst_y, dst_z, src_width, src_height, src_depth) }
/// Equivalent to the Rust `GlContextPtr::invalidate_framebuffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_invalidate_framebuffer(glcontextptr: &AzGlContextPtr, target: u32, attachments: AzGLenumVecRef) { glcontextptr.invalidate_framebuffer(target, attachments) }
/// Equivalent to the Rust `GlContextPtr::invalidate_sub_framebuffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_invalidate_sub_framebuffer(glcontextptr: &AzGlContextPtr, target: u32, attachments: AzGLenumVecRef, xoffset: i32, yoffset: i32, width: i32, height: i32) { glcontextptr.invalidate_sub_framebuffer(target, attachments, xoffset, yoffset, width, height) }
/// Equivalent to the Rust `GlContextPtr::get_integer_v()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_integer_v(glcontextptr: &AzGlContextPtr, name: u32, result: AzGLintVecRefMut) { glcontextptr.get_integer_v(name, result) }
/// Equivalent to the Rust `GlContextPtr::get_integer_64v()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_integer_64v(glcontextptr: &AzGlContextPtr, name: u32, result: AzGLint64VecRefMut) { glcontextptr.get_integer_64v(name, result) }
/// Equivalent to the Rust `GlContextPtr::get_integer_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_integer_iv(glcontextptr: &AzGlContextPtr, name: u32, index: u32, result: AzGLintVecRefMut) { glcontextptr.get_integer_iv(name, index, result) }
/// Equivalent to the Rust `GlContextPtr::get_integer_64iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_integer_64iv(glcontextptr: &AzGlContextPtr, name: u32, index: u32, result: AzGLint64VecRefMut) { glcontextptr.get_integer_64iv(name, index, result) }
/// Equivalent to the Rust `GlContextPtr::get_boolean_v()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_boolean_v(glcontextptr: &AzGlContextPtr, name: u32, result: AzGLbooleanVecRefMut) { glcontextptr.get_boolean_v(name, result) }
/// Equivalent to the Rust `GlContextPtr::get_float_v()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_float_v(glcontextptr: &AzGlContextPtr, name: u32, result: AzGLfloatVecRefMut) { glcontextptr.get_float_v(name, result) }
/// Equivalent to the Rust `GlContextPtr::get_framebuffer_attachment_parameter_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_framebuffer_attachment_parameter_iv(glcontextptr: &AzGlContextPtr, target: u32, attachment: u32, pname: u32) -> i32 { glcontextptr.get_framebuffer_attachment_parameter_iv(target, attachment, pname) }
/// Equivalent to the Rust `GlContextPtr::get_renderbuffer_parameter_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_renderbuffer_parameter_iv(glcontextptr: &AzGlContextPtr, target: u32, pname: u32) -> i32 { glcontextptr.get_renderbuffer_parameter_iv(target, pname) }
/// Equivalent to the Rust `GlContextPtr::get_tex_parameter_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_tex_parameter_iv(glcontextptr: &AzGlContextPtr, target: u32, name: u32) -> i32 { glcontextptr.get_tex_parameter_iv(target, name) }
/// Equivalent to the Rust `GlContextPtr::get_tex_parameter_fv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_tex_parameter_fv(glcontextptr: &AzGlContextPtr, target: u32, name: u32) -> f32 { glcontextptr.get_tex_parameter_fv(target, name) }
/// Equivalent to the Rust `GlContextPtr::tex_parameter_i()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_tex_parameter_i(glcontextptr: &AzGlContextPtr, target: u32, pname: u32, param: i32) { glcontextptr.tex_parameter_i(target, pname, param) }
/// Equivalent to the Rust `GlContextPtr::tex_parameter_f()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_tex_parameter_f(glcontextptr: &AzGlContextPtr, target: u32, pname: u32, param: f32) { glcontextptr.tex_parameter_f(target, pname, param) }
/// Equivalent to the Rust `GlContextPtr::framebuffer_texture_2d()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_framebuffer_texture_2d(glcontextptr: &AzGlContextPtr, target: u32, attachment: u32, textarget: u32, texture: u32, level: i32) { glcontextptr.framebuffer_texture_2d(target, attachment, textarget, texture, level) }
/// Equivalent to the Rust `GlContextPtr::framebuffer_texture_layer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_framebuffer_texture_layer(glcontextptr: &AzGlContextPtr, target: u32, attachment: u32, texture: u32, level: i32, layer: i32) { glcontextptr.framebuffer_texture_layer(target, attachment, texture, level, layer) }
/// Equivalent to the Rust `GlContextPtr::blit_framebuffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_blit_framebuffer(glcontextptr: &AzGlContextPtr, src_x0: i32, src_y0: i32, src_x1: i32, src_y1: i32, dst_x0: i32, dst_y0: i32, dst_x1: i32, dst_y1: i32, mask: u32, filter: u32) { glcontextptr.blit_framebuffer(src_x0, src_y0, src_x1, src_y1, dst_x0, dst_y0, dst_x1, dst_y1, mask, filter) }
/// Equivalent to the Rust `GlContextPtr::vertex_attrib_4f()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_vertex_attrib_4f(glcontextptr: &AzGlContextPtr, index: u32, x: f32, y: f32, z: f32, w: f32) { glcontextptr.vertex_attrib_4f(index, x, y, z, w) }
/// Equivalent to the Rust `GlContextPtr::vertex_attrib_pointer_f32()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_vertex_attrib_pointer_f32(glcontextptr: &AzGlContextPtr, index: u32, size: i32, normalized: bool, stride: i32, offset: u32) { glcontextptr.vertex_attrib_pointer_f32(index, size, normalized, stride, offset) }
/// Equivalent to the Rust `GlContextPtr::vertex_attrib_pointer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_vertex_attrib_pointer(glcontextptr: &AzGlContextPtr, index: u32, size: i32, type_: u32, normalized: bool, stride: i32, offset: u32) { glcontextptr.vertex_attrib_pointer(index, size, type_, normalized, stride, offset) }
/// Equivalent to the Rust `GlContextPtr::vertex_attrib_i_pointer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_vertex_attrib_i_pointer(glcontextptr: &AzGlContextPtr, index: u32, size: i32, type_: u32, stride: i32, offset: u32) { glcontextptr.vertex_attrib_i_pointer(index, size, type_, stride, offset) }
/// Equivalent to the Rust `GlContextPtr::vertex_attrib_divisor()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_vertex_attrib_divisor(glcontextptr: &AzGlContextPtr, index: u32, divisor: u32) { glcontextptr.vertex_attrib_divisor(index, divisor) }
/// Equivalent to the Rust `GlContextPtr::viewport()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_viewport(glcontextptr: &AzGlContextPtr, x: i32, y: i32, width: i32, height: i32) { glcontextptr.viewport(x, y, width, height) }
/// Equivalent to the Rust `GlContextPtr::scissor()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_scissor(glcontextptr: &AzGlContextPtr, x: i32, y: i32, width: i32, height: i32) { glcontextptr.scissor(x, y, width, height) }
/// Equivalent to the Rust `GlContextPtr::line_width()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_line_width(glcontextptr: &AzGlContextPtr, width: f32) { glcontextptr.line_width(width) }
/// Equivalent to the Rust `GlContextPtr::use_program()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_use_program(glcontextptr: &AzGlContextPtr, program: u32) { glcontextptr.use_program(program) }
/// Equivalent to the Rust `GlContextPtr::validate_program()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_validate_program(glcontextptr: &AzGlContextPtr, program: u32) { glcontextptr.validate_program(program) }
/// Equivalent to the Rust `GlContextPtr::draw_arrays()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_draw_arrays(glcontextptr: &AzGlContextPtr, mode: u32, first: i32, count: i32) { glcontextptr.draw_arrays(mode, first, count) }
/// Equivalent to the Rust `GlContextPtr::draw_arrays_instanced()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_draw_arrays_instanced(glcontextptr: &AzGlContextPtr, mode: u32, first: i32, count: i32, primcount: i32) { glcontextptr.draw_arrays_instanced(mode, first, count, primcount) }
/// Equivalent to the Rust `GlContextPtr::draw_elements()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_draw_elements(glcontextptr: &AzGlContextPtr, mode: u32, count: i32, element_type: u32, indices_offset: u32) { glcontextptr.draw_elements(mode, count, element_type, indices_offset) }
/// Equivalent to the Rust `GlContextPtr::draw_elements_instanced()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_draw_elements_instanced(glcontextptr: &AzGlContextPtr, mode: u32, count: i32, element_type: u32, indices_offset: u32, primcount: i32) { glcontextptr.draw_elements_instanced(mode, count, element_type, indices_offset, primcount) }
/// Equivalent to the Rust `GlContextPtr::blend_color()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_blend_color(glcontextptr: &AzGlContextPtr, r: f32, g: f32, b: f32, a: f32) { glcontextptr.blend_color(r, g, b, a) }
/// Equivalent to the Rust `GlContextPtr::blend_func()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_blend_func(glcontextptr: &AzGlContextPtr, sfactor: u32, dfactor: u32) { glcontextptr.blend_func(sfactor, dfactor) }
/// Equivalent to the Rust `GlContextPtr::blend_func_separate()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_blend_func_separate(glcontextptr: &AzGlContextPtr, src_rgb: u32, dest_rgb: u32, src_alpha: u32, dest_alpha: u32) { glcontextptr.blend_func_separate(src_rgb, dest_rgb, src_alpha, dest_alpha) }
/// Equivalent to the Rust `GlContextPtr::blend_equation()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_blend_equation(glcontextptr: &AzGlContextPtr, mode: u32) { glcontextptr.blend_equation(mode) }
/// Equivalent to the Rust `GlContextPtr::blend_equation_separate()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_blend_equation_separate(glcontextptr: &AzGlContextPtr, mode_rgb: u32, mode_alpha: u32) { glcontextptr.blend_equation_separate(mode_rgb, mode_alpha) }
/// Equivalent to the Rust `GlContextPtr::color_mask()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_color_mask(glcontextptr: &AzGlContextPtr, r: bool, g: bool, b: bool, a: bool) { glcontextptr.color_mask(r, g, b, a) }
/// Equivalent to the Rust `GlContextPtr::cull_face()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_cull_face(glcontextptr: &AzGlContextPtr, mode: u32) { glcontextptr.cull_face(mode) }
/// Equivalent to the Rust `GlContextPtr::front_face()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_front_face(glcontextptr: &AzGlContextPtr, mode: u32) { glcontextptr.front_face(mode) }
/// Equivalent to the Rust `GlContextPtr::enable()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_enable(glcontextptr: &AzGlContextPtr, cap: u32) { glcontextptr.enable(cap) }
/// Equivalent to the Rust `GlContextPtr::disable()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_disable(glcontextptr: &AzGlContextPtr, cap: u32) { glcontextptr.disable(cap) }
/// Equivalent to the Rust `GlContextPtr::hint()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_hint(glcontextptr: &AzGlContextPtr, param_name: u32, param_val: u32) { glcontextptr.hint(param_name, param_val) }
/// Equivalent to the Rust `GlContextPtr::is_enabled()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_is_enabled(glcontextptr: &AzGlContextPtr, cap: u32) -> u8 { glcontextptr.is_enabled(cap) }
/// Equivalent to the Rust `GlContextPtr::is_shader()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_is_shader(glcontextptr: &AzGlContextPtr, shader: u32) -> u8 { glcontextptr.is_shader(shader) }
/// Equivalent to the Rust `GlContextPtr::is_texture()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_is_texture(glcontextptr: &AzGlContextPtr, texture: u32) -> u8 { glcontextptr.is_texture(texture) }
/// Equivalent to the Rust `GlContextPtr::is_framebuffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_is_framebuffer(glcontextptr: &AzGlContextPtr, framebuffer: u32) -> u8 { glcontextptr.is_framebuffer(framebuffer) }
/// Equivalent to the Rust `GlContextPtr::is_renderbuffer()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_is_renderbuffer(glcontextptr: &AzGlContextPtr, renderbuffer: u32) -> u8 { glcontextptr.is_renderbuffer(renderbuffer) }
/// Equivalent to the Rust `GlContextPtr::check_frame_buffer_status()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_check_frame_buffer_status(glcontextptr: &AzGlContextPtr, target: u32) -> u32 { glcontextptr.check_frame_buffer_status(target) }
/// Equivalent to the Rust `GlContextPtr::enable_vertex_attrib_array()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_enable_vertex_attrib_array(glcontextptr: &AzGlContextPtr, index: u32) { glcontextptr.enable_vertex_attrib_array(index) }
/// Equivalent to the Rust `GlContextPtr::disable_vertex_attrib_array()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_disable_vertex_attrib_array(glcontextptr: &AzGlContextPtr, index: u32) { glcontextptr.disable_vertex_attrib_array(index) }
/// Equivalent to the Rust `GlContextPtr::uniform_1f()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_1f(glcontextptr: &AzGlContextPtr, location: i32, v0: f32) { glcontextptr.uniform_1f(location, v0) }
/// Equivalent to the Rust `GlContextPtr::uniform_1fv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_1fv(glcontextptr: &AzGlContextPtr, location: i32, values: AzF32VecRef) { glcontextptr.uniform_1fv(location, values) }
/// Equivalent to the Rust `GlContextPtr::uniform_1i()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_1i(glcontextptr: &AzGlContextPtr, location: i32, v0: i32) { glcontextptr.uniform_1i(location, v0) }
/// Equivalent to the Rust `GlContextPtr::uniform_1iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_1iv(glcontextptr: &AzGlContextPtr, location: i32, values: AzI32VecRef) { glcontextptr.uniform_1iv(location, values) }
/// Equivalent to the Rust `GlContextPtr::uniform_1ui()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_1ui(glcontextptr: &AzGlContextPtr, location: i32, v0: u32) { glcontextptr.uniform_1ui(location, v0) }
/// Equivalent to the Rust `GlContextPtr::uniform_2f()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_2f(glcontextptr: &AzGlContextPtr, location: i32, v0: f32, v1: f32) { glcontextptr.uniform_2f(location, v0, v1) }
/// Equivalent to the Rust `GlContextPtr::uniform_2fv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_2fv(glcontextptr: &AzGlContextPtr, location: i32, values: AzF32VecRef) { glcontextptr.uniform_2fv(location, values) }
/// Equivalent to the Rust `GlContextPtr::uniform_2i()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_2i(glcontextptr: &AzGlContextPtr, location: i32, v0: i32, v1: i32) { glcontextptr.uniform_2i(location, v0, v1) }
/// Equivalent to the Rust `GlContextPtr::uniform_2iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_2iv(glcontextptr: &AzGlContextPtr, location: i32, values: AzI32VecRef) { glcontextptr.uniform_2iv(location, values) }
/// Equivalent to the Rust `GlContextPtr::uniform_2ui()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_2ui(glcontextptr: &AzGlContextPtr, location: i32, v0: u32, v1: u32) { glcontextptr.uniform_2ui(location, v0, v1) }
/// Equivalent to the Rust `GlContextPtr::uniform_3f()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_3f(glcontextptr: &AzGlContextPtr, location: i32, v0: f32, v1: f32, v2: f32) { glcontextptr.uniform_3f(location, v0, v1, v2) }
/// Equivalent to the Rust `GlContextPtr::uniform_3fv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_3fv(glcontextptr: &AzGlContextPtr, location: i32, values: AzF32VecRef) { glcontextptr.uniform_3fv(location, values) }
/// Equivalent to the Rust `GlContextPtr::uniform_3i()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_3i(glcontextptr: &AzGlContextPtr, location: i32, v0: i32, v1: i32, v2: i32) { glcontextptr.uniform_3i(location, v0, v1, v2) }
/// Equivalent to the Rust `GlContextPtr::uniform_3iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_3iv(glcontextptr: &AzGlContextPtr, location: i32, values: AzI32VecRef) { glcontextptr.uniform_3iv(location, values) }
/// Equivalent to the Rust `GlContextPtr::uniform_3ui()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_3ui(glcontextptr: &AzGlContextPtr, location: i32, v0: u32, v1: u32, v2: u32) { glcontextptr.uniform_3ui(location, v0, v1, v2) }
/// Equivalent to the Rust `GlContextPtr::uniform_4f()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_4f(glcontextptr: &AzGlContextPtr, location: i32, x: f32, y: f32, z: f32, w: f32) { glcontextptr.uniform_4f(location, x, y, z, w) }
/// Equivalent to the Rust `GlContextPtr::uniform_4i()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_4i(glcontextptr: &AzGlContextPtr, location: i32, x: i32, y: i32, z: i32, w: i32) { glcontextptr.uniform_4i(location, x, y, z, w) }
/// Equivalent to the Rust `GlContextPtr::uniform_4iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_4iv(glcontextptr: &AzGlContextPtr, location: i32, values: AzI32VecRef) { glcontextptr.uniform_4iv(location, values) }
/// Equivalent to the Rust `GlContextPtr::uniform_4ui()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_4ui(glcontextptr: &AzGlContextPtr, location: i32, x: u32, y: u32, z: u32, w: u32) { glcontextptr.uniform_4ui(location, x, y, z, w) }
/// Equivalent to the Rust `GlContextPtr::uniform_4fv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_4fv(glcontextptr: &AzGlContextPtr, location: i32, values: AzF32VecRef) { glcontextptr.uniform_4fv(location, values) }
/// Equivalent to the Rust `GlContextPtr::uniform_matrix_2fv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_matrix_2fv(glcontextptr: &AzGlContextPtr, location: i32, transpose: bool, value: AzF32VecRef) { glcontextptr.uniform_matrix_2fv(location, transpose, value) }
/// Equivalent to the Rust `GlContextPtr::uniform_matrix_3fv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_matrix_3fv(glcontextptr: &AzGlContextPtr, location: i32, transpose: bool, value: AzF32VecRef) { glcontextptr.uniform_matrix_3fv(location, transpose, value) }
/// Equivalent to the Rust `GlContextPtr::uniform_matrix_4fv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_uniform_matrix_4fv(glcontextptr: &AzGlContextPtr, location: i32, transpose: bool, value: AzF32VecRef) { glcontextptr.uniform_matrix_4fv(location, transpose, value) }
/// Equivalent to the Rust `GlContextPtr::depth_mask()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_depth_mask(glcontextptr: &AzGlContextPtr, flag: bool) { glcontextptr.depth_mask(flag) }
/// Equivalent to the Rust `GlContextPtr::depth_range()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_depth_range(glcontextptr: &AzGlContextPtr, near: f64, far: f64) { glcontextptr.depth_range(near, far) }
/// Equivalent to the Rust `GlContextPtr::get_active_attrib()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_active_attrib(glcontextptr: &AzGlContextPtr, program: u32, index: u32) -> AzGetActiveAttribReturn { glcontextptr.get_active_attrib(program, index) }
/// Equivalent to the Rust `GlContextPtr::get_active_uniform()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_active_uniform(glcontextptr: &AzGlContextPtr, program: u32, index: u32) -> AzGetActiveUniformReturn { glcontextptr.get_active_uniform(program, index) }
/// Equivalent to the Rust `GlContextPtr::get_active_uniforms_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_active_uniforms_iv(glcontextptr: &AzGlContextPtr, program: u32, indices: AzGLuintVec, pname: u32) -> AzGLintVec { glcontextptr.get_active_uniforms_iv(program, indices, pname) }
/// Equivalent to the Rust `GlContextPtr::get_active_uniform_block_i()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_active_uniform_block_i(glcontextptr: &AzGlContextPtr, program: u32, index: u32, pname: u32) -> i32 { glcontextptr.get_active_uniform_block_i(program, index, pname) }
/// Equivalent to the Rust `GlContextPtr::get_active_uniform_block_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_active_uniform_block_iv(glcontextptr: &AzGlContextPtr, program: u32, index: u32, pname: u32) -> AzGLintVec { glcontextptr.get_active_uniform_block_iv(program, index, pname) }
/// Equivalent to the Rust `GlContextPtr::get_active_uniform_block_name()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_active_uniform_block_name(glcontextptr: &AzGlContextPtr, program: u32, index: u32) -> AzString { glcontextptr.get_active_uniform_block_name(program, index) }
/// Equivalent to the Rust `GlContextPtr::get_attrib_location()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_attrib_location(glcontextptr: &AzGlContextPtr, program: u32, name: AzRefstr) -> i32 { glcontextptr.get_attrib_location(program, name) }
/// Equivalent to the Rust `GlContextPtr::get_frag_data_location()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_frag_data_location(glcontextptr: &AzGlContextPtr, program: u32, name: AzRefstr) -> i32 { glcontextptr.get_frag_data_location(program, name) }
/// Equivalent to the Rust `GlContextPtr::get_uniform_location()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_uniform_location(glcontextptr: &AzGlContextPtr, program: u32, name: AzRefstr) -> i32 { glcontextptr.get_uniform_location(program, name) }
/// Equivalent to the Rust `GlContextPtr::get_program_info_log()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_program_info_log(glcontextptr: &AzGlContextPtr, program: u32) -> AzString { glcontextptr.get_program_info_log(program) }
/// Equivalent to the Rust `GlContextPtr::get_program_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_program_iv(glcontextptr: &AzGlContextPtr, program: u32, pname: u32, result: AzGLintVecRefMut) { glcontextptr.get_program_iv(program, pname, result) }
/// Equivalent to the Rust `GlContextPtr::get_program_binary()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_program_binary(glcontextptr: &AzGlContextPtr, program: u32) -> AzGetProgramBinaryReturn { glcontextptr.get_program_binary(program) }
/// Equivalent to the Rust `GlContextPtr::program_binary()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_program_binary(glcontextptr: &AzGlContextPtr, program: u32, format: u32, binary: AzU8VecRef) { glcontextptr.program_binary(program, format, binary) }
/// Equivalent to the Rust `GlContextPtr::program_parameter_i()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_program_parameter_i(glcontextptr: &AzGlContextPtr, program: u32, pname: u32, value: i32) { glcontextptr.program_parameter_i(program, pname, value) }
/// Equivalent to the Rust `GlContextPtr::get_vertex_attrib_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_vertex_attrib_iv(glcontextptr: &AzGlContextPtr, index: u32, pname: u32, result: AzGLintVecRefMut) { glcontextptr.get_vertex_attrib_iv(index, pname, result) }
/// Equivalent to the Rust `GlContextPtr::get_vertex_attrib_fv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_vertex_attrib_fv(glcontextptr: &AzGlContextPtr, index: u32, pname: u32, result: AzGLfloatVecRefMut) { glcontextptr.get_vertex_attrib_fv(index, pname, result) }
/// Equivalent to the Rust `GlContextPtr::get_vertex_attrib_pointer_v()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_vertex_attrib_pointer_v(glcontextptr: &AzGlContextPtr, index: u32, pname: u32) -> isize { glcontextptr.get_vertex_attrib_pointer_v(index, pname) }
/// Equivalent to the Rust `GlContextPtr::get_buffer_parameter_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_buffer_parameter_iv(glcontextptr: &AzGlContextPtr, target: u32, pname: u32) -> i32 { glcontextptr.get_buffer_parameter_iv(target, pname) }
/// Equivalent to the Rust `GlContextPtr::get_shader_info_log()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_shader_info_log(glcontextptr: &AzGlContextPtr, shader: u32) -> AzString { glcontextptr.get_shader_info_log(shader) }
/// Equivalent to the Rust `GlContextPtr::get_string()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_string(glcontextptr: &AzGlContextPtr, which: u32) -> AzString { glcontextptr.get_string(which) }
/// Equivalent to the Rust `GlContextPtr::get_string_i()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_string_i(glcontextptr: &AzGlContextPtr, which: u32, index: u32) -> AzString { glcontextptr.get_string_i(which, index) }
/// Equivalent to the Rust `GlContextPtr::get_shader_iv()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_shader_iv(glcontextptr: &AzGlContextPtr, shader: u32, pname: u32, result: AzGLintVecRefMut) { glcontextptr.get_shader_iv(shader, pname, result) }
/// Equivalent to the Rust `GlContextPtr::get_shader_precision_format()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_shader_precision_format(glcontextptr: &AzGlContextPtr, shader_type: u32, precision_type: u32) -> AzGlShaderPrecisionFormatReturn { glcontextptr.get_shader_precision_format(shader_type, precision_type) }
/// Equivalent to the Rust `GlContextPtr::compile_shader()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_compile_shader(glcontextptr: &AzGlContextPtr, shader: u32) { glcontextptr.compile_shader(shader) }
/// Equivalent to the Rust `GlContextPtr::create_program()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_create_program(glcontextptr: &AzGlContextPtr) -> u32 { glcontextptr.create_program() }
/// Equivalent to the Rust `GlContextPtr::delete_program()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_delete_program(glcontextptr: &AzGlContextPtr, program: u32) { glcontextptr.delete_program(program) }
/// Equivalent to the Rust `GlContextPtr::create_shader()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_create_shader(glcontextptr: &AzGlContextPtr, shader_type: u32) -> u32 { glcontextptr.create_shader(shader_type) }
/// Equivalent to the Rust `GlContextPtr::delete_shader()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_delete_shader(glcontextptr: &AzGlContextPtr, shader: u32) { glcontextptr.delete_shader(shader) }
/// Equivalent to the Rust `GlContextPtr::detach_shader()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_detach_shader(glcontextptr: &AzGlContextPtr, program: u32, shader: u32) { glcontextptr.detach_shader(program, shader) }
/// Equivalent to the Rust `GlContextPtr::link_program()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_link_program(glcontextptr: &AzGlContextPtr, program: u32) { glcontextptr.link_program(program) }
/// Equivalent to the Rust `GlContextPtr::clear_color()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_clear_color(glcontextptr: &AzGlContextPtr, r: f32, g: f32, b: f32, a: f32) { glcontextptr.clear_color(r, g, b, a) }
/// Equivalent to the Rust `GlContextPtr::clear()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_clear(glcontextptr: &AzGlContextPtr, buffer_mask: u32) { glcontextptr.clear(buffer_mask) }
/// Equivalent to the Rust `GlContextPtr::clear_depth()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_clear_depth(glcontextptr: &AzGlContextPtr, depth: f64) { glcontextptr.clear_depth(depth) }
/// Equivalent to the Rust `GlContextPtr::clear_stencil()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_clear_stencil(glcontextptr: &AzGlContextPtr, s: i32) { glcontextptr.clear_stencil(s) }
/// Equivalent to the Rust `GlContextPtr::flush()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_flush(glcontextptr: &AzGlContextPtr) { glcontextptr.flush() }
/// Equivalent to the Rust `GlContextPtr::finish()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_finish(glcontextptr: &AzGlContextPtr) { glcontextptr.finish() }
/// Equivalent to the Rust `GlContextPtr::get_error()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_error(glcontextptr: &AzGlContextPtr) -> u32 { glcontextptr.get_error() }
/// Equivalent to the Rust `GlContextPtr::stencil_mask()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_stencil_mask(glcontextptr: &AzGlContextPtr, mask: u32) { glcontextptr.stencil_mask(mask) }
/// Equivalent to the Rust `GlContextPtr::stencil_mask_separate()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_stencil_mask_separate(glcontextptr: &AzGlContextPtr, face: u32, mask: u32) { glcontextptr.stencil_mask_separate(face, mask) }
/// Equivalent to the Rust `GlContextPtr::stencil_func()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_stencil_func(glcontextptr: &AzGlContextPtr, func: u32, ref_: i32, mask: u32) { glcontextptr.stencil_func(func, ref_, mask) }
/// Equivalent to the Rust `GlContextPtr::stencil_func_separate()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_stencil_func_separate(glcontextptr: &AzGlContextPtr, face: u32, func: u32, ref_: i32, mask: u32) { glcontextptr.stencil_func_separate(face, func, ref_, mask) }
/// Equivalent to the Rust `GlContextPtr::stencil_op()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_stencil_op(glcontextptr: &AzGlContextPtr, sfail: u32, dpfail: u32, dppass: u32) { glcontextptr.stencil_op(sfail, dpfail, dppass) }
/// Equivalent to the Rust `GlContextPtr::stencil_op_separate()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_stencil_op_separate(glcontextptr: &AzGlContextPtr, face: u32, sfail: u32, dpfail: u32, dppass: u32) { glcontextptr.stencil_op_separate(face, sfail, dpfail, dppass) }
/// Equivalent to the Rust `GlContextPtr::egl_image_target_texture2d_oes()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_egl_image_target_texture2d_oes(glcontextptr: &AzGlContextPtr, target: u32, image: *const c_void) { glcontextptr.egl_image_target_texture2d_oes(target, image) }
/// Equivalent to the Rust `GlContextPtr::generate_mipmap()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_generate_mipmap(glcontextptr: &AzGlContextPtr, target: u32) { glcontextptr.generate_mipmap(target) }
/// Equivalent to the Rust `GlContextPtr::insert_event_marker_ext()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_insert_event_marker_ext(glcontextptr: &AzGlContextPtr, message: AzRefstr) { glcontextptr.insert_event_marker_ext(message) }
/// Equivalent to the Rust `GlContextPtr::push_group_marker_ext()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_push_group_marker_ext(glcontextptr: &AzGlContextPtr, message: AzRefstr) { glcontextptr.push_group_marker_ext(message) }
/// Equivalent to the Rust `GlContextPtr::pop_group_marker_ext()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_pop_group_marker_ext(glcontextptr: &AzGlContextPtr) { glcontextptr.pop_group_marker_ext() }
/// Equivalent to the Rust `GlContextPtr::debug_message_insert_khr()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_debug_message_insert_khr(glcontextptr: &AzGlContextPtr, source: u32, type_: u32, id: u32, severity: u32, message: AzRefstr) { glcontextptr.debug_message_insert_khr(source, type_, id, severity, message) }
/// Equivalent to the Rust `GlContextPtr::push_debug_group_khr()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_push_debug_group_khr(glcontextptr: &AzGlContextPtr, source: u32, id: u32, message: AzRefstr) { glcontextptr.push_debug_group_khr(source, id, message) }
/// Equivalent to the Rust `GlContextPtr::pop_debug_group_khr()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_pop_debug_group_khr(glcontextptr: &AzGlContextPtr) { glcontextptr.pop_debug_group_khr() }
/// Equivalent to the Rust `GlContextPtr::fence_sync()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_fence_sync(glcontextptr: &AzGlContextPtr, condition: u32, flags: u32) -> AzGLsyncPtr { glcontextptr.fence_sync(condition, flags) }
/// Equivalent to the Rust `GlContextPtr::client_wait_sync()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_client_wait_sync(glcontextptr: &AzGlContextPtr, sync: AzGLsyncPtr, flags: u32, timeout: u64) -> u32 { glcontextptr.client_wait_sync(sync, flags, timeout) }
/// Equivalent to the Rust `GlContextPtr::wait_sync()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_wait_sync(glcontextptr: &AzGlContextPtr, sync: AzGLsyncPtr, flags: u32, timeout: u64) { glcontextptr.wait_sync(sync, flags, timeout) }
/// Equivalent to the Rust `GlContextPtr::delete_sync()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_delete_sync(glcontextptr: &AzGlContextPtr, sync: AzGLsyncPtr) { glcontextptr.delete_sync(sync) }
/// Equivalent to the Rust `GlContextPtr::texture_range_apple()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_texture_range_apple(glcontextptr: &AzGlContextPtr, target: u32, data: AzU8VecRef) { glcontextptr.texture_range_apple(target, data) }
/// Equivalent to the Rust `GlContextPtr::gen_fences_apple()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_gen_fences_apple(glcontextptr: &AzGlContextPtr, n: i32) -> AzGLuintVec { glcontextptr.gen_fences_apple(n) }
/// Equivalent to the Rust `GlContextPtr::delete_fences_apple()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_delete_fences_apple(glcontextptr: &AzGlContextPtr, fences: AzGLuintVecRef) { glcontextptr.delete_fences_apple(fences) }
/// Equivalent to the Rust `GlContextPtr::set_fence_apple()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_set_fence_apple(glcontextptr: &AzGlContextPtr, fence: u32) { glcontextptr.set_fence_apple(fence) }
/// Equivalent to the Rust `GlContextPtr::finish_fence_apple()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_finish_fence_apple(glcontextptr: &AzGlContextPtr, fence: u32) { glcontextptr.finish_fence_apple(fence) }
/// Equivalent to the Rust `GlContextPtr::test_fence_apple()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_test_fence_apple(glcontextptr: &AzGlContextPtr, fence: u32) { glcontextptr.test_fence_apple(fence) }
/// Equivalent to the Rust `GlContextPtr::test_object_apple()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_test_object_apple(glcontextptr: &AzGlContextPtr, object: u32, name: u32) -> u8 { glcontextptr.test_object_apple(object, name) }
/// Equivalent to the Rust `GlContextPtr::finish_object_apple()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_finish_object_apple(glcontextptr: &AzGlContextPtr, object: u32, name: u32) { glcontextptr.finish_object_apple(object, name) }
/// Equivalent to the Rust `GlContextPtr::get_frag_data_index()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_frag_data_index(glcontextptr: &AzGlContextPtr, program: u32, name: AzRefstr) -> i32 { glcontextptr.get_frag_data_index(program, name) }
/// Equivalent to the Rust `GlContextPtr::blend_barrier_khr()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_blend_barrier_khr(glcontextptr: &AzGlContextPtr) { glcontextptr.blend_barrier_khr() }
/// Equivalent to the Rust `GlContextPtr::bind_frag_data_location_indexed()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_bind_frag_data_location_indexed(glcontextptr: &AzGlContextPtr, program: u32, color_number: u32, index: u32, name: AzRefstr) { glcontextptr.bind_frag_data_location_indexed(program, color_number, index, name) }
/// Equivalent to the Rust `GlContextPtr::get_debug_messages()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_get_debug_messages(glcontextptr: &AzGlContextPtr) -> AzDebugMessageVec { glcontextptr.get_debug_messages() }
/// Equivalent to the Rust `GlContextPtr::provoking_vertex_angle()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_provoking_vertex_angle(glcontextptr: &AzGlContextPtr, mode: u32) { glcontextptr.provoking_vertex_angle(mode) }
/// Equivalent to the Rust `GlContextPtr::gen_vertex_arrays_apple()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_gen_vertex_arrays_apple(glcontextptr: &AzGlContextPtr, n: i32) -> AzGLuintVec { glcontextptr.gen_vertex_arrays_apple(n) }
/// Equivalent to the Rust `GlContextPtr::bind_vertex_array_apple()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_bind_vertex_array_apple(glcontextptr: &AzGlContextPtr, vao: u32) { glcontextptr.bind_vertex_array_apple(vao) }
/// Equivalent to the Rust `GlContextPtr::delete_vertex_arrays_apple()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_delete_vertex_arrays_apple(glcontextptr: &AzGlContextPtr, vertex_arrays: AzGLuintVecRef) { glcontextptr.delete_vertex_arrays_apple(vertex_arrays) }
/// Equivalent to the Rust `GlContextPtr::copy_texture_chromium()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_copy_texture_chromium(glcontextptr: &AzGlContextPtr, source_id: u32, source_level: i32, dest_target: u32, dest_id: u32, dest_level: i32, internal_format: i32, dest_type: u32, unpack_flip_y: u8, unpack_premultiply_alpha: u8, unpack_unmultiply_alpha: u8) { glcontextptr.copy_texture_chromium(source_id, source_level, dest_target, dest_id, dest_level, internal_format, dest_type, unpack_flip_y, unpack_premultiply_alpha, unpack_unmultiply_alpha) }
/// Equivalent to the Rust `GlContextPtr::copy_sub_texture_chromium()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_copy_sub_texture_chromium(glcontextptr: &AzGlContextPtr, source_id: u32, source_level: i32, dest_target: u32, dest_id: u32, dest_level: i32, x_offset: i32, y_offset: i32, x: i32, y: i32, width: i32, height: i32, unpack_flip_y: u8, unpack_premultiply_alpha: u8, unpack_unmultiply_alpha: u8) { glcontextptr.copy_sub_texture_chromium(source_id, source_level, dest_target, dest_id, dest_level, x_offset, y_offset, x, y, width, height, unpack_flip_y, unpack_premultiply_alpha, unpack_unmultiply_alpha) }
/// Equivalent to the Rust `GlContextPtr::egl_image_target_renderbuffer_storage_oes()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_egl_image_target_renderbuffer_storage_oes(glcontextptr: &AzGlContextPtr, target: u32, image: *const c_void) { glcontextptr.egl_image_target_renderbuffer_storage_oes(target, image) }
/// Equivalent to the Rust `GlContextPtr::copy_texture_3d_angle()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_copy_texture_3d_angle(glcontextptr: &AzGlContextPtr, source_id: u32, source_level: i32, dest_target: u32, dest_id: u32, dest_level: i32, internal_format: i32, dest_type: u32, unpack_flip_y: u8, unpack_premultiply_alpha: u8, unpack_unmultiply_alpha: u8) { glcontextptr.copy_texture_3d_angle(source_id, source_level, dest_target, dest_id, dest_level, internal_format, dest_type, unpack_flip_y, unpack_premultiply_alpha, unpack_unmultiply_alpha) }
/// Equivalent to the Rust `GlContextPtr::copy_sub_texture_3d_angle()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_copy_sub_texture_3d_angle(glcontextptr: &AzGlContextPtr, source_id: u32, source_level: i32, dest_target: u32, dest_id: u32, dest_level: i32, x_offset: i32, y_offset: i32, z_offset: i32, x: i32, y: i32, z: i32, width: i32, height: i32, depth: i32, unpack_flip_y: u8, unpack_premultiply_alpha: u8, unpack_unmultiply_alpha: u8) { glcontextptr.copy_sub_texture_3d_angle(source_id, source_level, dest_target, dest_id, dest_level, x_offset, y_offset, z_offset, x, y, z, width, height, depth, unpack_flip_y, unpack_premultiply_alpha, unpack_unmultiply_alpha) }
/// Equivalent to the Rust `GlContextPtr::buffer_storage()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_buffer_storage(glcontextptr: &AzGlContextPtr, target: u32, size: isize, data: *const c_void, flags: u32) { glcontextptr.buffer_storage(target, size, data, flags) }
/// Equivalent to the Rust `GlContextPtr::flush_mapped_buffer_range()` function.
#[no_mangle] pub extern "C" fn az_gl_context_ptr_flush_mapped_buffer_range(glcontextptr: &AzGlContextPtr, target: u32, offset: isize, length: isize) { glcontextptr.flush_mapped_buffer_range(target, offset, length) }
/// Destructor: Takes ownership of the `GlContextPtr` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_gl_context_ptr_delete(object: &mut AzGlContextPtr) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_gl_context_ptr_deep_copy(object: &AzGlContextPtr) -> AzGlContextPtr { object.clone() }

/// Re-export of rust-allocated (stack based) `Texture` struct
pub type AzTextureTT = azul_impl::gl::Texture;
pub use AzTextureTT as AzTexture;
/// Destructor: Takes ownership of the `Texture` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_texture_delete(object: &mut AzTexture) { }

/// Re-export of rust-allocated (stack based) `TextureFlags` struct
pub type AzTextureFlagsTT = azul_impl::gl::TextureFlags;
pub use AzTextureFlagsTT as AzTextureFlags;
/// Default texture flags (not opaque, not a video texture)
#[no_mangle] pub extern "C" fn az_texture_flags_default() -> AzTextureFlags { TextureFlags::default() }

/// Re-export of rust-allocated (stack based) `RawImageFormat` struct
pub type AzRawImageFormatTT = azul_impl::resources::RawImageFormat;
pub use AzRawImageFormatTT as AzRawImageFormat;
/// Destructor: Takes ownership of the `RawImageFormat` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_raw_image_format_delete(object: &mut AzRawImageFormat) { match object { azul_impl::resources::RawImageFormat::R8 => { }, azul_impl::resources::RawImageFormat::R16 => { }, azul_impl::resources::RawImageFormat::RG16 => { }, azul_impl::resources::RawImageFormat::BGRA8 => { }, azul_impl::resources::RawImageFormat::RGBAF32 => { }, azul_impl::resources::RawImageFormat::RG8 => { }, azul_impl::resources::RawImageFormat::RGBAI32 => { }, azul_impl::resources::RawImageFormat::RGBA8 => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_raw_image_format_deep_copy(object: &AzRawImageFormat) -> AzRawImageFormat { object.clone() }

/// Re-export of rust-allocated (stack based) `TextId` struct
pub type AzTextIdTT = azul_impl::resources::TextId;
pub use AzTextIdTT as AzTextId;
/// Creates a new, unique `TextId`
#[no_mangle] pub extern "C" fn az_text_id_new() -> AzTextId { TextId::new() }

/// Re-export of rust-allocated (stack based) `ImageId` struct
pub type AzImageIdTT = azul_impl::resources::ImageId;
pub use AzImageIdTT as AzImageId;
/// Creates a new, unique `ImageId`
#[no_mangle] pub extern "C" fn az_image_id_new() -> AzImageId { ImageId::new() }

/// Re-export of rust-allocated (stack based) `FontId` struct
pub type AzFontIdTT = azul_impl::resources::FontId;
pub use AzFontIdTT as AzFontId;
/// Creates a new, unique `FontId`
#[no_mangle] pub extern "C" fn az_font_id_new() -> AzFontId { FontId::new() }

/// Re-export of rust-allocated (stack based) `ImageSource` struct
pub type AzImageSourceTT = azul_impl::resources::ImageSource;
pub use AzImageSourceTT as AzImageSource;
/// Destructor: Takes ownership of the `ImageSource` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_image_source_delete(object: &mut AzImageSource) { match object { azul_impl::resources::ImageSource::Embedded(_) => { }, azul_impl::resources::ImageSource::File(_) => { }, azul_impl::resources::ImageSource::Raw(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_image_source_deep_copy(object: &AzImageSource) -> AzImageSource { object.clone() }

/// Re-export of rust-allocated (stack based) `FontSource` struct
pub type AzFontSourceTT = azul_impl::resources::FontSource;
pub use AzFontSourceTT as AzFontSource;
/// Destructor: Takes ownership of the `FontSource` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_font_source_delete(object: &mut AzFontSource) { match object { azul_impl::resources::FontSource::Embedded(_) => { }, azul_impl::resources::FontSource::File(_) => { }, azul_impl::resources::FontSource::System(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_font_source_deep_copy(object: &AzFontSource) -> AzFontSource { object.clone() }

/// Re-export of rust-allocated (stack based) `RawImage` struct
pub type AzRawImageTT = azul_impl::resources::RawImage;
pub use AzRawImageTT as AzRawImage;
/// Creates a new `RawImage` by loading the decoded bytes
#[no_mangle] pub extern "C" fn az_raw_image_new(decoded_pixels: AzU8Vec, width: usize, height: usize, data_format: AzRawImageFormat) -> AzRawImage { RawImage { pixels: decoded_pixels, width, height, data_format: data_format } }
/// Destructor: Takes ownership of the `RawImage` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_raw_image_delete(object: &mut AzRawImage) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_raw_image_deep_copy(object: &AzRawImage) -> AzRawImage { object.clone() }

/// Re-export of rust-allocated (stack based) `SvgMultiPolygon` struct
pub type AzSvgMultiPolygonTT = azul_impl::svg::SvgMultiPolygon;
pub use AzSvgMultiPolygonTT as AzSvgMultiPolygon;
/// Destructor: Takes ownership of the `SvgMultiPolygon` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_svg_multi_polygon_delete(object: &mut AzSvgMultiPolygon) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_svg_multi_polygon_deep_copy(object: &AzSvgMultiPolygon) -> AzSvgMultiPolygon { object.clone() }

/// Re-export of rust-allocated (stack based) `SvgNode` struct
pub type AzSvgNodeTT = azul_impl::svg::SvgNode;
pub use AzSvgNodeTT as AzSvgNode;
/// Destructor: Takes ownership of the `SvgNode` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_svg_node_delete(object: &mut AzSvgNode) { match object { azul_impl::svg::SvgNode::MultiPolygonCollection(_) => { }, azul_impl::svg::SvgNode::MultiPolygon(_) => { }, azul_impl::svg::SvgNode::Path(_) => { }, azul_impl::svg::SvgNode::Circle(_) => { }, azul_impl::svg::SvgNode::Rect(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_svg_node_deep_copy(object: &AzSvgNode) -> AzSvgNode { object.clone() }

/// Re-export of rust-allocated (stack based) `SvgStyledNode` struct
pub type AzSvgStyledNodeTT = azul_impl::svg::SvgStyledNode;
pub use AzSvgStyledNodeTT as AzSvgStyledNode;
/// Destructor: Takes ownership of the `SvgStyledNode` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_svg_styled_node_delete(object: &mut AzSvgStyledNode) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_svg_styled_node_deep_copy(object: &AzSvgStyledNode) -> AzSvgStyledNode { object.clone() }

/// Re-export of rust-allocated (stack based) `SvgCircle` struct
pub type AzSvgCircleTT = azul_impl::svg::SvgCircle;
pub use AzSvgCircleTT as AzSvgCircle;

/// Re-export of rust-allocated (stack based) `SvgPath` struct
pub type AzSvgPathTT = azul_impl::svg::SvgPath;
pub use AzSvgPathTT as AzSvgPath;
/// Destructor: Takes ownership of the `SvgPath` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_svg_path_delete(object: &mut AzSvgPath) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_svg_path_deep_copy(object: &AzSvgPath) -> AzSvgPath { object.clone() }

/// Re-export of rust-allocated (stack based) `SvgPathElement` struct
pub type AzSvgPathElementTT = azul_impl::svg::SvgPathElement;
pub use AzSvgPathElementTT as AzSvgPathElement;

/// Re-export of rust-allocated (stack based) `SvgLine` struct
pub type AzSvgLineTT = azul_impl::svg::SvgLine;
pub use AzSvgLineTT as AzSvgLine;

/// Re-export of rust-allocated (stack based) `SvgPoint` struct
pub type AzSvgPointTT = azul_impl::svg::SvgPoint;
pub use AzSvgPointTT as AzSvgPoint;

/// Re-export of rust-allocated (stack based) `SvgVertex` struct
pub type AzSvgVertexTT = azul_impl::svg::SvgVertex;
pub use AzSvgVertexTT as AzSvgVertex;

/// Re-export of rust-allocated (stack based) `SvgQuadraticCurve` struct
pub type AzSvgQuadraticCurveTT = azul_impl::svg::SvgQuadraticCurve;
pub use AzSvgQuadraticCurveTT as AzSvgQuadraticCurve;

/// Re-export of rust-allocated (stack based) `SvgCubicCurve` struct
pub type AzSvgCubicCurveTT = azul_impl::svg::SvgCubicCurve;
pub use AzSvgCubicCurveTT as AzSvgCubicCurve;

/// Re-export of rust-allocated (stack based) `SvgRect` struct
pub type AzSvgRectTT = azul_impl::svg::SvgRect;
pub use AzSvgRectTT as AzSvgRect;

/// Re-export of rust-allocated (stack based) `TesselatedCPUSvgNode` struct
pub type AzTesselatedCPUSvgNodeTT = azul_impl::svg::TesselatedCPUSvgNode;
pub use AzTesselatedCPUSvgNodeTT as AzTesselatedCPUSvgNode;
/// Destructor: Takes ownership of the `TesselatedCPUSvgNode` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_tesselated_cpu_svg_node_delete(object: &mut AzTesselatedCPUSvgNode) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_tesselated_cpu_svg_node_deep_copy(object: &AzTesselatedCPUSvgNode) -> AzTesselatedCPUSvgNode { object.clone() }

/// Re-export of rust-allocated (stack based) `SvgLineCap` struct
pub type AzSvgLineCapTT = azul_impl::svg::SvgLineCap;
pub use AzSvgLineCapTT as AzSvgLineCap;

/// Re-export of rust-allocated (stack based) `SvgParseOptions` struct
pub type AzSvgParseOptionsTT = azul_impl::svg::SvgParseOptions;
pub use AzSvgParseOptionsTT as AzSvgParseOptions;
/// Creates a new `SvgParseOptions` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `SvgParseOptions::default()` constructor.
#[no_mangle] pub extern "C" fn az_svg_parse_options_default() -> AzSvgParseOptions { AzSvgParseOptions::default() }
/// Destructor: Takes ownership of the `SvgParseOptions` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_svg_parse_options_delete(object: &mut AzSvgParseOptions) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_svg_parse_options_deep_copy(object: &AzSvgParseOptions) -> AzSvgParseOptions { object.clone() }

/// Re-export of rust-allocated (stack based) `ShapeRendering` struct
pub type AzShapeRenderingTT = azul_impl::svg::ShapeRendering;
pub use AzShapeRenderingTT as AzShapeRendering;

/// Re-export of rust-allocated (stack based) `TextRendering` struct
pub type AzTextRenderingTT = azul_impl::svg::TextRendering;
pub use AzTextRenderingTT as AzTextRendering;

/// Re-export of rust-allocated (stack based) `ImageRendering` struct
pub type AzImageRenderingTT = azul_impl::svg::ImageRendering;
pub use AzImageRenderingTT as AzImageRendering;

/// Re-export of rust-allocated (stack based) `FontDatabase` struct
pub type AzFontDatabaseTT = azul_impl::svg::FontDatabase;
pub use AzFontDatabaseTT as AzFontDatabase;

/// Re-export of rust-allocated (stack based) `SvgRenderOptions` struct
pub type AzSvgRenderOptionsTT = azul_impl::svg::SvgRenderOptions;
pub use AzSvgRenderOptionsTT as AzSvgRenderOptions;
/// Creates a new `SvgRenderOptions` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `SvgRenderOptions::default()` constructor.
#[no_mangle] pub extern "C" fn az_svg_render_options_default() -> AzSvgRenderOptions { AzSvgRenderOptions::default() }
/// Destructor: Takes ownership of the `SvgRenderOptions` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_svg_render_options_delete(object: &mut AzSvgRenderOptions) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_svg_render_options_deep_copy(object: &AzSvgRenderOptions) -> AzSvgRenderOptions { object.clone() }

/// Re-export of rust-allocated (stack based) `SvgFitTo` struct
pub type AzSvgFitToTT = azul_impl::svg::SvgFitTo;
pub use AzSvgFitToTT as AzSvgFitTo;

/// Re-export of rust-allocated (stack based) `Svg` struct
pub type AzSvgTT = azul_impl::svg::Svg;
pub use AzSvgTT as AzSvg;
/// Creates a new `Svg` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `Svg::parse()` constructor.
#[no_mangle] pub extern "C" fn az_svg_parse(svg_bytes: AzU8VecRef, parse_options: AzSvgParseOptions) -> AzResultSvgSvgParseError { azul_impl::svg::Svg::parse(svg_bytes.as_slice(), parse_options).into() }
/// Destructor: Takes ownership of the `Svg` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_svg_delete(object: &mut AzSvg) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_svg_deep_copy(object: &AzSvg) -> AzSvg { object.clone() }

/// Re-export of rust-allocated (stack based) `SvgXmlNode` struct
pub type AzSvgXmlNodeTT = azul_impl::svg::SvgXmlNode;
pub use AzSvgXmlNodeTT as AzSvgXmlNode;
/// Destructor: Takes ownership of the `SvgXmlNode` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_svg_xml_node_delete(object: &mut AzSvgXmlNode) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_svg_xml_node_deep_copy(object: &AzSvgXmlNode) -> AzSvgXmlNode { object.clone() }

/// Re-export of rust-allocated (stack based) `SvgLineJoin` struct
pub type AzSvgLineJoinTT = azul_impl::svg::SvgLineJoin;
pub use AzSvgLineJoinTT as AzSvgLineJoin;

/// Re-export of rust-allocated (stack based) `SvgDashPattern` struct
pub type AzSvgDashPatternTT = azul_impl::svg::SvgDashPattern;
pub use AzSvgDashPatternTT as AzSvgDashPattern;

/// Re-export of rust-allocated (stack based) `SvgStyle` struct
pub type AzSvgStyleTT = azul_impl::svg::SvgStyle;
pub use AzSvgStyleTT as AzSvgStyle;

/// Re-export of rust-allocated (stack based) `SvgFillStyle` struct
pub type AzSvgFillStyleTT = azul_impl::svg::SvgFillStyle;
pub use AzSvgFillStyleTT as AzSvgFillStyle;

/// Re-export of rust-allocated (stack based) `SvgStrokeStyle` struct
pub type AzSvgStrokeStyleTT = azul_impl::svg::SvgStrokeStyle;
pub use AzSvgStrokeStyleTT as AzSvgStrokeStyle;

/// Re-export of rust-allocated (stack based) `SvgNodeId` struct
pub type AzSvgNodeIdTT = azul_impl::resources::SvgNodeId;
pub use AzSvgNodeIdTT as AzSvgNodeId;

/// Re-export of rust-allocated (stack based) `TimerId` struct
pub type AzTimerIdTT = azul_impl::task::TimerId;
pub use AzTimerIdTT as AzTimerId;
/// Creates a new `TimerId` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `TimerId::unique()` constructor.
#[no_mangle] pub extern "C" fn az_timer_id_unique() -> AzTimerId { TimerId::unique() }

/// Re-export of rust-allocated (stack based) `Timer` struct
pub type AzTimerTT = azul_impl::task::Timer;
pub use AzTimerTT as AzTimer;
/// Creates a new `Timer` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `Timer::new()` constructor.
#[no_mangle] pub extern "C" fn az_timer_new(timer_data: AzRefAny, callback: AzTimerCallbackType) -> AzTimer { Timer::new(timer_data, callback) }
/// Equivalent to the Rust `Timer::with_delay()` function.
#[no_mangle] pub extern "C" fn az_timer_with_delay(timer: AzTimer, delay: AzDuration) -> AzTimer { timer.with_delay(delay) }
/// Equivalent to the Rust `Timer::with_interval()` function.
#[no_mangle] pub extern "C" fn az_timer_with_interval(timer: AzTimer, interval: AzDuration) -> AzTimer { timer.with_interval(interval) }
/// Equivalent to the Rust `Timer::with_timeout()` function.
#[no_mangle] pub extern "C" fn az_timer_with_timeout(timer: AzTimer, timeout: AzDuration) -> AzTimer { timer.with_timeout(timeout) }
/// Destructor: Takes ownership of the `Timer` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_timer_delete(object: &mut AzTimer) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_timer_deep_copy(object: &AzTimer) -> AzTimer { object.clone() }

/// Should a timer terminate or not - used to remove active timers
pub type AzTerminateTimerTT = azul_impl::task::TerminateTimer;
pub use AzTerminateTimerTT as AzTerminateTimer;

/// Re-export of rust-allocated (stack based) `ThreadSender` struct
pub type AzThreadSenderTT = azul_impl::task::ThreadSender;
pub use AzThreadSenderTT as AzThreadSender;
/// Equivalent to the Rust `ThreadSender::send()` function.
#[no_mangle] pub extern "C" fn az_thread_sender_send(threadsender: &mut AzThreadSender, msg: AzThreadReceiveMsg) -> bool { threadsender.send(msg) }
/// Destructor: Takes ownership of the `ThreadSender` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_thread_sender_delete(object: &mut AzThreadSender) { }

/// Re-export of rust-allocated (stack based) `ThreadReceiver` struct
pub type AzThreadReceiverTT = azul_impl::task::ThreadReceiver;
pub use AzThreadReceiverTT as AzThreadReceiver;
/// Equivalent to the Rust `ThreadReceiver::receive()` function.
#[no_mangle] pub extern "C" fn az_thread_receiver_receive(threadreceiver: &mut AzThreadReceiver) -> AzOptionThreadSendMsg { threadreceiver.recv().into() }
/// Destructor: Takes ownership of the `ThreadReceiver` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_thread_receiver_delete(object: &mut AzThreadReceiver) { }

/// Re-export of rust-allocated (stack based) `ThreadSendMsg` struct
pub type AzThreadSendMsgTT = azul_impl::task::ThreadSendMsg;
pub use AzThreadSendMsgTT as AzThreadSendMsg;

/// Re-export of rust-allocated (stack based) `ThreadReceiveMsg` struct
pub type AzThreadReceiveMsgTT = azul_impl::task::ThreadReceiveMsg;
pub use AzThreadReceiveMsgTT as AzThreadReceiveMsg;
/// Destructor: Takes ownership of the `ThreadReceiveMsg` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_thread_receive_msg_delete(object: &mut AzThreadReceiveMsg) { match object { azul_impl::task::ThreadReceiveMsg::WriteBack(_) => { }, azul_impl::task::ThreadReceiveMsg::Update(_) => { }, }
}

/// Re-export of rust-allocated (stack based) `ThreadWriteBackMsg` struct
pub type AzThreadWriteBackMsgTT = azul_impl::task::ThreadWriteBackMsg;
pub use AzThreadWriteBackMsgTT as AzThreadWriteBackMsg;
/// Destructor: Takes ownership of the `ThreadWriteBackMsg` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_thread_write_back_msg_delete(object: &mut AzThreadWriteBackMsg) { }

/// Re-export of rust-allocated (stack based) `ThreadId` struct
pub type AzThreadIdTT = azul_impl::task::ThreadId;
pub use AzThreadIdTT as AzThreadId;

/// Re-export of rust-allocated (stack based) `RendererOptions` struct
pub type AzRendererOptionsTT = azul_impl::window::RendererOptions;
pub use AzRendererOptionsTT as AzRendererOptions;

/// Re-export of rust-allocated (stack based) `Vsync` struct
pub type AzVsyncTT = azul_impl::window::Vsync;
pub use AzVsyncTT as AzVsync;

/// Re-export of rust-allocated (stack based) `Srgb` struct
pub type AzSrgbTT = azul_impl::window::Srgb;
pub use AzSrgbTT as AzSrgb;

/// Re-export of rust-allocated (stack based) `HwAcceleration` struct
pub type AzHwAccelerationTT = azul_impl::window::HwAcceleration;
pub use AzHwAccelerationTT as AzHwAcceleration;

/// Re-export of rust-allocated (stack based) `LayoutPoint` struct
pub type AzLayoutPointTT = azul_impl::css::LayoutPoint;
pub use AzLayoutPointTT as AzLayoutPoint;

/// Re-export of rust-allocated (stack based) `LayoutSize` struct
pub type AzLayoutSizeTT = azul_impl::css::LayoutSize;
pub use AzLayoutSizeTT as AzLayoutSize;

/// Re-export of rust-allocated (stack based) `LayoutRect` struct
pub type AzLayoutRectTT = azul_impl::css::LayoutRect;
pub use AzLayoutRectTT as AzLayoutRect;

/// Re-export of rust-allocated (stack based) `RawWindowHandle` struct
pub type AzRawWindowHandleTT = azul_impl::window::RawWindowHandle;
pub use AzRawWindowHandleTT as AzRawWindowHandle;

/// Re-export of rust-allocated (stack based) `IOSHandle` struct
pub type AzIOSHandleTT = azul_impl::window::IOSHandle;
pub use AzIOSHandleTT as AzIOSHandle;

/// Re-export of rust-allocated (stack based) `MacOSHandle` struct
pub type AzMacOSHandleTT = azul_impl::window::MacOSHandle;
pub use AzMacOSHandleTT as AzMacOSHandle;

/// Re-export of rust-allocated (stack based) `XlibHandle` struct
pub type AzXlibHandleTT = azul_impl::window::XlibHandle;
pub use AzXlibHandleTT as AzXlibHandle;

/// Re-export of rust-allocated (stack based) `XcbHandle` struct
pub type AzXcbHandleTT = azul_impl::window::XcbHandle;
pub use AzXcbHandleTT as AzXcbHandle;

/// Re-export of rust-allocated (stack based) `WaylandHandle` struct
pub type AzWaylandHandleTT = azul_impl::window::WaylandHandle;
pub use AzWaylandHandleTT as AzWaylandHandle;

/// Re-export of rust-allocated (stack based) `WindowsHandle` struct
pub type AzWindowsHandleTT = azul_impl::window::WindowsHandle;
pub use AzWindowsHandleTT as AzWindowsHandle;

/// Re-export of rust-allocated (stack based) `WebHandle` struct
pub type AzWebHandleTT = azul_impl::window::WebHandle;
pub use AzWebHandleTT as AzWebHandle;

/// Re-export of rust-allocated (stack based) `AndroidHandle` struct
pub type AzAndroidHandleTT = azul_impl::window::AndroidHandle;
pub use AzAndroidHandleTT as AzAndroidHandle;

/// Re-export of rust-allocated (stack based) `TaskBarIcon` struct
pub type AzTaskBarIconTT = azul_impl::window::TaskBarIcon;
pub use AzTaskBarIconTT as AzTaskBarIcon;
/// Destructor: Takes ownership of the `TaskBarIcon` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_task_bar_icon_delete(object: &mut AzTaskBarIcon) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_task_bar_icon_deep_copy(object: &AzTaskBarIcon) -> AzTaskBarIcon { object.clone() }

/// Re-export of rust-allocated (stack based) `XWindowType` struct
pub type AzXWindowTypeTT = azul_impl::window::XWindowType;
pub use AzXWindowTypeTT as AzXWindowType;

/// Re-export of rust-allocated (stack based) `PhysicalPositionI32` struct
pub type AzPhysicalPositionI32TT = azul_impl::window::PhysicalPosition<i32>;
pub use AzPhysicalPositionI32TT as AzPhysicalPositionI32;

/// Re-export of rust-allocated (stack based) `PhysicalSizeU32` struct
pub type AzPhysicalSizeU32TT = azul_impl::window::PhysicalSize<u32>;
pub use AzPhysicalSizeU32TT as AzPhysicalSizeU32;

/// Re-export of rust-allocated (stack based) `LogicalPosition` struct
pub type AzLogicalPositionTT = azul_impl::window::LogicalPosition;
pub use AzLogicalPositionTT as AzLogicalPosition;

/// Re-export of rust-allocated (stack based) `LogicalRect` struct
pub type AzLogicalRectTT = azul_impl::window::LogicalRect;
pub use AzLogicalRectTT as AzLogicalRect;

/// Re-export of rust-allocated (stack based) `IconKey` struct
pub type AzIconKeyTT = azul_impl::window::IconKey;
pub use AzIconKeyTT as AzIconKey;

/// Re-export of rust-allocated (stack based) `SmallWindowIconBytes` struct
pub type AzSmallWindowIconBytesTT = azul_impl::window::SmallWindowIconBytes;
pub use AzSmallWindowIconBytesTT as AzSmallWindowIconBytes;
/// Destructor: Takes ownership of the `SmallWindowIconBytes` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_small_window_icon_bytes_delete(object: &mut AzSmallWindowIconBytes) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_small_window_icon_bytes_deep_copy(object: &AzSmallWindowIconBytes) -> AzSmallWindowIconBytes { object.clone() }

/// Re-export of rust-allocated (stack based) `LargeWindowIconBytes` struct
pub type AzLargeWindowIconBytesTT = azul_impl::window::LargeWindowIconBytes;
pub use AzLargeWindowIconBytesTT as AzLargeWindowIconBytes;
/// Destructor: Takes ownership of the `LargeWindowIconBytes` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_large_window_icon_bytes_delete(object: &mut AzLargeWindowIconBytes) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_large_window_icon_bytes_deep_copy(object: &AzLargeWindowIconBytes) -> AzLargeWindowIconBytes { object.clone() }

/// Re-export of rust-allocated (stack based) `WindowIcon` struct
pub type AzWindowIconTT = azul_impl::window::WindowIcon;
pub use AzWindowIconTT as AzWindowIcon;
/// Destructor: Takes ownership of the `WindowIcon` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_window_icon_delete(object: &mut AzWindowIcon) { match object { azul_impl::window::WindowIcon::Small(_) => { }, azul_impl::window::WindowIcon::Large(_) => { }, }
}
/// Clones the object
#[no_mangle] pub extern "C" fn az_window_icon_deep_copy(object: &AzWindowIcon) -> AzWindowIcon { object.clone() }

/// Re-export of rust-allocated (stack based) `VirtualKeyCode` struct
pub type AzVirtualKeyCodeTT = azul_impl::window::VirtualKeyCode;
pub use AzVirtualKeyCodeTT as AzVirtualKeyCode;

/// Re-export of rust-allocated (stack based) `AcceleratorKey` struct
pub type AzAcceleratorKeyTT = azul_impl::window::AcceleratorKey;
pub use AzAcceleratorKeyTT as AzAcceleratorKey;

/// Re-export of rust-allocated (stack based) `WindowSize` struct
pub type AzWindowSizeTT = azul_impl::window::WindowSize;
pub use AzWindowSizeTT as AzWindowSize;

/// Re-export of rust-allocated (stack based) `WindowFlags` struct
pub type AzWindowFlagsTT = azul_impl::window::WindowFlags;
pub use AzWindowFlagsTT as AzWindowFlags;

/// Re-export of rust-allocated (stack based) `DebugState` struct
pub type AzDebugStateTT = azul_impl::window::DebugState;
pub use AzDebugStateTT as AzDebugState;
/// Destructor: Takes ownership of the `DebugState` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_debug_state_delete(object: &mut AzDebugState) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_debug_state_deep_copy(object: &AzDebugState) -> AzDebugState { object.clone() }

/// Re-export of rust-allocated (stack based) `KeyboardState` struct
pub type AzKeyboardStateTT = azul_impl::window::KeyboardState;
pub use AzKeyboardStateTT as AzKeyboardState;
/// Destructor: Takes ownership of the `KeyboardState` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_keyboard_state_delete(object: &mut AzKeyboardState) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_keyboard_state_deep_copy(object: &AzKeyboardState) -> AzKeyboardState { object.clone() }

/// Re-export of rust-allocated (stack based) `MouseCursorType` struct
pub type AzMouseCursorTypeTT = azul_impl::window::MouseCursorType;
pub use AzMouseCursorTypeTT as AzMouseCursorType;

/// Re-export of rust-allocated (stack based) `CursorPosition` struct
pub type AzCursorPositionTT = azul_impl::window::CursorPosition;
pub use AzCursorPositionTT as AzCursorPosition;

/// Re-export of rust-allocated (stack based) `MouseState` struct
pub type AzMouseStateTT = azul_impl::window::MouseState;
pub use AzMouseStateTT as AzMouseState;
/// Destructor: Takes ownership of the `MouseState` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_mouse_state_delete(object: &mut AzMouseState) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_mouse_state_deep_copy(object: &AzMouseState) -> AzMouseState { object.clone() }

/// Re-export of rust-allocated (stack based) `PlatformSpecificOptions` struct
pub type AzPlatformSpecificOptionsTT = azul_impl::window::PlatformSpecificOptions;
pub use AzPlatformSpecificOptionsTT as AzPlatformSpecificOptions;
/// Destructor: Takes ownership of the `PlatformSpecificOptions` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_platform_specific_options_delete(object: &mut AzPlatformSpecificOptions) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_platform_specific_options_deep_copy(object: &AzPlatformSpecificOptions) -> AzPlatformSpecificOptions { object.clone() }

/// Re-export of rust-allocated (stack based) `WindowsWindowOptions` struct
pub type AzWindowsWindowOptionsTT = azul_impl::window::WindowsWindowOptions;
pub use AzWindowsWindowOptionsTT as AzWindowsWindowOptions;
/// Destructor: Takes ownership of the `WindowsWindowOptions` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_windows_window_options_delete(object: &mut AzWindowsWindowOptions) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_windows_window_options_deep_copy(object: &AzWindowsWindowOptions) -> AzWindowsWindowOptions { object.clone() }

/// Re-export of rust-allocated (stack based) `WaylandTheme` struct
pub type AzWaylandThemeTT = azul_impl::window::WaylandTheme;
pub use AzWaylandThemeTT as AzWaylandTheme;
/// Destructor: Takes ownership of the `WaylandTheme` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_wayland_theme_delete(object: &mut AzWaylandTheme) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_wayland_theme_deep_copy(object: &AzWaylandTheme) -> AzWaylandTheme { object.clone() }

/// Re-export of rust-allocated (stack based) `RendererType` struct
pub type AzRendererTypeTT = azul_impl::window::RendererType;
pub use AzRendererTypeTT as AzRendererType;

/// Re-export of rust-allocated (stack based) `StringPair` struct
pub type AzStringPairTT = azul_impl::window::AzStringPair;
pub use AzStringPairTT as AzStringPair;
/// Destructor: Takes ownership of the `StringPair` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_string_pair_delete(object: &mut AzStringPair) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_string_pair_deep_copy(object: &AzStringPair) -> AzStringPair { object.clone() }

/// Re-export of rust-allocated (stack based) `LinuxWindowOptions` struct
pub type AzLinuxWindowOptionsTT = azul_impl::window::LinuxWindowOptions;
pub use AzLinuxWindowOptionsTT as AzLinuxWindowOptions;
/// Destructor: Takes ownership of the `LinuxWindowOptions` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_linux_window_options_delete(object: &mut AzLinuxWindowOptions) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_linux_window_options_deep_copy(object: &AzLinuxWindowOptions) -> AzLinuxWindowOptions { object.clone() }

/// Re-export of rust-allocated (stack based) `MacWindowOptions` struct
pub type AzMacWindowOptionsTT = azul_impl::window::MacWindowOptions;
pub use AzMacWindowOptionsTT as AzMacWindowOptions;

/// Re-export of rust-allocated (stack based) `WasmWindowOptions` struct
pub type AzWasmWindowOptionsTT = azul_impl::window::WasmWindowOptions;
pub use AzWasmWindowOptionsTT as AzWasmWindowOptions;

/// Re-export of rust-allocated (stack based) `FullScreenMode` struct
pub type AzFullScreenModeTT = azul_impl::window::FullScreenMode;
pub use AzFullScreenModeTT as AzFullScreenMode;

/// Re-export of rust-allocated (stack based) `WindowTheme` struct
pub type AzWindowThemeTT = azul_impl::window::WindowTheme;
pub use AzWindowThemeTT as AzWindowTheme;

/// Re-export of rust-allocated (stack based) `WindowPosition` struct
pub type AzWindowPositionTT = azul_impl::window::WindowPosition;
pub use AzWindowPositionTT as AzWindowPosition;

/// Re-export of rust-allocated (stack based) `ImePosition` struct
pub type AzImePositionTT = azul_impl::window::ImePosition;
pub use AzImePositionTT as AzImePosition;

/// Re-export of rust-allocated (stack based) `TouchState` struct
pub type AzTouchStateTT = azul_impl::window::TouchState;
pub use AzTouchStateTT as AzTouchState;

/// Re-export of rust-allocated (stack based) `WindowState` struct
pub type AzWindowStateTT = azul_impl::window::WindowState;
pub use AzWindowStateTT as AzWindowState;
/// Creates a new `WindowState` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `WindowState::new()` constructor.
#[no_mangle] pub extern "C" fn az_window_state_new(layout_callback: AzLayoutCallbackType) -> AzWindowState { WindowState::new(layout_callback) }
/// Creates a new `WindowState` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `WindowState::default()` constructor.
#[no_mangle] pub extern "C" fn az_window_state_default() -> AzWindowState { WindowState::default() }
/// Destructor: Takes ownership of the `WindowState` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_window_state_delete(object: &mut AzWindowState) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_window_state_deep_copy(object: &AzWindowState) -> AzWindowState { object.clone() }

/// Re-export of rust-allocated (stack based) `LogicalSize` struct
pub type AzLogicalSizeTT = azul_impl::window::LogicalSize;
pub use AzLogicalSizeTT as AzLogicalSize;

/// Re-export of rust-allocated (stack based) `WindowCreateOptions` struct
pub type AzWindowCreateOptionsTT = azul_impl::window::WindowCreateOptions;
pub use AzWindowCreateOptionsTT as AzWindowCreateOptions;
/// Creates a new `WindowCreateOptions` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `WindowCreateOptions::new()` constructor.
#[no_mangle] pub extern "C" fn az_window_create_options_new(layout_callback: AzLayoutCallbackType) -> AzWindowCreateOptions { WindowCreateOptions::new(layout_callback) }
/// Creates a new `WindowCreateOptions` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `WindowCreateOptions::default()` constructor.
#[no_mangle] pub extern "C" fn az_window_create_options_default() -> AzWindowCreateOptions { WindowCreateOptions::default() }
/// Destructor: Takes ownership of the `WindowCreateOptions` pointer and deletes it.
#[no_mangle] #[allow(unused_variables)] pub extern "C" fn az_window_create_options_delete(object: &mut AzWindowCreateOptions) { }
/// Clones the object
#[no_mangle] pub extern "C" fn az_window_create_options_deep_copy(object: &AzWindowCreateOptions) -> AzWindowCreateOptions { object.clone() }


#[cfg(test)]
mod test_sizes {
    /// Return type of a regular callback - currently `AzUpdateScreen`
    pub type AzCallbackReturn = AzUpdateScreen;
    /// Callback for responding to window events
    pub type AzCallbackType = extern "C" fn(&mut AzRefAny, AzCallbackInfo) -> AzCallbackReturn;
    /// Callback fn that returns the DOM of the app
    pub type AzLayoutCallbackType = extern "C" fn(&AzRefAny, AzLayoutInfo) -> AzStyledDom;
    /// Callback for rendering to an OpenGL texture
    pub type AzGlCallbackType = extern "C" fn(&AzRefAny, AzGlCallbackInfo) -> AzGlCallbackReturn;
    /// Callback for rendering iframes (infinite data structures that have to know how large they are rendered)
    pub type AzIFrameCallbackType = extern "C" fn(&AzRefAny, AzIFrameCallbackInfo) -> AzIFrameCallbackReturn;
    /// Callback for rendering iframes (infinite data structures that have to know how large they are rendered)
    pub type AzRefAnyDestructorType = extern "C" fn(*const c_void);
    /// Callback for the `Timer` class
    pub type AzTimerCallbackType = extern "C" fn(&mut AzRefAny, &mut AzRefAny, AzTimerCallbackInfo) -> AzTimerCallbackReturn;
    /// Callback for the `Thread` class
    pub type AzThreadCallbackType= extern "C" fn(AzRefAny, AzThreadSender, AzThreadReceiver);
    /// Callback for the `WriteBack` class
    pub type AzWriteBackCallbackType =  extern "C" fn(&mut AzRefAny, AzRefAny, AzCallbackInfo) -> AzUpdateScreen;

    impl AzString {
        #[inline]
        pub fn as_str(&self) -> &str {
            unsafe { std::str::from_utf8_unchecked(self.as_bytes()) }
        }
        #[inline]
        pub fn as_bytes(&self) -> &[u8] {
            unsafe { std::slice::from_raw_parts(self.vec.ptr, self.vec.len) }
        }
    }

    impl ::std::fmt::Debug for AzCallback                   { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { write!(f, "{:x}", self.cb as usize) }}
    impl ::std::fmt::Debug for AzLayoutCallback             { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { write!(f, "{:x}", self.cb as usize) }}
    impl ::std::fmt::Debug for AzGlCallback                 { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { write!(f, "{:x}", self.cb as usize) }}
    impl ::std::fmt::Debug for AzIFrameCallback             { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { write!(f, "{:x}", self.cb as usize) }}
    impl ::std::fmt::Debug for AzTimerCallback              { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { write!(f, "{:x}", self.cb as usize) }}
    impl ::std::fmt::Debug for AzWriteBackCallback          { fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result { write!(f, "{:x}", self.cb as usize) }}
    impl ::std::fmt::Debug for AzRefAny                     {
        fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
            write!(f, "RefAny {{\r\n")?;
            write!(f, "    _internal_ptr: 0x{:x}\r\n", self._internal_ptr as usize)?;
            write!(f, "    _internal_len: {}\r\n", self._internal_len)?;
            write!(f, "    _internal_layout_size: {}\r\n", self._internal_layout_size)?;
            write!(f, "    _internal_layout_align: {}\r\n", self._internal_layout_align)?;
            write!(f, "    type_name: \"{}\"\r\n", self.type_name.as_str())?;
            write!(f, "    type_id: {}\r\n", self.type_id)?;
            write!(f, "    sharing_info: {:x}\r\n", &self.sharing_info as *const _ as usize)?;
            write!(f, "    custom_destructor: 0x{:x}\r\n", self.custom_destructor as usize)?;
            write!(f, "}}\r\n")?;
            Ok(())
        }
    }
    /// Re-export of rust-allocated (stack based) `String` struct
    #[repr(C)] #[derive(Debug)] pub struct AzString {
        pub vec: AzU8Vec,
    }
    /// Wrapper over a Rust-allocated `Vec<StyleTransform>`
    #[repr(C)] #[derive(Debug)] pub struct AzStyleTransformVec {
        pub(crate) ptr: *mut AzStyleTransform,
        pub len: usize,
        pub cap: usize,
    }
    /// Wrapper over a Rust-allocated `Vec<ContentGroup>`
    #[repr(C)] #[derive(Debug)] pub struct AzContentGroupVec {
        pub(crate) ptr: *mut AzContentGroup,
        pub len: usize,
        pub cap: usize,
    }
    /// Wrapper over a Rust-allocated `Vec<CssProperty>`
    #[repr(C)] #[derive(Debug)] pub struct AzCssPropertyVec {
        pub(crate) ptr: *mut AzCssProperty,
        pub len: usize,
        pub cap: usize,
    }
    /// Wrapper over a Rust-allocated `Vec<SvgMultiPolygon>`
    #[repr(C)] #[derive(Debug)] pub struct AzSvgMultiPolygonVec {
        pub(crate) ptr: *mut AzSvgMultiPolygon,
        pub len: usize,
        pub cap: usize,
    }
    /// Wrapper over a Rust-allocated `Vec<SvgPath>`
    #[repr(C)] #[derive(Debug)] pub struct AzSvgPathVec {
        pub(crate) ptr: *mut AzSvgPath,
        pub len: usize,
        pub cap: usize,
    }
    /// Wrapper over a Rust-allocated `Vec<VertexAttribute>`
    #[repr(C)] #[derive(Debug)] pub struct AzVertexAttributeVec {
        pub(crate) ptr: *mut AzVertexAttribute,
        pub len: usize,
        pub cap: usize,
    }
    /// Wrapper over a Rust-allocated `VertexAttribute`
    #[repr(C)] #[derive(Debug)] pub struct AzSvgPathElementVec {
        pub(crate) ptr: *mut AzSvgPathElement,
        pub len: usize,
        pub cap: usize,
    }
    /// Wrapper over a Rust-allocated `SvgVertex`
    #[repr(C)] #[derive(Debug)] pub struct AzSvgVertexVec {
        pub(crate) ptr: *mut AzSvgVertex,
        pub len: usize,
        pub cap: usize,
    }
    /// Wrapper over a Rust-allocated `Vec<u32>`
    #[repr(C)] #[derive(Debug)] pub struct AzU32Vec {
        pub(crate) ptr: *mut u32,
        pub len: usize,
        pub cap: usize,
    }
    /// Wrapper over a Rust-allocated `XWindowType`
    #[repr(C)] #[derive(Debug)] pub struct AzXWindowTypeVec {
        pub(crate) ptr: *mut AzXWindowType,
        pub len: usize,
        pub cap: usize,
    }
    /// Wrapper over a Rust-allocated `VirtualKeyCode`
    #[repr(C)] #[derive(Debug)] pub struct AzVirtualKeyCodeVec {
        pub(crate) ptr: *mut AzVirtualKeyCode,
        pub len: usize,
        pub cap: usize,
    }
    /// Wrapper over a Rust-allocated `CascadeInfo`
    #[repr(C)] #[derive(Debug)] pub struct AzCascadeInfoVec {
        pub(crate) ptr: *mut AzCascadeInfo,
        pub len: usize,
        pub cap: usize,
    }
    /// Wrapper over a Rust-allocated `ScanCode`
    #[repr(C)] #[derive(Debug)] pub struct AzScanCodeVec {
        pub(crate) ptr: *mut u32,
        pub len: usize,
        pub cap: usize,
    }
    /// Wrapper over a Rust-allocated `CssDeclaration`
    #[repr(C)] #[derive(Debug)] pub struct AzCssDeclarationVec {
        pub(crate) ptr: *mut AzCssDeclaration,
        pub len: usize,
        pub cap: usize,
    }
    /// Wrapper over a Rust-allocated `CssPathSelector`
    #[repr(C)] #[derive(Debug)] pub struct AzCssPathSelectorVec {
        pub(crate) ptr: *mut AzCssPathSelector,
        pub len: usize,
        pub cap: usize,
    }
    /// Wrapper over a Rust-allocated `Stylesheet`
    #[repr(C)] #[derive(Debug)] pub struct AzStylesheetVec {
        pub(crate) ptr: *mut AzStylesheet,
        pub len: usize,
        pub cap: usize,
    }
    /// Wrapper over a Rust-allocated `CssRuleBlock`
    #[repr(C)] #[derive(Debug)] pub struct AzCssRuleBlockVec {
        pub(crate) ptr: *mut AzCssRuleBlock,
        pub len: usize,
        pub cap: usize,
    }
    /// Wrapper over a Rust-allocated `U8Vec`
    #[repr(C)] #[derive(Debug)] pub struct AzU8Vec {
        pub(crate) ptr: *mut u8,
        pub len: usize,
        pub cap: usize,
    }
    /// Wrapper over a Rust-allocated `CallbackData`
    #[repr(C)] #[derive(Debug)] pub struct AzCallbackDataVec {
        pub(crate) ptr: *mut AzCallbackData,
        pub len: usize,
        pub cap: usize,
    }
    /// Wrapper over a Rust-allocated `Vec<DebugMessage>`
    #[repr(C)] #[derive(Debug)] pub struct AzDebugMessageVec {
        pub(crate) ptr: *mut AzDebugMessage,
        pub len: usize,
        pub cap: usize,
    }
    /// Wrapper over a Rust-allocated `U32Vec`
    #[repr(C)] #[derive(Debug)] pub struct AzGLuintVec {
        pub(crate) ptr: *mut u32,
        pub len: usize,
        pub cap: usize,
    }
    /// Wrapper over a Rust-allocated `GLintVec`
    #[repr(C)] #[derive(Debug)] pub struct AzGLintVec {
        pub(crate) ptr: *mut i32,
        pub len: usize,
        pub cap: usize,
    }
    /// Wrapper over a Rust-allocated `DomVec`
    #[repr(C)] #[derive(Debug)] pub struct AzDomVec {
        pub(crate) ptr: *mut AzDom,
        pub len: usize,
        pub cap: usize,
    }
    /// Wrapper over a Rust-allocated `StringVec`
    #[repr(C)] #[derive(Debug)] pub struct AzStringVec {
        pub(crate) ptr: *mut AzString,
        pub len: usize,
        pub cap: usize,
    }
    /// Wrapper over a Rust-allocated `StringPairVec`
    #[repr(C)] #[derive(Debug)] pub struct AzStringPairVec {
        pub(crate) ptr: *mut AzStringPair,
        pub len: usize,
        pub cap: usize,
    }
    /// Wrapper over a Rust-allocated `GradientStopPreVec`
    #[repr(C)] #[derive(Debug)] pub struct AzGradientStopPreVec {
        pub(crate) ptr: *mut AzGradientStopPre,
        pub len: usize,
        pub cap: usize,
    }
    /// Wrapper over a Rust-allocated `CascadedCssPropertyWithSourceVec`
    #[repr(C)] #[derive(Debug)] pub struct AzCascadedCssPropertyWithSourceVec {
        pub(crate) ptr: *mut AzCascadedCssPropertyWithSource,
        pub len: usize,
        pub cap: usize,
    }
    /// Wrapper over a Rust-allocated `NodeIdVec`
    #[repr(C)] #[derive(Debug)] pub struct AzNodeIdVec {
        pub(crate) ptr: *mut AzNodeId,
        pub len: usize,
        pub cap: usize,
    }
    /// Wrapper over a Rust-allocated `NodeVec`
    #[repr(C)] #[derive(Debug)] pub struct AzNodeVec {
        pub(crate) ptr: *mut AzNode,
        pub len: usize,
        pub cap: usize,
    }
    /// Wrapper over a Rust-allocated `StyledNodeVec`
    #[repr(C)] #[derive(Debug)] pub struct AzStyledNodeVec {
        pub(crate) ptr: *mut AzStyledNode,
        pub len: usize,
        pub cap: usize,
    }
    /// Wrapper over a Rust-allocated `TagIdsToNodeIdsMappingVec`
    #[repr(C)] #[derive(Debug)] pub struct AzTagIdsToNodeIdsMappingVec {
        pub(crate) ptr: *mut AzTagIdToNodeIdMapping,
        pub len: usize,
        pub cap: usize,
    }
    /// Wrapper over a Rust-allocated `ParentWithNodeDepthVec`
    #[repr(C)] #[derive(Debug)] pub struct AzParentWithNodeDepthVec {
        pub(crate) ptr: *mut AzParentWithNodeDepth,
        pub len: usize,
        pub cap: usize,
    }
    /// Wrapper over a Rust-allocated `NodeDataVec`
    #[repr(C)] #[derive(Debug)] pub struct AzNodeDataVec {
        pub(crate) ptr: *mut AzNodeData,
        pub len: usize,
        pub cap: usize,
    }
    /// Re-export of rust-allocated (stack based) `OptionRendererOptions` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionRendererOptions {
        None,
        Some(AzRendererOptions),
    }
    /// Re-export of rust-allocated (stack based) `OptionCallback` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionCallback {
        None,
        Some(AzCallback),
    }
    /// Re-export of rust-allocated (stack based) `OptionThreadSendMsg` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionThreadSendMsg {
        None,
        Some(AzThreadSendMsg),
    }
    /// Re-export of rust-allocated (stack based) `OptionLayoutRect` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionLayoutRect {
        None,
        Some(AzLayoutRect),
    }
    /// Re-export of rust-allocated (stack based) `OptionRefAny` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionRefAny {
        None,
        Some(AzRefAny),
    }
    /// Re-export of rust-allocated (stack based) `OptionStyleOpacityValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionStyleOpacityValue {
        None,
        Some(AzStyleOpacityValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionStyleTransformVecValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionStyleTransformVecValue {
        None,
        Some(AzStyleTransformVecValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionStyleTransformOriginValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionStyleTransformOriginValue {
        None,
        Some(AzStyleTransformOriginValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionStylePerspectiveOriginValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionStylePerspectiveOriginValue {
        None,
        Some(AzStylePerspectiveOriginValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionStyleBackfaceVisibilityValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionStyleBackfaceVisibilityValue {
        None,
        Some(AzStyleBackfaceVisibilityValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionLayoutPoint` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionLayoutPoint {
        None,
        Some(AzLayoutPoint),
    }
    /// Re-export of rust-allocated (stack based) `OptionWindowTheme` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionWindowTheme {
        None,
        Some(AzWindowTheme),
    }
    /// Re-export of rust-allocated (stack based) `OptionNodeId` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionNodeId {
        None,
        Some(AzNodeId),
    }
    /// Re-export of rust-allocated (stack based) `OptionDomNodeId` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionDomNodeId {
        None,
        Some(AzDomNodeId),
    }
    /// Re-export of rust-allocated (stack based) `OptionColorU` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionColorU {
        None,
        Some(AzColorU),
    }
    /// Re-export of rust-allocated (stack based) `OptionRawImage` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionRawImage {
        None,
        Some(AzRawImage),
    }
    /// Re-export of rust-allocated (stack based) `OptionSvgDashPattern` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionSvgDashPattern {
        None,
        Some(AzSvgDashPattern),
    }
    /// Re-export of rust-allocated (stack based) `OptionWaylandTheme` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionWaylandTheme {
        None,
        Some(AzWaylandTheme),
    }
    /// Re-export of rust-allocated (stack based) `OptionTaskBarIcon` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionTaskBarIcon {
        None,
        Some(AzTaskBarIcon),
    }
    /// Re-export of rust-allocated (stack based) `OptionHwndHandle` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionHwndHandle {
        None,
        Some(*mut c_void),
    }
    /// Re-export of rust-allocated (stack based) `OptionLogicalPosition` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionLogicalPosition {
        None,
        Some(AzLogicalPosition),
    }
    /// Re-export of rust-allocated (stack based) `OptionPhysicalPositionI32` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionPhysicalPositionI32 {
        None,
        Some(AzPhysicalPositionI32),
    }
    /// Re-export of rust-allocated (stack based) `OptionWindowIcon` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionWindowIcon {
        None,
        Some(AzWindowIcon),
    }
    /// Re-export of rust-allocated (stack based) `OptionString` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionString {
        None,
        Some(AzString),
    }
    /// Re-export of rust-allocated (stack based) `OptionX11Visual` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionX11Visual {
        None,
        Some(*const c_void),
    }
    /// Re-export of rust-allocated (stack based) `OptionI32` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionI32 {
        None,
        Some(i32),
    }
    /// Re-export of rust-allocated (stack based) `OptionF32` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionF32 {
        None,
        Some(f32),
    }
    /// Re-export of rust-allocated (stack based) `OptionMouseCursorType` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionMouseCursorType {
        None,
        Some(AzMouseCursorType),
    }
    /// Re-export of rust-allocated (stack based) `OptionLogicalSize` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionLogicalSize {
        None,
        Some(AzLogicalSize),
    }
    /// Option<char> but the char is a u32, for C FFI stability reasons
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionChar {
        None,
        Some(u32),
    }
    /// Re-export of rust-allocated (stack based) `OptionVirtualKeyCode` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionVirtualKeyCode {
        None,
        Some(AzVirtualKeyCode),
    }
    /// Re-export of rust-allocated (stack based) `OptionPercentageValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionPercentageValue {
        None,
        Some(AzPercentageValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionDom` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionDom {
        None,
        Some(AzDom),
    }
    /// Re-export of rust-allocated (stack based) `OptionTexture` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionTexture {
        None,
        Some(AzTexture),
    }
    /// Re-export of rust-allocated (stack based) `OptionImageMask` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionImageMask {
        None,
        Some(AzImageMask),
    }
    /// Re-export of rust-allocated (stack based) `OptionTabIndex` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionTabIndex {
        None,
        Some(AzTabIndex),
    }
    /// Re-export of rust-allocated (stack based) `OptionStyleBackgroundContentValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionStyleBackgroundContentValue {
        None,
        Some(AzStyleBackgroundContentValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionStyleBackgroundPositionValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionStyleBackgroundPositionValue {
        None,
        Some(AzStyleBackgroundPositionValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionStyleBackgroundSizeValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionStyleBackgroundSizeValue {
        None,
        Some(AzStyleBackgroundSizeValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionStyleBackgroundRepeatValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionStyleBackgroundRepeatValue {
        None,
        Some(AzStyleBackgroundRepeatValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionStyleFontSizeValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionStyleFontSizeValue {
        None,
        Some(AzStyleFontSizeValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionStyleFontFamilyValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionStyleFontFamilyValue {
        None,
        Some(AzStyleFontFamilyValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionStyleTextColorValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionStyleTextColorValue {
        None,
        Some(AzStyleTextColorValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionStyleTextAlignmentHorzValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionStyleTextAlignmentHorzValue {
        None,
        Some(AzStyleTextAlignmentHorzValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionStyleLineHeightValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionStyleLineHeightValue {
        None,
        Some(AzStyleLineHeightValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionStyleLetterSpacingValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionStyleLetterSpacingValue {
        None,
        Some(AzStyleLetterSpacingValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionStyleWordSpacingValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionStyleWordSpacingValue {
        None,
        Some(AzStyleWordSpacingValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionStyleTabWidthValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionStyleTabWidthValue {
        None,
        Some(AzStyleTabWidthValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionStyleCursorValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionStyleCursorValue {
        None,
        Some(AzStyleCursorValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionBoxShadowPreDisplayItemValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionBoxShadowPreDisplayItemValue {
        None,
        Some(AzBoxShadowPreDisplayItemValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionStyleBorderTopColorValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionStyleBorderTopColorValue {
        None,
        Some(AzStyleBorderTopColorValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionStyleBorderLeftColorValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionStyleBorderLeftColorValue {
        None,
        Some(AzStyleBorderLeftColorValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionStyleBorderRightColorValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionStyleBorderRightColorValue {
        None,
        Some(AzStyleBorderRightColorValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionStyleBorderBottomColorValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionStyleBorderBottomColorValue {
        None,
        Some(AzStyleBorderBottomColorValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionStyleBorderTopStyleValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionStyleBorderTopStyleValue {
        None,
        Some(AzStyleBorderTopStyleValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionStyleBorderLeftStyleValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionStyleBorderLeftStyleValue {
        None,
        Some(AzStyleBorderLeftStyleValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionStyleBorderRightStyleValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionStyleBorderRightStyleValue {
        None,
        Some(AzStyleBorderRightStyleValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionStyleBorderBottomStyleValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionStyleBorderBottomStyleValue {
        None,
        Some(AzStyleBorderBottomStyleValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionStyleBorderTopLeftRadiusValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionStyleBorderTopLeftRadiusValue {
        None,
        Some(AzStyleBorderTopLeftRadiusValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionStyleBorderTopRightRadiusValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionStyleBorderTopRightRadiusValue {
        None,
        Some(AzStyleBorderTopRightRadiusValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionStyleBorderBottomLeftRadiusValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionStyleBorderBottomLeftRadiusValue {
        None,
        Some(AzStyleBorderBottomLeftRadiusValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionStyleBorderBottomRightRadiusValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionStyleBorderBottomRightRadiusValue {
        None,
        Some(AzStyleBorderBottomRightRadiusValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionLayoutDisplayValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionLayoutDisplayValue {
        None,
        Some(AzLayoutDisplayValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionLayoutFloatValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionLayoutFloatValue {
        None,
        Some(AzLayoutFloatValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionLayoutBoxSizingValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionLayoutBoxSizingValue {
        None,
        Some(AzLayoutBoxSizingValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionLayoutWidthValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionLayoutWidthValue {
        None,
        Some(AzLayoutWidthValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionLayoutHeightValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionLayoutHeightValue {
        None,
        Some(AzLayoutHeightValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionLayoutMinWidthValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionLayoutMinWidthValue {
        None,
        Some(AzLayoutMinWidthValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionLayoutMinHeightValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionLayoutMinHeightValue {
        None,
        Some(AzLayoutMinHeightValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionLayoutMaxWidthValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionLayoutMaxWidthValue {
        None,
        Some(AzLayoutMaxWidthValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionLayoutMaxHeightValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionLayoutMaxHeightValue {
        None,
        Some(AzLayoutMaxHeightValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionLayoutPositionValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionLayoutPositionValue {
        None,
        Some(AzLayoutPositionValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionLayoutTopValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionLayoutTopValue {
        None,
        Some(AzLayoutTopValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionLayoutBottomValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionLayoutBottomValue {
        None,
        Some(AzLayoutBottomValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionLayoutRightValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionLayoutRightValue {
        None,
        Some(AzLayoutRightValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionLayoutLeftValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionLayoutLeftValue {
        None,
        Some(AzLayoutLeftValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionLayoutPaddingTopValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionLayoutPaddingTopValue {
        None,
        Some(AzLayoutPaddingTopValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionLayoutPaddingBottomValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionLayoutPaddingBottomValue {
        None,
        Some(AzLayoutPaddingBottomValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionLayoutPaddingLeftValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionLayoutPaddingLeftValue {
        None,
        Some(AzLayoutPaddingLeftValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionLayoutPaddingRightValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionLayoutPaddingRightValue {
        None,
        Some(AzLayoutPaddingRightValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionLayoutMarginTopValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionLayoutMarginTopValue {
        None,
        Some(AzLayoutMarginTopValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionLayoutMarginBottomValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionLayoutMarginBottomValue {
        None,
        Some(AzLayoutMarginBottomValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionLayoutMarginLeftValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionLayoutMarginLeftValue {
        None,
        Some(AzLayoutMarginLeftValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionLayoutMarginRightValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionLayoutMarginRightValue {
        None,
        Some(AzLayoutMarginRightValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionStyleBorderTopWidthValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionStyleBorderTopWidthValue {
        None,
        Some(AzStyleBorderTopWidthValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionStyleBorderLeftWidthValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionStyleBorderLeftWidthValue {
        None,
        Some(AzStyleBorderLeftWidthValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionStyleBorderRightWidthValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionStyleBorderRightWidthValue {
        None,
        Some(AzStyleBorderRightWidthValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionStyleBorderBottomWidthValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionStyleBorderBottomWidthValue {
        None,
        Some(AzStyleBorderBottomWidthValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionOverflowValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionOverflowValue {
        None,
        Some(AzOverflowValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionLayoutFlexDirectionValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionLayoutFlexDirectionValue {
        None,
        Some(AzLayoutFlexDirectionValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionLayoutWrapValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionLayoutWrapValue {
        None,
        Some(AzLayoutWrapValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionLayoutFlexGrowValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionLayoutFlexGrowValue {
        None,
        Some(AzLayoutFlexGrowValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionLayoutFlexShrinkValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionLayoutFlexShrinkValue {
        None,
        Some(AzLayoutFlexShrinkValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionLayoutJustifyContentValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionLayoutJustifyContentValue {
        None,
        Some(AzLayoutJustifyContentValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionLayoutAlignItemsValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionLayoutAlignItemsValue {
        None,
        Some(AzLayoutAlignItemsValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionLayoutAlignContentValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionLayoutAlignContentValue {
        None,
        Some(AzLayoutAlignContentValue),
    }
    /// Re-export of rust-allocated (stack based) `OptionTagId` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionTagId {
        None,
        Some(AzTagId),
    }
    /// Re-export of rust-allocated (stack based) `OptionDuration` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionDuration {
        None,
        Some(AzDuration),
    }
    /// Re-export of rust-allocated (stack based) `OptionInstantPtr` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionInstantPtr {
        None,
        Some(AzInstantPtr),
    }
    /// Re-export of rust-allocated (stack based) `OptionUsize` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionUsize {
        None,
        Some(usize),
    }
    /// Re-export of rust-allocated (stack based) `OptionU8VecRef` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOptionU8VecRef {
        None,
        Some(AzU8VecRef),
    }
    /// Re-export of rust-allocated (stack based) `ResultSvgSvgParseError` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzResultSvgSvgParseError {
        Ok(AzSvg),
        Err(AzSvgParseError),
    }
    /// Re-export of rust-allocated (stack based) `SvgParseError` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzSvgParseError {
        InvalidFileSuffix,
        FileOpenFailed,
        NotAnUtf8Str,
        MalformedGZip,
        InvalidSize,
        ParsingFailed(AzXmlError),
    }
    /// Re-export of rust-allocated (stack based) `XmlError` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzXmlError {
        InvalidXmlPrefixUri(AzSvgParseErrorPosition),
        UnexpectedXmlUri(AzSvgParseErrorPosition),
        UnexpectedXmlnsUri(AzSvgParseErrorPosition),
        InvalidElementNamePrefix(AzSvgParseErrorPosition),
        DuplicatedNamespace(AzDuplicatedNamespaceError),
        UnknownNamespace(AzUnknownNamespaceError),
        UnexpectedCloseTag(AzUnexpectedCloseTagError),
        UnexpectedEntityCloseTag(AzSvgParseErrorPosition),
        UnknownEntityReference(AzUnknownEntityReferenceError),
        MalformedEntityReference(AzSvgParseErrorPosition),
        EntityReferenceLoop(AzSvgParseErrorPosition),
        InvalidAttributeValue(AzSvgParseErrorPosition),
        DuplicatedAttribute(AzDuplicatedAttributeError),
        NoRootNode,
        SizeLimit,
        ParserError(AzXmlParseError),
    }
    /// Re-export of rust-allocated (stack based) `DuplicatedNamespaceError` struct
    #[repr(C)] #[derive(Debug)] pub struct AzDuplicatedNamespaceError {
        pub ns: AzString,
        pub pos: AzSvgParseErrorPosition,
    }
    /// Re-export of rust-allocated (stack based) `UnknownNamespaceError` struct
    #[repr(C)] #[derive(Debug)] pub struct AzUnknownNamespaceError {
        pub ns: AzString,
        pub pos: AzSvgParseErrorPosition,
    }
    /// Re-export of rust-allocated (stack based) `UnexpectedCloseTagError` struct
    #[repr(C)] #[derive(Debug)] pub struct AzUnexpectedCloseTagError {
        pub expected: AzString,
        pub actual: AzString,
        pub pos: AzSvgParseErrorPosition,
    }
    /// Re-export of rust-allocated (stack based) `UnknownEntityReferenceError` struct
    #[repr(C)] #[derive(Debug)] pub struct AzUnknownEntityReferenceError {
        pub entity: AzString,
        pub pos: AzSvgParseErrorPosition,
    }
    /// Re-export of rust-allocated (stack based) `DuplicatedAttributeError` struct
    #[repr(C)] #[derive(Debug)] pub struct AzDuplicatedAttributeError {
        pub attribute: AzString,
        pub pos: AzSvgParseErrorPosition,
    }
    /// Re-export of rust-allocated (stack based) `XmlParseError` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzXmlParseError {
        InvalidDeclaration(AzXmlTextError),
        InvalidComment(AzXmlTextError),
        InvalidPI(AzXmlTextError),
        InvalidDoctype(AzXmlTextError),
        InvalidEntity(AzXmlTextError),
        InvalidElement(AzXmlTextError),
        InvalidAttribute(AzXmlTextError),
        InvalidCdata(AzXmlTextError),
        InvalidCharData(AzXmlTextError),
        UnknownToken(AzSvgParseErrorPosition),
    }
    /// Re-export of rust-allocated (stack based) `XmlTextError` struct
    #[repr(C)] #[derive(Debug)] pub struct AzXmlTextError {
        pub stream_error: AzXmlStreamError,
        pub pos: AzSvgParseErrorPosition,
    }
    /// Re-export of rust-allocated (stack based) `XmlStreamError` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzXmlStreamError {
        UnexpectedEndOfStream,
        InvalidName,
        NonXmlChar(AzNonXmlCharError),
        InvalidChar(AzInvalidCharError),
        InvalidCharMultiple(AzInvalidCharMultipleError),
        InvalidQuote(AzInvalidQuoteError),
        InvalidSpace(AzInvalidSpaceError),
        InvalidString(AzInvalidStringError),
        InvalidReference,
        InvalidExternalID,
        InvalidCommentData,
        InvalidCommentEnd,
        InvalidCharacterData,
    }
    /// Re-export of rust-allocated (stack based) `NonXmlCharError` struct
    #[repr(C)] #[derive(Debug)] pub struct AzNonXmlCharError {
        pub ch: char,
        pub pos: AzSvgParseErrorPosition,
    }
    /// Re-export of rust-allocated (stack based) `InvalidCharError` struct
    #[repr(C)] #[derive(Debug)] pub struct AzInvalidCharError {
        pub expected: u8,
        pub got: u8,
        pub pos: AzSvgParseErrorPosition,
    }
    /// Re-export of rust-allocated (stack based) `InvalidCharMultipleError` struct
    #[repr(C)] #[derive(Debug)] pub struct AzInvalidCharMultipleError {
        pub expected: u8,
        pub got: AzU8Vec,
        pub pos: AzSvgParseErrorPosition,
    }
    /// Re-export of rust-allocated (stack based) `InvalidQuoteError` struct
    #[repr(C)] #[derive(Debug)] pub struct AzInvalidQuoteError {
        pub got: u8,
        pub pos: AzSvgParseErrorPosition,
    }
    /// Re-export of rust-allocated (stack based) `InvalidSpaceError` struct
    #[repr(C)] #[derive(Debug)] pub struct AzInvalidSpaceError {
        pub got: u8,
        pub pos: AzSvgParseErrorPosition,
    }
    /// Re-export of rust-allocated (stack based) `InvalidStringError` struct
    #[repr(C)] #[derive(Debug)] pub struct AzInvalidStringError {
        pub got: AzString,
        pub pos: AzSvgParseErrorPosition,
    }
    /// Re-export of rust-allocated (stack based) `SvgParseErrorPosition` struct
    #[repr(C)] #[derive(Debug)] pub struct AzSvgParseErrorPosition {
        pub row: u32,
        pub col: u32,
    }
    /// Pointer to rust-allocated `Box<Instant>` struct
    #[repr(C)] #[derive(Debug)] pub struct AzInstantPtr {
        pub(crate) ptr: *mut c_void,
    }
    /// Re-export of rust-allocated (stack based) `Duration` struct
    #[repr(C)] #[derive(Debug)] pub struct AzDuration {
        pub secs: u64,
        pub nanos: u32,
    }
    /// Re-export of rust-allocated (stack based) `AppLogLevel` struct
    #[repr(C)] #[derive(Debug)] pub enum AzAppLogLevel {
        Off,
        Error,
        Warn,
        Info,
        Debug,
        Trace,
    }
    /// Configuration for optional features, such as whether to enable logging or panic hooks
    #[repr(C)] #[derive(Debug)] pub struct AzAppConfig {
        pub log_level: AzAppLogLevel,
        pub enable_visual_panic_hook: bool,
        pub enable_logging_on_panic: bool,
        pub enable_tab_navigation: bool,
        pub debug_state: AzDebugState,
    }
    /// Pointer to rust-allocated `Box<App>` struct
    #[repr(C)] #[derive(Debug)] pub struct AzAppPtr {
        pub(crate) ptr: *mut c_void,
    }
    /// Re-export of rust-allocated (stack based) `NodeId` struct
    #[repr(C)] #[derive(Debug)] pub struct AzNodeId {
        pub inner: usize,
    }
    /// Re-export of rust-allocated (stack based) `DomId` struct
    #[repr(C)] #[derive(Debug)] pub struct AzDomId {
        pub inner: usize,
    }
    /// Re-export of rust-allocated (stack based) `DomNodeId` struct
    #[repr(C)] #[derive(Debug)] pub struct AzDomNodeId {
        pub dom: AzDomId,
        pub node: AzNodeId,
    }
    /// Re-export of rust-allocated (stack based) `HidpiAdjustedBounds` struct
    #[repr(C)] #[derive(Debug)] pub struct AzHidpiAdjustedBounds {
        pub logical_size: AzLogicalSize,
        pub hidpi_factor: f32,
    }
    /// Re-export of rust-allocated (stack based) `LayoutCallback` struct
    #[repr(C)]  pub struct AzLayoutCallback {
        pub cb: AzLayoutCallbackType,
    }
    /// Re-export of rust-allocated (stack based) `Callback` struct
    #[repr(C)]  pub struct AzCallback {
        pub cb: AzCallbackType,
    }
    /// Defines the focus target for the next frame
    #[repr(C, u8)] #[derive(Debug)] pub enum AzFocusTarget {
        Id(AzDomNodeId),
        Path(AzFocusTargetPath),
        PreviousFocusItem,
        NextFocusItem,
        NoFocus,
    }
    /// Re-export of rust-allocated (stack based) `FocusTargetPath` struct
    #[repr(C)] #[derive(Debug)] pub struct AzFocusTargetPath {
        pub dom: AzDomId,
        pub css_path: AzCssPath,
    }
    /// Re-export of rust-allocated (stack based) `CallbackInfo` struct
    #[repr(C)] #[derive(Debug)] pub struct AzCallbackInfo {
        pub current_window_state: *const c_void,
        pub modifiable_window_state: *mut AzWindowState,
        pub gl_context: *const AzGlContextPtr,
        pub resources: *mut c_void,
        pub timers: *mut c_void,
        pub threads: *mut c_void,
        pub new_windows: *mut c_void,
        pub current_window_handle: *const AzRawWindowHandle,
        pub layout_results: *const c_void,
        pub stop_propagation: *mut bool,
        pub focus_target: *const c_void,
        pub current_scroll_states: *const c_void,
        pub css_properties_changed_in_callbacks: *const c_void,
        pub nodes_scrolled_in_callback: *const c_void,
        pub hit_dom_node: AzDomNodeId,
        pub cursor_relative_to_item: AzOptionLayoutPoint,
        pub cursor_in_viewport: AzOptionLayoutPoint,
    }
    /// Specifies if the screen should be updated after the callback function has returned
    #[repr(C)] #[derive(Debug)] pub enum AzUpdateScreen {
        DoNothing,
        RegenerateStyledDomForCurrentWindow,
        RegenerateStyledDomForAllWindows,
    }
    /// Re-export of rust-allocated (stack based) `IFrameCallback` struct
    #[repr(C)]  pub struct AzIFrameCallback {
        pub cb: AzIFrameCallbackType,
    }
    /// Re-export of rust-allocated (stack based) `IFrameCallbackInfo` struct
    #[repr(C)] #[derive(Debug)] pub struct AzIFrameCallbackInfo {
        pub resources: *const c_void,
        pub bounds: AzHidpiAdjustedBounds,
    }
    /// Re-export of rust-allocated (stack based) `IFrameCallbackReturn` struct
    #[repr(C)] #[derive(Debug)] pub struct AzIFrameCallbackReturn {
        pub dom: AzStyledDom,
        pub size: AzLayoutRect,
        pub virtual_size: AzOptionLayoutRect,
    }
    /// Re-export of rust-allocated (stack based) `GlCallback` struct
    #[repr(C)]  pub struct AzGlCallback {
        pub cb: AzGlCallbackType,
    }
    /// Re-export of rust-allocated (stack based) `GlCallbackInfo` struct
    #[repr(C)] #[derive(Debug)] pub struct AzGlCallbackInfo {
        pub gl_context: *const AzGlContextPtr,
        pub resources: *const c_void,
        pub bounds: AzHidpiAdjustedBounds,
    }
    /// Re-export of rust-allocated (stack based) `GlCallbackReturn` struct
    #[repr(C)] #[derive(Debug)] pub struct AzGlCallbackReturn {
        pub texture: AzOptionTexture,
    }
    /// Re-export of rust-allocated (stack based) `TimerCallback` struct
    #[repr(C)]  pub struct AzTimerCallback {
        pub cb: AzTimerCallbackType,
    }
    /// Re-export of rust-allocated (stack based) `TimerCallbackInfo` struct
    #[repr(C)] #[derive(Debug)] pub struct AzTimerCallbackInfo {
        pub callback_info: AzCallbackInfo,
        pub frame_start: AzInstantPtr,
        pub call_count: usize,
    }
    /// Re-export of rust-allocated (stack based) `TimerCallbackReturn` struct
    #[repr(C)] #[derive(Debug)] pub struct AzTimerCallbackReturn {
        pub should_update: AzUpdateScreen,
        pub should_terminate: AzTerminateTimer,
    }
    /// Re-export of rust-allocated (stack based) `WriteBackCallback` struct
    #[repr(C)]  pub struct AzWriteBackCallback {
        pub cb: AzWriteBackCallbackType,
    }
    /// Re-export of rust-allocated (stack based) `AtomicRefCount` struct
    #[repr(C)]  pub struct AzAtomicRefCount {
        pub(crate) ptr: *const c_void,
    }
    /// RefAny is a reference-counted, type-erased pointer, which stores a reference to a struct. `RefAny` can be up- and downcasted (this usually done via generics and can't be expressed in the Rust API)
    #[repr(C)]  pub struct AzRefAny {
        pub _internal_ptr: *const c_void,
        pub _internal_len: usize,
        pub _internal_layout_size: usize,
        pub _internal_layout_align: usize,
        pub type_id: u64,
        pub type_name: AzString,
        pub sharing_info: AzAtomicRefCount,
        pub custom_destructor: AzRefAnyDestructorType,
    }
    /// Re-export of rust-allocated (stack based) `LayoutInfo` struct
    #[repr(C)] #[derive(Debug)] pub struct AzLayoutInfo {
        pub window_size: *const AzWindowSize,
        pub window_size_width_stops: *mut c_void,
        pub window_size_height_stops: *mut c_void,
        pub resources: *const c_void,
    }
    /// Re-export of rust-allocated (stack based) `CssRuleBlock` struct
    #[repr(C)] #[derive(Debug)] pub struct AzCssRuleBlock {
        pub path: AzCssPath,
        pub declarations: AzCssDeclarationVec,
    }
    /// Re-export of rust-allocated (stack based) `CssDeclaration` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzCssDeclaration {
        Static(AzCssProperty),
        Dynamic(AzDynamicCssProperty),
    }
    /// Re-export of rust-allocated (stack based) `DynamicCssProperty` struct
    #[repr(C)] #[derive(Debug)] pub struct AzDynamicCssProperty {
        pub dynamic_id: AzString,
        pub default_value: AzCssProperty,
    }
    /// Re-export of rust-allocated (stack based) `CssPath` struct
    #[repr(C)] #[derive(Debug)] pub struct AzCssPath {
        pub selectors: AzCssPathSelectorVec,
    }
    /// Re-export of rust-allocated (stack based) `CssPathSelector` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzCssPathSelector {
        Global,
        Type(AzNodeTypePath),
        Class(AzString),
        Id(AzString),
        PseudoSelector(AzCssPathPseudoSelector),
        DirectChildren,
        Children,
    }
    /// Re-export of rust-allocated (stack based) `NodeTypePath` struct
    #[repr(C)] #[derive(Debug)] pub enum AzNodeTypePath {
        Body,
        Div,
        P,
        Img,
        Texture,
        IFrame,
    }
    /// Re-export of rust-allocated (stack based) `CssPathPseudoSelector` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzCssPathPseudoSelector {
        First,
        Last,
        NthChild(AzCssNthChildSelector),
        Hover,
        Active,
        Focus,
    }
    /// Re-export of rust-allocated (stack based) `CssNthChildSelector` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzCssNthChildSelector {
        Number(u32),
        Even,
        Odd,
        Pattern(AzCssNthChildPattern),
    }
    /// Re-export of rust-allocated (stack based) `CssNthChildPattern` struct
    #[repr(C)] #[derive(Debug)] pub struct AzCssNthChildPattern {
        pub repeat: u32,
        pub offset: u32,
    }
    /// Re-export of rust-allocated (stack based) `Stylesheet` struct
    #[repr(C)] #[derive(Debug)] pub struct AzStylesheet {
        pub rules: AzCssRuleBlockVec,
    }
    /// Re-export of rust-allocated (stack based) `Css` struct
    #[repr(C)] #[derive(Debug)] pub struct AzCss {
        pub stylesheets: AzStylesheetVec,
    }
    /// Re-export of rust-allocated (stack based) `CssPropertyType` struct
    #[repr(C)] #[derive(Debug)] pub enum AzCssPropertyType {
        TextColor,
        FontSize,
        FontFamily,
        TextAlign,
        LetterSpacing,
        LineHeight,
        WordSpacing,
        TabWidth,
        Cursor,
        Display,
        Float,
        BoxSizing,
        Width,
        Height,
        MinWidth,
        MinHeight,
        MaxWidth,
        MaxHeight,
        Position,
        Top,
        Right,
        Left,
        Bottom,
        FlexWrap,
        FlexDirection,
        FlexGrow,
        FlexShrink,
        JustifyContent,
        AlignItems,
        AlignContent,
        OverflowX,
        OverflowY,
        PaddingTop,
        PaddingLeft,
        PaddingRight,
        PaddingBottom,
        MarginTop,
        MarginLeft,
        MarginRight,
        MarginBottom,
        Background,
        BackgroundImage,
        BackgroundColor,
        BackgroundPosition,
        BackgroundSize,
        BackgroundRepeat,
        BorderTopLeftRadius,
        BorderTopRightRadius,
        BorderBottomLeftRadius,
        BorderBottomRightRadius,
        BorderTopColor,
        BorderRightColor,
        BorderLeftColor,
        BorderBottomColor,
        BorderTopStyle,
        BorderRightStyle,
        BorderLeftStyle,
        BorderBottomStyle,
        BorderTopWidth,
        BorderRightWidth,
        BorderLeftWidth,
        BorderBottomWidth,
        BoxShadowLeft,
        BoxShadowRight,
        BoxShadowTop,
        BoxShadowBottom,
        Opacity,
        Transform,
        PerspectiveOrigin,
        TransformOrigin,
        BackfaceVisibility,
    }
    /// Re-export of rust-allocated (stack based) `ColorU` struct
    #[repr(C)] #[derive(Debug)] pub struct AzColorU {
        pub r: u8,
        pub g: u8,
        pub b: u8,
        pub a: u8,
    }
    /// Re-export of rust-allocated (stack based) `SizeMetric` struct
    #[repr(C)] #[derive(Debug)] pub enum AzSizeMetric {
        Px,
        Pt,
        Em,
        Percent,
    }
    /// Re-export of rust-allocated (stack based) `FloatValue` struct
    #[repr(C)] #[derive(Debug)] pub struct AzFloatValue {
        pub number: isize,
    }
    /// Re-export of rust-allocated (stack based) `PixelValue` struct
    #[repr(C)] #[derive(Debug)] pub struct AzPixelValue {
        pub metric: AzSizeMetric,
        pub number: AzFloatValue,
    }
    /// Re-export of rust-allocated (stack based) `PixelValueNoPercent` struct
    #[repr(C)] #[derive(Debug)] pub struct AzPixelValueNoPercent {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `BoxShadowClipMode` struct
    #[repr(C)] #[derive(Debug)] pub enum AzBoxShadowClipMode {
        Outset,
        Inset,
    }
    /// Re-export of rust-allocated (stack based) `BoxShadowPreDisplayItem` struct
    #[repr(C)] #[derive(Debug)] pub struct AzBoxShadowPreDisplayItem {
        pub offset: [AzPixelValueNoPercent;2],
        pub color: AzColorU,
        pub blur_radius: AzPixelValueNoPercent,
        pub spread_radius: AzPixelValueNoPercent,
        pub clip_mode: AzBoxShadowClipMode,
    }
    /// Re-export of rust-allocated (stack based) `LayoutAlignContent` struct
    #[repr(C)] #[derive(Debug)] pub enum AzLayoutAlignContent {
        Stretch,
        Center,
        Start,
        End,
        SpaceBetween,
        SpaceAround,
    }
    /// Re-export of rust-allocated (stack based) `LayoutAlignItems` struct
    #[repr(C)] #[derive(Debug)] pub enum AzLayoutAlignItems {
        Stretch,
        Center,
        FlexStart,
        FlexEnd,
    }
    /// Re-export of rust-allocated (stack based) `LayoutBottom` struct
    #[repr(C)] #[derive(Debug)] pub struct AzLayoutBottom {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `LayoutBoxSizing` struct
    #[repr(C)] #[derive(Debug)] pub enum AzLayoutBoxSizing {
        ContentBox,
        BorderBox,
    }
    /// Re-export of rust-allocated (stack based) `LayoutFlexDirection` struct
    #[repr(C)] #[derive(Debug)] pub enum AzLayoutFlexDirection {
        Row,
        RowReverse,
        Column,
        ColumnReverse,
    }
    /// Re-export of rust-allocated (stack based) `LayoutDisplay` struct
    #[repr(C)] #[derive(Debug)] pub enum AzLayoutDisplay {
        Flex,
        Block,
        InlineBlock,
    }
    /// Re-export of rust-allocated (stack based) `LayoutFlexGrow` struct
    #[repr(C)] #[derive(Debug)] pub struct AzLayoutFlexGrow {
        pub inner: AzFloatValue,
    }
    /// Re-export of rust-allocated (stack based) `LayoutFlexShrink` struct
    #[repr(C)] #[derive(Debug)] pub struct AzLayoutFlexShrink {
        pub inner: AzFloatValue,
    }
    /// Re-export of rust-allocated (stack based) `LayoutFloat` struct
    #[repr(C)] #[derive(Debug)] pub enum AzLayoutFloat {
        Left,
        Right,
    }
    /// Re-export of rust-allocated (stack based) `LayoutHeight` struct
    #[repr(C)] #[derive(Debug)] pub struct AzLayoutHeight {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `LayoutJustifyContent` struct
    #[repr(C)] #[derive(Debug)] pub enum AzLayoutJustifyContent {
        Start,
        End,
        Center,
        SpaceBetween,
        SpaceAround,
        SpaceEvenly,
    }
    /// Re-export of rust-allocated (stack based) `LayoutLeft` struct
    #[repr(C)] #[derive(Debug)] pub struct AzLayoutLeft {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `LayoutMarginBottom` struct
    #[repr(C)] #[derive(Debug)] pub struct AzLayoutMarginBottom {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `LayoutMarginLeft` struct
    #[repr(C)] #[derive(Debug)] pub struct AzLayoutMarginLeft {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `LayoutMarginRight` struct
    #[repr(C)] #[derive(Debug)] pub struct AzLayoutMarginRight {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `LayoutMarginTop` struct
    #[repr(C)] #[derive(Debug)] pub struct AzLayoutMarginTop {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `LayoutMaxHeight` struct
    #[repr(C)] #[derive(Debug)] pub struct AzLayoutMaxHeight {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `LayoutMaxWidth` struct
    #[repr(C)] #[derive(Debug)] pub struct AzLayoutMaxWidth {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `LayoutMinHeight` struct
    #[repr(C)] #[derive(Debug)] pub struct AzLayoutMinHeight {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `LayoutMinWidth` struct
    #[repr(C)] #[derive(Debug)] pub struct AzLayoutMinWidth {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `LayoutPaddingBottom` struct
    #[repr(C)] #[derive(Debug)] pub struct AzLayoutPaddingBottom {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `LayoutPaddingLeft` struct
    #[repr(C)] #[derive(Debug)] pub struct AzLayoutPaddingLeft {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `LayoutPaddingRight` struct
    #[repr(C)] #[derive(Debug)] pub struct AzLayoutPaddingRight {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `LayoutPaddingTop` struct
    #[repr(C)] #[derive(Debug)] pub struct AzLayoutPaddingTop {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `LayoutPosition` struct
    #[repr(C)] #[derive(Debug)] pub enum AzLayoutPosition {
        Static,
        Relative,
        Absolute,
        Fixed,
    }
    /// Re-export of rust-allocated (stack based) `LayoutRight` struct
    #[repr(C)] #[derive(Debug)] pub struct AzLayoutRight {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `LayoutTop` struct
    #[repr(C)] #[derive(Debug)] pub struct AzLayoutTop {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `LayoutWidth` struct
    #[repr(C)] #[derive(Debug)] pub struct AzLayoutWidth {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `LayoutWrap` struct
    #[repr(C)] #[derive(Debug)] pub enum AzLayoutWrap {
        Wrap,
        NoWrap,
    }
    /// Re-export of rust-allocated (stack based) `Overflow` struct
    #[repr(C)] #[derive(Debug)] pub enum AzOverflow {
        Scroll,
        Auto,
        Hidden,
        Visible,
    }
    /// Re-export of rust-allocated (stack based) `PercentageValue` struct
    #[repr(C)] #[derive(Debug)] pub struct AzPercentageValue {
        pub number: AzFloatValue,
    }
    /// Re-export of rust-allocated (stack based) `GradientStopPre` struct
    #[repr(C)] #[derive(Debug)] pub struct AzGradientStopPre {
        pub offset: AzOptionPercentageValue,
        pub color: AzColorU,
    }
    /// Re-export of rust-allocated (stack based) `DirectionCorner` struct
    #[repr(C)] #[derive(Debug)] pub enum AzDirectionCorner {
        Right,
        Left,
        Top,
        Bottom,
        TopRight,
        TopLeft,
        BottomRight,
        BottomLeft,
    }
    /// Re-export of rust-allocated (stack based) `DirectionCorners` struct
    #[repr(C)] #[derive(Debug)] pub struct AzDirectionCorners {
        pub from: AzDirectionCorner,
        pub to: AzDirectionCorner,
    }
    /// Re-export of rust-allocated (stack based) `Direction` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzDirection {
        Angle(AzFloatValue),
        FromTo(AzDirectionCorners),
    }
    /// Re-export of rust-allocated (stack based) `ExtendMode` struct
    #[repr(C)] #[derive(Debug)] pub enum AzExtendMode {
        Clamp,
        Repeat,
    }
    /// Re-export of rust-allocated (stack based) `LinearGradient` struct
    #[repr(C)] #[derive(Debug)] pub struct AzLinearGradient {
        pub direction: AzDirection,
        pub extend_mode: AzExtendMode,
        pub stops: AzGradientStopPreVec,
    }
    /// Re-export of rust-allocated (stack based) `Shape` struct
    #[repr(C)] #[derive(Debug)] pub enum AzShape {
        Ellipse,
        Circle,
    }
    /// Re-export of rust-allocated (stack based) `RadialGradient` struct
    #[repr(C)] #[derive(Debug)] pub struct AzRadialGradient {
        pub shape: AzShape,
        pub extend_mode: AzExtendMode,
        pub stops: AzGradientStopPreVec,
    }
    /// Re-export of rust-allocated (stack based) `CssImageId` struct
    #[repr(C)] #[derive(Debug)] pub struct AzCssImageId {
        pub inner: AzString,
    }
    /// Re-export of rust-allocated (stack based) `StyleBackgroundContent` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzStyleBackgroundContent {
        LinearGradient(AzLinearGradient),
        RadialGradient(AzRadialGradient),
        Image(AzCssImageId),
        Color(AzColorU),
    }
    /// Re-export of rust-allocated (stack based) `BackgroundPositionHorizontal` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzBackgroundPositionHorizontal {
        Left,
        Center,
        Right,
        Exact(AzPixelValue),
    }
    /// Re-export of rust-allocated (stack based) `BackgroundPositionVertical` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzBackgroundPositionVertical {
        Top,
        Center,
        Bottom,
        Exact(AzPixelValue),
    }
    /// Re-export of rust-allocated (stack based) `StyleBackgroundPosition` struct
    #[repr(C)] #[derive(Debug)] pub struct AzStyleBackgroundPosition {
        pub horizontal: AzBackgroundPositionHorizontal,
        pub vertical: AzBackgroundPositionVertical,
    }
    /// Re-export of rust-allocated (stack based) `StyleBackgroundRepeat` struct
    #[repr(C)] #[derive(Debug)] pub enum AzStyleBackgroundRepeat {
        NoRepeat,
        Repeat,
        RepeatX,
        RepeatY,
    }
    /// Re-export of rust-allocated (stack based) `StyleBackgroundSize` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzStyleBackgroundSize {
        ExactSize([AzPixelValue;2]),
        Contain,
        Cover,
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderBottomColor` struct
    #[repr(C)] #[derive(Debug)] pub struct AzStyleBorderBottomColor {
        pub inner: AzColorU,
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderBottomLeftRadius` struct
    #[repr(C)] #[derive(Debug)] pub struct AzStyleBorderBottomLeftRadius {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderBottomRightRadius` struct
    #[repr(C)] #[derive(Debug)] pub struct AzStyleBorderBottomRightRadius {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `BorderStyle` struct
    #[repr(C)] #[derive(Debug)] pub enum AzBorderStyle {
        None,
        Solid,
        Double,
        Dotted,
        Dashed,
        Hidden,
        Groove,
        Ridge,
        Inset,
        Outset,
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderBottomStyle` struct
    #[repr(C)] #[derive(Debug)] pub struct AzStyleBorderBottomStyle {
        pub inner: AzBorderStyle,
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderBottomWidth` struct
    #[repr(C)] #[derive(Debug)] pub struct AzStyleBorderBottomWidth {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderLeftColor` struct
    #[repr(C)] #[derive(Debug)] pub struct AzStyleBorderLeftColor {
        pub inner: AzColorU,
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderLeftStyle` struct
    #[repr(C)] #[derive(Debug)] pub struct AzStyleBorderLeftStyle {
        pub inner: AzBorderStyle,
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderLeftWidth` struct
    #[repr(C)] #[derive(Debug)] pub struct AzStyleBorderLeftWidth {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderRightColor` struct
    #[repr(C)] #[derive(Debug)] pub struct AzStyleBorderRightColor {
        pub inner: AzColorU,
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderRightStyle` struct
    #[repr(C)] #[derive(Debug)] pub struct AzStyleBorderRightStyle {
        pub inner: AzBorderStyle,
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderRightWidth` struct
    #[repr(C)] #[derive(Debug)] pub struct AzStyleBorderRightWidth {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderTopColor` struct
    #[repr(C)] #[derive(Debug)] pub struct AzStyleBorderTopColor {
        pub inner: AzColorU,
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderTopLeftRadius` struct
    #[repr(C)] #[derive(Debug)] pub struct AzStyleBorderTopLeftRadius {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderTopRightRadius` struct
    #[repr(C)] #[derive(Debug)] pub struct AzStyleBorderTopRightRadius {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderTopStyle` struct
    #[repr(C)] #[derive(Debug)] pub struct AzStyleBorderTopStyle {
        pub inner: AzBorderStyle,
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderTopWidth` struct
    #[repr(C)] #[derive(Debug)] pub struct AzStyleBorderTopWidth {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `StyleCursor` struct
    #[repr(C)] #[derive(Debug)] pub enum AzStyleCursor {
        Alias,
        AllScroll,
        Cell,
        ColResize,
        ContextMenu,
        Copy,
        Crosshair,
        Default,
        EResize,
        EwResize,
        Grab,
        Grabbing,
        Help,
        Move,
        NResize,
        NsResize,
        NeswResize,
        NwseResize,
        Pointer,
        Progress,
        RowResize,
        SResize,
        SeResize,
        Text,
        Unset,
        VerticalText,
        WResize,
        Wait,
        ZoomIn,
        ZoomOut,
    }
    /// Re-export of rust-allocated (stack based) `StyleFontFamily` struct
    #[repr(C)] #[derive(Debug)] pub struct AzStyleFontFamily {
        pub fonts: AzStringVec,
    }
    /// Re-export of rust-allocated (stack based) `StyleFontSize` struct
    #[repr(C)] #[derive(Debug)] pub struct AzStyleFontSize {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `StyleLetterSpacing` struct
    #[repr(C)] #[derive(Debug)] pub struct AzStyleLetterSpacing {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `StyleLineHeight` struct
    #[repr(C)] #[derive(Debug)] pub struct AzStyleLineHeight {
        pub inner: AzPercentageValue,
    }
    /// Re-export of rust-allocated (stack based) `StyleTabWidth` struct
    #[repr(C)] #[derive(Debug)] pub struct AzStyleTabWidth {
        pub inner: AzPercentageValue,
    }
    /// Re-export of rust-allocated (stack based) `StyleOpacity` struct
    #[repr(C)] #[derive(Debug)] pub struct AzStyleOpacity {
        pub inner: AzFloatValue,
    }
    /// Re-export of rust-allocated (stack based) `StyleTransformOrigin` struct
    #[repr(C)] #[derive(Debug)] pub struct AzStyleTransformOrigin {
        pub x: AzPixelValue,
        pub y: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `StylePerspectiveOrigin` struct
    #[repr(C)] #[derive(Debug)] pub struct AzStylePerspectiveOrigin {
        pub x: AzPixelValue,
        pub y: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `StyleBackfaceVisibility` struct
    #[repr(C)] #[derive(Debug)] pub enum AzStyleBackfaceVisibility {
        Hidden,
        Visible,
    }
    /// Re-export of rust-allocated (stack based) `StyleTransform` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzStyleTransform {
        Matrix(AzStyleTransformMatrix2D),
        Matrix3D(AzStyleTransformMatrix3D),
        Translate(AzStyleTransformTranslate2D),
        Translate3D(AzStyleTransformTranslate3D),
        TranslateX(AzPixelValue),
        TranslateY(AzPixelValue),
        TranslateZ(AzPixelValue),
        Rotate(AzPercentageValue),
        Rotate3D(AzStyleTransformRotate3D),
        RotateX(AzPercentageValue),
        RotateY(AzPercentageValue),
        RotateZ(AzPercentageValue),
        Scale(AzStyleTransformScale2D),
        Scale3D(AzStyleTransformScale3D),
        ScaleX(AzPercentageValue),
        ScaleY(AzPercentageValue),
        ScaleZ(AzPercentageValue),
        Skew(AzStyleTransformSkew2D),
        SkewX(AzPercentageValue),
        SkewY(AzPercentageValue),
        Perspective(AzPixelValue),
    }
    /// Re-export of rust-allocated (stack based) `StyleTransformMatrix2D` struct
    #[repr(C)] #[derive(Debug)] pub struct AzStyleTransformMatrix2D {
        pub a: AzPixelValue,
        pub b: AzPixelValue,
        pub c: AzPixelValue,
        pub d: AzPixelValue,
        pub tx: AzPixelValue,
        pub ty: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `StyleTransformMatrix3D` struct
    #[repr(C)] #[derive(Debug)] pub struct AzStyleTransformMatrix3D {
        pub m11: AzPixelValue,
        pub m12: AzPixelValue,
        pub m13: AzPixelValue,
        pub m14: AzPixelValue,
        pub m21: AzPixelValue,
        pub m22: AzPixelValue,
        pub m23: AzPixelValue,
        pub m24: AzPixelValue,
        pub m31: AzPixelValue,
        pub m32: AzPixelValue,
        pub m33: AzPixelValue,
        pub m34: AzPixelValue,
        pub m41: AzPixelValue,
        pub m42: AzPixelValue,
        pub m43: AzPixelValue,
        pub m44: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `StyleTransformTranslate2D` struct
    #[repr(C)] #[derive(Debug)] pub struct AzStyleTransformTranslate2D {
        pub x: AzPixelValue,
        pub y: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `StyleTransformTranslate3D` struct
    #[repr(C)] #[derive(Debug)] pub struct AzStyleTransformTranslate3D {
        pub x: AzPixelValue,
        pub y: AzPixelValue,
        pub z: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `StyleTransformRotate3D` struct
    #[repr(C)] #[derive(Debug)] pub struct AzStyleTransformRotate3D {
        pub x: AzPercentageValue,
        pub y: AzPercentageValue,
        pub z: AzPercentageValue,
        pub angle: AzPercentageValue,
    }
    /// Re-export of rust-allocated (stack based) `StyleTransformScale2D` struct
    #[repr(C)] #[derive(Debug)] pub struct AzStyleTransformScale2D {
        pub x: AzPercentageValue,
        pub y: AzPercentageValue,
    }
    /// Re-export of rust-allocated (stack based) `StyleTransformScale3D` struct
    #[repr(C)] #[derive(Debug)] pub struct AzStyleTransformScale3D {
        pub x: AzPercentageValue,
        pub y: AzPercentageValue,
        pub z: AzPercentageValue,
    }
    /// Re-export of rust-allocated (stack based) `StyleTransformSkew2D` struct
    #[repr(C)] #[derive(Debug)] pub struct AzStyleTransformSkew2D {
        pub x: AzPercentageValue,
        pub y: AzPercentageValue,
    }
    /// Re-export of rust-allocated (stack based) `StyleTextAlignmentHorz` struct
    #[repr(C)] #[derive(Debug)] pub enum AzStyleTextAlignmentHorz {
        Left,
        Center,
        Right,
    }
    /// Re-export of rust-allocated (stack based) `StyleTextColor` struct
    #[repr(C)] #[derive(Debug)] pub struct AzStyleTextColor {
        pub inner: AzColorU,
    }
    /// Re-export of rust-allocated (stack based) `StyleWordSpacing` struct
    #[repr(C)] #[derive(Debug)] pub struct AzStyleWordSpacing {
        pub inner: AzPixelValue,
    }
    /// Re-export of rust-allocated (stack based) `BoxShadowPreDisplayItemValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzBoxShadowPreDisplayItemValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzBoxShadowPreDisplayItem),
    }
    /// Re-export of rust-allocated (stack based) `LayoutAlignContentValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzLayoutAlignContentValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutAlignContent),
    }
    /// Re-export of rust-allocated (stack based) `LayoutAlignItemsValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzLayoutAlignItemsValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutAlignItems),
    }
    /// Re-export of rust-allocated (stack based) `LayoutBottomValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzLayoutBottomValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutBottom),
    }
    /// Re-export of rust-allocated (stack based) `LayoutBoxSizingValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzLayoutBoxSizingValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutBoxSizing),
    }
    /// Re-export of rust-allocated (stack based) `LayoutFlexDirectionValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzLayoutFlexDirectionValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutFlexDirection),
    }
    /// Re-export of rust-allocated (stack based) `LayoutDisplayValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzLayoutDisplayValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutDisplay),
    }
    /// Re-export of rust-allocated (stack based) `LayoutFlexGrowValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzLayoutFlexGrowValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutFlexGrow),
    }
    /// Re-export of rust-allocated (stack based) `LayoutFlexShrinkValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzLayoutFlexShrinkValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutFlexShrink),
    }
    /// Re-export of rust-allocated (stack based) `LayoutFloatValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzLayoutFloatValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutFloat),
    }
    /// Re-export of rust-allocated (stack based) `LayoutHeightValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzLayoutHeightValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutHeight),
    }
    /// Re-export of rust-allocated (stack based) `LayoutJustifyContentValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzLayoutJustifyContentValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutJustifyContent),
    }
    /// Re-export of rust-allocated (stack based) `LayoutLeftValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzLayoutLeftValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutLeft),
    }
    /// Re-export of rust-allocated (stack based) `LayoutMarginBottomValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzLayoutMarginBottomValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutMarginBottom),
    }
    /// Re-export of rust-allocated (stack based) `LayoutMarginLeftValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzLayoutMarginLeftValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutMarginLeft),
    }
    /// Re-export of rust-allocated (stack based) `LayoutMarginRightValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzLayoutMarginRightValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutMarginRight),
    }
    /// Re-export of rust-allocated (stack based) `LayoutMarginTopValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzLayoutMarginTopValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutMarginTop),
    }
    /// Re-export of rust-allocated (stack based) `LayoutMaxHeightValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzLayoutMaxHeightValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutMaxHeight),
    }
    /// Re-export of rust-allocated (stack based) `LayoutMaxWidthValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzLayoutMaxWidthValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutMaxWidth),
    }
    /// Re-export of rust-allocated (stack based) `LayoutMinHeightValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzLayoutMinHeightValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutMinHeight),
    }
    /// Re-export of rust-allocated (stack based) `LayoutMinWidthValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzLayoutMinWidthValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutMinWidth),
    }
    /// Re-export of rust-allocated (stack based) `LayoutPaddingBottomValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzLayoutPaddingBottomValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutPaddingBottom),
    }
    /// Re-export of rust-allocated (stack based) `LayoutPaddingLeftValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzLayoutPaddingLeftValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutPaddingLeft),
    }
    /// Re-export of rust-allocated (stack based) `LayoutPaddingRightValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzLayoutPaddingRightValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutPaddingRight),
    }
    /// Re-export of rust-allocated (stack based) `LayoutPaddingTopValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzLayoutPaddingTopValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutPaddingTop),
    }
    /// Re-export of rust-allocated (stack based) `LayoutPositionValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzLayoutPositionValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutPosition),
    }
    /// Re-export of rust-allocated (stack based) `LayoutRightValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzLayoutRightValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutRight),
    }
    /// Re-export of rust-allocated (stack based) `LayoutTopValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzLayoutTopValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutTop),
    }
    /// Re-export of rust-allocated (stack based) `LayoutWidthValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzLayoutWidthValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutWidth),
    }
    /// Re-export of rust-allocated (stack based) `LayoutWrapValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzLayoutWrapValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutWrap),
    }
    /// Re-export of rust-allocated (stack based) `OverflowValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzOverflowValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzOverflow),
    }
    /// Re-export of rust-allocated (stack based) `StyleBackgroundContentValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzStyleBackgroundContentValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBackgroundContent),
    }
    /// Re-export of rust-allocated (stack based) `StyleBackgroundPositionValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzStyleBackgroundPositionValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBackgroundPosition),
    }
    /// Re-export of rust-allocated (stack based) `StyleBackgroundRepeatValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzStyleBackgroundRepeatValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBackgroundRepeat),
    }
    /// Re-export of rust-allocated (stack based) `StyleBackgroundSizeValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzStyleBackgroundSizeValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBackgroundSize),
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderBottomColorValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzStyleBorderBottomColorValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBorderBottomColor),
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderBottomLeftRadiusValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzStyleBorderBottomLeftRadiusValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBorderBottomLeftRadius),
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderBottomRightRadiusValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzStyleBorderBottomRightRadiusValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBorderBottomRightRadius),
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderBottomStyleValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzStyleBorderBottomStyleValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBorderBottomStyle),
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderBottomWidthValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzStyleBorderBottomWidthValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBorderBottomWidth),
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderLeftColorValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzStyleBorderLeftColorValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBorderLeftColor),
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderLeftStyleValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzStyleBorderLeftStyleValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBorderLeftStyle),
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderLeftWidthValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzStyleBorderLeftWidthValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBorderLeftWidth),
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderRightColorValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzStyleBorderRightColorValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBorderRightColor),
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderRightStyleValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzStyleBorderRightStyleValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBorderRightStyle),
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderRightWidthValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzStyleBorderRightWidthValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBorderRightWidth),
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderTopColorValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzStyleBorderTopColorValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBorderTopColor),
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderTopLeftRadiusValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzStyleBorderTopLeftRadiusValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBorderTopLeftRadius),
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderTopRightRadiusValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzStyleBorderTopRightRadiusValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBorderTopRightRadius),
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderTopStyleValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzStyleBorderTopStyleValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBorderTopStyle),
    }
    /// Re-export of rust-allocated (stack based) `StyleBorderTopWidthValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzStyleBorderTopWidthValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBorderTopWidth),
    }
    /// Re-export of rust-allocated (stack based) `StyleCursorValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzStyleCursorValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleCursor),
    }
    /// Re-export of rust-allocated (stack based) `StyleFontFamilyValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzStyleFontFamilyValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleFontFamily),
    }
    /// Re-export of rust-allocated (stack based) `StyleFontSizeValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzStyleFontSizeValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleFontSize),
    }
    /// Re-export of rust-allocated (stack based) `StyleLetterSpacingValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzStyleLetterSpacingValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleLetterSpacing),
    }
    /// Re-export of rust-allocated (stack based) `StyleLineHeightValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzStyleLineHeightValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleLineHeight),
    }
    /// Re-export of rust-allocated (stack based) `StyleTabWidthValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzStyleTabWidthValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleTabWidth),
    }
    /// Re-export of rust-allocated (stack based) `StyleTextAlignmentHorzValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzStyleTextAlignmentHorzValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleTextAlignmentHorz),
    }
    /// Re-export of rust-allocated (stack based) `StyleTextColorValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzStyleTextColorValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleTextColor),
    }
    /// Re-export of rust-allocated (stack based) `StyleWordSpacingValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzStyleWordSpacingValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleWordSpacing),
    }
    /// Re-export of rust-allocated (stack based) `StyleOpacityValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzStyleOpacityValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleOpacity),
    }
    /// Re-export of rust-allocated (stack based) `StyleTransformVecValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzStyleTransformVecValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleTransformVec),
    }
    /// Re-export of rust-allocated (stack based) `StyleTransformOriginValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzStyleTransformOriginValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleTransformOrigin),
    }
    /// Re-export of rust-allocated (stack based) `StylePerspectiveOriginValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzStylePerspectiveOriginValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStylePerspectiveOrigin),
    }
    /// Re-export of rust-allocated (stack based) `StyleBackfaceVisibilityValue` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzStyleBackfaceVisibilityValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBackfaceVisibility),
    }
    /// Parsed CSS key-value pair
    #[repr(C, u8)] #[derive(Debug)] pub enum AzCssProperty {
        TextColor(AzStyleTextColorValue),
        FontSize(AzStyleFontSizeValue),
        FontFamily(AzStyleFontFamilyValue),
        TextAlign(AzStyleTextAlignmentHorzValue),
        LetterSpacing(AzStyleLetterSpacingValue),
        LineHeight(AzStyleLineHeightValue),
        WordSpacing(AzStyleWordSpacingValue),
        TabWidth(AzStyleTabWidthValue),
        Cursor(AzStyleCursorValue),
        Display(AzLayoutDisplayValue),
        Float(AzLayoutFloatValue),
        BoxSizing(AzLayoutBoxSizingValue),
        Width(AzLayoutWidthValue),
        Height(AzLayoutHeightValue),
        MinWidth(AzLayoutMinWidthValue),
        MinHeight(AzLayoutMinHeightValue),
        MaxWidth(AzLayoutMaxWidthValue),
        MaxHeight(AzLayoutMaxHeightValue),
        Position(AzLayoutPositionValue),
        Top(AzLayoutTopValue),
        Right(AzLayoutRightValue),
        Left(AzLayoutLeftValue),
        Bottom(AzLayoutBottomValue),
        FlexWrap(AzLayoutWrapValue),
        FlexDirection(AzLayoutFlexDirectionValue),
        FlexGrow(AzLayoutFlexGrowValue),
        FlexShrink(AzLayoutFlexShrinkValue),
        JustifyContent(AzLayoutJustifyContentValue),
        AlignItems(AzLayoutAlignItemsValue),
        AlignContent(AzLayoutAlignContentValue),
        BackgroundContent(AzStyleBackgroundContentValue),
        BackgroundPosition(AzStyleBackgroundPositionValue),
        BackgroundSize(AzStyleBackgroundSizeValue),
        BackgroundRepeat(AzStyleBackgroundRepeatValue),
        OverflowX(AzOverflowValue),
        OverflowY(AzOverflowValue),
        PaddingTop(AzLayoutPaddingTopValue),
        PaddingLeft(AzLayoutPaddingLeftValue),
        PaddingRight(AzLayoutPaddingRightValue),
        PaddingBottom(AzLayoutPaddingBottomValue),
        MarginTop(AzLayoutMarginTopValue),
        MarginLeft(AzLayoutMarginLeftValue),
        MarginRight(AzLayoutMarginRightValue),
        MarginBottom(AzLayoutMarginBottomValue),
        BorderTopLeftRadius(AzStyleBorderTopLeftRadiusValue),
        BorderTopRightRadius(AzStyleBorderTopRightRadiusValue),
        BorderBottomLeftRadius(AzStyleBorderBottomLeftRadiusValue),
        BorderBottomRightRadius(AzStyleBorderBottomRightRadiusValue),
        BorderTopColor(AzStyleBorderTopColorValue),
        BorderRightColor(AzStyleBorderRightColorValue),
        BorderLeftColor(AzStyleBorderLeftColorValue),
        BorderBottomColor(AzStyleBorderBottomColorValue),
        BorderTopStyle(AzStyleBorderTopStyleValue),
        BorderRightStyle(AzStyleBorderRightStyleValue),
        BorderLeftStyle(AzStyleBorderLeftStyleValue),
        BorderBottomStyle(AzStyleBorderBottomStyleValue),
        BorderTopWidth(AzStyleBorderTopWidthValue),
        BorderRightWidth(AzStyleBorderRightWidthValue),
        BorderLeftWidth(AzStyleBorderLeftWidthValue),
        BorderBottomWidth(AzStyleBorderBottomWidthValue),
        BoxShadowLeft(AzBoxShadowPreDisplayItemValue),
        BoxShadowRight(AzBoxShadowPreDisplayItemValue),
        BoxShadowTop(AzBoxShadowPreDisplayItemValue),
        BoxShadowBottom(AzBoxShadowPreDisplayItemValue),
        Opacity(AzStyleOpacityValue),
        Transform(AzStyleTransformVecValue),
        TransformOrigin(AzStyleTransformOriginValue),
        PerspectiveOrigin(AzStylePerspectiveOriginValue),
        BackfaceVisibility(AzStyleBackfaceVisibilityValue),
    }
    /// Re-export of rust-allocated (stack based) `Node` struct
    #[repr(C)] #[derive(Debug)] pub struct AzNode {
        pub parent: usize,
        pub previous_sibling: usize,
        pub next_sibling: usize,
        pub first_child: usize,
        pub last_child: usize,
    }
    /// Re-export of rust-allocated (stack based) `CascadeInfo` struct
    #[repr(C)] #[derive(Debug)] pub struct AzCascadeInfo {
        pub index_in_parent: u32,
        pub is_last_child: bool,
    }
    /// Re-export of rust-allocated (stack based) `RectStyle` struct
    #[repr(C)] #[derive(Debug)] pub struct AzRectStyle {
        pub background: AzOptionStyleBackgroundContentValue,
        pub background_position: AzOptionStyleBackgroundPositionValue,
        pub background_size: AzOptionStyleBackgroundSizeValue,
        pub background_repeat: AzOptionStyleBackgroundRepeatValue,
        pub font_size: AzOptionStyleFontSizeValue,
        pub font_family: AzOptionStyleFontFamilyValue,
        pub text_color: AzOptionStyleTextColorValue,
        pub text_align: AzOptionStyleTextAlignmentHorzValue,
        pub line_height: AzOptionStyleLineHeightValue,
        pub letter_spacing: AzOptionStyleLetterSpacingValue,
        pub word_spacing: AzOptionStyleWordSpacingValue,
        pub tab_width: AzOptionStyleTabWidthValue,
        pub cursor: AzOptionStyleCursorValue,
        pub box_shadow_left: AzOptionBoxShadowPreDisplayItemValue,
        pub box_shadow_right: AzOptionBoxShadowPreDisplayItemValue,
        pub box_shadow_top: AzOptionBoxShadowPreDisplayItemValue,
        pub box_shadow_bottom: AzOptionBoxShadowPreDisplayItemValue,
        pub border_top_color: AzOptionStyleBorderTopColorValue,
        pub border_left_color: AzOptionStyleBorderLeftColorValue,
        pub border_right_color: AzOptionStyleBorderRightColorValue,
        pub border_bottom_color: AzOptionStyleBorderBottomColorValue,
        pub border_top_style: AzOptionStyleBorderTopStyleValue,
        pub border_left_style: AzOptionStyleBorderLeftStyleValue,
        pub border_right_style: AzOptionStyleBorderRightStyleValue,
        pub border_bottom_style: AzOptionStyleBorderBottomStyleValue,
        pub border_top_left_radius: AzOptionStyleBorderTopLeftRadiusValue,
        pub border_top_right_radius: AzOptionStyleBorderTopRightRadiusValue,
        pub border_bottom_left_radius: AzOptionStyleBorderBottomLeftRadiusValue,
        pub border_bottom_right_radius: AzOptionStyleBorderBottomRightRadiusValue,
        pub opacity: AzOptionStyleOpacityValue,
        pub transform: AzOptionStyleTransformVecValue,
        pub transform_origin: AzOptionStyleTransformOriginValue,
        pub perspective_origin: AzOptionStylePerspectiveOriginValue,
        pub backface_visibility: AzOptionStyleBackfaceVisibilityValue,
    }
    /// Re-export of rust-allocated (stack based) `RectLayout` struct
    #[repr(C)] #[derive(Debug)] pub struct AzRectLayout {
        pub display: AzOptionLayoutDisplayValue,
        pub float: AzOptionLayoutFloatValue,
        pub box_sizing: AzOptionLayoutBoxSizingValue,
        pub width: AzOptionLayoutWidthValue,
        pub height: AzOptionLayoutHeightValue,
        pub min_width: AzOptionLayoutMinWidthValue,
        pub min_height: AzOptionLayoutMinHeightValue,
        pub max_width: AzOptionLayoutMaxWidthValue,
        pub max_height: AzOptionLayoutMaxHeightValue,
        pub position: AzOptionLayoutPositionValue,
        pub top: AzOptionLayoutTopValue,
        pub bottom: AzOptionLayoutBottomValue,
        pub right: AzOptionLayoutRightValue,
        pub left: AzOptionLayoutLeftValue,
        pub padding_top: AzOptionLayoutPaddingTopValue,
        pub padding_bottom: AzOptionLayoutPaddingBottomValue,
        pub padding_left: AzOptionLayoutPaddingLeftValue,
        pub padding_right: AzOptionLayoutPaddingRightValue,
        pub margin_top: AzOptionLayoutMarginTopValue,
        pub margin_bottom: AzOptionLayoutMarginBottomValue,
        pub margin_left: AzOptionLayoutMarginLeftValue,
        pub margin_right: AzOptionLayoutMarginRightValue,
        pub border_top_width: AzOptionStyleBorderTopWidthValue,
        pub border_left_width: AzOptionStyleBorderLeftWidthValue,
        pub border_right_width: AzOptionStyleBorderRightWidthValue,
        pub border_bottom_width: AzOptionStyleBorderBottomWidthValue,
        pub overflow_x: AzOptionOverflowValue,
        pub overflow_y: AzOptionOverflowValue,
        pub direction: AzOptionLayoutFlexDirectionValue,
        pub wrap: AzOptionLayoutWrapValue,
        pub flex_grow: AzOptionLayoutFlexGrowValue,
        pub flex_shrink: AzOptionLayoutFlexShrinkValue,
        pub justify_content: AzOptionLayoutJustifyContentValue,
        pub align_items: AzOptionLayoutAlignItemsValue,
        pub align_content: AzOptionLayoutAlignContentValue,
    }
    /// Re-export of rust-allocated (stack based) `CascadedCssPropertyWithSource` struct
    #[repr(C)] #[derive(Debug)] pub struct AzCascadedCssPropertyWithSource {
        pub prop: AzCssProperty,
        pub source: AzCssPropertySource,
    }
    /// Re-export of rust-allocated (stack based) `CssPropertySource` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzCssPropertySource {
        Css(AzCssPath),
        Inline,
    }
    /// Re-export of rust-allocated (stack based) `StyledNodeState` struct
    #[repr(C)] #[derive(Debug)] pub enum AzStyledNodeState {
        Uninitialized,
        Normal,
        Hover,
        Active,
        Focused,
    }
    /// Re-export of rust-allocated (stack based) `StyledNode` struct
    #[repr(C)] #[derive(Debug)] pub struct AzStyledNode {
        pub css_constraints: AzCascadedCssPropertyWithSourceVec,
        pub hover_css_constraints: AzCascadedCssPropertyWithSourceVec,
        pub active_css_constraints: AzCascadedCssPropertyWithSourceVec,
        pub focus_css_constraints: AzCascadedCssPropertyWithSourceVec,
        pub state: AzStyledNodeState,
        pub tag_id: AzOptionTagId,
        pub style: AzRectStyle,
        pub layout: AzRectLayout,
    }
    /// Re-export of rust-allocated (stack based) `TagId` struct
    #[repr(C)] #[derive(Debug)] pub struct AzTagId {
        pub inner: u64,
    }
    /// Re-export of rust-allocated (stack based) `TagIdToNodeIdMapping` struct
    #[repr(C)] #[derive(Debug)] pub struct AzTagIdToNodeIdMapping {
        pub tag_id: AzTagId,
        pub node_id: AzNodeId,
        pub tab_index: AzOptionTabIndex,
    }
    /// Re-export of rust-allocated (stack based) `ParentWithNodeDepth` struct
    #[repr(C)] #[derive(Debug)] pub struct AzParentWithNodeDepth {
        pub depth: usize,
        pub node_id: AzNodeId,
    }
    /// Re-export of rust-allocated (stack based) `ContentGroup` struct
    #[repr(C)] #[derive(Debug)] pub struct AzContentGroup {
        pub root: AzNodeId,
        pub children: AzContentGroupVec,
    }
    /// Re-export of rust-allocated (stack based) `StyledDom` struct
    #[repr(C)] #[derive(Debug)] pub struct AzStyledDom {
        pub root: AzNodeId,
        pub node_hierarchy: AzNodeVec,
        pub node_data: AzNodeDataVec,
        pub styled_nodes: AzStyledNodeVec,
        pub cascade_info: AzCascadeInfoVec,
        pub tag_ids_to_node_ids: AzTagIdsToNodeIdsMappingVec,
        pub non_leaf_nodes: AzParentWithNodeDepthVec,
        pub rects_in_rendering_order: AzContentGroup,
    }
    /// Re-export of rust-allocated (stack based) `Dom` struct
    #[repr(C)] #[derive(Debug)] pub struct AzDom {
        pub root: AzNodeData,
        pub children: AzDomVec,
        pub estimated_total_children: usize,
    }
    /// Re-export of rust-allocated (stack based) `GlTextureNode` struct
    #[repr(C)] #[derive(Debug)] pub struct AzGlTextureNode {
        pub callback: AzGlCallback,
        pub data: AzRefAny,
    }
    /// Re-export of rust-allocated (stack based) `IFrameNode` struct
    #[repr(C)] #[derive(Debug)] pub struct AzIFrameNode {
        pub callback: AzIFrameCallback,
        pub data: AzRefAny,
    }
    /// Re-export of rust-allocated (stack based) `CallbackData` struct
    #[repr(C)] #[derive(Debug)] pub struct AzCallbackData {
        pub event: AzEventFilter,
        pub callback: AzCallback,
        pub data: AzRefAny,
    }
    /// Re-export of rust-allocated (stack based) `ImageMask` struct
    #[repr(C)] #[derive(Debug)] pub struct AzImageMask {
        pub image: AzImageId,
        pub rect: AzLogicalRect,
        pub repeat: bool,
    }
    /// Represents one single DOM node (node type, classes, ids and callbacks are stored here)
    #[repr(C)] #[derive(Debug)] pub struct AzNodeData {
        pub node_type: AzNodeType,
        pub dataset: AzOptionRefAny,
        pub ids: AzStringVec,
        pub classes: AzStringVec,
        pub callbacks: AzCallbackDataVec,
        pub inline_css_props: AzCssPropertyVec,
        pub inline_hover_css_props: AzCssPropertyVec,
        pub inline_active_css_props: AzCssPropertyVec,
        pub inline_focus_css_props: AzCssPropertyVec,
        pub clip_mask: AzOptionImageMask,
        pub is_draggable: bool,
        pub tab_index: AzOptionTabIndex,
    }
    /// List of core DOM node types built-into by `azul`
    #[repr(C, u8)] #[derive(Debug)] pub enum AzNodeType {
        Div,
        Body,
        Label(AzString),
        Text(AzTextId),
        Image(AzImageId),
        GlTexture(AzGlTextureNode),
        IFrame(AzIFrameNode),
    }
    /// When to call a callback action - `On::MouseOver`, `On::MouseOut`, etc.
    #[repr(C)] #[derive(Debug)] pub enum AzOn {
        MouseOver,
        MouseDown,
        LeftMouseDown,
        MiddleMouseDown,
        RightMouseDown,
        MouseUp,
        LeftMouseUp,
        MiddleMouseUp,
        RightMouseUp,
        MouseEnter,
        MouseLeave,
        Scroll,
        TextInput,
        VirtualKeyDown,
        VirtualKeyUp,
        HoveredFile,
        DroppedFile,
        HoveredFileCancelled,
        FocusReceived,
        FocusLost,
    }
    /// Re-export of rust-allocated (stack based) `EventFilter` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzEventFilter {
        Hover(AzHoverEventFilter),
        Not(AzNotEventFilter),
        Focus(AzFocusEventFilter),
        Window(AzWindowEventFilter),
        Component(AzComponentEventFilter),
        Application(AzApplicationEventFilter),
    }
    /// Re-export of rust-allocated (stack based) `HoverEventFilter` struct
    #[repr(C)] #[derive(Debug)] pub enum AzHoverEventFilter {
        MouseOver,
        MouseDown,
        LeftMouseDown,
        RightMouseDown,
        MiddleMouseDown,
        MouseUp,
        LeftMouseUp,
        RightMouseUp,
        MiddleMouseUp,
        MouseEnter,
        MouseLeave,
        Scroll,
        ScrollStart,
        ScrollEnd,
        TextInput,
        VirtualKeyDown,
        VirtualKeyUp,
        HoveredFile,
        DroppedFile,
        HoveredFileCancelled,
        TouchStart,
        TouchMove,
        TouchEnd,
        TouchCancel,
    }
    /// Re-export of rust-allocated (stack based) `FocusEventFilter` struct
    #[repr(C)] #[derive(Debug)] pub enum AzFocusEventFilter {
        MouseOver,
        MouseDown,
        LeftMouseDown,
        RightMouseDown,
        MiddleMouseDown,
        MouseUp,
        LeftMouseUp,
        RightMouseUp,
        MiddleMouseUp,
        MouseEnter,
        MouseLeave,
        Scroll,
        ScrollStart,
        ScrollEnd,
        TextInput,
        VirtualKeyDown,
        VirtualKeyUp,
        FocusReceived,
        FocusLost,
    }
    /// Re-export of rust-allocated (stack based) `NotEventFilter` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzNotEventFilter {
        Hover(AzHoverEventFilter),
        Focus(AzFocusEventFilter),
    }
    /// Re-export of rust-allocated (stack based) `WindowEventFilter` struct
    #[repr(C)] #[derive(Debug)] pub enum AzWindowEventFilter {
        MouseOver,
        MouseDown,
        LeftMouseDown,
        RightMouseDown,
        MiddleMouseDown,
        MouseUp,
        LeftMouseUp,
        RightMouseUp,
        MiddleMouseUp,
        MouseEnter,
        MouseLeave,
        Scroll,
        ScrollStart,
        ScrollEnd,
        TextInput,
        VirtualKeyDown,
        VirtualKeyUp,
        HoveredFile,
        DroppedFile,
        HoveredFileCancelled,
        Resized,
        Moved,
        TouchStart,
        TouchMove,
        TouchEnd,
        TouchCancel,
        FocusReceived,
        FocusLost,
        CloseRequested,
        ThemeChanged,
    }
    /// Re-export of rust-allocated (stack based) `ComponentEventFilter` struct
    #[repr(C)] #[derive(Debug)] pub enum AzComponentEventFilter {
        AfterMount,
        BeforeUnmount,
        NodeResized,
    }
    /// Re-export of rust-allocated (stack based) `ApplicationEventFilter` struct
    #[repr(C)] #[derive(Debug)] pub enum AzApplicationEventFilter {
        DeviceConnected,
        DeviceDisconnected,
    }
    /// Re-export of rust-allocated (stack based) `TabIndex` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzTabIndex {
        Auto,
        OverrideInParent(u32),
        NoKeyboardFocus,
    }
    /// Re-export of rust-allocated (stack based) `GlShaderPrecisionFormatReturn` struct
    #[repr(C)] #[derive(Debug)] pub struct AzGlShaderPrecisionFormatReturn {
        pub _0: i32,
        pub _1: i32,
        pub _2: i32,
    }
    /// Re-export of rust-allocated (stack based) `VertexAttributeType` struct
    #[repr(C)] #[derive(Debug)] pub enum AzVertexAttributeType {
        Float,
        Double,
        UnsignedByte,
        UnsignedShort,
        UnsignedInt,
    }
    /// Re-export of rust-allocated (stack based) `VertexAttribute` struct
    #[repr(C)] #[derive(Debug)] pub struct AzVertexAttribute {
        pub name: AzString,
        pub layout_location: AzOptionUsize,
        pub attribute_type: AzVertexAttributeType,
        pub item_count: usize,
    }
    /// Re-export of rust-allocated (stack based) `VertexLayout` struct
    #[repr(C)] #[derive(Debug)] pub struct AzVertexLayout {
        pub fields: AzVertexAttributeVec,
    }
    /// Re-export of rust-allocated (stack based) `VertexArrayObject` struct
    #[repr(C)] #[derive(Debug)] pub struct AzVertexArrayObject {
        pub vertex_layout: AzVertexLayout,
        pub vao_id: u32,
        pub gl_context: AzGlContextPtr,
    }
    /// Re-export of rust-allocated (stack based) `IndexBufferFormat` struct
    #[repr(C)] #[derive(Debug)] pub enum AzIndexBufferFormat {
        Points,
        Lines,
        LineStrip,
        Triangles,
        TriangleStrip,
        TriangleFan,
    }
    /// Re-export of rust-allocated (stack based) `VertexBuffer` struct
    #[repr(C)] #[derive(Debug)] pub struct AzVertexBuffer {
        pub vertex_buffer_id: u32,
        pub vertex_buffer_len: usize,
        pub vao: AzVertexArrayObject,
        pub index_buffer_id: u32,
        pub index_buffer_len: usize,
        pub index_buffer_format: AzIndexBufferFormat,
    }
    /// Re-export of rust-allocated (stack based) `GlType` struct
    #[repr(C)] #[derive(Debug)] pub enum AzGlType {
        Gl,
        Gles,
    }
    /// Re-export of rust-allocated (stack based) `DebugMessage` struct
    #[repr(C)] #[derive(Debug)] pub struct AzDebugMessage {
        pub message: AzString,
        pub source: u32,
        pub ty: u32,
        pub id: u32,
        pub severity: u32,
    }
    /// C-ABI stable reexport of `&[u8]`
    #[repr(C)] #[derive(Debug)] pub struct AzU8VecRef {
        pub(crate) ptr: *const u8,
        pub len: usize,
    }
    /// C-ABI stable reexport of `&mut [u8]`
    #[repr(C)] #[derive(Debug)] pub struct AzU8VecRefMut {
        pub(crate) ptr: *mut u8,
        pub len: usize,
    }
    /// C-ABI stable reexport of `&[f32]`
    #[repr(C)] #[derive(Debug)] pub struct AzF32VecRef {
        pub(crate) ptr: *const f32,
        pub len: usize,
    }
    /// C-ABI stable reexport of `&[i32]`
    #[repr(C)] #[derive(Debug)] pub struct AzI32VecRef {
        pub(crate) ptr: *const i32,
        pub len: usize,
    }
    /// C-ABI stable reexport of `&[GLuint]` aka `&[u32]`
    #[repr(C)] #[derive(Debug)] pub struct AzGLuintVecRef {
        pub(crate) ptr: *const u32,
        pub len: usize,
    }
    /// C-ABI stable reexport of `&[GLenum]` aka `&[u32]`
    #[repr(C)] #[derive(Debug)] pub struct AzGLenumVecRef {
        pub(crate) ptr: *const u32,
        pub len: usize,
    }
    /// C-ABI stable reexport of `&mut [GLint]` aka `&mut [i32]`
    #[repr(C)] #[derive(Debug)] pub struct AzGLintVecRefMut {
        pub(crate) ptr: *mut i32,
        pub len: usize,
    }
    /// C-ABI stable reexport of `&mut [GLint64]` aka `&mut [i64]`
    #[repr(C)] #[derive(Debug)] pub struct AzGLint64VecRefMut {
        pub(crate) ptr: *mut i64,
        pub len: usize,
    }
    /// C-ABI stable reexport of `&mut [GLboolean]` aka `&mut [u8]`
    #[repr(C)] #[derive(Debug)] pub struct AzGLbooleanVecRefMut {
        pub(crate) ptr: *mut u8,
        pub len: usize,
    }
    /// C-ABI stable reexport of `&mut [GLfloat]` aka `&mut [f32]`
    #[repr(C)] #[derive(Debug)] pub struct AzGLfloatVecRefMut {
        pub(crate) ptr: *mut f32,
        pub len: usize,
    }
    /// C-ABI stable reexport of `&[Refstr]` aka `&mut [&str]`
    #[repr(C)] #[derive(Debug)] pub struct AzRefstrVecRef {
        pub(crate) ptr: *const AzRefstr,
        pub len: usize,
    }
    /// C-ABI stable reexport of `&str`
    #[repr(C)] #[derive(Debug)] pub struct AzRefstr {
        pub(crate) ptr: *const u8,
        pub len: usize,
    }
    /// C-ABI stable reexport of `(U8Vec, u32)`
    #[repr(C)] #[derive(Debug)] pub struct AzGetProgramBinaryReturn {
        pub _0: AzU8Vec,
        pub _1: u32,
    }
    /// C-ABI stable reexport of `(i32, u32, AzString)`
    #[repr(C)] #[derive(Debug)] pub struct AzGetActiveAttribReturn {
        pub _0: i32,
        pub _1: u32,
        pub _2: AzString,
    }
    /// C-ABI stable reexport of `*const gleam::gl::GLsync`
    #[repr(C)] #[derive(Debug)] pub struct AzGLsyncPtr {
        pub(crate) ptr: *const c_void,
    }
    /// C-ABI stable reexport of `(i32, u32, AzString)`
    #[repr(C)] #[derive(Debug)] pub struct AzGetActiveUniformReturn {
        pub _0: i32,
        pub _1: u32,
        pub _2: AzString,
    }
    /// Re-export of rust-allocated (stack based) `GlContextPtr` struct
    #[repr(C)] #[derive(Debug)] pub struct AzGlContextPtr {
        pub(crate) ptr: *const c_void,
        pub renderer_type: AzRendererType,
    }
    /// Re-export of rust-allocated (stack based) `Texture` struct
    #[repr(C)] #[derive(Debug)] pub struct AzTexture {
        pub texture_id: u32,
        pub format: AzRawImageFormat,
        pub flags: AzTextureFlags,
        pub size: AzPhysicalSizeU32,
        pub gl_context: AzGlContextPtr,
    }
    /// Re-export of rust-allocated (stack based) `TextureFlags` struct
    #[repr(C)] #[derive(Debug)] pub struct AzTextureFlags {
        pub is_opaque: bool,
        pub is_video_texture: bool,
    }
    /// Re-export of rust-allocated (stack based) `RawImageFormat` struct
    #[repr(C)] #[derive(Debug)] pub enum AzRawImageFormat {
        R8,
        R16,
        RG16,
        BGRA8,
        RGBAF32,
        RG8,
        RGBAI32,
        RGBA8,
    }
    /// Re-export of rust-allocated (stack based) `TextId` struct
    #[repr(C)] #[derive(Debug)] pub struct AzTextId {
        pub id: usize,
    }
    /// Re-export of rust-allocated (stack based) `ImageId` struct
    #[repr(C)] #[derive(Debug)] pub struct AzImageId {
        pub id: usize,
    }
    /// Re-export of rust-allocated (stack based) `FontId` struct
    #[repr(C)] #[derive(Debug)] pub struct AzFontId {
        pub id: usize,
    }
    /// Re-export of rust-allocated (stack based) `ImageSource` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzImageSource {
        Embedded(AzU8Vec),
        File(AzString),
        Raw(AzRawImage),
    }
    /// Re-export of rust-allocated (stack based) `FontSource` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzFontSource {
        Embedded(AzU8Vec),
        File(AzString),
        System(AzString),
    }
    /// Re-export of rust-allocated (stack based) `RawImage` struct
    #[repr(C)] #[derive(Debug)] pub struct AzRawImage {
        pub pixels: AzU8Vec,
        pub width: usize,
        pub height: usize,
        pub data_format: AzRawImageFormat,
    }
    /// Re-export of rust-allocated (stack based) `SvgMultiPolygon` struct
    #[repr(C)] #[derive(Debug)] pub struct AzSvgMultiPolygon {
        pub rings: AzSvgPathVec,
    }
    /// Re-export of rust-allocated (stack based) `SvgNode` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzSvgNode {
        MultiPolygonCollection(AzSvgMultiPolygonVec),
        MultiPolygon(AzSvgMultiPolygon),
        Path(AzSvgPath),
        Circle(AzSvgCircle),
        Rect(AzSvgRect),
    }
    /// Re-export of rust-allocated (stack based) `SvgStyledNode` struct
    #[repr(C)] #[derive(Debug)] pub struct AzSvgStyledNode {
        pub geometry: AzSvgNode,
        pub style: AzSvgStyle,
    }
    /// Re-export of rust-allocated (stack based) `SvgCircle` struct
    #[repr(C)] #[derive(Debug)] pub struct AzSvgCircle {
        pub center_x: f32,
        pub center_y: f32,
        pub radius: f32,
    }
    /// Re-export of rust-allocated (stack based) `SvgPath` struct
    #[repr(C)] #[derive(Debug)] pub struct AzSvgPath {
        pub items: AzSvgPathElementVec,
    }
    /// Re-export of rust-allocated (stack based) `SvgPathElement` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzSvgPathElement {
        Line(AzSvgLine),
        QuadraticCurve(AzSvgQuadraticCurve),
        CubicCurve(AzSvgCubicCurve),
    }
    /// Re-export of rust-allocated (stack based) `SvgLine` struct
    #[repr(C)] #[derive(Debug)] pub struct AzSvgLine {
        pub start: AzSvgPoint,
        pub end: AzSvgPoint,
    }
    /// Re-export of rust-allocated (stack based) `SvgPoint` struct
    #[repr(C)] #[derive(Debug)] pub struct AzSvgPoint {
        pub x: f32,
        pub y: f32,
    }
    /// Re-export of rust-allocated (stack based) `SvgVertex` struct
    #[repr(C)] #[derive(Debug)] pub struct AzSvgVertex {
        pub x: f32,
        pub y: f32,
    }
    /// Re-export of rust-allocated (stack based) `SvgQuadraticCurve` struct
    #[repr(C)] #[derive(Debug)] pub struct AzSvgQuadraticCurve {
        pub start: AzSvgPoint,
        pub ctrl: AzSvgPoint,
        pub end: AzSvgPoint,
    }
    /// Re-export of rust-allocated (stack based) `SvgCubicCurve` struct
    #[repr(C)] #[derive(Debug)] pub struct AzSvgCubicCurve {
        pub start: AzSvgPoint,
        pub ctrl_1: AzSvgPoint,
        pub ctrl_2: AzSvgPoint,
        pub end: AzSvgPoint,
    }
    /// Re-export of rust-allocated (stack based) `SvgRect` struct
    #[repr(C)] #[derive(Debug)] pub struct AzSvgRect {
        pub width: f32,
        pub height: f32,
        pub x: f32,
        pub y: f32,
        pub radius_top_left: f32,
        pub radius_top_right: f32,
        pub radius_bottom_left: f32,
        pub radius_bottom_right: f32,
    }
    /// Re-export of rust-allocated (stack based) `TesselatedCPUSvgNode` struct
    #[repr(C)] #[derive(Debug)] pub struct AzTesselatedCPUSvgNode {
        pub vertices: AzSvgVertexVec,
        pub indices: AzU32Vec,
    }
    /// Re-export of rust-allocated (stack based) `SvgLineCap` struct
    #[repr(C)] #[derive(Debug)] pub enum AzSvgLineCap {
        Butt,
        Square,
        Round,
    }
    /// Re-export of rust-allocated (stack based) `SvgParseOptions` struct
    #[repr(C)] #[derive(Debug)] pub struct AzSvgParseOptions {
        pub relative_image_path: AzOptionString,
        pub dpi: f32,
        pub default_font_family: AzString,
        pub font_size: f32,
        pub languages: AzStringVec,
        pub shape_rendering: AzShapeRendering,
        pub text_rendering: AzTextRendering,
        pub image_rendering: AzImageRendering,
        pub keep_named_groups: bool,
        pub fontdb: AzFontDatabase,
    }
    /// Re-export of rust-allocated (stack based) `ShapeRendering` struct
    #[repr(C)] #[derive(Debug)] pub enum AzShapeRendering {
        OptimizeSpeed,
        CrispEdges,
        GeometricPrecision,
    }
    /// Re-export of rust-allocated (stack based) `TextRendering` struct
    #[repr(C)] #[derive(Debug)] pub enum AzTextRendering {
        OptimizeSpeed,
        OptimizeLegibility,
        GeometricPrecision,
    }
    /// Re-export of rust-allocated (stack based) `ImageRendering` struct
    #[repr(C)] #[derive(Debug)] pub enum AzImageRendering {
        OptimizeQuality,
        OptimizeSpeed,
    }
    /// Re-export of rust-allocated (stack based) `FontDatabase` struct
    #[repr(C)] #[derive(Debug)] pub enum AzFontDatabase {
        Empty,
        System,
    }
    /// Re-export of rust-allocated (stack based) `SvgRenderOptions` struct
    #[repr(C)] #[derive(Debug)] pub struct AzSvgRenderOptions {
        pub background_color: AzOptionColorU,
        pub fit: AzSvgFitTo,
    }
    /// Re-export of rust-allocated (stack based) `SvgFitTo` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzSvgFitTo {
        Original,
        Width(u32),
        Height(u32),
        Zoom(f32),
    }
    /// Re-export of rust-allocated (stack based) `Svg` struct
    #[repr(C)] #[derive(Debug)] pub struct AzSvg {
        pub(crate) ptr: *mut c_void,
    }
    /// Re-export of rust-allocated (stack based) `SvgXmlNode` struct
    #[repr(C)] #[derive(Debug)] pub struct AzSvgXmlNode {
        pub(crate) ptr: *mut c_void,
    }
    /// Re-export of rust-allocated (stack based) `SvgLineJoin` struct
    #[repr(C)] #[derive(Debug)] pub enum AzSvgLineJoin {
        Miter,
        MiterClip,
        Round,
        Bevel,
    }
    /// Re-export of rust-allocated (stack based) `SvgDashPattern` struct
    #[repr(C)] #[derive(Debug)] pub struct AzSvgDashPattern {
        pub offset: usize,
        pub length_1: usize,
        pub gap_1: usize,
        pub length_2: usize,
        pub gap_2: usize,
        pub length_3: usize,
        pub gap_3: usize,
    }
    /// Re-export of rust-allocated (stack based) `SvgStyle` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzSvgStyle {
        Fill(AzSvgFillStyle),
        Stroke(AzSvgStrokeStyle),
    }
    /// Re-export of rust-allocated (stack based) `SvgFillStyle` struct
    #[repr(C)] #[derive(Debug)] pub struct AzSvgFillStyle {
        pub line_join: AzSvgLineJoin,
        pub miter_limit: usize,
        pub tolerance: usize,
    }
    /// Re-export of rust-allocated (stack based) `SvgStrokeStyle` struct
    #[repr(C)] #[derive(Debug)] pub struct AzSvgStrokeStyle {
        pub start_cap: AzSvgLineCap,
        pub end_cap: AzSvgLineCap,
        pub line_join: AzSvgLineJoin,
        pub dash_pattern: AzOptionSvgDashPattern,
        pub line_width: usize,
        pub miter_limit: usize,
        pub tolerance: usize,
        pub apply_line_width: bool,
    }
    /// Re-export of rust-allocated (stack based) `SvgNodeId` struct
    #[repr(C)] #[derive(Debug)] pub struct AzSvgNodeId {
        pub id: usize,
    }
    /// Re-export of rust-allocated (stack based) `TimerId` struct
    #[repr(C)] #[derive(Debug)] pub struct AzTimerId {
        pub id: usize,
    }
    /// Re-export of rust-allocated (stack based) `Timer` struct
    #[repr(C)] #[derive(Debug)] pub struct AzTimer {
        pub data: AzRefAny,
        pub created: AzInstantPtr,
        pub last_run: AzOptionInstantPtr,
        pub run_count: usize,
        pub delay: AzOptionDuration,
        pub interval: AzOptionDuration,
        pub timeout: AzOptionDuration,
        pub callback: AzTimerCallback,
    }
    /// Should a timer terminate or not - used to remove active timers
    #[repr(C)] #[derive(Debug)] pub enum AzTerminateTimer {
        Terminate,
        Continue,
    }
    /// Re-export of rust-allocated (stack based) `ThreadSender` struct
    #[repr(C)] #[derive(Debug)] pub struct AzThreadSender {
        pub(crate) ptr: *const c_void,
    }
    /// Re-export of rust-allocated (stack based) `ThreadReceiver` struct
    #[repr(C)] #[derive(Debug)] pub struct AzThreadReceiver {
        pub(crate) ptr: *const c_void,
    }
    /// Re-export of rust-allocated (stack based) `ThreadSendMsg` struct
    #[repr(C)] #[derive(Debug)] pub enum AzThreadSendMsg {
        TerminateThread,
        Tick,
    }
    /// Re-export of rust-allocated (stack based) `ThreadReceiveMsg` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzThreadReceiveMsg {
        WriteBack(AzThreadWriteBackMsg),
        Update(AzUpdateScreen),
    }
    /// Re-export of rust-allocated (stack based) `ThreadWriteBackMsg` struct
    #[repr(C)] #[derive(Debug)] pub struct AzThreadWriteBackMsg {
        pub data: AzRefAny,
        pub callback: AzWriteBackCallback,
    }
    /// Re-export of rust-allocated (stack based) `ThreadId` struct
    #[repr(C)] #[derive(Debug)] pub struct AzThreadId {
        pub id: usize,
    }
    /// Re-export of rust-allocated (stack based) `RendererOptions` struct
    #[repr(C)] #[derive(Debug)] pub struct AzRendererOptions {
        pub vsync: AzVsync,
        pub srgb: AzSrgb,
        pub hw_accel: AzHwAcceleration,
    }
    /// Re-export of rust-allocated (stack based) `Vsync` struct
    #[repr(C)] #[derive(Debug)] pub enum AzVsync {
        Enabled,
        Disabled,
    }
    /// Re-export of rust-allocated (stack based) `Srgb` struct
    #[repr(C)] #[derive(Debug)] pub enum AzSrgb {
        Enabled,
        Disabled,
    }
    /// Re-export of rust-allocated (stack based) `HwAcceleration` struct
    #[repr(C)] #[derive(Debug)] pub enum AzHwAcceleration {
        Enabled,
        Disabled,
    }
    /// Re-export of rust-allocated (stack based) `LayoutPoint` struct
    #[repr(C)] #[derive(Debug)] pub struct AzLayoutPoint {
        pub x: isize,
        pub y: isize,
    }
    /// Re-export of rust-allocated (stack based) `LayoutSize` struct
    #[repr(C)] #[derive(Debug)] pub struct AzLayoutSize {
        pub width: isize,
        pub height: isize,
    }
    /// Re-export of rust-allocated (stack based) `LayoutRect` struct
    #[repr(C)] #[derive(Debug)] pub struct AzLayoutRect {
        pub origin: AzLayoutPoint,
        pub size: AzLayoutSize,
    }
    /// Re-export of rust-allocated (stack based) `RawWindowHandle` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzRawWindowHandle {
        IOS(AzIOSHandle),
        MacOS(AzMacOSHandle),
        Xlib(AzXlibHandle),
        Xcb(AzXcbHandle),
        Wayland(AzWaylandHandle),
        Windows(AzWindowsHandle),
        Web(AzWebHandle),
        Android(AzAndroidHandle),
        Unsupported,
    }
    /// Re-export of rust-allocated (stack based) `IOSHandle` struct
    #[repr(C)] #[derive(Debug)] pub struct AzIOSHandle {
        pub ui_window: *mut c_void,
        pub ui_view: *mut c_void,
        pub ui_view_controller: *mut c_void,
    }
    /// Re-export of rust-allocated (stack based) `MacOSHandle` struct
    #[repr(C)] #[derive(Debug)] pub struct AzMacOSHandle {
        pub ns_window: *mut c_void,
        pub ns_view: *mut c_void,
    }
    /// Re-export of rust-allocated (stack based) `XlibHandle` struct
    #[repr(C)] #[derive(Debug)] pub struct AzXlibHandle {
        pub window: u64,
        pub display: *mut c_void,
    }
    /// Re-export of rust-allocated (stack based) `XcbHandle` struct
    #[repr(C)] #[derive(Debug)] pub struct AzXcbHandle {
        pub window: u32,
        pub connection: *mut c_void,
    }
    /// Re-export of rust-allocated (stack based) `WaylandHandle` struct
    #[repr(C)] #[derive(Debug)] pub struct AzWaylandHandle {
        pub surface: *mut c_void,
        pub display: *mut c_void,
    }
    /// Re-export of rust-allocated (stack based) `WindowsHandle` struct
    #[repr(C)] #[derive(Debug)] pub struct AzWindowsHandle {
        pub hwnd: *mut c_void,
        pub hinstance: *mut c_void,
    }
    /// Re-export of rust-allocated (stack based) `WebHandle` struct
    #[repr(C)] #[derive(Debug)] pub struct AzWebHandle {
        pub id: u32,
    }
    /// Re-export of rust-allocated (stack based) `AndroidHandle` struct
    #[repr(C)] #[derive(Debug)] pub struct AzAndroidHandle {
        pub a_native_window: *mut c_void,
    }
    /// Re-export of rust-allocated (stack based) `TaskBarIcon` struct
    #[repr(C)] #[derive(Debug)] pub struct AzTaskBarIcon {
        pub key: AzIconKey,
        pub rgba_bytes: AzU8Vec,
    }
    /// Re-export of rust-allocated (stack based) `XWindowType` struct
    #[repr(C)] #[derive(Debug)] pub enum AzXWindowType {
        Desktop,
        Dock,
        Toolbar,
        Menu,
        Utility,
        Splash,
        Dialog,
        DropdownMenu,
        PopupMenu,
        Tooltip,
        Notification,
        Combo,
        Dnd,
        Normal,
    }
    /// Re-export of rust-allocated (stack based) `PhysicalPositionI32` struct
    #[repr(C)] #[derive(Debug)] pub struct AzPhysicalPositionI32 {
        pub x: i32,
        pub y: i32,
    }
    /// Re-export of rust-allocated (stack based) `PhysicalSizeU32` struct
    #[repr(C)] #[derive(Debug)] pub struct AzPhysicalSizeU32 {
        pub width: u32,
        pub height: u32,
    }
    /// Re-export of rust-allocated (stack based) `LogicalPosition` struct
    #[repr(C)] #[derive(Debug)] pub struct AzLogicalPosition {
        pub x: f32,
        pub y: f32,
    }
    /// Re-export of rust-allocated (stack based) `LogicalRect` struct
    #[repr(C)] #[derive(Debug)] pub struct AzLogicalRect {
        pub origin: AzLogicalPosition,
        pub size: AzLogicalSize,
    }
    /// Re-export of rust-allocated (stack based) `IconKey` struct
    #[repr(C)] #[derive(Debug)] pub struct AzIconKey {
        pub id: usize,
    }
    /// Re-export of rust-allocated (stack based) `SmallWindowIconBytes` struct
    #[repr(C)] #[derive(Debug)] pub struct AzSmallWindowIconBytes {
        pub key: AzIconKey,
        pub rgba_bytes: AzU8Vec,
    }
    /// Re-export of rust-allocated (stack based) `LargeWindowIconBytes` struct
    #[repr(C)] #[derive(Debug)] pub struct AzLargeWindowIconBytes {
        pub key: AzIconKey,
        pub rgba_bytes: AzU8Vec,
    }
    /// Re-export of rust-allocated (stack based) `WindowIcon` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzWindowIcon {
        Small(AzSmallWindowIconBytes),
        Large(AzLargeWindowIconBytes),
    }
    /// Re-export of rust-allocated (stack based) `VirtualKeyCode` struct
    #[repr(C)] #[derive(Debug)] pub enum AzVirtualKeyCode {
        Key1,
        Key2,
        Key3,
        Key4,
        Key5,
        Key6,
        Key7,
        Key8,
        Key9,
        Key0,
        A,
        B,
        C,
        D,
        E,
        F,
        G,
        H,
        I,
        J,
        K,
        L,
        M,
        N,
        O,
        P,
        Q,
        R,
        S,
        T,
        U,
        V,
        W,
        X,
        Y,
        Z,
        Escape,
        F1,
        F2,
        F3,
        F4,
        F5,
        F6,
        F7,
        F8,
        F9,
        F10,
        F11,
        F12,
        F13,
        F14,
        F15,
        F16,
        F17,
        F18,
        F19,
        F20,
        F21,
        F22,
        F23,
        F24,
        Snapshot,
        Scroll,
        Pause,
        Insert,
        Home,
        Delete,
        End,
        PageDown,
        PageUp,
        Left,
        Up,
        Right,
        Down,
        Back,
        Return,
        Space,
        Compose,
        Caret,
        Numlock,
        Numpad0,
        Numpad1,
        Numpad2,
        Numpad3,
        Numpad4,
        Numpad5,
        Numpad6,
        Numpad7,
        Numpad8,
        Numpad9,
        NumpadAdd,
        NumpadDivide,
        NumpadDecimal,
        NumpadComma,
        NumpadEnter,
        NumpadEquals,
        NumpadMultiply,
        NumpadSubtract,
        AbntC1,
        AbntC2,
        Apostrophe,
        Apps,
        Asterisk,
        At,
        Ax,
        Backslash,
        Calculator,
        Capital,
        Colon,
        Comma,
        Convert,
        Equals,
        Grave,
        Kana,
        Kanji,
        LAlt,
        LBracket,
        LControl,
        LShift,
        LWin,
        Mail,
        MediaSelect,
        MediaStop,
        Minus,
        Mute,
        MyComputer,
        NavigateForward,
        NavigateBackward,
        NextTrack,
        NoConvert,
        OEM102,
        Period,
        PlayPause,
        Plus,
        Power,
        PrevTrack,
        RAlt,
        RBracket,
        RControl,
        RShift,
        RWin,
        Semicolon,
        Slash,
        Sleep,
        Stop,
        Sysrq,
        Tab,
        Underline,
        Unlabeled,
        VolumeDown,
        VolumeUp,
        Wake,
        WebBack,
        WebFavorites,
        WebForward,
        WebHome,
        WebRefresh,
        WebSearch,
        WebStop,
        Yen,
        Copy,
        Paste,
        Cut,
    }
    /// Re-export of rust-allocated (stack based) `AcceleratorKey` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzAcceleratorKey {
        Ctrl,
        Alt,
        Shift,
        Key(AzVirtualKeyCode),
    }
    /// Re-export of rust-allocated (stack based) `WindowSize` struct
    #[repr(C)] #[derive(Debug)] pub struct AzWindowSize {
        pub dimensions: AzLogicalSize,
        pub hidpi_factor: f32,
        pub system_hidpi_factor: f32,
        pub min_dimensions: AzOptionLogicalSize,
        pub max_dimensions: AzOptionLogicalSize,
    }
    /// Re-export of rust-allocated (stack based) `WindowFlags` struct
    #[repr(C)] #[derive(Debug)] pub struct AzWindowFlags {
        pub is_maximized: bool,
        pub is_minimized: bool,
        pub is_about_to_close: bool,
        pub is_fullscreen: bool,
        pub has_decorations: bool,
        pub is_visible: bool,
        pub is_always_on_top: bool,
        pub is_resizable: bool,
        pub has_focus: bool,
        pub has_blur_behind_window: bool,
    }
    /// Re-export of rust-allocated (stack based) `DebugState` struct
    #[repr(C)] #[derive(Debug)] pub struct AzDebugState {
        pub profiler_dbg: bool,
        pub render_target_dbg: bool,
        pub texture_cache_dbg: bool,
        pub gpu_time_queries: bool,
        pub gpu_sample_queries: bool,
        pub disable_batching: bool,
        pub epochs: bool,
        pub echo_driver_messages: bool,
        pub show_overdraw: bool,
        pub gpu_cache_dbg: bool,
        pub texture_cache_dbg_clear_evicted: bool,
        pub picture_caching_dbg: bool,
        pub primitive_dbg: bool,
        pub zoom_dbg: bool,
        pub small_screen: bool,
        pub disable_opaque_pass: bool,
        pub disable_alpha_pass: bool,
        pub disable_clip_masks: bool,
        pub disable_text_prims: bool,
        pub disable_gradient_prims: bool,
        pub obscure_images: bool,
        pub glyph_flashing: bool,
        pub smart_profiler: bool,
        pub invalidation_dbg: bool,
        pub tile_cache_logging_dbg: bool,
        pub profiler_capture: bool,
        pub force_picture_invalidation: bool,
    }
    /// Re-export of rust-allocated (stack based) `KeyboardState` struct
    #[repr(C)] #[derive(Debug)] pub struct AzKeyboardState {
        pub shift_down: bool,
        pub ctrl_down: bool,
        pub alt_down: bool,
        pub super_down: bool,
        pub current_char: AzOptionChar,
        pub current_virtual_keycode: AzOptionVirtualKeyCode,
        pub pressed_virtual_keycodes: AzVirtualKeyCodeVec,
        pub pressed_scancodes: AzScanCodeVec,
    }
    /// Re-export of rust-allocated (stack based) `MouseCursorType` struct
    #[repr(C)] #[derive(Debug)] pub enum AzMouseCursorType {
        Default,
        Crosshair,
        Hand,
        Arrow,
        Move,
        Text,
        Wait,
        Help,
        Progress,
        NotAllowed,
        ContextMenu,
        Cell,
        VerticalText,
        Alias,
        Copy,
        NoDrop,
        Grab,
        Grabbing,
        AllScroll,
        ZoomIn,
        ZoomOut,
        EResize,
        NResize,
        NeResize,
        NwResize,
        SResize,
        SeResize,
        SwResize,
        WResize,
        EwResize,
        NsResize,
        NeswResize,
        NwseResize,
        ColResize,
        RowResize,
    }
    /// Re-export of rust-allocated (stack based) `CursorPosition` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzCursorPosition {
        OutOfWindow,
        Uninitialized,
        InWindow(AzLogicalPosition),
    }
    /// Re-export of rust-allocated (stack based) `MouseState` struct
    #[repr(C)] #[derive(Debug)] pub struct AzMouseState {
        pub mouse_cursor_type: AzOptionMouseCursorType,
        pub cursor_position: AzCursorPosition,
        pub is_cursor_locked: bool,
        pub left_down: bool,
        pub right_down: bool,
        pub middle_down: bool,
        pub scroll_x: AzOptionF32,
        pub scroll_y: AzOptionF32,
    }
    /// Re-export of rust-allocated (stack based) `PlatformSpecificOptions` struct
    #[repr(C)] #[derive(Debug)] pub struct AzPlatformSpecificOptions {
        pub windows_options: AzWindowsWindowOptions,
        pub linux_options: AzLinuxWindowOptions,
        pub mac_options: AzMacWindowOptions,
        pub wasm_options: AzWasmWindowOptions,
    }
    /// Re-export of rust-allocated (stack based) `WindowsWindowOptions` struct
    #[repr(C)] #[derive(Debug)] pub struct AzWindowsWindowOptions {
        pub allow_drag_drop: bool,
        pub no_redirection_bitmap: bool,
        pub window_icon: AzOptionWindowIcon,
        pub taskbar_icon: AzOptionTaskBarIcon,
        pub parent_window: AzOptionHwndHandle,
    }
    /// Re-export of rust-allocated (stack based) `WaylandTheme` struct
    #[repr(C)] #[derive(Debug)] pub struct AzWaylandTheme {
        pub primary_color_active: [u8;4],
        pub primary_color_inactive: [u8;4],
        pub secondary_color_active: [u8;4],
        pub secondary_color_inactive: [u8;4],
        pub close_button_color_idle: [u8;4],
        pub close_button_color_hovered: [u8;4],
        pub close_button_color_disabled: [u8;4],
        pub maximize_button_color_idle: [u8;4],
        pub maximize_button_color_hovered: [u8;4],
        pub maximize_button_color_disabled: [u8;4],
        pub minimize_button_color_idle: [u8;4],
        pub minimize_button_color_hovered: [u8;4],
        pub minimize_button_color_disabled: [u8;4],
    }
    /// Re-export of rust-allocated (stack based) `RendererType` struct
    #[repr(C)] #[derive(Debug)] pub enum AzRendererType {
        Hardware,
        Software,
    }
    /// Re-export of rust-allocated (stack based) `StringPair` struct
    #[repr(C)] #[derive(Debug)] pub struct AzStringPair {
        pub key: AzString,
        pub value: AzString,
    }
    /// Re-export of rust-allocated (stack based) `LinuxWindowOptions` struct
    #[repr(C)] #[derive(Debug)] pub struct AzLinuxWindowOptions {
        pub x11_visual: AzOptionX11Visual,
        pub x11_screen: AzOptionI32,
        pub x11_wm_classes: AzStringPairVec,
        pub x11_override_redirect: bool,
        pub x11_window_types: AzXWindowTypeVec,
        pub x11_gtk_theme_variant: AzOptionString,
        pub x11_resize_increments: AzOptionLogicalSize,
        pub x11_base_size: AzOptionLogicalSize,
        pub wayland_app_id: AzOptionString,
        pub wayland_theme: AzOptionWaylandTheme,
        pub request_user_attention: bool,
        pub window_icon: AzOptionWindowIcon,
    }
    /// Re-export of rust-allocated (stack based) `MacWindowOptions` struct
    #[repr(C)] #[derive(Debug)] pub struct AzMacWindowOptions {
        pub _reserved: u8,
    }
    /// Re-export of rust-allocated (stack based) `WasmWindowOptions` struct
    #[repr(C)] #[derive(Debug)] pub struct AzWasmWindowOptions {
        pub _reserved: u8,
    }
    /// Re-export of rust-allocated (stack based) `FullScreenMode` struct
    #[repr(C)] #[derive(Debug)] pub enum AzFullScreenMode {
        SlowFullScreen,
        FastFullScreen,
        SlowWindowed,
        FastWindowed,
    }
    /// Re-export of rust-allocated (stack based) `WindowTheme` struct
    #[repr(C)] #[derive(Debug)] pub enum AzWindowTheme {
        DarkMode,
        LightMode,
    }
    /// Re-export of rust-allocated (stack based) `WindowPosition` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzWindowPosition {
        Uninitialized,
        Initialized(AzPhysicalPositionI32),
    }
    /// Re-export of rust-allocated (stack based) `ImePosition` struct
    #[repr(C, u8)] #[derive(Debug)] pub enum AzImePosition {
        Uninitialized,
        Initialized(AzLogicalPosition),
    }
    /// Re-export of rust-allocated (stack based) `TouchState` struct
    #[repr(C)] #[derive(Debug)] pub struct AzTouchState {
        pub unused: u8,
    }
    /// Re-export of rust-allocated (stack based) `WindowState` struct
    #[repr(C)] #[derive(Debug)] pub struct AzWindowState {
        pub theme: AzWindowTheme,
        pub title: AzString,
        pub size: AzWindowSize,
        pub position: AzWindowPosition,
        pub flags: AzWindowFlags,
        pub debug_state: AzDebugState,
        pub keyboard_state: AzKeyboardState,
        pub mouse_state: AzMouseState,
        pub touch_state: AzTouchState,
        pub ime_position: AzImePosition,
        pub platform_specific_options: AzPlatformSpecificOptions,
        pub renderer_options: AzRendererOptions,
        pub background_color: AzColorU,
        pub layout_callback: AzLayoutCallback,
        pub close_callback: AzOptionCallback,
    }
    /// Re-export of rust-allocated (stack based) `LogicalSize` struct
    #[repr(C)] #[derive(Debug)] pub struct AzLogicalSize {
        pub width: f32,
        pub height: f32,
    }
    /// Re-export of rust-allocated (stack based) `WindowCreateOptions` struct
    #[repr(C)] #[derive(Debug)] pub struct AzWindowCreateOptions {
        pub state: AzWindowState,
        pub renderer_type: AzOptionRendererOptions,
        pub theme: AzOptionWindowTheme,
        pub create_callback: AzOptionCallback,
    }
    use core::os::raw::c_void;
    use azul_impl::css::*;

    #[test]
    fn test_size() {
         use core::alloc::Layout;
        assert_eq!(Layout::new::<azul_impl::css::AzString>(), Layout::new::<AzString>());
        assert_eq!(Layout::new::<azul_impl::css::StyleTransformVec>(), Layout::new::<AzStyleTransformVec>());
        assert_eq!(Layout::new::<azul_impl::styled_dom::ContentGroupVec>(), Layout::new::<AzContentGroupVec>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyVec>(), Layout::new::<AzCssPropertyVec>());
        assert_eq!(Layout::new::<azul_impl::svg::SvgMultiPolygonVec>(), Layout::new::<AzSvgMultiPolygonVec>());
        assert_eq!(Layout::new::<azul_impl::svg::SvgPathVec>(), Layout::new::<AzSvgPathVec>());
        assert_eq!(Layout::new::<azul_impl::gl::VertexAttributeVec>(), Layout::new::<AzVertexAttributeVec>());
        assert_eq!(Layout::new::<azul_impl::svg::SvgPathElementVec>(), Layout::new::<AzSvgPathElementVec>());
        assert_eq!(Layout::new::<azul_impl::svg::SvgVertexVec>(), Layout::new::<AzSvgVertexVec>());
        assert_eq!(Layout::new::<azul_impl::svg::U32Vec>(), Layout::new::<AzU32Vec>());
        assert_eq!(Layout::new::<azul_impl::window::XWindowTypeVec>(), Layout::new::<AzXWindowTypeVec>());
        assert_eq!(Layout::new::<azul_impl::window::VirtualKeyCodeVec>(), Layout::new::<AzVirtualKeyCodeVec>());
        assert_eq!(Layout::new::<azul_impl::style::CascadeInfoVec>(), Layout::new::<AzCascadeInfoVec>());
        assert_eq!(Layout::new::<azul_impl::window::ScanCodeVec>(), Layout::new::<AzScanCodeVec>());
        assert_eq!(Layout::new::<azul_impl::css::CssDeclarationVec>(), Layout::new::<AzCssDeclarationVec>());
        assert_eq!(Layout::new::<azul_impl::css::CssPathSelectorVec>(), Layout::new::<AzCssPathSelectorVec>());
        assert_eq!(Layout::new::<azul_impl::css::StylesheetVec>(), Layout::new::<AzStylesheetVec>());
        assert_eq!(Layout::new::<azul_impl::css::CssRuleBlockVec>(), Layout::new::<AzCssRuleBlockVec>());
        assert_eq!(Layout::new::<azul_impl::css::U8Vec>(), Layout::new::<AzU8Vec>());
        assert_eq!(Layout::new::<azul_impl::dom::CallbackDataVec>(), Layout::new::<AzCallbackDataVec>());
        assert_eq!(Layout::new::<azul_impl::gl::AzDebugMessageVec>(), Layout::new::<AzDebugMessageVec>());
        assert_eq!(Layout::new::<azul_impl::gl::GLuintVec>(), Layout::new::<AzGLuintVec>());
        assert_eq!(Layout::new::<azul_impl::gl::GLintVec>(), Layout::new::<AzGLintVec>());
        assert_eq!(Layout::new::<azul_impl::dom::DomVec>(), Layout::new::<AzDomVec>());
        assert_eq!(Layout::new::<azul_impl::css::StringVec>(), Layout::new::<AzStringVec>());
        assert_eq!(Layout::new::<azul_impl::window::StringPairVec>(), Layout::new::<AzStringPairVec>());
        assert_eq!(Layout::new::<azul_impl::css::GradientStopPreVec>(), Layout::new::<AzGradientStopPreVec>());
        assert_eq!(Layout::new::<azul_impl::styled_dom::CascadedCssPropertyWithSourceVec>(), Layout::new::<AzCascadedCssPropertyWithSourceVec>());
        assert_eq!(Layout::new::<azul_impl::styled_dom::NodeIdVec>(), Layout::new::<AzNodeIdVec>());
        assert_eq!(Layout::new::<azul_impl::styled_dom::AzNodeVec>(), Layout::new::<AzNodeVec>());
        assert_eq!(Layout::new::<azul_impl::styled_dom::StyledNodeVec>(), Layout::new::<AzStyledNodeVec>());
        assert_eq!(Layout::new::<azul_impl::styled_dom::TagIdsToNodeIdsMappingVec>(), Layout::new::<AzTagIdsToNodeIdsMappingVec>());
        assert_eq!(Layout::new::<azul_impl::styled_dom::ParentWithNodeDepthVec>(), Layout::new::<AzParentWithNodeDepthVec>());
        assert_eq!(Layout::new::<azul_impl::styled_dom::NodeDataVec>(), Layout::new::<AzNodeDataVec>());
        assert_eq!(Layout::new::<azul_impl::window::OptionRendererOptions>(), Layout::new::<AzOptionRendererOptions>());
        assert_eq!(Layout::new::<azul_impl::callbacks::OptionCallback>(), Layout::new::<AzOptionCallback>());
        assert_eq!(Layout::new::<azul_impl::task::OptionThreadSendMsg>(), Layout::new::<AzOptionThreadSendMsg>());
        assert_eq!(Layout::new::<azul_impl::css::OptionLayoutRect>(), Layout::new::<AzOptionLayoutRect>());
        assert_eq!(Layout::new::<azul_impl::callbacks::OptionRefAny>(), Layout::new::<AzOptionRefAny>());
        assert_eq!(Layout::new::<azul_impl::css::OptionStyleOpacityValue>(), Layout::new::<AzOptionStyleOpacityValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionStyleTransformVecValue>(), Layout::new::<AzOptionStyleTransformVecValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionStyleTransformOriginValue>(), Layout::new::<AzOptionStyleTransformOriginValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionStylePerspectiveOriginValue>(), Layout::new::<AzOptionStylePerspectiveOriginValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionStyleBackfaceVisibilityValue>(), Layout::new::<AzOptionStyleBackfaceVisibilityValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionLayoutPoint>(), Layout::new::<AzOptionLayoutPoint>());
        assert_eq!(Layout::new::<azul_impl::window::OptionWindowTheme>(), Layout::new::<AzOptionWindowTheme>());
        assert_eq!(Layout::new::<azul_impl::styled_dom::OptionNodeId>(), Layout::new::<AzOptionNodeId>());
        assert_eq!(Layout::new::<azul_impl::callbacks::OptionDomNodeId>(), Layout::new::<AzOptionDomNodeId>());
        assert_eq!(Layout::new::<azul_impl::css::OptionColorU>(), Layout::new::<AzOptionColorU>());
        assert_eq!(Layout::new::<azul_impl::resources::OptionRawImage>(), Layout::new::<AzOptionRawImage>());
        assert_eq!(Layout::new::<azul_impl::svg::OptionSvgDashPattern>(), Layout::new::<AzOptionSvgDashPattern>());
        assert_eq!(Layout::new::<azul_impl::window::OptionWaylandTheme>(), Layout::new::<AzOptionWaylandTheme>());
        assert_eq!(Layout::new::<azul_impl::window::OptionTaskBarIcon>(), Layout::new::<AzOptionTaskBarIcon>());
        assert_eq!(Layout::new::<azul_impl::window::OptionHwndHandle>(), Layout::new::<AzOptionHwndHandle>());
        assert_eq!(Layout::new::<azul_impl::window::OptionLogicalPosition>(), Layout::new::<AzOptionLogicalPosition>());
        assert_eq!(Layout::new::<azul_impl::window::OptionPhysicalPositionI32>(), Layout::new::<AzOptionPhysicalPositionI32>());
        assert_eq!(Layout::new::<azul_impl::window::OptionWindowIcon>(), Layout::new::<AzOptionWindowIcon>());
        assert_eq!(Layout::new::<azul_impl::window::OptionAzString>(), Layout::new::<AzOptionString>());
        assert_eq!(Layout::new::<azul_impl::window::OptionX11Visual>(), Layout::new::<AzOptionX11Visual>());
        assert_eq!(Layout::new::<azul_impl::window::OptionI32>(), Layout::new::<AzOptionI32>());
        assert_eq!(Layout::new::<azul_impl::window::OptionF32>(), Layout::new::<AzOptionF32>());
        assert_eq!(Layout::new::<azul_impl::window::OptionMouseCursorType>(), Layout::new::<AzOptionMouseCursorType>());
        assert_eq!(Layout::new::<azul_impl::window::OptionLogicalSize>(), Layout::new::<AzOptionLogicalSize>());
        assert_eq!(Layout::new::<azul_impl::window::OptionChar>(), Layout::new::<AzOptionChar>());
        assert_eq!(Layout::new::<azul_impl::window::OptionVirtualKeyCode>(), Layout::new::<AzOptionVirtualKeyCode>());
        assert_eq!(Layout::new::<azul_impl::css::OptionPercentageValue>(), Layout::new::<AzOptionPercentageValue>());
        assert_eq!(Layout::new::<azul_impl::dom::OptionDom>(), Layout::new::<AzOptionDom>());
        assert_eq!(Layout::new::<azul_impl::gl::OptionTexture>(), Layout::new::<AzOptionTexture>());
        assert_eq!(Layout::new::<azul_impl::dom::OptionImageMask>(), Layout::new::<AzOptionImageMask>());
        assert_eq!(Layout::new::<azul_impl::dom::OptionTabIndex>(), Layout::new::<AzOptionTabIndex>());
        assert_eq!(Layout::new::<azul_impl::css::OptionStyleBackgroundContentValue>(), Layout::new::<AzOptionStyleBackgroundContentValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionStyleBackgroundPositionValue>(), Layout::new::<AzOptionStyleBackgroundPositionValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionStyleBackgroundSizeValue>(), Layout::new::<AzOptionStyleBackgroundSizeValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionStyleBackgroundRepeatValue>(), Layout::new::<AzOptionStyleBackgroundRepeatValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionStyleFontSizeValue>(), Layout::new::<AzOptionStyleFontSizeValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionStyleFontFamilyValue>(), Layout::new::<AzOptionStyleFontFamilyValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionStyleTextColorValue>(), Layout::new::<AzOptionStyleTextColorValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionStyleTextAlignmentHorzValue>(), Layout::new::<AzOptionStyleTextAlignmentHorzValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionStyleLineHeightValue>(), Layout::new::<AzOptionStyleLineHeightValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionStyleLetterSpacingValue>(), Layout::new::<AzOptionStyleLetterSpacingValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionStyleWordSpacingValue>(), Layout::new::<AzOptionStyleWordSpacingValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionStyleTabWidthValue>(), Layout::new::<AzOptionStyleTabWidthValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionStyleCursorValue>(), Layout::new::<AzOptionStyleCursorValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionBoxShadowPreDisplayItemValue>(), Layout::new::<AzOptionBoxShadowPreDisplayItemValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionStyleBorderTopColorValue>(), Layout::new::<AzOptionStyleBorderTopColorValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionStyleBorderLeftColorValue>(), Layout::new::<AzOptionStyleBorderLeftColorValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionStyleBorderRightColorValue>(), Layout::new::<AzOptionStyleBorderRightColorValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionStyleBorderBottomColorValue>(), Layout::new::<AzOptionStyleBorderBottomColorValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionStyleBorderTopStyleValue>(), Layout::new::<AzOptionStyleBorderTopStyleValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionStyleBorderLeftStyleValue>(), Layout::new::<AzOptionStyleBorderLeftStyleValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionStyleBorderRightStyleValue>(), Layout::new::<AzOptionStyleBorderRightStyleValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionStyleBorderBottomStyleValue>(), Layout::new::<AzOptionStyleBorderBottomStyleValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionStyleBorderTopLeftRadiusValue>(), Layout::new::<AzOptionStyleBorderTopLeftRadiusValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionStyleBorderTopRightRadiusValue>(), Layout::new::<AzOptionStyleBorderTopRightRadiusValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionStyleBorderBottomLeftRadiusValue>(), Layout::new::<AzOptionStyleBorderBottomLeftRadiusValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionStyleBorderBottomRightRadiusValue>(), Layout::new::<AzOptionStyleBorderBottomRightRadiusValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionLayoutDisplayValue>(), Layout::new::<AzOptionLayoutDisplayValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionLayoutFloatValue>(), Layout::new::<AzOptionLayoutFloatValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionLayoutBoxSizingValue>(), Layout::new::<AzOptionLayoutBoxSizingValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionLayoutWidthValue>(), Layout::new::<AzOptionLayoutWidthValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionLayoutHeightValue>(), Layout::new::<AzOptionLayoutHeightValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionLayoutMinWidthValue>(), Layout::new::<AzOptionLayoutMinWidthValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionLayoutMinHeightValue>(), Layout::new::<AzOptionLayoutMinHeightValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionLayoutMaxWidthValue>(), Layout::new::<AzOptionLayoutMaxWidthValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionLayoutMaxHeightValue>(), Layout::new::<AzOptionLayoutMaxHeightValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionLayoutPositionValue>(), Layout::new::<AzOptionLayoutPositionValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionLayoutTopValue>(), Layout::new::<AzOptionLayoutTopValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionLayoutBottomValue>(), Layout::new::<AzOptionLayoutBottomValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionLayoutRightValue>(), Layout::new::<AzOptionLayoutRightValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionLayoutLeftValue>(), Layout::new::<AzOptionLayoutLeftValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionLayoutPaddingTopValue>(), Layout::new::<AzOptionLayoutPaddingTopValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionLayoutPaddingBottomValue>(), Layout::new::<AzOptionLayoutPaddingBottomValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionLayoutPaddingLeftValue>(), Layout::new::<AzOptionLayoutPaddingLeftValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionLayoutPaddingRightValue>(), Layout::new::<AzOptionLayoutPaddingRightValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionLayoutMarginTopValue>(), Layout::new::<AzOptionLayoutMarginTopValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionLayoutMarginBottomValue>(), Layout::new::<AzOptionLayoutMarginBottomValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionLayoutMarginLeftValue>(), Layout::new::<AzOptionLayoutMarginLeftValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionLayoutMarginRightValue>(), Layout::new::<AzOptionLayoutMarginRightValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionStyleBorderTopWidthValue>(), Layout::new::<AzOptionStyleBorderTopWidthValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionStyleBorderLeftWidthValue>(), Layout::new::<AzOptionStyleBorderLeftWidthValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionStyleBorderRightWidthValue>(), Layout::new::<AzOptionStyleBorderRightWidthValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionStyleBorderBottomWidthValue>(), Layout::new::<AzOptionStyleBorderBottomWidthValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionOverflowValue>(), Layout::new::<AzOptionOverflowValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionLayoutFlexDirectionValue>(), Layout::new::<AzOptionLayoutFlexDirectionValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionLayoutWrapValue>(), Layout::new::<AzOptionLayoutWrapValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionLayoutFlexGrowValue>(), Layout::new::<AzOptionLayoutFlexGrowValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionLayoutFlexShrinkValue>(), Layout::new::<AzOptionLayoutFlexShrinkValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionLayoutJustifyContentValue>(), Layout::new::<AzOptionLayoutJustifyContentValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionLayoutAlignItemsValue>(), Layout::new::<AzOptionLayoutAlignItemsValue>());
        assert_eq!(Layout::new::<azul_impl::css::OptionLayoutAlignContentValue>(), Layout::new::<AzOptionLayoutAlignContentValue>());
        assert_eq!(Layout::new::<azul_impl::styled_dom::OptionTagId>(), Layout::new::<AzOptionTagId>());
        assert_eq!(Layout::new::<azul_impl::task::OptionDuration>(), Layout::new::<AzOptionDuration>());
        assert_eq!(Layout::new::<azul_impl::task::OptionInstantPtr>(), Layout::new::<AzOptionInstantPtr>());
        assert_eq!(Layout::new::<azul_impl::gl::OptionUsize>(), Layout::new::<AzOptionUsize>());
        assert_eq!(Layout::new::<azul_impl::gl::OptionU8VecRef>(), Layout::new::<AzOptionU8VecRef>());
        assert_eq!(Layout::new::<azul_impl::svg::ResultSvgSvgParseError>(), Layout::new::<AzResultSvgSvgParseError>());
        assert_eq!(Layout::new::<azul_impl::svg::SvgParseError>(), Layout::new::<AzSvgParseError>());
        assert_eq!(Layout::new::<azul_impl::xml::XmlError>(), Layout::new::<AzXmlError>());
        assert_eq!(Layout::new::<azul_impl::xml::DuplicatedNamespaceError>(), Layout::new::<AzDuplicatedNamespaceError>());
        assert_eq!(Layout::new::<azul_impl::xml::UnknownNamespaceError>(), Layout::new::<AzUnknownNamespaceError>());
        assert_eq!(Layout::new::<azul_impl::xml::UnexpectedCloseTagError>(), Layout::new::<AzUnexpectedCloseTagError>());
        assert_eq!(Layout::new::<azul_impl::xml::UnknownEntityReferenceError>(), Layout::new::<AzUnknownEntityReferenceError>());
        assert_eq!(Layout::new::<azul_impl::xml::DuplicatedAttributeError>(), Layout::new::<AzDuplicatedAttributeError>());
        assert_eq!(Layout::new::<azul_impl::xml::XmlParseError>(), Layout::new::<AzXmlParseError>());
        assert_eq!(Layout::new::<azul_impl::xml::XmlTextError>(), Layout::new::<AzXmlTextError>());
        assert_eq!(Layout::new::<azul_impl::xml::XmlStreamError>(), Layout::new::<AzXmlStreamError>());
        assert_eq!(Layout::new::<azul_impl::xml::NonXmlCharError>(), Layout::new::<AzNonXmlCharError>());
        assert_eq!(Layout::new::<azul_impl::xml::InvalidCharError>(), Layout::new::<AzInvalidCharError>());
        assert_eq!(Layout::new::<azul_impl::xml::InvalidCharMultipleError>(), Layout::new::<AzInvalidCharMultipleError>());
        assert_eq!(Layout::new::<azul_impl::xml::InvalidQuoteError>(), Layout::new::<AzInvalidQuoteError>());
        assert_eq!(Layout::new::<azul_impl::xml::InvalidSpaceError>(), Layout::new::<AzInvalidSpaceError>());
        assert_eq!(Layout::new::<azul_impl::xml::InvalidStringError>(), Layout::new::<AzInvalidStringError>());
        assert_eq!(Layout::new::<azul_impl::xml::XmlTextPos>(), Layout::new::<AzSvgParseErrorPosition>());
        assert_eq!(Layout::new::<azul_impl::task::AzInstantPtr>(), Layout::new::<AzInstantPtr>());
        assert_eq!(Layout::new::<azul_impl::task::AzDuration>(), Layout::new::<AzDuration>());
        assert_eq!(Layout::new::<azul_impl::resources::AppLogLevel>(), Layout::new::<AzAppLogLevel>());
        assert_eq!(Layout::new::<azul_impl::resources::AppConfig>(), Layout::new::<AzAppConfig>());
        assert_eq!(Layout::new::<azul_impl::styled_dom::AzNodeId>(), Layout::new::<AzNodeId>());
        assert_eq!(Layout::new::<azul_impl::styled_dom::DomId>(), Layout::new::<AzDomId>());
        assert_eq!(Layout::new::<azul_impl::callbacks::DomNodeId>(), Layout::new::<AzDomNodeId>());
        assert_eq!(Layout::new::<azul_impl::callbacks::HidpiAdjustedBounds>(), Layout::new::<AzHidpiAdjustedBounds>());
        assert_eq!(Layout::new::<azul_impl::callbacks::LayoutCallback>(), Layout::new::<AzLayoutCallback>());
        assert_eq!(Layout::new::<azul_impl::callbacks::Callback>(), Layout::new::<AzCallback>());
        assert_eq!(Layout::new::<azul_impl::callbacks::FocusTarget>(), Layout::new::<AzFocusTarget>());
        assert_eq!(Layout::new::<azul_impl::callbacks::FocusTargetPath>(), Layout::new::<AzFocusTargetPath>());
        assert_eq!(Layout::new::<azul_impl::callbacks::CallbackInfo>(), Layout::new::<AzCallbackInfo>());
        assert_eq!(Layout::new::<azul_impl::callbacks::UpdateScreen>(), Layout::new::<AzUpdateScreen>());
        assert_eq!(Layout::new::<azul_impl::callbacks::IFrameCallback>(), Layout::new::<AzIFrameCallback>());
        assert_eq!(Layout::new::<azul_impl::callbacks::IFrameCallbackInfo>(), Layout::new::<AzIFrameCallbackInfo>());
        assert_eq!(Layout::new::<azul_impl::callbacks::IFrameCallbackReturn>(), Layout::new::<AzIFrameCallbackReturn>());
        assert_eq!(Layout::new::<azul_impl::callbacks::GlCallback>(), Layout::new::<AzGlCallback>());
        assert_eq!(Layout::new::<azul_impl::callbacks::GlCallbackInfo>(), Layout::new::<AzGlCallbackInfo>());
        assert_eq!(Layout::new::<azul_impl::callbacks::GlCallbackReturn>(), Layout::new::<AzGlCallbackReturn>());
        assert_eq!(Layout::new::<azul_impl::callbacks::TimerCallback>(), Layout::new::<AzTimerCallback>());
        assert_eq!(Layout::new::<azul_impl::callbacks::TimerCallbackInfo>(), Layout::new::<AzTimerCallbackInfo>());
        assert_eq!(Layout::new::<azul_impl::callbacks::TimerCallbackReturn>(), Layout::new::<AzTimerCallbackReturn>());
        assert_eq!(Layout::new::<azul_impl::callbacks::WriteBackCallback>(), Layout::new::<AzWriteBackCallback>());
        assert_eq!(Layout::new::<azul_impl::callbacks::AtomicRefCount>(), Layout::new::<AzAtomicRefCount>());
        assert_eq!(Layout::new::<azul_impl::callbacks::RefAny>(), Layout::new::<AzRefAny>());
        assert_eq!(Layout::new::<azul_impl::callbacks::LayoutInfo>(), Layout::new::<AzLayoutInfo>());
        assert_eq!(Layout::new::<azul_impl::css::CssRuleBlock>(), Layout::new::<AzCssRuleBlock>());
        assert_eq!(Layout::new::<azul_impl::css::CssDeclaration>(), Layout::new::<AzCssDeclaration>());
        assert_eq!(Layout::new::<azul_impl::css::DynamicCssProperty>(), Layout::new::<AzDynamicCssProperty>());
        assert_eq!(Layout::new::<azul_impl::css::CssPath>(), Layout::new::<AzCssPath>());
        assert_eq!(Layout::new::<azul_impl::css::CssPathSelector>(), Layout::new::<AzCssPathSelector>());
        assert_eq!(Layout::new::<azul_impl::css::NodeTypePath>(), Layout::new::<AzNodeTypePath>());
        assert_eq!(Layout::new::<azul_impl::css::CssPathPseudoSelector>(), Layout::new::<AzCssPathPseudoSelector>());
        assert_eq!(Layout::new::<azul_impl::css::CssNthChildSelector>(), Layout::new::<AzCssNthChildSelector>());
        assert_eq!(Layout::new::<azul_impl::css::CssNthChildPattern>(), Layout::new::<AzCssNthChildPattern>());
        assert_eq!(Layout::new::<azul_impl::css::Stylesheet>(), Layout::new::<AzStylesheet>());
        assert_eq!(Layout::new::<azul_impl::css::Css>(), Layout::new::<AzCss>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyType>(), Layout::new::<AzCssPropertyType>());
        assert_eq!(Layout::new::<azul_impl::css::ColorU>(), Layout::new::<AzColorU>());
        assert_eq!(Layout::new::<azul_impl::css::SizeMetric>(), Layout::new::<AzSizeMetric>());
        assert_eq!(Layout::new::<azul_impl::css::FloatValue>(), Layout::new::<AzFloatValue>());
        assert_eq!(Layout::new::<azul_impl::css::PixelValue>(), Layout::new::<AzPixelValue>());
        assert_eq!(Layout::new::<azul_impl::css::PixelValueNoPercent>(), Layout::new::<AzPixelValueNoPercent>());
        assert_eq!(Layout::new::<azul_impl::css::BoxShadowClipMode>(), Layout::new::<AzBoxShadowClipMode>());
        assert_eq!(Layout::new::<azul_impl::css::BoxShadowPreDisplayItem>(), Layout::new::<AzBoxShadowPreDisplayItem>());
        assert_eq!(Layout::new::<azul_impl::css::LayoutAlignContent>(), Layout::new::<AzLayoutAlignContent>());
        assert_eq!(Layout::new::<azul_impl::css::LayoutAlignItems>(), Layout::new::<AzLayoutAlignItems>());
        assert_eq!(Layout::new::<azul_impl::css::LayoutBottom>(), Layout::new::<AzLayoutBottom>());
        assert_eq!(Layout::new::<azul_impl::css::LayoutBoxSizing>(), Layout::new::<AzLayoutBoxSizing>());
        assert_eq!(Layout::new::<azul_impl::css::LayoutFlexDirection>(), Layout::new::<AzLayoutFlexDirection>());
        assert_eq!(Layout::new::<azul_impl::css::LayoutDisplay>(), Layout::new::<AzLayoutDisplay>());
        assert_eq!(Layout::new::<azul_impl::css::LayoutFlexGrow>(), Layout::new::<AzLayoutFlexGrow>());
        assert_eq!(Layout::new::<azul_impl::css::LayoutFlexShrink>(), Layout::new::<AzLayoutFlexShrink>());
        assert_eq!(Layout::new::<azul_impl::css::LayoutFloat>(), Layout::new::<AzLayoutFloat>());
        assert_eq!(Layout::new::<azul_impl::css::LayoutHeight>(), Layout::new::<AzLayoutHeight>());
        assert_eq!(Layout::new::<azul_impl::css::LayoutJustifyContent>(), Layout::new::<AzLayoutJustifyContent>());
        assert_eq!(Layout::new::<azul_impl::css::LayoutLeft>(), Layout::new::<AzLayoutLeft>());
        assert_eq!(Layout::new::<azul_impl::css::LayoutMarginBottom>(), Layout::new::<AzLayoutMarginBottom>());
        assert_eq!(Layout::new::<azul_impl::css::LayoutMarginLeft>(), Layout::new::<AzLayoutMarginLeft>());
        assert_eq!(Layout::new::<azul_impl::css::LayoutMarginRight>(), Layout::new::<AzLayoutMarginRight>());
        assert_eq!(Layout::new::<azul_impl::css::LayoutMarginTop>(), Layout::new::<AzLayoutMarginTop>());
        assert_eq!(Layout::new::<azul_impl::css::LayoutMaxHeight>(), Layout::new::<AzLayoutMaxHeight>());
        assert_eq!(Layout::new::<azul_impl::css::LayoutMaxWidth>(), Layout::new::<AzLayoutMaxWidth>());
        assert_eq!(Layout::new::<azul_impl::css::LayoutMinHeight>(), Layout::new::<AzLayoutMinHeight>());
        assert_eq!(Layout::new::<azul_impl::css::LayoutMinWidth>(), Layout::new::<AzLayoutMinWidth>());
        assert_eq!(Layout::new::<azul_impl::css::LayoutPaddingBottom>(), Layout::new::<AzLayoutPaddingBottom>());
        assert_eq!(Layout::new::<azul_impl::css::LayoutPaddingLeft>(), Layout::new::<AzLayoutPaddingLeft>());
        assert_eq!(Layout::new::<azul_impl::css::LayoutPaddingRight>(), Layout::new::<AzLayoutPaddingRight>());
        assert_eq!(Layout::new::<azul_impl::css::LayoutPaddingTop>(), Layout::new::<AzLayoutPaddingTop>());
        assert_eq!(Layout::new::<azul_impl::css::LayoutPosition>(), Layout::new::<AzLayoutPosition>());
        assert_eq!(Layout::new::<azul_impl::css::LayoutRight>(), Layout::new::<AzLayoutRight>());
        assert_eq!(Layout::new::<azul_impl::css::LayoutTop>(), Layout::new::<AzLayoutTop>());
        assert_eq!(Layout::new::<azul_impl::css::LayoutWidth>(), Layout::new::<AzLayoutWidth>());
        assert_eq!(Layout::new::<azul_impl::css::LayoutWrap>(), Layout::new::<AzLayoutWrap>());
        assert_eq!(Layout::new::<azul_impl::css::Overflow>(), Layout::new::<AzOverflow>());
        assert_eq!(Layout::new::<azul_impl::css::PercentageValue>(), Layout::new::<AzPercentageValue>());
        assert_eq!(Layout::new::<azul_impl::css::GradientStopPre>(), Layout::new::<AzGradientStopPre>());
        assert_eq!(Layout::new::<azul_impl::css::DirectionCorner>(), Layout::new::<AzDirectionCorner>());
        assert_eq!(Layout::new::<azul_impl::css::DirectionCorners>(), Layout::new::<AzDirectionCorners>());
        assert_eq!(Layout::new::<azul_impl::css::Direction>(), Layout::new::<AzDirection>());
        assert_eq!(Layout::new::<azul_impl::css::ExtendMode>(), Layout::new::<AzExtendMode>());
        assert_eq!(Layout::new::<azul_impl::css::LinearGradient>(), Layout::new::<AzLinearGradient>());
        assert_eq!(Layout::new::<azul_impl::css::Shape>(), Layout::new::<AzShape>());
        assert_eq!(Layout::new::<azul_impl::css::RadialGradient>(), Layout::new::<AzRadialGradient>());
        assert_eq!(Layout::new::<azul_impl::css::CssImageId>(), Layout::new::<AzCssImageId>());
        assert_eq!(Layout::new::<azul_impl::css::StyleBackgroundContent>(), Layout::new::<AzStyleBackgroundContent>());
        assert_eq!(Layout::new::<azul_impl::css::BackgroundPositionHorizontal>(), Layout::new::<AzBackgroundPositionHorizontal>());
        assert_eq!(Layout::new::<azul_impl::css::BackgroundPositionVertical>(), Layout::new::<AzBackgroundPositionVertical>());
        assert_eq!(Layout::new::<azul_impl::css::StyleBackgroundPosition>(), Layout::new::<AzStyleBackgroundPosition>());
        assert_eq!(Layout::new::<azul_impl::css::StyleBackgroundRepeat>(), Layout::new::<AzStyleBackgroundRepeat>());
        assert_eq!(Layout::new::<azul_impl::css::StyleBackgroundSize>(), Layout::new::<AzStyleBackgroundSize>());
        assert_eq!(Layout::new::<azul_impl::css::StyleBorderBottomColor>(), Layout::new::<AzStyleBorderBottomColor>());
        assert_eq!(Layout::new::<azul_impl::css::StyleBorderBottomLeftRadius>(), Layout::new::<AzStyleBorderBottomLeftRadius>());
        assert_eq!(Layout::new::<azul_impl::css::StyleBorderBottomRightRadius>(), Layout::new::<AzStyleBorderBottomRightRadius>());
        assert_eq!(Layout::new::<azul_impl::css::BorderStyle>(), Layout::new::<AzBorderStyle>());
        assert_eq!(Layout::new::<azul_impl::css::StyleBorderBottomStyle>(), Layout::new::<AzStyleBorderBottomStyle>());
        assert_eq!(Layout::new::<azul_impl::css::StyleBorderBottomWidth>(), Layout::new::<AzStyleBorderBottomWidth>());
        assert_eq!(Layout::new::<azul_impl::css::StyleBorderLeftColor>(), Layout::new::<AzStyleBorderLeftColor>());
        assert_eq!(Layout::new::<azul_impl::css::StyleBorderLeftStyle>(), Layout::new::<AzStyleBorderLeftStyle>());
        assert_eq!(Layout::new::<azul_impl::css::StyleBorderLeftWidth>(), Layout::new::<AzStyleBorderLeftWidth>());
        assert_eq!(Layout::new::<azul_impl::css::StyleBorderRightColor>(), Layout::new::<AzStyleBorderRightColor>());
        assert_eq!(Layout::new::<azul_impl::css::StyleBorderRightStyle>(), Layout::new::<AzStyleBorderRightStyle>());
        assert_eq!(Layout::new::<azul_impl::css::StyleBorderRightWidth>(), Layout::new::<AzStyleBorderRightWidth>());
        assert_eq!(Layout::new::<azul_impl::css::StyleBorderTopColor>(), Layout::new::<AzStyleBorderTopColor>());
        assert_eq!(Layout::new::<azul_impl::css::StyleBorderTopLeftRadius>(), Layout::new::<AzStyleBorderTopLeftRadius>());
        assert_eq!(Layout::new::<azul_impl::css::StyleBorderTopRightRadius>(), Layout::new::<AzStyleBorderTopRightRadius>());
        assert_eq!(Layout::new::<azul_impl::css::StyleBorderTopStyle>(), Layout::new::<AzStyleBorderTopStyle>());
        assert_eq!(Layout::new::<azul_impl::css::StyleBorderTopWidth>(), Layout::new::<AzStyleBorderTopWidth>());
        assert_eq!(Layout::new::<azul_impl::css::StyleCursor>(), Layout::new::<AzStyleCursor>());
        assert_eq!(Layout::new::<azul_impl::css::StyleFontFamily>(), Layout::new::<AzStyleFontFamily>());
        assert_eq!(Layout::new::<azul_impl::css::StyleFontSize>(), Layout::new::<AzStyleFontSize>());
        assert_eq!(Layout::new::<azul_impl::css::StyleLetterSpacing>(), Layout::new::<AzStyleLetterSpacing>());
        assert_eq!(Layout::new::<azul_impl::css::StyleLineHeight>(), Layout::new::<AzStyleLineHeight>());
        assert_eq!(Layout::new::<azul_impl::css::StyleTabWidth>(), Layout::new::<AzStyleTabWidth>());
        assert_eq!(Layout::new::<azul_impl::css::StyleOpacity>(), Layout::new::<AzStyleOpacity>());
        assert_eq!(Layout::new::<azul_impl::css::StyleTransformOrigin>(), Layout::new::<AzStyleTransformOrigin>());
        assert_eq!(Layout::new::<azul_impl::css::StyleTransformOrigin>(), Layout::new::<AzStylePerspectiveOrigin>());
        assert_eq!(Layout::new::<azul_impl::css::StyleBackfaceVisibility>(), Layout::new::<AzStyleBackfaceVisibility>());
        assert_eq!(Layout::new::<azul_impl::css::StyleTransform>(), Layout::new::<AzStyleTransform>());
        assert_eq!(Layout::new::<azul_impl::css::StyleTransformMatrix2D>(), Layout::new::<AzStyleTransformMatrix2D>());
        assert_eq!(Layout::new::<azul_impl::css::StyleTransformMatrix3D>(), Layout::new::<AzStyleTransformMatrix3D>());
        assert_eq!(Layout::new::<azul_impl::css::StyleTransformTranslate2D>(), Layout::new::<AzStyleTransformTranslate2D>());
        assert_eq!(Layout::new::<azul_impl::css::StyleTransformTranslate3D>(), Layout::new::<AzStyleTransformTranslate3D>());
        assert_eq!(Layout::new::<azul_impl::css::StyleTransformRotate3D>(), Layout::new::<AzStyleTransformRotate3D>());
        assert_eq!(Layout::new::<azul_impl::css::StyleTransformScale2D>(), Layout::new::<AzStyleTransformScale2D>());
        assert_eq!(Layout::new::<azul_impl::css::StyleTransformScale3D>(), Layout::new::<AzStyleTransformScale3D>());
        assert_eq!(Layout::new::<azul_impl::css::StyleTransformSkew2D>(), Layout::new::<AzStyleTransformSkew2D>());
        assert_eq!(Layout::new::<azul_impl::css::StyleTextAlignmentHorz>(), Layout::new::<AzStyleTextAlignmentHorz>());
        assert_eq!(Layout::new::<azul_impl::css::StyleTextColor>(), Layout::new::<AzStyleTextColor>());
        assert_eq!(Layout::new::<azul_impl::css::StyleWordSpacing>(), Layout::new::<AzStyleWordSpacing>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<BoxShadowPreDisplayItem>>(), Layout::new::<AzBoxShadowPreDisplayItemValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<LayoutAlignContent>>(), Layout::new::<AzLayoutAlignContentValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<LayoutAlignItems>>(), Layout::new::<AzLayoutAlignItemsValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<LayoutBottom>>(), Layout::new::<AzLayoutBottomValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<LayoutBoxSizing>>(), Layout::new::<AzLayoutBoxSizingValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<LayoutFlexDirection>>(), Layout::new::<AzLayoutFlexDirectionValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<LayoutDisplay>>(), Layout::new::<AzLayoutDisplayValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<LayoutFlexGrow>>(), Layout::new::<AzLayoutFlexGrowValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<LayoutFlexShrink>>(), Layout::new::<AzLayoutFlexShrinkValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<LayoutFloat>>(), Layout::new::<AzLayoutFloatValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<LayoutHeight>>(), Layout::new::<AzLayoutHeightValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<LayoutJustifyContent>>(), Layout::new::<AzLayoutJustifyContentValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<LayoutLeft>>(), Layout::new::<AzLayoutLeftValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<LayoutMarginBottom>>(), Layout::new::<AzLayoutMarginBottomValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<LayoutMarginLeft>>(), Layout::new::<AzLayoutMarginLeftValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<LayoutMarginRight>>(), Layout::new::<AzLayoutMarginRightValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<LayoutMarginTop>>(), Layout::new::<AzLayoutMarginTopValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<LayoutMaxHeight>>(), Layout::new::<AzLayoutMaxHeightValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<LayoutMaxWidth>>(), Layout::new::<AzLayoutMaxWidthValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<LayoutMinHeight>>(), Layout::new::<AzLayoutMinHeightValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<LayoutMinWidth>>(), Layout::new::<AzLayoutMinWidthValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<LayoutPaddingBottom>>(), Layout::new::<AzLayoutPaddingBottomValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<LayoutPaddingLeft>>(), Layout::new::<AzLayoutPaddingLeftValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<LayoutPaddingRight>>(), Layout::new::<AzLayoutPaddingRightValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<LayoutPaddingTop>>(), Layout::new::<AzLayoutPaddingTopValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<LayoutPosition>>(), Layout::new::<AzLayoutPositionValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<LayoutRight>>(), Layout::new::<AzLayoutRightValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<LayoutTop>>(), Layout::new::<AzLayoutTopValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<LayoutWidth>>(), Layout::new::<AzLayoutWidthValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<LayoutWrap>>(), Layout::new::<AzLayoutWrapValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<Overflow>>(), Layout::new::<AzOverflowValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<StyleBackgroundContent>>(), Layout::new::<AzStyleBackgroundContentValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<StyleBackgroundPosition>>(), Layout::new::<AzStyleBackgroundPositionValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<StyleBackgroundRepeat>>(), Layout::new::<AzStyleBackgroundRepeatValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<StyleBackgroundSize>>(), Layout::new::<AzStyleBackgroundSizeValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<StyleBorderBottomColor>>(), Layout::new::<AzStyleBorderBottomColorValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<StyleBorderBottomLeftRadius>>(), Layout::new::<AzStyleBorderBottomLeftRadiusValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<StyleBorderBottomRightRadius>>(), Layout::new::<AzStyleBorderBottomRightRadiusValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<StyleBorderBottomStyle>>(), Layout::new::<AzStyleBorderBottomStyleValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<StyleBorderBottomWidth>>(), Layout::new::<AzStyleBorderBottomWidthValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<StyleBorderLeftColor>>(), Layout::new::<AzStyleBorderLeftColorValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<StyleBorderLeftStyle>>(), Layout::new::<AzStyleBorderLeftStyleValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<StyleBorderLeftWidth>>(), Layout::new::<AzStyleBorderLeftWidthValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<StyleBorderRightColor>>(), Layout::new::<AzStyleBorderRightColorValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<StyleBorderRightStyle>>(), Layout::new::<AzStyleBorderRightStyleValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<StyleBorderRightWidth>>(), Layout::new::<AzStyleBorderRightWidthValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<StyleBorderTopColor>>(), Layout::new::<AzStyleBorderTopColorValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<StyleBorderTopLeftRadius>>(), Layout::new::<AzStyleBorderTopLeftRadiusValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<StyleBorderTopRightRadius>>(), Layout::new::<AzStyleBorderTopRightRadiusValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<StyleBorderTopStyle>>(), Layout::new::<AzStyleBorderTopStyleValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<StyleBorderTopWidth>>(), Layout::new::<AzStyleBorderTopWidthValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<StyleCursor>>(), Layout::new::<AzStyleCursorValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<StyleFontFamily>>(), Layout::new::<AzStyleFontFamilyValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<StyleFontSize>>(), Layout::new::<AzStyleFontSizeValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<StyleLetterSpacing>>(), Layout::new::<AzStyleLetterSpacingValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<StyleLineHeight>>(), Layout::new::<AzStyleLineHeightValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<StyleTabWidth>>(), Layout::new::<AzStyleTabWidthValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<StyleTextAlignmentHorz>>(), Layout::new::<AzStyleTextAlignmentHorzValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<StyleTextColor>>(), Layout::new::<AzStyleTextColorValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<StyleWordSpacing>>(), Layout::new::<AzStyleWordSpacingValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<StyleOpacity>>(), Layout::new::<AzStyleOpacityValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<StyleTransformVec>>(), Layout::new::<AzStyleTransformVecValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<StyleTransformOrigin>>(), Layout::new::<AzStyleTransformOriginValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<StylePerspectiveOrigin>>(), Layout::new::<AzStylePerspectiveOriginValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssPropertyValue::<StyleBackfaceVisibility>>(), Layout::new::<AzStyleBackfaceVisibilityValue>());
        assert_eq!(Layout::new::<azul_impl::css::CssProperty>(), Layout::new::<AzCssProperty>());
        assert_eq!(Layout::new::<azul_impl::styled_dom::AzNode>(), Layout::new::<AzNode>());
        assert_eq!(Layout::new::<azul_impl::style::CascadeInfo>(), Layout::new::<AzCascadeInfo>());
        assert_eq!(Layout::new::<azul_impl::css::RectStyle>(), Layout::new::<AzRectStyle>());
        assert_eq!(Layout::new::<azul_impl::css::RectLayout>(), Layout::new::<AzRectLayout>());
        assert_eq!(Layout::new::<azul_impl::styled_dom::CascadedCssPropertyWithSource>(), Layout::new::<AzCascadedCssPropertyWithSource>());
        assert_eq!(Layout::new::<azul_impl::styled_dom::CssPropertySource>(), Layout::new::<AzCssPropertySource>());
        assert_eq!(Layout::new::<azul_impl::styled_dom::StyledNodeState>(), Layout::new::<AzStyledNodeState>());
        assert_eq!(Layout::new::<azul_impl::styled_dom::StyledNode>(), Layout::new::<AzStyledNode>());
        assert_eq!(Layout::new::<azul_impl::styled_dom::AzTagId>(), Layout::new::<AzTagId>());
        assert_eq!(Layout::new::<azul_impl::styled_dom::TagIdToNodeIdMapping>(), Layout::new::<AzTagIdToNodeIdMapping>());
        assert_eq!(Layout::new::<azul_impl::styled_dom::ParentWithNodeDepth>(), Layout::new::<AzParentWithNodeDepth>());
        assert_eq!(Layout::new::<azul_impl::styled_dom::ContentGroup>(), Layout::new::<AzContentGroup>());
        assert_eq!(Layout::new::<azul_impl::styled_dom::StyledDom>(), Layout::new::<AzStyledDom>());
        assert_eq!(Layout::new::<azul_impl::dom::Dom>(), Layout::new::<AzDom>());
        assert_eq!(Layout::new::<azul_impl::dom::GlTextureNode>(), Layout::new::<AzGlTextureNode>());
        assert_eq!(Layout::new::<azul_impl::dom::IFrameNode>(), Layout::new::<AzIFrameNode>());
        assert_eq!(Layout::new::<azul_impl::dom::CallbackData>(), Layout::new::<AzCallbackData>());
        assert_eq!(Layout::new::<azul_impl::dom::ImageMask>(), Layout::new::<AzImageMask>());
        assert_eq!(Layout::new::<azul_impl::dom::NodeData>(), Layout::new::<AzNodeData>());
        assert_eq!(Layout::new::<azul_impl::dom::NodeType>(), Layout::new::<AzNodeType>());
        assert_eq!(Layout::new::<azul_impl::dom::On>(), Layout::new::<AzOn>());
        assert_eq!(Layout::new::<azul_impl::dom::EventFilter>(), Layout::new::<AzEventFilter>());
        assert_eq!(Layout::new::<azul_impl::dom::HoverEventFilter>(), Layout::new::<AzHoverEventFilter>());
        assert_eq!(Layout::new::<azul_impl::dom::FocusEventFilter>(), Layout::new::<AzFocusEventFilter>());
        assert_eq!(Layout::new::<azul_impl::dom::NotEventFilter>(), Layout::new::<AzNotEventFilter>());
        assert_eq!(Layout::new::<azul_impl::dom::WindowEventFilter>(), Layout::new::<AzWindowEventFilter>());
        assert_eq!(Layout::new::<azul_impl::dom::ComponentEventFilter>(), Layout::new::<AzComponentEventFilter>());
        assert_eq!(Layout::new::<azul_impl::dom::ApplicationEventFilter>(), Layout::new::<AzApplicationEventFilter>());
        assert_eq!(Layout::new::<azul_impl::dom::TabIndex>(), Layout::new::<AzTabIndex>());
        assert_eq!(Layout::new::<azul_impl::gl::GlShaderPrecisionFormatReturn>(), Layout::new::<AzGlShaderPrecisionFormatReturn>());
        assert_eq!(Layout::new::<azul_impl::gl::VertexAttributeType>(), Layout::new::<AzVertexAttributeType>());
        assert_eq!(Layout::new::<azul_impl::gl::VertexAttribute>(), Layout::new::<AzVertexAttribute>());
        assert_eq!(Layout::new::<azul_impl::gl::VertexLayout>(), Layout::new::<AzVertexLayout>());
        assert_eq!(Layout::new::<azul_impl::gl::VertexArrayObject>(), Layout::new::<AzVertexArrayObject>());
        assert_eq!(Layout::new::<azul_impl::gl::IndexBufferFormat>(), Layout::new::<AzIndexBufferFormat>());
        assert_eq!(Layout::new::<azul_impl::gl::VertexBuffer>(), Layout::new::<AzVertexBuffer>());
        assert_eq!(Layout::new::<azul_impl::gl::AzGlType>(), Layout::new::<AzGlType>());
        assert_eq!(Layout::new::<azul_impl::gl::AzDebugMessage>(), Layout::new::<AzDebugMessage>());
        assert_eq!(Layout::new::<azul_impl::gl::U8VecRef>(), Layout::new::<AzU8VecRef>());
        assert_eq!(Layout::new::<azul_impl::gl::U8VecRefMut>(), Layout::new::<AzU8VecRefMut>());
        assert_eq!(Layout::new::<azul_impl::gl::F32VecRef>(), Layout::new::<AzF32VecRef>());
        assert_eq!(Layout::new::<azul_impl::gl::I32VecRef>(), Layout::new::<AzI32VecRef>());
        assert_eq!(Layout::new::<azul_impl::gl::GLuintVecRef>(), Layout::new::<AzGLuintVecRef>());
        assert_eq!(Layout::new::<azul_impl::gl::GLenumVecRef>(), Layout::new::<AzGLenumVecRef>());
        assert_eq!(Layout::new::<azul_impl::gl::GLintVecRefMut>(), Layout::new::<AzGLintVecRefMut>());
        assert_eq!(Layout::new::<azul_impl::gl::GLint64VecRefMut>(), Layout::new::<AzGLint64VecRefMut>());
        assert_eq!(Layout::new::<azul_impl::gl::GLbooleanVecRefMut>(), Layout::new::<AzGLbooleanVecRefMut>());
        assert_eq!(Layout::new::<azul_impl::gl::GLfloatVecRefMut>(), Layout::new::<AzGLfloatVecRefMut>());
        assert_eq!(Layout::new::<azul_impl::gl::RefstrVecRef>(), Layout::new::<AzRefstrVecRef>());
        assert_eq!(Layout::new::<azul_impl::gl::Refstr>(), Layout::new::<AzRefstr>());
        assert_eq!(Layout::new::<azul_impl::gl::GetProgramBinaryReturn>(), Layout::new::<AzGetProgramBinaryReturn>());
        assert_eq!(Layout::new::<azul_impl::gl::GetActiveAttribReturn>(), Layout::new::<AzGetActiveAttribReturn>());
        assert_eq!(Layout::new::<azul_impl::gl::GLsyncPtr>(), Layout::new::<AzGLsyncPtr>());
        assert_eq!(Layout::new::<azul_impl::gl::GetActiveUniformReturn>(), Layout::new::<AzGetActiveUniformReturn>());
        assert_eq!(Layout::new::<azul_impl::gl::GlContextPtr>(), Layout::new::<AzGlContextPtr>());
        assert_eq!(Layout::new::<azul_impl::gl::Texture>(), Layout::new::<AzTexture>());
        assert_eq!(Layout::new::<azul_impl::gl::TextureFlags>(), Layout::new::<AzTextureFlags>());
        assert_eq!(Layout::new::<azul_impl::resources::RawImageFormat>(), Layout::new::<AzRawImageFormat>());
        assert_eq!(Layout::new::<azul_impl::resources::TextId>(), Layout::new::<AzTextId>());
        assert_eq!(Layout::new::<azul_impl::resources::ImageId>(), Layout::new::<AzImageId>());
        assert_eq!(Layout::new::<azul_impl::resources::FontId>(), Layout::new::<AzFontId>());
        assert_eq!(Layout::new::<azul_impl::resources::ImageSource>(), Layout::new::<AzImageSource>());
        assert_eq!(Layout::new::<azul_impl::resources::FontSource>(), Layout::new::<AzFontSource>());
        assert_eq!(Layout::new::<azul_impl::resources::RawImage>(), Layout::new::<AzRawImage>());
        assert_eq!(Layout::new::<azul_impl::svg::SvgMultiPolygon>(), Layout::new::<AzSvgMultiPolygon>());
        assert_eq!(Layout::new::<azul_impl::svg::SvgNode>(), Layout::new::<AzSvgNode>());
        assert_eq!(Layout::new::<azul_impl::svg::SvgStyledNode>(), Layout::new::<AzSvgStyledNode>());
        assert_eq!(Layout::new::<azul_impl::svg::SvgCircle>(), Layout::new::<AzSvgCircle>());
        assert_eq!(Layout::new::<azul_impl::svg::SvgPath>(), Layout::new::<AzSvgPath>());
        assert_eq!(Layout::new::<azul_impl::svg::SvgPathElement>(), Layout::new::<AzSvgPathElement>());
        assert_eq!(Layout::new::<azul_impl::svg::SvgLine>(), Layout::new::<AzSvgLine>());
        assert_eq!(Layout::new::<azul_impl::svg::SvgPoint>(), Layout::new::<AzSvgPoint>());
        assert_eq!(Layout::new::<azul_impl::svg::SvgVertex>(), Layout::new::<AzSvgVertex>());
        assert_eq!(Layout::new::<azul_impl::svg::SvgQuadraticCurve>(), Layout::new::<AzSvgQuadraticCurve>());
        assert_eq!(Layout::new::<azul_impl::svg::SvgCubicCurve>(), Layout::new::<AzSvgCubicCurve>());
        assert_eq!(Layout::new::<azul_impl::svg::SvgRect>(), Layout::new::<AzSvgRect>());
        assert_eq!(Layout::new::<azul_impl::svg::TesselatedCPUSvgNode>(), Layout::new::<AzTesselatedCPUSvgNode>());
        assert_eq!(Layout::new::<azul_impl::svg::SvgLineCap>(), Layout::new::<AzSvgLineCap>());
        assert_eq!(Layout::new::<azul_impl::svg::SvgParseOptions>(), Layout::new::<AzSvgParseOptions>());
        assert_eq!(Layout::new::<azul_impl::svg::ShapeRendering>(), Layout::new::<AzShapeRendering>());
        assert_eq!(Layout::new::<azul_impl::svg::TextRendering>(), Layout::new::<AzTextRendering>());
        assert_eq!(Layout::new::<azul_impl::svg::ImageRendering>(), Layout::new::<AzImageRendering>());
        assert_eq!(Layout::new::<azul_impl::svg::FontDatabase>(), Layout::new::<AzFontDatabase>());
        assert_eq!(Layout::new::<azul_impl::svg::SvgRenderOptions>(), Layout::new::<AzSvgRenderOptions>());
        assert_eq!(Layout::new::<azul_impl::svg::SvgFitTo>(), Layout::new::<AzSvgFitTo>());
        assert_eq!(Layout::new::<azul_impl::svg::Svg>(), Layout::new::<AzSvg>());
        assert_eq!(Layout::new::<azul_impl::svg::SvgXmlNode>(), Layout::new::<AzSvgXmlNode>());
        assert_eq!(Layout::new::<azul_impl::svg::SvgLineJoin>(), Layout::new::<AzSvgLineJoin>());
        assert_eq!(Layout::new::<azul_impl::svg::SvgDashPattern>(), Layout::new::<AzSvgDashPattern>());
        assert_eq!(Layout::new::<azul_impl::svg::SvgStyle>(), Layout::new::<AzSvgStyle>());
        assert_eq!(Layout::new::<azul_impl::svg::SvgFillStyle>(), Layout::new::<AzSvgFillStyle>());
        assert_eq!(Layout::new::<azul_impl::svg::SvgStrokeStyle>(), Layout::new::<AzSvgStrokeStyle>());
        assert_eq!(Layout::new::<azul_impl::resources::SvgNodeId>(), Layout::new::<AzSvgNodeId>());
        assert_eq!(Layout::new::<azul_impl::task::TimerId>(), Layout::new::<AzTimerId>());
        assert_eq!(Layout::new::<azul_impl::task::Timer>(), Layout::new::<AzTimer>());
        assert_eq!(Layout::new::<azul_impl::task::TerminateTimer>(), Layout::new::<AzTerminateTimer>());
        assert_eq!(Layout::new::<azul_impl::task::ThreadSender>(), Layout::new::<AzThreadSender>());
        assert_eq!(Layout::new::<azul_impl::task::ThreadReceiver>(), Layout::new::<AzThreadReceiver>());
        assert_eq!(Layout::new::<azul_impl::task::ThreadSendMsg>(), Layout::new::<AzThreadSendMsg>());
        assert_eq!(Layout::new::<azul_impl::task::ThreadReceiveMsg>(), Layout::new::<AzThreadReceiveMsg>());
        assert_eq!(Layout::new::<azul_impl::task::ThreadWriteBackMsg>(), Layout::new::<AzThreadWriteBackMsg>());
        assert_eq!(Layout::new::<azul_impl::task::ThreadId>(), Layout::new::<AzThreadId>());
        assert_eq!(Layout::new::<azul_impl::window::RendererOptions>(), Layout::new::<AzRendererOptions>());
        assert_eq!(Layout::new::<azul_impl::window::Vsync>(), Layout::new::<AzVsync>());
        assert_eq!(Layout::new::<azul_impl::window::Srgb>(), Layout::new::<AzSrgb>());
        assert_eq!(Layout::new::<azul_impl::window::HwAcceleration>(), Layout::new::<AzHwAcceleration>());
        assert_eq!(Layout::new::<azul_impl::css::LayoutPoint>(), Layout::new::<AzLayoutPoint>());
        assert_eq!(Layout::new::<azul_impl::css::LayoutSize>(), Layout::new::<AzLayoutSize>());
        assert_eq!(Layout::new::<azul_impl::css::LayoutRect>(), Layout::new::<AzLayoutRect>());
        assert_eq!(Layout::new::<azul_impl::window::RawWindowHandle>(), Layout::new::<AzRawWindowHandle>());
        assert_eq!(Layout::new::<azul_impl::window::IOSHandle>(), Layout::new::<AzIOSHandle>());
        assert_eq!(Layout::new::<azul_impl::window::MacOSHandle>(), Layout::new::<AzMacOSHandle>());
        assert_eq!(Layout::new::<azul_impl::window::XlibHandle>(), Layout::new::<AzXlibHandle>());
        assert_eq!(Layout::new::<azul_impl::window::XcbHandle>(), Layout::new::<AzXcbHandle>());
        assert_eq!(Layout::new::<azul_impl::window::WaylandHandle>(), Layout::new::<AzWaylandHandle>());
        assert_eq!(Layout::new::<azul_impl::window::WindowsHandle>(), Layout::new::<AzWindowsHandle>());
        assert_eq!(Layout::new::<azul_impl::window::WebHandle>(), Layout::new::<AzWebHandle>());
        assert_eq!(Layout::new::<azul_impl::window::AndroidHandle>(), Layout::new::<AzAndroidHandle>());
        assert_eq!(Layout::new::<azul_impl::window::TaskBarIcon>(), Layout::new::<AzTaskBarIcon>());
        assert_eq!(Layout::new::<azul_impl::window::XWindowType>(), Layout::new::<AzXWindowType>());
        assert_eq!(Layout::new::<azul_impl::window::PhysicalPosition<i32>>(), Layout::new::<AzPhysicalPositionI32>());
        assert_eq!(Layout::new::<azul_impl::window::PhysicalSize<u32>>(), Layout::new::<AzPhysicalSizeU32>());
        assert_eq!(Layout::new::<azul_impl::window::LogicalPosition>(), Layout::new::<AzLogicalPosition>());
        assert_eq!(Layout::new::<azul_impl::window::LogicalRect>(), Layout::new::<AzLogicalRect>());
        assert_eq!(Layout::new::<azul_impl::window::IconKey>(), Layout::new::<AzIconKey>());
        assert_eq!(Layout::new::<azul_impl::window::SmallWindowIconBytes>(), Layout::new::<AzSmallWindowIconBytes>());
        assert_eq!(Layout::new::<azul_impl::window::LargeWindowIconBytes>(), Layout::new::<AzLargeWindowIconBytes>());
        assert_eq!(Layout::new::<azul_impl::window::WindowIcon>(), Layout::new::<AzWindowIcon>());
        assert_eq!(Layout::new::<azul_impl::window::VirtualKeyCode>(), Layout::new::<AzVirtualKeyCode>());
        assert_eq!(Layout::new::<azul_impl::window::AcceleratorKey>(), Layout::new::<AzAcceleratorKey>());
        assert_eq!(Layout::new::<azul_impl::window::WindowSize>(), Layout::new::<AzWindowSize>());
        assert_eq!(Layout::new::<azul_impl::window::WindowFlags>(), Layout::new::<AzWindowFlags>());
        assert_eq!(Layout::new::<azul_impl::window::DebugState>(), Layout::new::<AzDebugState>());
        assert_eq!(Layout::new::<azul_impl::window::KeyboardState>(), Layout::new::<AzKeyboardState>());
        assert_eq!(Layout::new::<azul_impl::window::MouseCursorType>(), Layout::new::<AzMouseCursorType>());
        assert_eq!(Layout::new::<azul_impl::window::CursorPosition>(), Layout::new::<AzCursorPosition>());
        assert_eq!(Layout::new::<azul_impl::window::MouseState>(), Layout::new::<AzMouseState>());
        assert_eq!(Layout::new::<azul_impl::window::PlatformSpecificOptions>(), Layout::new::<AzPlatformSpecificOptions>());
        assert_eq!(Layout::new::<azul_impl::window::WindowsWindowOptions>(), Layout::new::<AzWindowsWindowOptions>());
        assert_eq!(Layout::new::<azul_impl::window::WaylandTheme>(), Layout::new::<AzWaylandTheme>());
        assert_eq!(Layout::new::<azul_impl::window::RendererType>(), Layout::new::<AzRendererType>());
        assert_eq!(Layout::new::<azul_impl::window::AzStringPair>(), Layout::new::<AzStringPair>());
        assert_eq!(Layout::new::<azul_impl::window::LinuxWindowOptions>(), Layout::new::<AzLinuxWindowOptions>());
        assert_eq!(Layout::new::<azul_impl::window::MacWindowOptions>(), Layout::new::<AzMacWindowOptions>());
        assert_eq!(Layout::new::<azul_impl::window::WasmWindowOptions>(), Layout::new::<AzWasmWindowOptions>());
        assert_eq!(Layout::new::<azul_impl::window::FullScreenMode>(), Layout::new::<AzFullScreenMode>());
        assert_eq!(Layout::new::<azul_impl::window::WindowTheme>(), Layout::new::<AzWindowTheme>());
        assert_eq!(Layout::new::<azul_impl::window::WindowPosition>(), Layout::new::<AzWindowPosition>());
        assert_eq!(Layout::new::<azul_impl::window::ImePosition>(), Layout::new::<AzImePosition>());
        assert_eq!(Layout::new::<azul_impl::window::TouchState>(), Layout::new::<AzTouchState>());
        assert_eq!(Layout::new::<azul_impl::window::WindowState>(), Layout::new::<AzWindowState>());
        assert_eq!(Layout::new::<azul_impl::window::LogicalSize>(), Layout::new::<AzLogicalSize>());
        assert_eq!(Layout::new::<azul_impl::window::WindowCreateOptions>(), Layout::new::<AzWindowCreateOptions>());
    }
}

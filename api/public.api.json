{
   "0.1.0": {
      "str": {
         "String": {
            "constructors": [
               {
                  "doc": "Creates + allocates a Rust `String` by **copying** it from another utf8-encoded string",
                  "fn_name": "from_utf8_unchecked",
                  "fn_args": [
                     {"ptr": "*const u8"},
                     {"len": "usize"}
                  ],
                  "fn_body": "unsafe { std::str::from_utf8_unchecked(std::slice::from_raw_parts(ptr, len)).to_string() }"
               },
               {
                  "doc": "Creates + allocates a Rust `String` by **copying** it from another utf8-encoded string",
                  "fn_name": "from_utf8_lossy",
                  "fn_args": [
                     {"ptr": "*const u8"},
                     {"len": "usize"}
                  ],
                  "fn_body": "unsafe { std::string::String::from_utf8_lossy(std::slice::from_raw_parts(ptr, len)).to_string() }"
               }
            ]
         }
      },
      "app": {
         "AppConfig": {
            "constructors":[
               {
                  "fn_name": "new",
                  "fn_body": "AppConfig::default()"
               }
            ]
         },
         "App": {
            "constructors":[
               {
                  "doc":"Creates a new App instance.",
                  "fn_name":"new",
                  "fn_args": [
                     {"data": "RefAny"},
                     {"config": "AppConfig"},
                     {"callback": "LayoutCallback"}
                  ],
                  "fn_body": "App::new(data, *az_app_config_downcast(config), callback).unwrap()"
               }
            ],
            "functions":[
               {
                  "fn_name":"run",
                  "fn_args": [
                     {"self": "value"},
                     {"window": "WindowCreateOptions"}
                  ],
                  "fn_body":"az_app_downcast(app).run(*az_window_create_options_downcast(window))"
               }
            ]
         }
      },
      "callbacks": {
         "LayoutCallback": {
            "use_patches": true
         },
         "RefAny": {
            "use_patches": true
         },
         "LayoutInfo": {
            "rust_class_name": "LayoutInfo<'a>",
            "external": "azul_core::callbacks::LayoutInfoPtr"
         }
      },
      "dom": {
         "Dom": {
            "rust_class_name": "Dom",
            "constructors": [
               {
                  "fn_name":"div",
                  "fn_body":"Dom::div()"
               },
               {
                  "fn_name": "label",
                  "fn_args": [
                     {"text": "String"}
                  ],
                  "fn_body": "Dom::label(*az_string_downcast(text))"
               }
            ],
            "external": "azul_core::dom::DomPtr"
         }
      },
      "css": {
         "Css": {
            "constructors":[
               {
                  "fn_name":"native",
                  "fn_body":"azul_native_style::native()"
               }
            ]
         }
      },
      "window": {
         "WindowCreateOptions": {
            "rust_class_name": "WindowCreateOptions",
            "constructors":[
               {
                  "fn_name":"new",
                  "fn_args":[
                     {"css": "Css"}
                  ],
                  "fn_body":"WindowCreateOptions::new(*az_css_downcast(css))"
               }
            ]
         }
      }
   }
}
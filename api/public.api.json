{
   "0.1.0": {
      "str": {
         "doc": "Definition of azuls internal String type + functions for conversion from `std::String`",
         "classes": {
            "String": {
               "constructors": {
                  "from_utf8_unchecked": {
                     "doc": "Creates + allocates a Rust `String` by **copying** it from another utf8-encoded string",
                     "fn_args": [
                        {"ptr": "*const u8"},
                        {"len": "usize"}
                     ],
                     "fn_body": "unsafe { std::str::from_utf8_unchecked(std::slice::from_raw_parts(ptr, len)).to_string() }"
                  },
                  "from_utf8_lossy": {
                     "doc": "Creates + allocates a Rust `String` by **copying** it from another utf8-encoded string",
                     "fn_args": [
                        {"ptr": "*const u8"},
                        {"len": "usize"}
                     ],
                     "fn_body": "unsafe { std::string::String::from_utf8_lossy(std::slice::from_raw_parts(ptr, len)).to_string() }"
                  }
               }
            }
         }
      },
      "vec": {
         "doc": "Definition of azuls internal `U8Vec` type + functions for conversion from `std::Vec`",
         "classes": {
            "U8Vec": {
               "doc": "Wrapper over a Rust-allocated `Vec<u8>`",
               "rust_class_name": "Vec<u8>",
               "constructors": {
                  "copy_from": {
                     "doc": "Creates + allocates a Rust `Vec<u8>` by **copying** it from a bytes source",
                     "fn_args": [
                        {"ptr": "*const u8"},
                        {"len": "usize"}
                     ],
                     "fn_body": "unsafe { std::slice::from_raw_parts(ptr, len).to_vec() }"
                  }
               }
            },
            "StringVec": {
               "doc": "Wrapper over a Rust-allocated `Vec<String>`",
               "rust_class_name": "Vec<String>",
               "constructors": {
                  "copy_from": {
                     "doc": "Creates + allocates a Rust `Vec<String>` by **copying** it from a bytes source",
                     "fn_args": [
                        {"ptr": "*const String"},
                        {"len": "usize"}
                     ],
                     "fn_body": "unsafe { std::slice::from_raw_parts(ptr, len).to_vec() }"
                  }
               }
            }
         }
      },
      "path": {
         "doc": "Definition of azuls internal `PathBuf` type + functions for conversion from `std::PathBuf`",
         "classes": {
            "PathBuf": {
               "doc": "Wrapper over a Rust-allocated `PathBuf`",
               "constructors": {
                  "new": {
                     "doc": "Creates a new PathBuf from a String",
                     "fn_args": [
                        {"path": "String"}
                     ],
                     "fn_body": "std::path::PathBuf::from(*az_string_downcast(path))"
                  }
               }
            }
         }
      },
      "time": {
         "doc": "Definition of azuls internal `Duration` type + functions for conversion from `std::time::Duration`",
         "classes": {
            "Duration": {
               "doc": "Wrapper over a Rust-allocated `Duration`",
               "struct_fields": {
                  "secs:": { "type": "u64" },
                  "nanos:": { "type": "u32" }
               },
               "constructors": {
                  "from_millis": {
                     "doc": "Creates a new `Duration` from milliseconds",
                     "fn_args": [
                        {"millis": "u64"}
                     ],
                     "fn_body": ""
                  }
               }
            }
         }
      },
      "app": {
         "doc": "`App` construction and configuration",
         "classes": {
            "AppConfig": {
               "constructors": {
                  "default": {
                     "doc": "Creates a new AppConfig with default values",
                     "fn_body": "AppConfig::default()"
                  }
               }
            },
            "App": {
               "constructors":{
                  "new": {
                     "doc":"Creates a new App instance from the given `AppConfig`",
                     "fn_args": [
                        {"data": "RefAny"},
                        {"config": "AppConfig"},
                        {"callback": "LayoutCallback"}
                     ],
                     "use_patches": ["rust"],
                     "fn_body": "App::new(data, *az_app_config_downcast(config), callback).unwrap()"
                  }
               },
               "functions": {
                  "run": {
                     "doc": "Runs the application. Due to platform restrictions (specifically `WinMain` on Windows), this function never returns.",
                     "fn_args": [
                        {"self": "value"},
                        {"window": "WindowCreateOptions"}
                     ],
                     "fn_body":"az_app_downcast(app).run(*az_window_create_options_downcast(window))"
                  }
               }
            }
         }
      },
      "callbacks": {
         "doc": "Callback type definitions + struct definitions of `CallbackInfo`s",
         "classes": {
            "LayoutCallback": { "use_patches": ["dll", "rust"], "typedef": true },

            "Callback": { "use_patches": ["dll", "rust"], "typedef": true },
            "CallbackInfo": {
               "external": "azul_core::callbacks::CallbackInfoPtr",
               "rust_class_name": "CallbackInfo<'a>",
               "is_boxed_object": true
            },
            "UpdateScreen": { "external": "Option<()>", "use_patches": ["rust"], "typedef": true },
            "Redraw": { "external": "azul_core::callbacks::Redraw", "use_patches": ["rust"], "const": "UpdateScreen" },
            "DontRedraw": { "external": "azul_core::callbacks::DontRedraw", "use_patches": ["rust"], "const": "UpdateScreen" },

            "IFrameCallback": { "use_patches": ["dll", "rust"], "typedef": true },
            "IFrameCallbackInfo": {
               "external": "azul_core::callbacks::IFrameCallbackInfoPtr",
               "rust_class_name": "IFrameCallbackInfo<'a>",
               "is_boxed_object": true
            },
            "IFrameCallbackReturn": {
               "external": "azul_core::callbacks::IFrameCallbackReturnPtr",
               "is_boxed_object": true
            },

            "GlCallback": { "use_patches": ["dll", "rust"], "typedef": true },
            "GlCallbackInfo": {
               "external": "azul_core::callbacks::GlCallbackInfoPtr",
               "rust_class_name": "GlCallbackInfo<'a>",
               "is_boxed_object": true
            },
            "GlCallbackReturn": {
               "external": "azul_core::callbacks::GlCallbackReturnPtr",
               "is_boxed_object": true
            },

            "RefAny": { "use_patches": ["dll", "rust"] },
            "LayoutInfo": {
               "rust_class_name": "LayoutInfo<'a>",
               "external": "azul_core::callbacks::LayoutInfoPtr",
               "is_boxed_object": true
            }
         }
      },
      "css": {
         "doc": "`Css` parsing module",
         "classes": {
            "Css": {
               "constructors": {
                  "native": {
                     "doc": "Loads the native style for the given operating system",
                     "fn_body":"azul_native_style::native()"
                  },
                  "empty": {
                     "doc": "Returns an empty CSS style",
                     "fn_body":"Css::empty()"
                  }
               }
            },
            "CssPropertyKey": {
            },
            "CssProperty": {
               "doc": "Parsed CSS key-value pair",
               "constructors": {
                  "parse_from_string": {
                     "doc": "Parses a new CssProperty from a string",
                     "fn_args": [
                        {"key": "CssPropertyKey"},
                        {"value": "String"}
                     ],
                     "fn_body":"CssPropertyValue::from_str(key, &*az_string_downcast(value))"
                  }
               }
            }
         }
      },
      "dom": {
         "doc": "`Dom` construction and configuration",
         "classes": {
            "Dom": {
               "external": "azul_core::dom::DomPtr",
               "is_boxed_object": true,
               "constructors": {
                  "div": {
                     "doc": "Creates a new `div` node",
                     "fn_body":"Dom::div()"
                  },
                  "body": {
                     "doc": "Creates a new `body` node",
                     "fn_body":"Dom::body()"
                  },
                  "label": {
                     "doc": "Creates a new `p` node with a given `String` as the text contents",
                     "fn_args": [
                        {"text": "String"}
                     ],
                     "fn_body": "Dom::label(*az_string_downcast(text))"
                  },
                  "text": {
                     "doc": "Creates a new `p` node from a (cached) text referenced by a `TextId`",
                     "fn_args": [
                        {"text_id": "TextId"}
                     ],
                     "fn_body": "Dom::text(*az_text_id_downcast(text_id))"
                  },
                  "image": {
                     "doc": "Creates a new `img` node from a (cached) text referenced by a `ImageId`",
                     "fn_args": [
                        {"image_id": "ImageId"}
                     ],
                     "fn_body": "Dom::image(*az_image_id_downcast(image_id))"
                  },
                  "gl_callback": {
                     "doc": "Creates a new node which will render an OpenGL texture after the layout step is finished. See the documentation for [GlCallback]() for more info about OpenGL rendering callbacks.",
                     "fn_args": [
                        {"data": "RefAny"},
                        {"callback": "GlCallback"}
                     ],
                     "fn_body": "Dom::gl_callback(azul_core::callbacks::GlCallback(callback))"
                  },
                  "iframe_callback": {
                     "doc": "Creates a new node with a callback that will return a `Dom` after being layouted. See the documentation for [IFrameCallback]() for more info about iframe callbacks.",
                     "fn_args": [
                        {"data": "RefAny"},
                        {"callback": "GlCallback"}
                     ],
                     "fn_body": "Dom::iframe(azul_core::callbacks::IFrameCallback(callback))"
                  }
               },
               "functions": {
                  "add_id": {
                     "doc": "Adds a CSS ID (`#something`) to the DOM node",
                     "fn_args": [
                        {"self": "refmut"},
                        {"id": "String"}
                     ],
                     "fn_body": "az_dom_downcast_refmut(dom, |d| { d.add_id(*az_string_downcast(id)); })"
                  },
                  "with_id": {
                     "doc": "Same as [`Dom::add_id`](#method.add_id), but as a builder method",
                     "fn_args": [
                        {"self": "mut value"},
                        {"id": "String"}
                     ],
                     "returns": "Dom",
                     "fn_body": "az_dom_add_id(&mut dom, id); dom"
                  },
                  "set_ids": {
                     "doc": "Same as calling [`Dom::add_id`](#method.add_id) for each CSS ID, but this function **replaces** all current CSS IDs",
                     "fn_args": [
                        {"self": "refmut"},
                        {"ids": "Vec<String>"}
                     ],
                     "fn_body": "az_dom_downcast_refmut(dom, |d| { d.set_ids(*az_vec_string_downcast(ids)); })"
                  },
                  "with_ids": {
                     "doc": "Same as [`Dom::set_ids`](#method.set_ids), but as a builder method",
                     "fn_args": [
                        {"self": "mut value"},
                        {"ids": "Vec<String>"}
                     ],
                     "returns": "Dom",
                     "fn_body": "az_dom_set_ids(&mut dom, ids); dom"
                  },
                  "add_class": {
                     "doc": "Adds a CSS class (`.something`) to the DOM node",
                     "fn_args": [
                        {"self": "refmut"},
                        {"class": "String"}
                     ],
                     "fn_body": "az_dom_downcast_refmut(dom, |d| { d.add_class(*az_string_downcast(class)); })"
                  },
                  "with_class": {
                     "doc": "Same as [`Dom::add_class`](#method.add_class), but as a builder method",
                     "fn_args": [
                        {"self": "mut value"},
                        {"class": "String"}
                     ],
                     "returns": "Dom",
                     "fn_body": "az_dom_add_class(&mut dom, class); dom"
                  },
                  "set_classes": {
                     "doc": "Same as calling [`Dom::add_class`](#method.add_class) for each class, but this function **replaces** all current classes",
                     "fn_args": [
                        {"self": "refmut"},
                        {"classes": "Vec<String>"}
                     ],
                     "fn_body": "az_dom_downcast_refmut(dom, |d| { d.set_classes(*az_vec_string_downcast(classes)); })"
                  },
                  "with_classes": {
                     "doc": "Same as [`Dom::set_classes`](#method.set_classes), but as a builder method",
                     "fn_args": [
                        {"self": "mut value"},
                        {"classes": "Vec<String>"}
                     ],
                     "returns": "Dom",
                     "fn_body": "az_dom_set_classes(&mut dom, ids); dom"
                  },
                  "add_callback": {
                     "doc": "Adds a [`Callback`](callbacks/type.Callback) that acts on the `data` the `event` happens",
                     "fn_args": [
                        {"self": "refmut"},
                        {"event": "EventFilter"},
                        {"data": "RefAny"},
                        {"callback": "Callback"}
                     ],
                     "fn_body": "az_dom_downcast_refmut(dom, |d| { d.add_callback(event, data, Callback(callback)); })"
                  },
                  "with_callback": {
                     "doc": "Same as [`Dom::add_callback`](#method.add_callback), but as a builder method",
                     "fn_args": [
                        {"self": "refmut"},
                        {"event": "EventFilter"},
                        {"data": "RefAny"},
                        {"callback": "Callback"}
                     ],
                     "fn_body": "az_dom_add_callback(&mut dom, event, data, callback); dom"
                  },
                  "add_dynamic_css_override": {
                     "doc": "Overrides the CSS property of this DOM node with a value (for example `\"width = 200px\"`)",
                     "fn_args": [
                        {"self": "refmut"},
                        {"prop": "CssProperty"}
                     ],
                     "fn_body": "az_dom_downcast_refmut(dom, |d| { d.add_dynamic_css_override(event, az_css_property_downcast(prop)); })"
                  },
                  "with_dynamic_css_override": {
                     "doc": "Same as [`Dom::add_dynamic_css_override`](#method.add_dynamic_css_override), but as a builder method",
                     "fn_args": [
                        {"self": "refmut"},
                        {"prop": "CssProperty"}
                     ],
                     "fn_body": "az_dom_add_dynamic_css_override(&mut dom, prop); dom"
                  },
                  "set_is_draggable": {
                     "doc": "Sets the `is_draggable` attribute of this DOM node (default: false)",
                     "fn_args": [
                        {"self": "refmut"},
                        {"is_draggable": "bool"}
                     ],
                     "fn_body": "az_dom_downcast_refmut(dom, |d| { d.is_draggable(event, is_draggable); })"
                  },
                  "is_draggable": {
                     "doc": "Same as [`Dom::set_is_draggable`](#method.set_is_draggable), but as a builder method",
                     "fn_args": [
                        {"self": "refmut"},
                        {"is_draggable": "bool"}
                     ],
                     "fn_body": "az_dom_set_is_draggable(&mut dom, is_draggable); dom"
                  },
                  "set_tab_index": {
                     "doc": "Sets the `tabindex` attribute of this DOM node (makes an element focusable - default: None)",
                     "fn_args": [
                        {"self": "refmut"},
                        {"tab_index": "TabIndex"}
                     ],
                     "fn_body": "az_dom_downcast_refmut(dom, |d| { d.set_tab_index(event, tab_index); })"
                  },
                  "with_tab_index": {
                     "doc": "Same as [`Dom::set_tab_index`](#method.set_tab_index), but as a builder method",
                     "fn_args": [
                        {"self": "refmut"},
                        {"tab_index": "TabIndex"}
                     ],
                     "fn_body": "az_dom_set_tab_index(&mut dom, tab_index); dom"
                  },
                  "add_child": {
                     "doc": "Reparents another `Dom` to be the child node of this `Dom`",
                     "fn_args": [
                        {"self": "refmut"},
                        {"child": "Dom"}
                     ],
                     "fn_body": "az_dom_downcast_refmut(dom, |d| { d.add_child(*az_dom_downcast(child)); })"
                  },
                  "with_child": {
                     "doc": "Same as [`Dom::add_child`](#method.add_child), but as a builder method",
                     "fn_args": [
                        {"self": "mut value"},
                        {"child": "Dom"}
                     ],
                     "returns": "Dom",
                     "fn_body": "az_dom_add_child(&mut dom, child); dom"
                  },
                  "has_id": {
                     "doc": "Returns if the DOM node has a certain CSS ID",
                     "fn_args": [
                        {"self": "ref"},
                        {"id": "String"}
                     ],
                     "returns": "bool",
                     "fn_body": "az_dom_downcast_refmut(dom, |d| { d.has_id(&*az_string_downcast(id)); })"
                  },
                  "has_class": {
                     "doc": "Returns if the DOM node has a certain CSS class",
                     "fn_args": [
                        {"self": "ref"},
                        {"class": "String"}
                     ],
                     "returns": "bool",
                     "fn_body": "az_dom_downcast_refmut(dom, |d| { d.has_class(&*az_string_downcast(class)); })"
                  }
               }
            },
            "EventFilter": {
               "external": "azul_core::dom::EventFilter",
               "enum_fields": {
                  "Hover": {"type": "HoverEventFilter"},
                  "Not": {"type": "NotEventFilter"},
                  "Focus": {"type": "FocusEventFilter"},
                  "Window": {"type": "WindowEventFilter"}
               }
            },
            "HoverEventFilter": {
               "external": "azul_core::dom::HoverEventFilter",
               "enum_fields": {
                  "MouseOver": {},
                  "MouseDown": {},
                  "LeftMouseDown": {},
                  "RightMouseDown": {},
                  "MiddleMouseDown": {},
                  "MouseUp": {},
                  "LeftMouseUp": {},
                  "RightMouseUp": {},
                  "MiddleMouseUp": {},
                  "MouseEnter": {},
                  "MouseLeave": {},
                  "Scroll": {},
                  "ScrollStart": {},
                  "ScrollEnd": {},
                  "TextInput": {},
                  "VirtualKeyDown": {},
                  "VirtualKeyUp": {},
                  "HoveredFile": {},
                  "DroppedFile": {},
                  "HoveredFileCancelled": {}
               }
            },
            "FocusEventFilter": {
               "external": "azul_core::dom::FocusEventFilter",
               "enum_fields": {
                  "MouseOver": {},
                  "MouseDown": {},
                  "LeftMouseDown": {},
                  "RightMouseDown": {},
                  "MiddleMouseDown": {},
                  "MouseUp": {},
                  "LeftMouseUp": {},
                  "RightMouseUp": {},
                  "MiddleMouseUp": {},
                  "MouseEnter": {},
                  "MouseLeave": {},
                  "Scroll": {},
                  "ScrollStart": {},
                  "ScrollEnd": {},
                  "TextInput": {},
                  "VirtualKeyDown": {},
                  "VirtualKeyUp": {},
                  "FocusReceived": {},
                  "FocusLost": {}
               }
            },
            "NotEventFilter": {
               "external": "azul_core::dom::NotEventFilter",
               "enum_fields": {
                  "Hover": {"type": "HoverEventFilter"},
                  "Focus": {"type": "FocusEventFilter"}
               }
            },
            "WindowEventFilter": {
               "external": "azul_core::dom::WindowEventFilter",
               "enum_fields": {
                  "MouseOver": {},
                  "MouseDown": {},
                  "LeftMouseDown": {},
                  "RightMouseDown": {},
                  "MiddleMouseDown": {},
                  "MouseUp": {},
                  "LeftMouseUp": {},
                  "RightMouseUp": {},
                  "MiddleMouseUp": {},
                  "MouseEnter": {},
                  "MouseLeave": {},
                  "Scroll": {},
                  "ScrollStart": {},
                  "ScrollEnd": {},
                  "TextInput": {},
                  "VirtualKeyDown": {},
                  "VirtualKeyUp": {},
                  "HoveredFile": {},
                  "DroppedFile": {},
                  "HoveredFileCancelled": {}
               }
            },
            "TabIndex": {
               "external": "azul_core::dom::TabIndex",
               "enum_fields": {
                  "Auto": { "doc": "Automatic tab index, similar to simply setting `focusable = \"true\"` or `tabindex = 0`, (both have the effect of making the element focusable)" },
                  "OverrideInParent": { "type": "usize", "doc": " Set the tab index in relation to its parent element (`tabindex = n`)" },
                  "NoKeyboardFocus": { "doc": "Elements can be focused in callbacks, but are not accessible via keyboard / tab navigation (`tabindex = -1`)"}
               }
            }
         }
      },
      "resources": {
         "doc": "Struct definition for image / font / text IDs",
         "classes": {
            "TextId": {
               "external": "azul_core::app_resources::TextId",
               "struct_fields": {
                  "id": "usize"
               },
               "constructors": {
                  "new": {
                     "doc": "Creates a new, unique `TextId`",
                     "fn_body":"TextId::new()"
                  }
               }
            },
            "ImageId": {
               "external": "azul_core::app_resources::ImageId",
               "struct_fields": {
                  "id": "usize"
               },
               "constructors": {
                  "new": {
                     "doc": "Creates a new, unique `ImageId`",
                     "fn_body":"ImageId::new()"
                  }
               }
            },
            "FontId": {
               "external": "azul_core::app_resources::FontId",
               "struct_fields": {
                  "id": "usize"
               },
               "constructors": {
                  "new": {
                     "doc": "Creates a new, unique `FontId`",
                     "fn_body":"FontId::new()"
                  }
               }
            },
            "ImageSource": {
               "external": "azul_core::app_resources::ImageSource",
               "enum_fields": {
                  "Embedded": {"type": "Vec<u8>", "doc": "Bytes of the image, encoded in PNG / JPG / etc. format"},
                  "File": {"type": "PathBuf", "doc": "References an (encoded!) image as a file from the file system that is loaded when necessary"},
                  "Raw": {"type": "RawImage", "doc": "References a decoded (!) `RawImage` as the image source"}
               }
            },
            "FontSource": {
               "external": "azul_core::app_resources::FontSource",
               "enum_fields": {
                  "Embedded": {"type": "Vec<u8>", "doc": "Bytes are the bytes of the font file"},
                  "File": {"type": "PathBuf", "doc": "References a font from a file path, which is loaded when necessary"},
                  "System": {"type": "String", "doc": "References a font from from a system font identifier, such as `\"Arial\"` or `\"Helvetica\"`"}
               }
            },
            "RawImage": {
               "constructors": {
                  "new": {
                     "doc": "Creates a new `RawImage` by loading the decoded bytes",
                     "fn_args": [
                        {"decoded_pixels": "U8Vec"},
                        {"width": "usize"},
                        {"height": "usize"},
                        {"data_format": "RawImageFormat"}
                     ],
                     "fn_body": "RawImage { pixels: *az_u8_vec_downcast(decoded_pixels), image_dimensions: (width, height), data_format }"
                  }
               }
            },
            "RawImageFormat": {
               "external": "azul_core::app_resources::RawImageFormat",
               "enum_fields": {
                  "R8": {"doc": "Bytes are in the R-unsinged-8bit format"},
                  "R16": {"doc": "Bytes are in the R-unsinged-16bit format"},
                  "RG16": {"doc": "Bytes are in the RG-unsinged-16bit format"},
                  "BGRA8": {"doc": "Bytes are in the BRGA-unsigned-8bit format"},
                  "RGBAF32": {"doc": "Bytes are in the RGBA-floating-point-32bit format"},
                  "RG8": {"doc": "Bytes are in the RG-unsigned-8bit format"},
                  "RGBAI32": {"doc": "Bytes are in the RGBA-signed-32bit format"},
                  "RGBA8": {"doc": "Bytes are in the RGBA-unsigned-8bit format"}
               }
            }
         }
      },
      "window": {
         "doc": "Window creation / startup configuration",
         "classes": {
            "WindowCreateOptions": {
               "rust_class_name": "WindowCreateOptions",
               "constructors": {
                  "new": {
                     "fn_args":[
                        {"css": "Css"}
                     ],
                     "fn_body":"WindowCreateOptions::new(*az_css_downcast(css))"
                  }
               }
            }
         }
      }
   }
}
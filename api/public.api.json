{
   "0.1.0": {
      "str": {
         "doc": "Definition of azuls internal String type + functions for conversion from `std::String`",
         "classes": {
            "String": {
               "constructors": {
                  "from_utf8_unchecked": {
                     "doc": "Creates + allocates a Rust `String` by **copying** it from another utf8-encoded string",
                     "fn_args": [
                        {"ptr": "*const u8"},
                        {"len": "usize"}
                     ],
                     "fn_body": "unsafe { std::str::from_utf8_unchecked(std::slice::from_raw_parts(ptr, len)).to_string() }"
                  },
                  "from_utf8_lossy": {
                     "doc": "Creates + allocates a Rust `String` by **copying** it from another utf8-encoded string",
                     "fn_args": [
                        {"ptr": "*const u8"},
                        {"len": "usize"}
                     ],
                     "fn_body": "unsafe { std::string::String::from_utf8_lossy(std::slice::from_raw_parts(ptr, len)).to_string() }"
                  }
               }
            }
         }
      },
      "vec": {
         "doc": "Definition of azuls internal `U8Vec` type + functions for conversion from `std::Vec`",
         "classes": {
            "U8Vec": {
               "doc": "Wrapper over a Rust-allocated `Vec<u8>`",
               "rust_class_name": "Vec<u8>",
               "constructors": {
                  "copy_from": {
                     "doc": "Creates + allocates a Rust `Vec<u8>` by **copying** it from a bytes source",
                     "fn_args": [
                        {"ptr": "*const u8"},
                        {"len": "usize"}
                     ],
                     "fn_body": "std::slice::from_raw_parts(ptr, len).to_vec()"
                  }
               }
            }
         }
      },
      "path": {
         "doc": "Definition of azuls internal `PathBuf` type + functions for conversion from `std::PathBuf`",
         "classes": {
            "PathBuf": {
               "doc": "Wrapper over a Rust-allocated `PathBuf`",
               "constructors": {
                  "new": {
                     "doc": "Creates a new PathBuf from a String",
                     "fn_args": [
                        {"path": "String"}
                     ],
                     "fn_body": "std::path::PathBuf::from(*az_string_downcast(path))"
                  }
               }
            }
         }
      },
      "app": {
         "doc": "`App` construction and configuration",
         "classes": {
            "AppConfig": {
               "constructors": {
                  "default": {
                     "doc": "Creates a new AppConfig with default values",
                     "fn_body": "AppConfig::default()"
                  }
               }
            },
            "App": {
               "constructors":{
                  "new": {
                     "doc":"Creates a new App instance from the given `AppConfig`",
                     "fn_args": [
                        {"data": "RefAny"},
                        {"config": "AppConfig"},
                        {"callback": "LayoutCallback"}
                     ],
                     "use_patches": ["rust"],
                     "fn_body": "App::new(data, *az_app_config_downcast(config), callback).unwrap()"
                  }
               },
               "functions": {
                  "run": {
                     "doc": "Runs the application. Due to platform restrictions (specifically `WinMain` on Windows), this function never returns.",
                     "fn_args": [
                        {"self": "value"},
                        {"window": "WindowCreateOptions"}
                     ],
                     "fn_body":"az_app_downcast(app).run(*az_window_create_options_downcast(window))"
                  }
               }
            }
         }
      },
      "callbacks": {
         "doc": "Callback type definitions + struct definitions of `CallbackInfo`s",
         "classes": {
            "LayoutCallback": {
               "use_patches": ["dll", "rust"]
            },
            "RefAny": {
               "use_patches": ["dll", "rust"]
            },
            "LayoutInfo": {
               "rust_class_name": "LayoutInfo<'a>",
               "external": "azul_core::callbacks::LayoutInfoPtr"
            }
         }
      },
      "css": {
         "doc": "`Css` parsing module",
         "classes": {
            "Css": {
               "constructors": {
                  "native": {
                     "doc": "Loads the native style for the given operating system",
                     "fn_body":"azul_native_style::native()"
                  },
                  "empty": {
                     "doc": "Returns an empty CSS style",
                     "fn_body":"Css::empty()"
                  }
               }
            }
         }
      },
      "dom": {
         "doc": "`Dom` construction and configuration",
         "classes": {
            "Dom": {
               "rust_class_name": "Dom",
               "external": "azul_core::dom::DomPtr",
               "constructors": {
                  "div": {
                     "doc": "Creates a new `div` node",
                     "fn_body":"Dom::div()"
                  },
                  "body": {
                     "doc": "Creates a new `body` node",
                     "fn_body":"Dom::body()"
                  },
                  "label": {
                     "fn_args": [
                        {"text": "String"}
                     ],
                     "fn_body": "Dom::label(*az_string_downcast(text))"
                  }
               },
               "functions": {
                  "add_child": {
                     "doc": "Reparents another `Dom` to be the child node of this `Dom`",
                     "fn_args": [
                        {"self": "refmut"},
                        {"child": "Dom"}
                     ],
                     "fn_body": "az_dom_downcast_refmut(dom, |d| { d.add_child(*az_dom_downcast(child)); })"
                  },
                  "with_child": {
                     "doc": "Same as [`Dom::add_child`](#method.add_child), but as a builder method",
                     "fn_args": [
                        {"self": "mut value"},
                        {"child": "Dom"}
                     ],
                     "returns": "Dom",
                     "fn_body": "az_dom_add_child(&mut dom, child); dom"
                  }
               }
            }
         }
      },
      "resources": {
         "doc": "Struct definition for image / font / text IDs",
         "classes": {
            "TextId": {
               "external": "azul_core::app_resources::TextId",
               "constructors": {
                  "new": {
                     "doc": "Creates a new, unique `TextId`",
                     "fn_body":"TextId::new()"
                  }
               }
            },
            "ImageId": {
               "external": "azul_core::app_resources::ImageId",
               "constructors": {
                  "new": {
                     "doc": "Creates a new, unique `ImageId`",
                     "fn_body":"ImageId::new()"
                  }
               }
            },
            "FontId": {
               "external": "azul_core::app_resources::FontId",
               "constructors": {
                  "new": {
                     "doc": "Creates a new, unique `FontId`",
                     "fn_body":"FontId::new()"
                  }
               }
            },
            "ImageSource": {
               "external": "azul_core::app_resources::ImageSource",
               "enum_fields": [
                  {"Embedded": {"type": "Vec<u8>", "doc": "Bytes of the image, encoded in PNG / JPG / etc. format"}},
                  {"File": {"type": "PathBuf", "doc": "References an (encoded!) image as a file from the file system that is loaded when necessary"}},
                  {"Raw": {"type": "RawImage", "doc": "References a decoded (!) `RawImage` as the image source"}}
               ]
            },
            "FontSource": {
               "external": "azul_core::app_resources::FontSource",
               "enum_fields": [
                  {"Embedded": {"type": "Vec<u8>", "doc": "Bytes are the bytes of the font file"}},
                  {"File": {"type": "PathBuf", "doc": "References a font from a file path, which is loaded when necessary"}},
                  {"System": {"type": "String", "doc": "References a font from from a system font identifier, such as `\"Arial\"` or `\"Helvetica\"`"}}
               ]
            },
            "RawImage": {
               "constructors": {
                  "new": {
                     "doc": "Creates a new `RawImage` by loading the decoded bytes",
                     "fn_args": [
                        {"decoded_pixels": "U8Vec"},
                        {"width": "usize"},
                        {"height": "usize"},
                        {"data_format": "RawImageFormat"}
                     ],
                     "fn_body": "RawImage { pixels: *az_u8_vec_downcast(decoded_pixels), image_dimensions: (width, height), data_format }"
                  }
               }
            },
            "RawImageFormat": {
               "external": "azul_core::app_resources::RawImageFormat",
               "enum_fields": [
                  {"R8": {"doc": "Bytes are in the R-unsinged-8bit format"}},
                  {"R16": {"doc": "Bytes are in the R-unsinged-16bit format"}},
                  {"RG16": {"doc": "Bytes are in the RG-unsinged-16bit format"}},
                  {"BGRA8": {"doc": "Bytes are in the BRGA-unsigned-8bit format"}},
                  {"RGBAF32": {"doc": "Bytes are in the RGBA-floating-point-32bit format"}},
                  {"RG8": {"doc": "Bytes are in the RG-unsigned-8bit format"}},
                  {"RGBAI32": {"doc": "Bytes are in the RGBA-signed-32bit format"}},
                  {"RGBA8": {"doc": "Bytes are in the RGBA-unsigned-8bit format"}}
               ]
            }
         }
      },
      "window": {
         "doc": "Window creation / startup configuration",
         "classes": {
            "WindowCreateOptions": {
               "rust_class_name": "WindowCreateOptions",
               "constructors": {
                  "new": {
                     "fn_args":[
                        {"css": "Css"}
                     ],
                     "fn_body":"WindowCreateOptions::new(*az_css_downcast(css))"
                  }
               }
            }
         }
      }
   }
}
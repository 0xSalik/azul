{
	"0.1.0": {
		"str": {
			"doc": "Definition of azuls internal `String` wrappers",
			"classes": {
				"String": {
					"external": "azul_impl::css::AzString",
					"struct_fields": [
						{ "vec": { "type": "U8Vec" } }
					],
					"constructors": {
						"from_utf8_unchecked": {
							"doc": "Creates + allocates a Rust `String` by **copying** it from another utf8-encoded string",
							"fn_args": [
								{"ptr": "*const u8"},
								{"len": "usize"}
							],
							"fn_body": "AzString::from_utf8_unchecked(ptr, len)"
						},
						"from_utf8_lossy": {
							"doc": "Creates + allocates a Rust `String` by **copying** it from another utf8-encoded string",
							"fn_args": [
								{"ptr": "*const u8"},
								{"len": "usize"}
							],
							"fn_body": "AzString::from_utf8_lossy(ptr, len)"
						}
					},
					"functions": {
						"into_bytes": {
							"doc": "Returns the internal bytes of the String as a `U8Vec`",
							"fn_args": [
								{"self": "value"}
							],
							"returns": "U8Vec",
							"fn_body": "string.into_bytes()"
						}
					}
				}
			}
		},
		"vec": {
			"doc": "Definition of azuls internal `Vec<*>` wrappers",
			"classes": {
				"StyleTransformVec": {
					"doc": "Wrapper over a Rust-allocated `Vec<StyleTransform>`",
					"external": "azul_impl::css::StyleTransformVec",
					"struct_fields": [
						{ "ptr": { "type": "*mut StyleTransform" } },
						{ "len": { "type": "usize" } },
						{ "cap": { "type": "usize" } }
					],
					"constructors": {
						"new": {
							"doc": "Creates a new, empty Rust `Vec<StyleTransform>`",
							"fn_body": "Vec::<AzStyleTransform>::new().into()"
						},
						"with_capacity": {
							"doc": "Creates a new, empty Rust `Vec<StyleTransform>` with a given, pre-allocated capacity",
							"fn_args": [
							    {"cap": "usize"}
							],
							"fn_body": "Vec::<AzStyleTransform>::with_capacity(cap).into()"
						},
					    "copy_from": {
					        "doc": "Creates + allocates a Rust `Vec<StyleTransform>` by **copying** it from a bytes source",
					        "fn_args": [
					            {"ptr": "*const StyleTransform"},
					            {"len": "usize"}
					        ],
					        "fn_body": "unsafe { std::slice::from_raw_parts(ptr, len).to_vec() }.into()"
					    }
					},
					"destructor": "unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());"
				},
				"ContentGroupVec": {
					"doc": "Wrapper over a Rust-allocated `Vec<ContentGroup>`",
					"external": "azul_impl::styled_dom::ContentGroupVec",
					"struct_fields": [
						{ "ptr": { "type": "*mut ContentGroup" } },
						{ "len": { "type": "usize" } },
						{ "cap": { "type": "usize" } }
					],
					"constructors": {
						"new": {
							"doc": "Creates a new, empty Rust `Vec<ContentGroup>`",
							"fn_body": "Vec::<AzContentGroup>::new().into()"
						},
						"with_capacity": {
							"doc": "Creates a new, empty Rust `Vec<ContentGroup>` with a given, pre-allocated capacity",
							"fn_args": [
							    {"cap": "usize"}
							],
							"fn_body": "Vec::<AzContentGroup>::with_capacity(cap).into()"
						},
					    "copy_from": {
					        "doc": "Creates + allocates a Rust `Vec<ContentGroup>` by **copying** it from a bytes source",
					        "fn_args": [
					            {"ptr": "*const ContentGroup"},
					            {"len": "usize"}
					        ],
					        "fn_body": "unsafe { std::slice::from_raw_parts(ptr, len).to_vec() }.into()"
					    }
					},
					"destructor": "unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());"
				},
				"CssPropertyVec": {
					"doc": "Wrapper over a Rust-allocated `Vec<CssProperty>`",
					"external": "azul_impl::css::CssPropertyVec",
					"struct_fields": [
						{ "ptr": { "type": "*mut CssProperty" } },
						{ "len": { "type": "usize" } },
						{ "cap": { "type": "usize" } }
					],
					"constructors": {
						"new": {
							"doc": "Creates a new, empty Rust `Vec<CssProperty>`",
							"fn_body": "Vec::<AzCssProperty>::new().into()"
						},
						"with_capacity": {
							"doc": "Creates a new, empty Rust `Vec<CssProperty>` with a given, pre-allocated capacity",
							"fn_args": [
							    {"cap": "usize"}
							],
							"fn_body": "Vec::<AzCssProperty>::with_capacity(cap).into()"
						},
					    "copy_from": {
					        "doc": "Creates + allocates a Rust `Vec<CssProperty>` by **copying** it from a bytes source",
					        "fn_args": [
					            {"ptr": "*const CssProperty"},
					            {"len": "usize"}
					        ],
					        "fn_body": "unsafe { std::slice::from_raw_parts(ptr, len).to_vec() }.into()"
					    }
					},
					"destructor": "unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());"
				},
				"SvgMultiPolygonVec": {
					"doc": "Wrapper over a Rust-allocated `Vec<SvgMultiPolygon>`",
					"external": "azul_impl::svg::SvgMultiPolygonVec",
					"struct_fields": [
						{ "ptr": { "type": "*mut SvgMultiPolygon" } },
						{ "len": { "type": "usize" } },
						{ "cap": { "type": "usize" } }
					],
					"constructors": {
						"new": {
							"doc": "Creates a new, empty Rust `Vec<SvgMultiPolygon>`",
							"fn_body": "Vec::<AzSvgMultiPolygon>::new().into()"
						},
						"with_capacity": {
							"doc": "Creates a new, empty Rust `Vec<SvgMultiPolygon>` with a given, pre-allocated capacity",
							"fn_args": [
							    {"cap": "usize"}
							],
							"fn_body": "Vec::<AzSvgMultiPolygon>::with_capacity(cap).into()"
						},
					    "copy_from": {
					        "doc": "Creates + allocates a Rust `Vec<SvgMultiPolygon>` by **copying** it from a bytes source",
					        "fn_args": [
					            {"ptr": "*const SvgMultiPolygon"},
					            {"len": "usize"}
					        ],
					        "fn_body": "unsafe { std::slice::from_raw_parts(ptr, len).to_vec() }.into()"
					    }
					},
					"destructor": "unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());"
				},
				"SvgPathVec": {
					"doc": "Wrapper over a Rust-allocated `Vec<SvgPath>`",
					"external": "azul_impl::svg::SvgPathVec",
					"struct_fields": [
						{ "ptr": { "type": "*mut SvgPath" } },
						{ "len": { "type": "usize" } },
						{ "cap": { "type": "usize" } }
					],
					"constructors": {
						"new": {
							"doc": "Creates a new, empty Rust `Vec<SvgPath>`",
							"fn_body": "Vec::<AzSvgPath>::new().into()"
						},
						"with_capacity": {
							"doc": "Creates a new, empty Rust `Vec<SvgPath>` with a given, pre-allocated capacity",
							"fn_args": [
							    {"cap": "usize"}
							],
							"fn_body": "Vec::<AzSvgPath>::with_capacity(cap).into()"
						},
					    "copy_from": {
					        "doc": "Creates + allocates a Rust `Vec<SvgPath>` by **copying** it from a bytes source",
					        "fn_args": [
					            {"ptr": "*const SvgPath"},
					            {"len": "usize"}
					        ],
					        "fn_body": "unsafe { std::slice::from_raw_parts(ptr, len).to_vec() }.into()"
					    }
					},
					"destructor": "unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());"
				},
				"VertexAttributeVec": {
					"doc": "Wrapper over a Rust-allocated `Vec<VertexAttribute>`",
					"external": "azul_impl::gl::VertexAttributeVec",
					"struct_fields": [
						{ "ptr": { "type": "*mut VertexAttribute" } },
						{ "len": { "type": "usize" } },
						{ "cap": { "type": "usize" } }
					],
					"constructors": {
						"new": {
							"doc": "Creates a new, empty Rust `Vec<VertexAttribute>`",
							"fn_body": "Vec::<AzVertexAttribute>::new().into()"
						},
						"with_capacity": {
							"doc": "Creates a new, empty Rust `Vec<VertexAttribute>` with a given, pre-allocated capacity",
							"fn_args": [
							    {"cap": "usize"}
							],
							"fn_body": "Vec::<AzVertexAttribute>::with_capacity(cap).into()"
						},
					    "copy_from": {
					        "doc": "Creates + allocates a Rust `Vec<VertexAttribute>` by **copying** it from a bytes source",
					        "fn_args": [
					            {"ptr": "*const VertexAttribute"},
					            {"len": "usize"}
					        ],
					        "fn_body": "unsafe { std::slice::from_raw_parts(ptr, len).to_vec() }.into()"
					    }
					},
					"destructor": "unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());"
				},
				"SvgPathElementVec": {
					"doc": "Wrapper over a Rust-allocated `VertexAttribute`",
					"external": "azul_impl::svg::SvgPathElementVec",
					"struct_fields": [
						{ "ptr": { "type": "*mut SvgPathElement" } },
						{ "len": { "type": "usize" } },
						{ "cap": { "type": "usize" } }
					],
					"constructors": {
						"new": {
							"doc": "Creates a new, empty Rust `Vec<SvgPathElement>`",
							"fn_body": "Vec::<AzSvgPathElement>::new().into()"
						},
						"with_capacity": {
							"doc": "Creates a new, empty Rust `Vec<SvgPathElement>` with a given, pre-allocated capacity",
							"fn_args": [
							    {"cap": "usize"}
							],
							"fn_body": "Vec::<AzSvgPathElement>::with_capacity(cap).into()"
						},
					    "copy_from": {
					        "doc": "Creates + allocates a Rust `Vec<SvgPathElement>` by **copying** it from a bytes source",
					        "fn_args": [
					            {"ptr": "*const SvgPathElement"},
					            {"len": "usize"}
					        ],
					        "fn_body": "unsafe { std::slice::from_raw_parts(ptr, len).to_vec() }.into()"
					    }
					},
					"destructor": "unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());"
				},
				"SvgVertexVec": {
					"doc": "Wrapper over a Rust-allocated `SvgVertex`",
					"external": "azul_impl::svg::SvgVertexVec",
					"struct_fields": [
						{ "ptr": { "type": "*mut SvgVertex" } },
						{ "len": { "type": "usize" } },
						{ "cap": { "type": "usize" } }
					],
					"constructors": {
						"new": {
							"doc": "Creates a new, empty Rust `Vec<SvgVertex>`",
							"fn_body": "Vec::<AzSvgVertex>::new().into()"
						},
						"with_capacity": {
							"doc": "Creates a new, empty Rust `Vec<SvgVertex>` with a given, pre-allocated capacity",
							"fn_args": [
							    {"cap": "usize"}
							],
							"fn_body": "Vec::<AzSvgVertex>::with_capacity(cap).into()"
						},
					    "copy_from": {
					        "doc": "Creates + allocates a Rust `Vec<SvgVertex>` by **copying** it from a bytes source",
					        "fn_args": [
					            {"ptr": "*const SvgVertex"},
					            {"len": "usize"}
					        ],
					        "fn_body": "unsafe { std::slice::from_raw_parts(ptr, len).to_vec() }.into()"
					    }
					},
					"destructor": "unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());"
				},
				"U32Vec": {
					"doc": "Wrapper over a Rust-allocated `Vec<u32>`",
					"external": "azul_impl::svg::U32Vec",
					"struct_fields": [
						{ "ptr": { "type": "*mut u32" } },
						{ "len": { "type": "usize" } },
						{ "cap": { "type": "usize" } }
					],
					"constructors": {
						"new": {
							"doc": "Creates a new, empty Rust `Vec<u32>`",
							"fn_body": "Vec::<u32>::new().into()"
						},
						"with_capacity": {
							"doc": "Creates a new, empty Rust `Vec<u32>` with a given, pre-allocated capacity",
							"fn_args": [
							    {"cap": "usize"}
							],
							"fn_body": "Vec::<u32>::with_capacity(cap).into()"
						},
					    "copy_from": {
					        "doc": "Creates + allocates a Rust `Vec<u32>` by **copying** it from a bytes source",
					        "fn_args": [
					            {"ptr": "*const u32"},
					            {"len": "usize"}
					        ],
					        "fn_body": "unsafe { std::slice::from_raw_parts(ptr, len).to_vec() }.into()"
					    }
					},
					"destructor": "unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());"
				},
				"XWindowTypeVec": {
					"doc": "Wrapper over a Rust-allocated `XWindowType`",
					"external": "azul_impl::window::XWindowTypeVec",
					"struct_fields": [
						{ "ptr": { "type": "*mut XWindowType" } },
						{ "len": { "type": "usize" } },
						{ "cap": { "type": "usize" } }
					],
					"constructors": {
						"new": {
							"doc": "Creates a new, empty Rust `Vec<XWindowType>`",
							"fn_body": "Vec::<AzXWindowType>::new().into()"
						},
						"with_capacity": {
							"doc": "Creates a new, empty Rust `Vec<XWindowType>` with a given, pre-allocated capacity",
							"fn_args": [
							    {"cap": "usize"}
							],
							"fn_body": "Vec::<AzXWindowType>::with_capacity(cap).into()"
						},
					    "copy_from": {
					        "doc": "Creates + allocates a Rust `Vec<XWindowType>` by **copying** it from a bytes source",
					        "fn_args": [
					            {"ptr": "*const XWindowType"},
					            {"len": "usize"}
					        ],
					        "fn_body": "unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into()"
					    }
					},
					"destructor": "unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());"
				},
				"VirtualKeyCodeVec": {
					"doc": "Wrapper over a Rust-allocated `VirtualKeyCode`",
					"external": "azul_impl::window::VirtualKeyCodeVec",
					"struct_fields": [
						{ "ptr": { "type": "*mut VirtualKeyCode" } },
						{ "len": { "type": "usize" } },
						{ "cap": { "type": "usize" } }
					],
					"constructors": {
						"new": {
							"doc": "Creates a new, empty Rust `Vec<VirtualKeyCode>`",
							"fn_body": "Vec::<AzVirtualKeyCode>::new().into()"
						},
						"with_capacity": {
							"doc": "Creates a new, empty Rust `Vec<VirtualKeyCode>` with a given, pre-allocated capacity",
							"fn_args": [
							    {"cap": "usize"}
							],
							"fn_body": "Vec::<AzVirtualKeyCode>::with_capacity(cap).into()"
						},
					    "copy_from": {
					        "doc": "Creates + allocates a Rust `Vec<VirtualKeyCode>` by **copying** it from a bytes source",
					        "fn_args": [
					            {"ptr": "*const VirtualKeyCode"},
					            {"len": "usize"}
					        ],
					        "fn_body": "unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into()"
					    }
					},
					"destructor": "unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());"
				},
				"CascadeInfoVec": {
					"doc": "Wrapper over a Rust-allocated `CascadeInfo`",
					"external": "azul_impl::style::CascadeInfoVec",
					"struct_fields": [
						{ "ptr": { "type": "*mut CascadeInfo" } },
						{ "len": { "type": "usize" } },
						{ "cap": { "type": "usize" } }
					],
					"constructors": {
						"new": {
							"doc": "Creates a new, empty Rust `Vec<CascadeInfo>`",
							"fn_body": "Vec::<AzCascadeInfo>::new().into()"
						},
						"with_capacity": {
							"doc": "Creates a new, empty Rust `Vec<CascadeInfo>` with a given, pre-allocated capacity",
							"fn_args": [
							    {"cap": "usize"}
							],
							"fn_body": "Vec::<AzCascadeInfo>::with_capacity(cap).into()"
						},
					    "copy_from": {
					        "doc": "Creates + allocates a Rust `Vec<CascadeInfo>` by **copying** it from a bytes source",
					        "fn_args": [
					            {"ptr": "*const CascadeInfo"},
					            {"len": "usize"}
					        ],
					        "fn_body": "unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into()"
					    }
					},
					"destructor": "unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());"
				},
				"ScanCodeVec": {
					"doc": "Wrapper over a Rust-allocated `ScanCode`",
					"external": "azul_impl::window::ScanCodeVec",
					"struct_fields": [
						{ "ptr": { "type": "*mut u32" } },
						{ "len": { "type": "usize" } },
						{ "cap": { "type": "usize" } }
					],
					"constructors": {
						"new": {
							"doc": "Creates a new, empty Rust `Vec<ScanCode>`",
							"fn_body": "Vec::<u32>::new().into()"
						},
						"with_capacity": {
							"doc": "Creates a new, empty Rust `Vec<ScanCode>` with a given, pre-allocated capacity",
							"fn_args": [
							    {"cap": "usize"}
							],
							"fn_body": "Vec::<u32>::with_capacity(cap).into()"
						},
					    "copy_from": {
					        "doc": "Creates + allocates a Rust `Vec<ScanCode>` by **copying** it from a bytes source",
					        "fn_args": [
					            {"ptr": "*const u32"},
					            {"len": "usize"}
					        ],
					        "fn_body": "unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into()"
					    }
					},
					"destructor": "unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());"
				},
				"CssDeclarationVec": {
					"doc": "Wrapper over a Rust-allocated `CssDeclaration`",
					"external": "azul_impl::css::CssDeclarationVec",
					"struct_fields": [
						{ "ptr": { "type": "*mut CssDeclaration" } },
						{ "len": { "type": "usize" } },
						{ "cap": { "type": "usize" } }
					],
					"constructors": {
						"new": {
							"doc": "Creates a new, empty Rust `Vec<CssDeclaration>`",
							"fn_body": "Vec::<AzCssDeclaration>::new().into()"
						},
						"with_capacity": {
							"doc": "Creates a new, empty Rust `Vec<CssDeclaration>` with a given, pre-allocated capacity",
							"fn_args": [
							    {"cap": "usize"}
							],
							"fn_body": "Vec::<AzCssDeclaration>::with_capacity(cap).into()"
						},
					    "copy_from": {
					        "doc": "Creates + allocates a Rust `Vec<CssDeclaration>` by **copying** it from a bytes source",
					        "fn_args": [
					            {"ptr": "*const CssDeclaration"},
					            {"len": "usize"}
					        ],
					        "fn_body": "unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into()"
					    }
					},
					"destructor": "unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());"
				},
				"CssPathSelectorVec": {
					"doc": "Wrapper over a Rust-allocated `CssPathSelector`",
					"external": "azul_impl::css::CssPathSelectorVec",
					"struct_fields": [
						{ "ptr": { "type": "*mut CssPathSelector" } },
						{ "len": { "type": "usize" } },
						{ "cap": { "type": "usize" } }
					],
					"constructors": {
						"new": {
							"doc": "Creates a new, empty Rust `Vec<CssPathSelector>`",
							"fn_body": "Vec::<AzCssPathSelector>::new().into()"
						},
						"with_capacity": {
							"doc": "Creates a new, empty Rust `Vec<CssPathSelector>` with a given, pre-allocated capacity",
							"fn_args": [
							    {"cap": "usize"}
							],
							"fn_body": "Vec::<AzCssPathSelector>::with_capacity(cap).into()"
						},
					    "copy_from": {
					        "doc": "Creates + allocates a Rust `Vec<CssPathSelector>` by **copying** it from a bytes source",
					        "fn_args": [
					            {"ptr": "*const CssPathSelector"},
					            {"len": "usize"}
					        ],
					        "fn_body": "unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into()"
					    }
					},
					"destructor": "unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());"
				},
				"StylesheetVec": {
					"doc": "Wrapper over a Rust-allocated `Stylesheet`",
					"external": "azul_impl::css::StylesheetVec",
					"struct_fields": [
						{ "ptr": { "type": "*mut Stylesheet" } },
						{ "len": { "type": "usize" } },
						{ "cap": { "type": "usize" } }
					],
					"constructors": {
						"new": {
							"doc": "Creates a new, empty Rust `Vec<Stylesheet>`",
							"fn_body": "Vec::<AzStylesheet>::new().into()"
						},
						"with_capacity": {
							"doc": "Creates a new, empty Rust `Vec<Stylesheet>` with a given, pre-allocated capacity",
							"fn_args": [
							    {"cap": "usize"}
							],
							"fn_body": "Vec::<AzStylesheet>::with_capacity(cap).into()"
						},
					    "copy_from": {
					        "doc": "Creates + allocates a Rust `Vec<Stylesheet>` by **copying** it from a bytes source",
					        "fn_args": [
					            {"ptr": "*const Stylesheet"},
					            {"len": "usize"}
					        ],
					        "fn_body": "unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into()"
					    }
					},
					"destructor": "unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());"
				},
				"CssRuleBlockVec": {
					"doc": "Wrapper over a Rust-allocated `CssRuleBlock`",
					"external": "azul_impl::css::CssRuleBlockVec",
					"struct_fields": [
						{ "ptr": { "type": "*mut CssRuleBlock" } },
						{ "len": { "type": "usize" } },
						{ "cap": { "type": "usize" } }
					],
					"constructors": {
						"new": {
							"doc": "Creates a new, empty Rust `Vec<CssRuleBlock>`",
							"fn_body": "Vec::<AzCssRuleBlock>::new().into()"
						},
						"with_capacity": {
							"doc": "Creates a new, empty Rust `Vec<CssRuleBlock>` with a given, pre-allocated capacity",
							"fn_args": [
							    {"cap": "usize"}
							],
							"fn_body": "Vec::<AzCssRuleBlock>::with_capacity(cap).into()"
						},
					    "copy_from": {
					        "doc": "Creates + allocates a Rust `Vec<CssRuleBlock>` by **copying** it from a bytes source",
					        "fn_args": [
					            {"ptr": "*const CssRuleBlock"},
					            {"len": "usize"}
					        ],
					        "fn_body": "unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into()"
					    }
					},
					"destructor": "unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());"
				},
				"U8Vec": {
					"doc": "Wrapper over a Rust-allocated `U8Vec`",
					"external": "azul_impl::css::U8Vec",
					"struct_fields": [
						{ "ptr": { "type": "*mut u8" } },
						{ "len": { "type": "usize" } },
						{ "cap": { "type": "usize" } }
					],
					"constructors": {
						"new": {
							"doc": "Creates a new, empty Rust `Vec<u8>`",
							"fn_body": "Vec::<u8>::new().into()"
						},
						"with_capacity": {
							"doc": "Creates a new, empty Rust `Vec<u8>` with a given, pre-allocated capacity",
							"fn_args": [
							    {"cap": "usize"}
							],
							"fn_body": "Vec::<u8>::with_capacity(cap).into()"
						},
					    "copy_from": {
					        "doc": "Creates + allocates a Rust `Vec<u8>` by **copying** it from a bytes source",
					        "fn_args": [
					            {"ptr": "*const u8"},
					            {"len": "usize"}
					        ],
					        "fn_body": "unsafe { std::slice::from_raw_parts(ptr, len).to_vec() }.into()"
					    }
					},
					"destructor": "unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());"
				},
				"CallbackDataVec": {
					"doc": "Wrapper over a Rust-allocated `CallbackData`",
					"external": "azul_impl::dom::CallbackDataVec",
					"struct_fields": [
						{ "ptr": { "type": "*mut CallbackData" } },
						{ "len": { "type": "usize" } },
						{ "cap": { "type": "usize" } }
					],
					"constructors": {
						"new": {
							"doc": "Creates a new, empty Rust `Vec<CallbackData>`",
							"fn_body": "Vec::<AzCallbackData>::new().into()"
						},
						"with_capacity": {
							"doc": "Creates a new, empty Rust `Vec<CallbackData>` with a given, pre-allocated capacity",
							"fn_args": [
							    {"cap": "usize"}
							],
							"fn_body": "Vec::<AzCallbackData>::with_capacity(cap).into()"
						},
					    "copy_from": {
					        "doc": "Creates + allocates a Rust `Vec<CallbackData>` by **copying** it from a bytes source",
					        "fn_args": [
					            {"ptr": "*const CallbackData"},
					            {"len": "usize"}
					        ],
					        "fn_body": "unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into()"
					    }
					},
					"destructor": "unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());"
				},
				"DebugMessageVec": {
					"doc": "Wrapper over a Rust-allocated `Vec<DebugMessage>`",
					"external": "azul_impl::gl::AzDebugMessageVec",
					"struct_fields": [
						{ "ptr": { "type": "*mut DebugMessage" } },
						{ "len": { "type": "usize" } },
						{ "cap": { "type": "usize" } }
					],
					"constructors": {
						"new": {
							"doc": "Creates a new, empty Rust `Vec<DebugMessage>`",
							"fn_body": "Vec::<AzDebugMessage>::new().into()"
						},
						"with_capacity": {
							"doc": "Creates a new, empty Rust `Vec<DebugMessage>` with a given, pre-allocated capacity",
							"fn_args": [
							    {"cap": "usize"}
							],
							"fn_body": "Vec::<AzDebugMessage>::with_capacity(cap).into()"
						},
					    "copy_from": {
					        "doc": "Creates + allocates a Rust `Vec<DebugMessage>` by **copying** it from a bytes source",
					        "fn_args": [
					            {"ptr": "*const DebugMessage"},
					            {"len": "usize"}
					        ],
					        "fn_body": "unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into()"
					    }
					},
					"destructor": "unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());"
				},
				"GLuintVec": {
					"doc": "Wrapper over a Rust-allocated `U32Vec`",
					"external": "azul_impl::gl::GLuintVec",
					"struct_fields": [
						{ "ptr": { "type": "*mut u32" } },
						{ "len": { "type": "usize" } },
						{ "cap": { "type": "usize" } }
					],
					"constructors": {
						"new": {
							"doc": "Creates a new, empty Rust `Vec<u32>`",
							"fn_body": "Vec::<u32>::new().into()"
						},
						"with_capacity": {
							"doc": "Creates a new, empty Rust `Vec<u32>` with a given, pre-allocated capacity",
							"fn_args": [
							    {"cap": "usize"}
							],
							"fn_body": "Vec::<u32>::with_capacity(cap).into()"
						},
					    "copy_from": {
					        "doc": "Creates + allocates a Rust `Vec<u32>` by **copying** it from a bytes source",
					        "fn_args": [
					            {"ptr": "*const u32"},
					            {"len": "usize"}
					        ],
					        "fn_body": "unsafe { std::slice::from_raw_parts(ptr, len).to_vec() }.into()"
					    }
					},
					"destructor": "unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());"
				},
				"GLintVec": {
					"doc": "Wrapper over a Rust-allocated `GLintVec`",
					"external": "azul_impl::gl::GLintVec",
					"struct_fields": [
						{ "ptr": { "type": "*mut i32" } },
						{ "len": { "type": "usize" } },
						{ "cap": { "type": "usize" } }
					],
					"constructors": {
						"new": {
							"doc": "Creates a new, empty Rust `Vec<GLint>`",
							"fn_body": "Vec::<i32>::new().into()"
						},
						"with_capacity": {
							"doc": "Creates a new, empty Rust `Vec<GLint>` with a given, pre-allocated capacity",
							"fn_args": [
							    {"cap": "usize"}
							],
							"fn_body": "Vec::<i32>::with_capacity(cap).into()"
						},
					    "copy_from": {
					        "doc": "Creates + allocates a Rust `Vec<GLint>` by **copying** it from a bytes source",
					        "fn_args": [
					            {"ptr": "*const i32"},
					            {"len": "usize"}
					        ],
					        "fn_body": "unsafe { std::slice::from_raw_parts(ptr, len).to_vec() }.into()"
					    }
					},
					"destructor": "unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());"
				},
				"DomVec": {
					"doc": "Wrapper over a Rust-allocated `DomVec`",
					"external": "azul_impl::dom::DomVec",
					"struct_fields": [
						{ "ptr": { "type": "*mut Dom" } },
						{ "len": { "type": "usize" } },
						{ "cap": { "type": "usize" } }
					],
					"constructors": {
						"new": {
							"doc": "Creates a new, empty Rust `Vec<Dom>`",
							"fn_body": "Vec::<AzDom>::new().into()"
						},
						"with_capacity": {
							"doc": "Creates a new, empty Rust `Vec<Dom>` with a given, pre-allocated capacity",
							"fn_args": [
							    {"cap": "usize"}
							],
							"fn_body": "Vec::<AzDom>::with_capacity(cap).into()"
						},
					    "copy_from": {
					        "doc": "Creates + allocates a Rust `Vec<Dom>` by **copying** it from a bytes source",
					        "fn_args": [
					            {"ptr": "*const Dom"},
					            {"len": "usize"}
					        ],
					        "fn_body": "unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into()"
					    }
					},
					"destructor": "unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());"
				},
				"StringVec": {
					"doc": "Wrapper over a Rust-allocated `StringVec`",
					"external": "azul_impl::css::StringVec",
					"struct_fields": [
						{ "ptr": { "type": "*mut String" } },
						{ "len": { "type": "usize" } },
						{ "cap": { "type": "usize" } }
					],
					"constructors": {
						"new": {
							"doc": "Creates a new, empty Rust `Vec<String>`",
							"fn_body": "Vec::<AzString>::new().into()"
						},
						"with_capacity": {
							"doc": "Creates a new, empty Rust `Vec<String>` with a given, pre-allocated capacity",
							"fn_args": [
							    {"cap": "usize"}
							],
							"fn_body": "Vec::<AzString>::with_capacity(cap).into()"
						},
					    "copy_from": {
					        "doc": "Creates + allocates a Rust `Vec<String>` by **copying** it from a bytes source",
					        "fn_args": [
					            {"ptr": "*const String"},
					            {"len": "usize"}
					        ],
					        "fn_body": "unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into()"
					    }
					},
					"destructor": "unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());"
				},
				"StringPairVec": {
					"doc": "Wrapper over a Rust-allocated `StringPairVec`",
					"external": "azul_impl::window::StringPairVec",
					"struct_fields": [
						{ "ptr": { "type": "*mut StringPair" } },
						{ "len": { "type": "usize" } },
						{ "cap": { "type": "usize" } }
					],
					"constructors": {
						"new": {
							"doc": "Creates a new, empty Rust `Vec<StringPair>`",
							"fn_body": "Vec::<AzStringPair>::new().into()"
						},
						"with_capacity": {
							"doc": "Creates a new, empty Rust `Vec<StringPair>` with a given, pre-allocated capacity",
							"fn_args": [
							    {"cap": "usize"}
							],
							"fn_body": "Vec::<AzStringPair>::with_capacity(cap).into()"
						},
					    "copy_from": {
					        "doc": "Creates + allocates a Rust `Vec<StringPair>` by **copying** it from a bytes source",
					        "fn_args": [
					            {"ptr": "*const StringPair"},
					            {"len": "usize"}
					        ],
					        "fn_body": "unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into()"
					    }
					},
					"destructor": "unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());"
				},
				"GradientStopPreVec": {
					"doc": "Wrapper over a Rust-allocated `GradientStopPreVec`",
					"external": "azul_impl::css::GradientStopPreVec",
					"struct_fields": [
						{ "ptr": { "type": "*mut GradientStopPre" } },
						{ "len": { "type": "usize" } },
						{ "cap": { "type": "usize" } }
					],
					"constructors": {
						"new": {
							"doc": "Creates a new, empty Rust `Vec<GradientStopPre>`",
							"fn_body": "Vec::<AzGradientStopPre>::new().into()"
						},
						"with_capacity": {
							"doc": "Creates a new, empty Rust `Vec<GradientStopPre>` with a given, pre-allocated capacity",
							"fn_args": [
							    {"cap": "usize"}
							],
							"fn_body": "Vec::<AzGradientStopPre>::with_capacity(cap).into()"
						},
					    "copy_from": {
					        "doc": "Creates + allocates a Rust `Vec<GradientStopPre>` by **copying** it from a bytes source",
					        "fn_args": [
					            {"ptr": "*const GradientStopPre"},
					            {"len": "usize"}
					        ],
					        "fn_body": "unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into()"
					    }
					},
					"destructor": "unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());"
				},
				"CascadedCssPropertyWithSourceVec": {
					"doc": "Wrapper over a Rust-allocated `CascadedCssPropertyWithSourceVec`",
					"external": "azul_impl::styled_dom::CascadedCssPropertyWithSourceVec",
					"struct_fields": [
						{ "ptr": { "type": "*mut CascadedCssPropertyWithSource" } },
						{ "len": { "type": "usize" } },
						{ "cap": { "type": "usize" } }
					],
					"constructors": {
						"new": {
							"doc": "Creates a new, empty Rust `Vec<CascadedCssPropertyWithSource>`",
							"fn_body": "Vec::<AzCascadedCssPropertyWithSource>::new().into()"
						},
						"with_capacity": {
							"doc": "Creates a new, empty Rust `Vec<CascadedCssPropertyWithSource>` with a given, pre-allocated capacity",
							"fn_args": [
							    {"cap": "usize"}
							],
							"fn_body": "Vec::<AzCascadedCssPropertyWithSource>::with_capacity(cap).into()"
						},
					    "copy_from": {
					        "doc": "Creates + allocates a Rust `Vec<CascadedCssPropertyWithSource>` by **copying** it from a bytes source",
					        "fn_args": [
					            {"ptr": "*const CascadedCssPropertyWithSource"},
					            {"len": "usize"}
					        ],
					        "fn_body": "unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into()"
					    }
					},
					"destructor": "unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());"
				},
				"NodeIdVec": {
					"doc": "Wrapper over a Rust-allocated `NodeIdVec`",
					"external": "azul_impl::styled_dom::NodeIdVec",
					"struct_fields": [
						{ "ptr": { "type": "*mut NodeId" } },
						{ "len": { "type": "usize" } },
						{ "cap": { "type": "usize" } }
					],
					"constructors": {
						"new": {
							"doc": "Creates a new, empty Rust `Vec<NodeId>`",
							"fn_body": "Vec::<AzNodeId>::new().into()"
						},
						"with_capacity": {
							"doc": "Creates a new, empty Rust `Vec<NodeId>` with a given, pre-allocated capacity",
							"fn_args": [
							    {"cap": "usize"}
							],
							"fn_body": "Vec::<AzNodeId>::with_capacity(cap).into()"
						},
					    "copy_from": {
					        "doc": "Creates + allocates a Rust `Vec<NodeId>` by **copying** it from a bytes source",
					        "fn_args": [
					            {"ptr": "*const NodeId"},
					            {"len": "usize"}
					        ],
					        "fn_body": "unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into()"
					    }
					},
					"destructor": "unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());"
				},
				"NodeVec": {
					"doc": "Wrapper over a Rust-allocated `NodeVec`",
					"external": "azul_impl::styled_dom::AzNodeVec",
					"struct_fields": [
						{ "ptr": { "type": "*mut Node" } },
						{ "len": { "type": "usize" } },
						{ "cap": { "type": "usize" } }
					],
					"constructors": {
						"new": {
							"doc": "Creates a new, empty Rust `Vec<Node>`",
							"fn_body": "Vec::<AzNode>::new().into()"
						},
						"with_capacity": {
							"doc": "Creates a new, empty Rust `Vec<Node>` with a given, pre-allocated capacity",
							"fn_args": [
							    {"cap": "usize"}
							],
							"fn_body": "Vec::<AzNode>::with_capacity(cap).into()"
						},
					    "copy_from": {
					        "doc": "Creates + allocates a Rust `Vec<Node>` by **copying** it from a bytes source",
					        "fn_args": [
					            {"ptr": "*const Node"},
					            {"len": "usize"}
					        ],
					        "fn_body": "unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into()"
					    }
					},
					"destructor": "unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());"
				},
				"StyledNodeVec": {
					"doc": "Wrapper over a Rust-allocated `StyledNodeVec`",
					"external": "azul_impl::styled_dom::StyledNodeVec",
					"struct_fields": [
						{ "ptr": { "type": "*mut StyledNode" } },
						{ "len": { "type": "usize" } },
						{ "cap": { "type": "usize" } }
					],
					"constructors": {
						"new": {
							"doc": "Creates a new, empty Rust `Vec<StyledNode>`",
							"fn_body": "Vec::<AzStyledNode>::new().into()"
						},
						"with_capacity": {
							"doc": "Creates a new, empty Rust `Vec<StyledNode>` with a given, pre-allocated capacity",
							"fn_args": [
							    {"cap": "usize"}
							],
							"fn_body": "Vec::<AzStyledNode>::with_capacity(cap).into()"
						},
					    "copy_from": {
					        "doc": "Creates + allocates a Rust `Vec<StyledNode>` by **copying** it from a bytes source",
					        "fn_args": [
					            {"ptr": "*const StyledNode"},
					            {"len": "usize"}
					        ],
					        "fn_body": "unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into()"
					    }
					},
					"destructor": "unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());"
				},
				"TagIdsToNodeIdsMappingVec": {
					"doc": "Wrapper over a Rust-allocated `TagIdsToNodeIdsMappingVec`",
					"external": "azul_impl::styled_dom::TagIdsToNodeIdsMappingVec",
					"struct_fields": [
						{ "ptr": { "type": "*mut TagIdToNodeIdMapping" } },
						{ "len": { "type": "usize" } },
						{ "cap": { "type": "usize" } }
					],
					"constructors": {
						"new": {
							"doc": "Creates a new, empty Rust `Vec<TagIdToNodeIdMapping>`",
							"fn_body": "Vec::<AzTagIdToNodeIdMapping>::new().into()"
						},
						"with_capacity": {
							"doc": "Creates a new, empty Rust `Vec<TagIdToNodeIdMapping>` with a given, pre-allocated capacity",
							"fn_args": [
							    {"cap": "usize"}
							],
							"fn_body": "Vec::<AzTagIdToNodeIdMapping>::with_capacity(cap).into()"
						},
					    "copy_from": {
					        "doc": "Creates + allocates a Rust `Vec<TagIdToNodeIdMapping>` by **copying** it from a bytes source",
					        "fn_args": [
					            {"ptr": "*const TagIdToNodeIdMapping"},
					            {"len": "usize"}
					        ],
					        "fn_body": "unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into()"
					    }
					},
					"destructor": "unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());"
				},
				"ParentWithNodeDepthVec": {
					"doc": "Wrapper over a Rust-allocated `ParentWithNodeDepthVec`",
					"external": "azul_impl::styled_dom::ParentWithNodeDepthVec",
					"struct_fields": [
						{ "ptr": { "type": "*mut ParentWithNodeDepth" } },
						{ "len": { "type": "usize" } },
						{ "cap": { "type": "usize" } }
					],
					"constructors": {
						"new": {
							"doc": "Creates a new, empty Rust `Vec<ParentWithNodeDepth>`",
							"fn_body": "Vec::<AzParentWithNodeDepth>::new().into()"
						},
						"with_capacity": {
							"doc": "Creates a new, empty Rust `Vec<ParentWithNodeDepth>` with a given, pre-allocated capacity",
							"fn_args": [
							    {"cap": "usize"}
							],
							"fn_body": "Vec::<AzParentWithNodeDepth>::with_capacity(cap).into()"
						},
					    "copy_from": {
					        "doc": "Creates + allocates a Rust `Vec<ParentWithNodeDepth>` by **copying** it from a bytes source",
					        "fn_args": [
					            {"ptr": "*const ParentWithNodeDepth"},
					            {"len": "usize"}
					        ],
					        "fn_body": "unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into()"
					    }
					},
					"destructor": "unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());"
				},
				"NodeDataVec": {
					"doc": "Wrapper over a Rust-allocated `NodeDataVec`",
					"external": "azul_impl::styled_dom::NodeDataVec",
					"struct_fields": [
						{ "ptr": { "type": "*mut NodeData" } },
						{ "len": { "type": "usize" } },
						{ "cap": { "type": "usize" } }
					],
					"constructors": {
						"new": {
							"doc": "Creates a new, empty Rust `Vec<NodeData>`",
							"fn_body": "Vec::<NodeData>::new().into()"
						},
						"with_capacity": {
							"doc": "Creates a new, empty Rust `Vec<NodeData>` with a given, pre-allocated capacity",
							"fn_args": [
							    {"cap": "usize"}
							],
							"fn_body": "Vec::<NodeData>::with_capacity(cap).into()"
						},
					    "copy_from": {
					        "doc": "Creates + allocates a Rust `Vec<NodeData>` by **copying** it from a bytes source",
					        "fn_args": [
					            {"ptr": "*const NodeData"},
					            {"len": "usize"}
					        ],
					        "fn_body": "unsafe { std::slice::from_raw_parts(ptr, len).iter().cloned().collect::<Vec<_>>() }.into()"
					    }
					},
					"destructor": "unsafe { std::ptr::drop_in_place(object.as_mut()); } deallocate_vec(object.as_mut_ptr(), object.capacity());"
				}
			}
		},
		"option": {
			"doc": "Definition of azuls internal `Option<*>` wrappers",
			"classes": {
				"OptionThreadSendMsg": {
					"external": "azul_impl::task::OptionThreadSendMsg",
					"derive": ["Copy"],
					"enum_fields": [
						{"None": {}},
						{"Some": { "type": "ThreadSendMsg" }}
					]
				},
				"OptionLayoutRect": {
					"external": "azul_impl::css::OptionLayoutRect",
					"derive": ["Copy"],
					"enum_fields": [
						{"None": {}},
						{"Some": { "type": "LayoutRect" }}
					]
				},
				"OptionRefAny": {
					"external": "azul_impl::callbacks::OptionRefAny",
					"enum_fields": [
						{"None": {}},
						{"Some": { "type": "RefAny" }}
					]
				},
				"OptionStyleOpacityValue": {
					"external": "azul_impl::css::OptionStyleOpacityValue",
					"derive": ["Copy"],
					"enum_fields": [
						{"None": {}},
						{"Some": { "type": "StyleOpacityValue" }}
					]
				},
				"OptionStyleTransformVecValue": {
					"external": "azul_impl::css::OptionStyleTransformVecValue",
					"enum_fields": [
						{"None": {}},
						{"Some": { "type": "StyleTransformVecValue" }}
					]
				},
				"OptionStyleTransformOriginValue": {
					"external": "azul_impl::css::OptionStyleTransformOriginValue",
					"derive": ["Copy"],
					"enum_fields": [
						{"None": {}},
						{"Some": { "type": "StyleTransformOriginValue" }}
					]
				},
				"OptionStylePerspectiveOriginValue": {
					"external": "azul_impl::css::OptionStylePerspectiveOriginValue",
					"derive": ["Copy"],
					"enum_fields": [
						{"None": {}},
						{"Some": { "type": "StylePerspectiveOriginValue" }}
					]
				},
				"OptionStyleBackfaceVisibilityValue": {
					"external": "azul_impl::css::OptionStyleBackfaceVisibilityValue",
					"derive": ["Copy"],
					"enum_fields": [
						{"None": {}},
						{"Some": { "type": "StyleBackfaceVisibilityValue" }}
					]
				},
				"OptionLayoutPoint": {
					"external": "azul_impl::css::OptionLayoutPoint",
					"derive": ["Copy"],
					"enum_fields": [
						{"None": {}},
						{"Some": { "type": "LayoutPoint" }}
					]
				},
				"OptionWindowTheme": {
					"external": "azul_impl::window::OptionWindowTheme",
					"derive": ["Copy"],
					"enum_fields": [
						{"None": {}},
						{"Some": { "type": "WindowTheme" }}
					]
				},
				"OptionNodeId": {
					"external": "azul_impl::styled_dom::OptionNodeId",
					"derive": ["Copy"],
					"enum_fields": [
						{"None": {}},
						{"Some": { "type": "NodeId" }}
					]
				},
				"OptionDomNodeId": {
					"external": "azul_impl::callbacks::OptionDomNodeId",
					"derive": ["Copy"],
					"enum_fields": [
						{"None": {}},
						{"Some": { "type": "DomNodeId" }}
					]
				},
				"OptionColorU": {
					"external": "azul_impl::css::OptionColorU",
					"derive": ["Copy"],
					"enum_fields": [
						{"None": {}},
						{"Some": { "type": "ColorU" }}
					]
				},
				"OptionRawImage": {
					"external": "azul_impl::resources::OptionRawImage",
					"enum_fields": [
						{"None": {}},
						{"Some": { "type": "RawImage" }}
					]
				},
				"OptionSvgDashPattern": {
					"external": "azul_impl::svg::OptionSvgDashPattern",
					"derive": ["Copy"],
					"enum_fields": [
						{"None": {}},
						{"Some": { "type": "SvgDashPattern" }}
					]
				},
				"OptionWaylandTheme": {
					"external": "azul_impl::window::OptionWaylandTheme",
					"enum_fields": [
						{"None": {}},
						{"Some": { "type": "WaylandTheme" }}
					]
				},
				"OptionTaskBarIcon": {
					"external": "azul_impl::window::OptionTaskBarIcon",
					"enum_fields": [
						{"None": {}},
						{"Some": { "type": "TaskBarIcon" }}
					]
				},
				"OptionHwndHandle": {
					"external": "azul_impl::window::OptionHwndHandle",
					"derive": ["Copy"],
					"enum_fields": [
						{"None": {}},
						{"Some": { "type": "*mut c_void" }}
					]
				},
				"OptionLogicalPosition": {
					"external": "azul_impl::window::OptionLogicalPosition",
					"derive": ["Copy"],
					"enum_fields": [
						{"None": {}},
						{"Some": { "type": "LogicalPosition" }}
					]
				},
				"OptionPhysicalPositionI32": {
					"external": "azul_impl::window::OptionPhysicalPositionI32",
					"derive": ["Copy"],
					"enum_fields": [
						{"None": {}},
						{"Some": { "type": "PhysicalPositionI32" }}
					]
				},
				"OptionWindowIcon": {
					"external": "azul_impl::window::OptionWindowIcon",
					"enum_fields": [
						{"None": {}},
						{"Some": { "type": "WindowIcon" }}
					]
				},
				"OptionString": {
					"external": "azul_impl::window::OptionAzString",
					"enum_fields": [
						{"None": {}},
						{"Some": { "type": "String" }}
					]
				},
				"OptionX11Visual": {
					"external": "azul_impl::window::OptionX11Visual",
					"derive": ["Copy"],
					"enum_fields": [
						{"None": {}},
						{"Some": { "type": "*const c_void" }}
					]
				},
				"OptionI32": {
					"external": "azul_impl::window::OptionI32",
					"derive": ["Copy"],
					"enum_fields": [
						{"None": {}},
						{"Some": { "type": "i32" }}
					]
				},
				"OptionF32": {
					"external": "azul_impl::window::OptionF32",
					"derive": ["Copy"],
					"enum_fields": [
						{"None": {}},
						{"Some": { "type": "f32" }}
					]
				},
				"OptionMouseCursorType": {
					"external": "azul_impl::window::OptionMouseCursorType",
					"derive": ["Copy"],
					"enum_fields": [
						{"None": {}},
						{"Some": { "type": "MouseCursorType" }}
					]
				},
				"OptionLogicalSize": {
					"external": "azul_impl::window::OptionLogicalSize",
					"derive": ["Copy"],
					"enum_fields": [
						{"None": {}},
						{"Some": { "type": "LogicalSize" }}
					]
				},
				"OptionChar": {
					"external": "azul_impl::window::OptionChar",
					"doc": "Option<char> but the char is a u32, for C FFI stability reasons",
					"derive": ["Copy"],
					"enum_fields": [
						{"None": {}},
						{"Some": { "type": "u32" }}
					]
				},
				"OptionVirtualKeyCode": {
					"external": "azul_impl::window::OptionVirtualKeyCode",
					"derive": ["Copy"],
					"enum_fields": [
						{"None": {}},
						{"Some": { "type": "VirtualKeyCode" }}
					]
				},
				"OptionPercentageValue": {
					"external": "azul_impl::css::OptionPercentageValue",
					"derive": ["Copy"],
					"enum_fields": [
						{"None": {}},
						{"Some": { "type": "PercentageValue" }}
					]
				},
				"OptionDom": {
					"external": "azul_impl::dom::OptionDom",
					"enum_fields": [
						{"None": {}},
						{"Some": { "type": "Dom" }}
					]
				},
				"OptionTexture": {
					"external": "azul_impl::gl::OptionTexture",
					"clone": false,
					"enum_fields": [
						{"None": {}},
						{"Some": { "type": "Texture" }}
					]
				},
				"OptionImageMask": {
					"external": "azul_impl::dom::OptionImageMask",
					"enum_fields": [
						{"None": {}},
						{"Some": { "type": "ImageMask" }}
					]
				},
				"OptionTabIndex": {
					"external": "azul_impl::dom::OptionTabIndex",
					"derive": ["Copy"],
					"enum_fields": [
						{"None": {}},
						{"Some": { "type": "TabIndex" }}
					]
				},
				"OptionStyleBackgroundContentValue": {
				    "external": "azul_impl::css::OptionStyleBackgroundContentValue",
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "StyleBackgroundContentValue"}}
				    ]
				},
				"OptionStyleBackgroundPositionValue": {
				    "external": "azul_impl::css::OptionStyleBackgroundPositionValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "StyleBackgroundPositionValue"}}
				    ]
				},
				"OptionStyleBackgroundSizeValue": {
				    "external": "azul_impl::css::OptionStyleBackgroundSizeValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "StyleBackgroundSizeValue"}}
				    ]
				},
				"OptionStyleBackgroundRepeatValue": {
				    "external": "azul_impl::css::OptionStyleBackgroundRepeatValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "StyleBackgroundRepeatValue"}}
				    ]
				},
				"OptionStyleFontSizeValue": {
				    "external": "azul_impl::css::OptionStyleFontSizeValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "StyleFontSizeValue"}}
				    ]
				},
				"OptionStyleFontFamilyValue": {
				    "external": "azul_impl::css::OptionStyleFontFamilyValue",
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "StyleFontFamilyValue"}}
				    ]
				},
				"OptionStyleTextColorValue": {
				    "external": "azul_impl::css::OptionStyleTextColorValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "StyleTextColorValue"}}
				    ]
				},
				"OptionStyleTextAlignmentHorzValue": {
				    "external": "azul_impl::css::OptionStyleTextAlignmentHorzValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "StyleTextAlignmentHorzValue"}}
				    ]
				},
				"OptionStyleLineHeightValue": {
				    "external": "azul_impl::css::OptionStyleLineHeightValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "StyleLineHeightValue"}}
				    ]
				},
				"OptionStyleLetterSpacingValue": {
				    "external": "azul_impl::css::OptionStyleLetterSpacingValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "StyleLetterSpacingValue"}}
				    ]
				},
				"OptionStyleWordSpacingValue": {
				    "external": "azul_impl::css::OptionStyleWordSpacingValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "StyleWordSpacingValue"}}
				    ]
				},
				"OptionStyleTabWidthValue": {
				    "external": "azul_impl::css::OptionStyleTabWidthValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "StyleTabWidthValue"}}
				    ]
				},
				"OptionStyleCursorValue": {
				    "external": "azul_impl::css::OptionStyleCursorValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "StyleCursorValue"}}
				    ]
				},
				"OptionBoxShadowPreDisplayItemValue": {
				    "external": "azul_impl::css::OptionBoxShadowPreDisplayItemValue",
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "BoxShadowPreDisplayItemValue"}}
				    ]
				},
				"OptionStyleBorderTopColorValue": {
				    "external": "azul_impl::css::OptionStyleBorderTopColorValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "StyleBorderTopColorValue"}}
				    ]
				},
				"OptionStyleBorderLeftColorValue": {
				    "external": "azul_impl::css::OptionStyleBorderLeftColorValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "StyleBorderLeftColorValue"}}
				    ]
				},
				"OptionStyleBorderRightColorValue": {
				    "external": "azul_impl::css::OptionStyleBorderRightColorValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "StyleBorderRightColorValue"}}
				    ]
				},
				"OptionStyleBorderBottomColorValue": {
				    "external": "azul_impl::css::OptionStyleBorderBottomColorValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "StyleBorderBottomColorValue"}}
				    ]
				},
				"OptionStyleBorderTopStyleValue": {
				    "external": "azul_impl::css::OptionStyleBorderTopStyleValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "StyleBorderTopStyleValue"}}
				    ]
				},
				"OptionStyleBorderLeftStyleValue": {
				    "external": "azul_impl::css::OptionStyleBorderLeftStyleValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "StyleBorderLeftStyleValue"}}
				    ]
				},
				"OptionStyleBorderRightStyleValue": {
				    "external": "azul_impl::css::OptionStyleBorderRightStyleValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "StyleBorderRightStyleValue"}}
				    ]
				},
				"OptionStyleBorderBottomStyleValue": {
				    "external": "azul_impl::css::OptionStyleBorderBottomStyleValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "StyleBorderBottomStyleValue"}}
				    ]
				},
				"OptionStyleBorderTopLeftRadiusValue": {
				    "external": "azul_impl::css::OptionStyleBorderTopLeftRadiusValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "StyleBorderTopLeftRadiusValue"}}
				    ]
				},
				"OptionStyleBorderTopRightRadiusValue": {
				    "external": "azul_impl::css::OptionStyleBorderTopRightRadiusValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "StyleBorderTopRightRadiusValue"}}
				    ]
				},
				"OptionStyleBorderBottomLeftRadiusValue": {
				    "external": "azul_impl::css::OptionStyleBorderBottomLeftRadiusValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "StyleBorderBottomLeftRadiusValue"}}
				    ]
				},
				"OptionStyleBorderBottomRightRadiusValue": {
				    "external": "azul_impl::css::OptionStyleBorderBottomRightRadiusValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "StyleBorderBottomRightRadiusValue"}}
				    ]
				},
				"OptionLayoutDisplayValue": {
				    "external": "azul_impl::css::OptionLayoutDisplayValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "LayoutDisplayValue"}}
				    ]
				},
				"OptionLayoutFloatValue": {
				    "external": "azul_impl::css::OptionLayoutFloatValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "LayoutFloatValue"}}
				    ]
				},
				"OptionLayoutBoxSizingValue": {
				    "external": "azul_impl::css::OptionLayoutBoxSizingValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "LayoutBoxSizingValue"}}
				    ]
				},
				"OptionLayoutWidthValue": {
				    "external": "azul_impl::css::OptionLayoutWidthValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "LayoutWidthValue"}}
				    ]
				},
				"OptionLayoutHeightValue": {
				    "external": "azul_impl::css::OptionLayoutHeightValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "LayoutHeightValue"}}
				    ]
				},
				"OptionLayoutMinWidthValue": {
				    "external": "azul_impl::css::OptionLayoutMinWidthValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "LayoutMinWidthValue"}}
				    ]
				},
				"OptionLayoutMinHeightValue": {
				    "external": "azul_impl::css::OptionLayoutMinHeightValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "LayoutMinHeightValue"}}
				    ]
				},
				"OptionLayoutMaxWidthValue": {
				    "external": "azul_impl::css::OptionLayoutMaxWidthValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "LayoutMaxWidthValue"}}
				    ]
				},
				"OptionLayoutMaxHeightValue": {
				    "external": "azul_impl::css::OptionLayoutMaxHeightValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "LayoutMaxHeightValue"}}
				    ]
				},
				"OptionLayoutPositionValue": {
				    "external": "azul_impl::css::OptionLayoutPositionValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "LayoutPositionValue"}}
				    ]
				},
				"OptionLayoutTopValue": {
				    "external": "azul_impl::css::OptionLayoutTopValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "LayoutTopValue"}}
				    ]
				},
				"OptionLayoutBottomValue": {
				    "external": "azul_impl::css::OptionLayoutBottomValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "LayoutBottomValue"}}
				    ]
				},
				"OptionLayoutRightValue": {
				    "external": "azul_impl::css::OptionLayoutRightValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "LayoutRightValue"}}
				    ]
				},
				"OptionLayoutLeftValue": {
				    "external": "azul_impl::css::OptionLayoutLeftValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "LayoutLeftValue"}}
				    ]
				},
				"OptionLayoutPaddingTopValue": {
				    "external": "azul_impl::css::OptionLayoutPaddingTopValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "LayoutPaddingTopValue"}}
				    ]
				},
				"OptionLayoutPaddingBottomValue": {
				    "external": "azul_impl::css::OptionLayoutPaddingBottomValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "LayoutPaddingBottomValue"}}
				    ]
				},
				"OptionLayoutPaddingLeftValue": {
				    "external": "azul_impl::css::OptionLayoutPaddingLeftValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "LayoutPaddingLeftValue"}}
				    ]
				},
				"OptionLayoutPaddingRightValue": {
				    "external": "azul_impl::css::OptionLayoutPaddingRightValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "LayoutPaddingRightValue"}}
				    ]
				},
				"OptionLayoutMarginTopValue": {
				    "external": "azul_impl::css::OptionLayoutMarginTopValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "LayoutMarginTopValue"}}
				    ]
				},
				"OptionLayoutMarginBottomValue": {
				    "external": "azul_impl::css::OptionLayoutMarginBottomValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "LayoutMarginBottomValue"}}
				    ]
				},
				"OptionLayoutMarginLeftValue": {
				    "external": "azul_impl::css::OptionLayoutMarginLeftValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "LayoutMarginLeftValue"}}
				    ]
				},
				"OptionLayoutMarginRightValue": {
				    "external": "azul_impl::css::OptionLayoutMarginRightValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "LayoutMarginRightValue"}}
				    ]
				},
				"OptionStyleBorderTopWidthValue": {
				    "external": "azul_impl::css::OptionStyleBorderTopWidthValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "StyleBorderTopWidthValue"}}
				    ]
				},
				"OptionStyleBorderLeftWidthValue": {
				    "external": "azul_impl::css::OptionStyleBorderLeftWidthValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "StyleBorderLeftWidthValue"}}
				    ]
				},
				"OptionStyleBorderRightWidthValue": {
				    "external": "azul_impl::css::OptionStyleBorderRightWidthValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "StyleBorderRightWidthValue"}}
				    ]
				},
				"OptionStyleBorderBottomWidthValue": {
				    "external": "azul_impl::css::OptionStyleBorderBottomWidthValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "StyleBorderBottomWidthValue"}}
				    ]
				},
				"OptionOverflowValue": {
				    "external": "azul_impl::css::OptionOverflowValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "OverflowValue"}}
				    ]
				},
				"OptionLayoutDirectionValue": {
				    "external": "azul_impl::css::OptionLayoutDirectionValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "LayoutDirectionValue"}}
				    ]
				},
				"OptionLayoutWrapValue": {
				    "external": "azul_impl::css::OptionLayoutWrapValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "LayoutWrapValue"}}
				    ]
				},
				"OptionLayoutFlexGrowValue": {
				    "external": "azul_impl::css::OptionLayoutFlexGrowValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "LayoutFlexGrowValue"}}
				    ]
				},
				"OptionLayoutFlexShrinkValue": {
				    "external": "azul_impl::css::OptionLayoutFlexShrinkValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "LayoutFlexShrinkValue"}}
				    ]
				},
				"OptionLayoutJustifyContentValue": {
				    "external": "azul_impl::css::OptionLayoutJustifyContentValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "LayoutJustifyContentValue"}}
				    ]
				},
				"OptionLayoutAlignItemsValue": {
				    "external": "azul_impl::css::OptionLayoutAlignItemsValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "LayoutAlignItemsValue"}}
				    ]
				},
				"OptionLayoutAlignContentValue": {
				    "external": "azul_impl::css::OptionLayoutAlignContentValue",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "LayoutAlignContentValue"}}
				    ]
				},
				"OptionTagId": {
				    "external": "azul_impl::styled_dom::OptionTagId",
				    "derive": ["Copy"],
				    "enum_fields": [
				        {"None": {}},
				        {"Some": {"type": "TagId"}}
				    ]
				},
				"OptionDuration": {
					"external": "azul_impl::task::OptionDuration",
					"derive": ["Copy"],
					"enum_fields": [
						{"None": {}},
						{"Some": { "type": "Duration" }}
					]
				},
				"OptionInstantPtr": {
					"external": "azul_impl::task::OptionInstantPtr",
					"enum_fields": [
						{"None": {}},
						{"Some": { "type": "Instant" }}
					]
				},
				"OptionUsize": {
					"external": "azul_impl::gl::OptionUsize",
					"derive": ["Copy"],
					"enum_fields": [
						{"None": {}},
						{"Some": { "type": "usize" }}
					]
				},
				"OptionU8VecRef": {
					"external": "azul_impl::gl::OptionU8VecRef",
					"clone": false,
					"enum_fields": [
						{"None": {}},
						{"Some": { "type": "U8VecRef" }}
					]
				}
			}
		},
		"result": {
			"doc": "Definition of azuls internal `Result<*>` wrappers",
			"classes": {
				"ResultSvgSvgParseError": {
					"external": "azul_impl::svg::ResultSvgSvgParseError",
					"enum_fields": [
						{"Ok": {"type": "Svg"}},
						{"Err": { "type": "SvgParseError" }}
					]
				}
			}
		},
		"error": {
			"doc": "Definition of error types",
			"classes": {
				"SvgParseError": {
					"external": "azul_impl::svg::SvgParseError",
					"enum_fields": [
						{"InvalidFileSuffix": {}},
						{"FileOpenFailed": {}},
						{"NotAnUtf8Str": {}},
						{"MalformedGZip": {}},
						{"InvalidSize": {}},
						{"ParsingFailed": {"type": "XmlError"}}
					]
				},
				"XmlError": {
					"external": "azul_impl::xml::XmlError",
					"enum_fields": [
						{"InvalidXmlPrefixUri": {"type": "SvgParseErrorPosition"}},
						{"UnexpectedXmlUri": {"type": "SvgParseErrorPosition"}},
						{"UnexpectedXmlnsUri": {"type": "SvgParseErrorPosition"}},
						{"InvalidElementNamePrefix": {"type": "SvgParseErrorPosition"}},
						{"DuplicatedNamespace": {"type": "DuplicatedNamespaceError"}},
						{"UnknownNamespace": {"type": "UnknownNamespaceError"}},
						{"UnexpectedCloseTag": {"type": "UnexpectedCloseTagError"}},
						{"UnexpectedEntityCloseTag": {"type": "SvgParseErrorPosition"}},
						{"UnknownEntityReference": {"type": "UnknownEntityReferenceError"}},
						{"MalformedEntityReference": {"type": "SvgParseErrorPosition"}},
						{"EntityReferenceLoop": {"type": "SvgParseErrorPosition"}},
						{"InvalidAttributeValue": {"type": "SvgParseErrorPosition"}},
						{"DuplicatedAttribute": {"type": "DuplicatedAttributeError"}},
						{"NoRootNode": {}},
						{"SizeLimit": {}},
						{"ParserError": {"type": "XmlParseError"}}
					]
				},
				"DuplicatedNamespaceError": {
					"external": "azul_impl::xml::DuplicatedNamespaceError",
					"struct_fields": [
						{"ns": {"type": "String"}},
						{"pos": {"type": "SvgParseErrorPosition"}}
					]
				},
				"UnknownNamespaceError": {
					"external": "azul_impl::xml::UnknownNamespaceError",
					"struct_fields": [
						{"ns": {"type": "String"}},
						{"pos": {"type": "SvgParseErrorPosition"}}
					]
				},
				"UnexpectedCloseTagError": {
					"external": "azul_impl::xml::UnexpectedCloseTagError",
					"struct_fields": [
						{"expected": {"type": "String"}},
						{"actual": {"type": "String"}},
						{"pos": {"type": "SvgParseErrorPosition"}}
					]
				},
				"UnknownEntityReferenceError": {
					"external": "azul_impl::xml::UnknownEntityReferenceError",
					"struct_fields": [
						{"entity": {"type": "String"}},
						{"pos": {"type": "SvgParseErrorPosition"}}
					]
				},
				"DuplicatedAttributeError": {
					"external": "azul_impl::xml::DuplicatedAttributeError",
					"struct_fields": [
						{"attribute": {"type": "String"}},
						{"pos": {"type": "SvgParseErrorPosition"}}
					]
				},
				"XmlParseError": {
					"external": "azul_impl::xml::XmlParseError",
					"enum_fields": [
						{"InvalidDeclaration": {"type": "XmlTextError"}},
						{"InvalidComment": {"type": "XmlTextError"}},
						{"InvalidPI": {"type": "XmlTextError"}},
						{"InvalidDoctype": {"type": "XmlTextError"}},
						{"InvalidEntity": {"type": "XmlTextError"}},
						{"InvalidElement": {"type": "XmlTextError"}},
						{"InvalidAttribute": {"type": "XmlTextError"}},
						{"InvalidCdata": {"type": "XmlTextError"}},
						{"InvalidCharData": {"type": "XmlTextError"}},
						{"UnknownToken": {"type": "SvgParseErrorPosition"}}
					]
				},
				"XmlTextError": {
					"external": "azul_impl::xml::XmlTextError",
					"struct_fields": [
						{"stream_error": {"type": "XmlStreamError"}},
						{"pos": {"type": "SvgParseErrorPosition"}}
					]
				},
				"XmlStreamError": {
					"external": "azul_impl::xml::XmlStreamError",
					"enum_fields": [
						{"UnexpectedEndOfStream": {}},
						{"InvalidName": {}},
						{"NonXmlChar": {"type": "NonXmlCharError"}},
						{"InvalidChar": {"type": "InvalidCharError"}},
						{"InvalidCharMultiple": {"type": "InvalidCharMultipleError"}},
						{"InvalidQuote": {"type": "InvalidQuoteError"}},
						{"InvalidSpace": {"type": "InvalidSpaceError"}},
						{"InvalidString": {"type": "InvalidStringError"}},
						{"InvalidReference": {}},
						{"InvalidExternalID": {}},
						{"InvalidCommentData": {}},
						{"InvalidCommentEnd": {}},
						{"InvalidCharacterData": {}}
					]
				},
				"NonXmlCharError": {
					"external": "azul_impl::xml::NonXmlCharError",
					"derive": ["Copy"],
					"struct_fields": [
						{"ch": {"type": "char"}},
						{"pos": {"type": "SvgParseErrorPosition"}}
					]
				},
				"InvalidCharError": {
					"external": "azul_impl::xml::InvalidCharError",
					"derive": ["Copy"],
					"struct_fields": [
						{"expected": {"type": "u8"}},
						{"got": {"type": "u8"}},
						{"pos": {"type": "SvgParseErrorPosition"}}
					]
				},
				"InvalidCharMultipleError": {
					"external": "azul_impl::xml::InvalidCharMultipleError",
					"struct_fields": [
						{"expected": {"type": "u8"}},
						{"got": {"type": "U8Vec"}},
						{"pos": {"type": "SvgParseErrorPosition"}}
					]
				},
				"InvalidQuoteError": {
					"external": "azul_impl::xml::InvalidQuoteError",
					"derive": ["Copy"],
					"struct_fields": [
						{"got": {"type": "u8"}},
						{"pos": {"type": "SvgParseErrorPosition"}}
					]
				},
				"InvalidSpaceError": {
					"external": "azul_impl::xml::InvalidSpaceError",
					"derive": ["Copy"],
					"struct_fields": [
						{"got": {"type": "u8"}},
						{"pos": {"type": "SvgParseErrorPosition"}}
					]
				},
				"InvalidStringError": {
					"external": "azul_impl::xml::InvalidStringError",
					"struct_fields": [
						{"got": {"type": "String"}},
						{"pos": {"type": "SvgParseErrorPosition"}}
					]
				},
				"SvgParseErrorPosition": {
					"external": "azul_impl::xml::XmlTextPos",
					"derive": ["Copy"],
					"struct_fields": [
						{"row": {"type": "u32"}},
						{"col": {"type": "u32"}}
					]
				}
			}
		},
		"time": {
			"doc": "Rust wrappers for `Instant` / `Duration` classes",
			"classes": {
				"Instant": {
					"external": "azul_impl::task::AzInstantPtr",
					"rust_class_name": "std::time::Instant",
					"is_boxed_object": true,
					"constructors": {
						"now": {
							"fn_body": "std::time::Instant::now()"
						}
					}
				},
				"Duration": {
					"external": "azul_impl::task::AzDuration",
					"derive": ["Copy"],
					"struct_fields": [
						{"secs": {"type": "u64"}},
						{"nanos": {"type": "u32"}}
					]
				}
			}
		},
		"app": {
			"doc": "`App` construction and configuration",
			"classes": {
				"AppConfig": {
					"constructors": {
						"default": {
							"doc": "Creates a new AppConfig with default values",
							"fn_body": "AppConfig::default()"
						}
					}
				},
				"App": {
					"constructors":{
						"new": {
						"doc":"Creates a new App instance from the given `AppConfig`",
						"fn_args": [
							{"data": "RefAny"},
							{"config": "AppConfig"}
						],
						"fn_body": "App::new(data, *az_app_config_ptr_downcast(config)).unwrap()"
						}
					},
					"functions": {
						"run": {
						"doc": "Runs the application. Due to platform restrictions (specifically `WinMain` on Windows), this function never returns.",
						"fn_args": [
							{"self": "value"},
							{"window": "WindowCreateOptions"}
						],
						"fn_body":"az_app_ptr_downcast(app).run(window)"
						}
					}
				}
			}
		},
		"callbacks": {
			"doc": "Callback type definitions + struct definitions of `CallbackInfo`s",
			"classes": {
				"NodeId": {
					"external": "azul_impl::styled_dom::AzNodeId",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": {"type": "usize"}}
					]
				},
				"DomId": {
					"external": "azul_impl::styled_dom::DomId",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": {"type": "usize"}}
					]
				},
				"DomNodeId": {
					"external": "azul_impl::callbacks::DomNodeId",
					"derive": ["Copy"],
					"struct_fields": [
						{"dom": {"type": "DomId"}},
						{"node": {"type": "NodeId"}}
					]
				},
				"HidpiAdjustedBounds": {
					"external": "azul_impl::callbacks::HidpiAdjustedBounds",
					"derive": ["Copy"],
					"struct_fields": [
						{"logical_size": {"type": "LogicalSize"}},
						{"hidpi_factor": {"type": "f32"}}
					],
					"functions": {
						"get_logical_size": {
							"doc": "Returns the size of the bounds in logical units",
							"fn_args": [
								{"self": "ref"}
							],
							"returns": "LogicalSize",
							"fn_body": "hidpiadjustedbounds.get_logical_size()"
						},
						"get_physical_size": {
							"doc": "Returns the size of the bounds in physical units",
							"fn_args": [
								{"self": "ref"}
							],
							"returns": "PhysicalSizeU32",
							"fn_body": "hidpiadjustedbounds.get_physical_size()"
						},
						"get_hidpi_factor": {
							"doc": "Returns the hidpi factor of the bounds",
							"fn_args": [
								{"self": "ref"}
							],
							"returns": "f32",
							"fn_body": "hidpiadjustedbounds.get_hidpi_factor()"
						}
					}
				},
				"LayoutCallback": {
					"external": "azul_impl::callbacks::LayoutCallback",
					"derive": ["Copy"],
					"struct_fields": [
						{"cb": {"type": "LayoutCallbackType"}}
					]
				},
				"LayoutCallbackType": { "use_patches": ["dll", "rust"], "typedef": true },

				"Callback": {
					"external": "azul_impl::callbacks::Callback",
					"derive": ["Copy"],
					"struct_fields": [
						{"cb": {"type": "CallbackType"}}
					]
				},
				"FocusTarget": {
					"external": "azul_impl::callbacks::FocusTarget",
					"doc": "Defines the focus target for the next frame",
					"enum_fields": [
						{"Id": {"type": "DomNodeId"}},
						{"Path": {"type": "FocusTargetPath"}},
						{"PreviousFocusItem": {}},
						{"NextFocusItem": {}},
						{"NoFocus": {}}
					]
				},
				"FocusTargetPath": {
					"external": "azul_impl::callbacks::FocusTargetPath",
					"struct_fields": [
						{"dom": {"type": "DomId"}},
						{"css_path": {"type": "CssPath"}}
					]
				},
				"CallbackType": { "use_patches": ["dll", "rust"], "typedef": true },
				"CallbackInfo": {
					"external": "azul_impl::callbacks::CallbackInfo",
					"clone": false,
					"struct_fields": [
						{"current_window_state": {"type": "*const c_void"}},
						{"modifiable_window_state": {"type": "*mut WindowState"}},
						{"gl_context": {"type": "*const GlContextPtr"}},
						{"resources": {"type": "*mut c_void"}},
						{"timers": {"type": "*mut c_void"}},
						{"threads": {"type": "*mut c_void"}},
						{"new_windows": {"type": "*mut c_void"}},
						{"current_window_handle": {"type": "*const RawWindowHandle"}},
						{"layout_results": {"type": "*const c_void"}},
						{"stop_propagation": {"type": "*mut bool"}},
						{"focus_target": {"type": "*const c_void"}},
						{"current_scroll_states": {"type": "*const c_void"}},
						{"css_properties_changed_in_callbacks": {"type": "*const c_void"}},
						{"nodes_scrolled_in_callback": {"type": "*const c_void"}},
						{"hit_dom_node": {"type": "DomNodeId"}},
						{"cursor_relative_to_item": {"type": "OptionLayoutPoint"}},
						{"cursor_in_viewport": {"type": "OptionLayoutPoint"}}
					],
					"functions": {
						"get_hit_node": {
							"doc": "Returns the `DomNodeId` of the element that the callback was attached to.",
							"fn_args": [
								{"self": "ref"}
							],
							"returns": "DomNodeId",
							"fn_body": "callbackinfo.get_hit_node()"
						},
						"get_cursor_relative_to_viewport": {
							"doc": "Returns the `LayoutPoint` of the cursor in the viewport (relative to the origin of the `Dom`). Set to `None` if the cursor is not in the current window.",
							"fn_args": [
								{"self": "ref"}
							],
							"returns": "OptionLayoutPoint",
							"fn_body": "callbackinfo.get_cursor_relative_to_viewport()"
						},
						"get_cursor_relative_to_node": {
							"doc": "Returns the `LayoutPoint` of the cursor in the viewport (relative to the origin of the `Dom`). Set to `None` if the cursor is not hovering over the current node.",
							"fn_args": [
								{"self": "ref"}
							],
							"returns": "OptionLayoutPoint",
							"fn_body": "callbackinfo.get_cursor_relative_to_node()"
						},
						"get_parent": {
							"doc": "Returns the parent `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid NodeId.",
							"fn_args": [
								{"self": "ref"},
								{"node_id": "DomNodeId"}
							],
							"returns": "OptionDomNodeId",
							"fn_body": "callbackinfo.get_parent(node_id).into()"
						},
						"get_previous_sibling": {
							"doc": "Returns the previous siblings `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid NodeId.",
							"fn_args": [
								{"self": "ref"},
								{"node_id": "DomNodeId"}
							],
							"returns": "OptionDomNodeId",
							"fn_body": "callbackinfo.get_previous_sibling(node_id).into()"
						},
						"get_next_sibling": {
							"doc": "Returns the next siblings `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid NodeId.",
							"fn_args": [
								{"self": "ref"},
								{"node_id": "DomNodeId"}
							],
							"returns": "OptionDomNodeId",
							"fn_body": "callbackinfo.get_next_sibling(node_id).into()"
						},
						"get_first_child": {
							"doc": "Returns the next siblings `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid NodeId.",
							"fn_args": [
								{"self": "ref"},
								{"node_id": "DomNodeId"}
							],
							"returns": "OptionDomNodeId",
							"fn_body": "callbackinfo.get_first_child(node_id).into()"
						},
						"get_last_child": {
							"doc": "Returns the next siblings `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid NodeId.",
							"fn_args": [
								{"self": "ref"},
								{"node_id": "DomNodeId"}
							],
							"returns": "OptionDomNodeId",
							"fn_body": "callbackinfo.get_last_child(node_id).into()"
						},
						"get_dataset": {
							"doc": "Returns the `Dataset` of the given `DomNodeId`. Returns `None` on an invalid NodeId.",
							"fn_args": [
								{"self": "ref"},
								{"node_id": "DomNodeId"}
							],
							"returns": "OptionRefAny",
							"fn_body": "callbackinfo.get_dataset(node_id).into()"
						},
						"get_window_state": {
							"doc": "Returns a copy of the current windows `WindowState`.",
							"fn_args": [
								{"self": "ref"}
							],
							"returns": "WindowState",
							"fn_body": "callbackinfo.get_window_state()"
						},
						"get_keyboard_state": {
							"doc": "Returns a copy of the internal `KeyboardState`. Same as `self.get_window_state().keyboard_state`",
							"fn_args": [
								{"self": "ref"}
							],
							"returns": "KeyboardState",
							"fn_body": "callbackinfo.get_keyboard_state()"
						},
						"get_mouse_state": {
							"doc": "Returns a copy of the internal `MouseState`. Same as `self.get_window_state().mouse_state`",
							"fn_args": [
								{"self": "ref"}
							],
							"returns": "MouseState",
							"fn_body": "callbackinfo.get_mouse_state()"
						},
						"get_current_window_handle": {
							"doc": "Returns a copy of the current windows `RawWindowHandle`.",
							"fn_args": [
								{"self": "ref"}
							],
							"returns": "RawWindowHandle",
							"fn_body": "callbackinfo.get_current_window_handle()"
						},
						"get_gl_context": {
							"doc": "Returns a **reference-counted copy** of the current windows `GlContextPtr`. You can use this to render OpenGL textures.",
							"fn_args": [
								{"self": "ref"}
							],
							"returns": "GlContextPtr",
							"fn_body": "callbackinfo.get_gl_context()"
						},
						"set_window_state": {
							"doc": "Sets the new `WindowState` for the next frame. The window is updated after all callbacks are run.",
							"fn_args": [
								{"self": "refmut"},
								{"new_state": "WindowState"}
							],
							"fn_body": "callbackinfo.set_window_state(new_state);"
						},
						"set_focus": {
							"doc": "Sets the new `FocusTarget` for the next frame. Note that this will emit a `On::FocusLost` and `On::FocusReceived` event, if the focused node has changed.",
							"fn_args": [
								{"self": "refmut"},
								{"target": "FocusTarget"}
							],
							"fn_body": "callbackinfo.set_focus(target);"
						},
						"set_css_property": {
							"doc": "Sets a `CssProperty` on a given ndoe to its new value. If this property change affects the layout, this will automatically trigger a relayout and redraw of the screen.",
							"fn_args": [
								{"self": "refmut"},
								{"node_id": "DomNodeId"},
								{"new_property": "CssProperty"}
							],
							"fn_body": "callbackinfo.set_css_property(node_id, new_property); "
						},
						"stop_propagation": {
							"doc": "Stops the propagation of the current callback event type to the parent. Events are bubbled from the inside out (children first, then parents), this event stops the propagation of the event to the parent.",
							"fn_args": [
								{"self": "refmut"}
							],
							"fn_body": "callbackinfo.stop_propagation();"
						},
						"create_window": {
							"doc": "Spawns a new window with the given `WindowCreateOptions`.",
							"fn_args": [
								{"self": "refmut"},
								{"new_window": "WindowCreateOptions"}
							],
							"fn_body": "callbackinfo.create_window(new_window);"
						},
						"start_thread": {
							"doc": "Starts a new `Thread` to the runtime. See the documentation for `Thread` for more information.",
							"fn_args": [
								{"self": "refmut"},
								{"id": "ThreadId"},
								{"thread_initialize_data": "RefAny"},
								{"writeback_data": "RefAny"},
								{"callback": "ThreadCallbackType"}
							],
							"fn_body": "callbackinfo.start_thread(id, thread_initialize_data, writeback_data, callback);"
						},
						"start_timer": {
							"doc": "Adds a new `Timer` to the runtime. See the documentation for `Timer` for more information.",
							"fn_args": [
								{"self": "refmut"},
								{"id": "TimerId"},
								{"timer": "Timer"}
							],
							"fn_body": "callbackinfo.start_timer(id, timer);"
						}
					}
				},
				"UpdateScreen": {
					"external": "azul_impl::callbacks::UpdateScreen",
					"doc": "Specifies if the screen should be updated after the callback function has returned",
					"derive": ["Copy"],
					"enum_fields": [
						{"DoNothing": {"doc": "The screen does not need to redraw after the callback has been called"}},
						{"RegenerateStyledDomForCurrentWindow": {"doc": "After the callback is called, the screen needs to redraw (layout() function being called again)"}},
						{"RegenerateStyledDomForAllWindows": {"doc": "After the callback is called, the layout() function needs to be called again for ALL windows"}}
					],
					"use_patches": ["rust"]
				},

				"IFrameCallback": {
					"external": "azul_impl::callbacks::IFrameCallback",
					"derive": ["Copy"],
					"struct_fields": [
						{"cb": {"type": "IFrameCallbackType"}}
					]
				},
				"IFrameCallbackType": { "use_patches": ["dll", "rust"], "typedef": true },
				"IFrameCallbackInfo": {
					"external": "azul_impl::callbacks::IFrameCallbackInfo",
					"clone": false,
					"struct_fields": [
						{"resources": {"type": "*const c_void"}},
						{"bounds": {"type": "HidpiAdjustedBounds"}}
					]
				},
				"IFrameCallbackReturn": {
					"external": "azul_impl::callbacks::IFrameCallbackReturn",
					"struct_fields": [
						{"dom": { "type": "StyledDom" }},
						{"size": {"type": "LayoutRect"}},
						{"virtual_size": {"type": "OptionLayoutRect"}}
					]
				},

				"GlCallback": {
					"external": "azul_impl::callbacks::GlCallback",
					"derive": ["Copy"],
					"struct_fields": [
						{"cb": {"type": "GlCallbackType"}}
					]
				},
				"GlCallbackType": { "use_patches": ["dll", "rust"], "typedef": true },
				"GlCallbackInfo": {
					"external": "azul_impl::callbacks::GlCallbackInfo",
					"clone": false,
					"struct_fields": [
						{"gl_context": {"type": "*const GlContextPtr"}},
						{"resources": {"type": "*const c_void"}},
						{"bounds": {"type": "HidpiAdjustedBounds"}}
					],
					"functions": {
						"get_gl_context": {
							"doc": "Returns a copy of the internal `GlContextPtr`",
							"fn_args": [
								{"self": "ref"}
							],
							"returns": "GlContextPtr",
							"fn_body": "glcallbackinfo.get_gl_context()"
						},
						"get_bounds": {
							"doc": "Returns a copy of the internal `HidpiAdjustedBounds`",
							"fn_args": [
								{"self": "ref"}
							],
							"returns": "HidpiAdjustedBounds",
							"fn_body": "glcallbackinfo.get_bounds()"
						}
					}
				},
				"GlCallbackReturn": {
					"external": "azul_impl::callbacks::GlCallbackReturn",
					"clone": false,
					"struct_fields": [
						{"texture": { "type": "OptionTexture" }}
					]
				},

				"TimerCallback": {
					"external": "azul_impl::callbacks::TimerCallback",
					"derive": ["Copy"],
					"struct_fields": [
						{"cb": {"type": "TimerCallbackType"}}
					]
				},
				"TimerCallbackType": { "use_patches": ["dll", "rust"], "typedef": true },
				"TimerCallbackInfo": {
					"external": "azul_impl::callbacks::TimerCallbackInfo",
					"clone": false,
					"struct_fields": [
						{"callback_info": {"type": "CallbackInfo"}},
						{"frame_start": {"type": "Instant"}},
						{"call_count": {"type": "usize"}}
					]
				},
				"TimerCallbackReturn": {
					"external": "azul_impl::callbacks::TimerCallbackReturn",
					"struct_fields": [
						{"should_update": {"type": "UpdateScreen"}},
						{"should_terminate": {"type": "TerminateTimer"}}
					]
				},

				"WriteBackCallbackType": { "use_patches": ["dll", "rust"], "typedef": true },
				"WriteBackCallback": {
					"external": "azul_impl::callbacks::WriteBackCallback",
					"struct_fields": [
						{"cb": {"type": "WriteBackCallbackType"}}
					]
				},

				"ThreadCallbackType": { "use_patches": ["dll", "rust"], "typedef": true },
				"RefAnyDestructorType": { "use_patches": ["dll", "rust"], "typedef": true },

				"AtomicRefCount": {
					"external": "azul_impl::callbacks::AtomicRefCount",
					"struct_fields": [
						{"ptr": {"type": "*const c_void"}}
					],
					"clone": false,
					"functions": {
						"can_be_shared": {
							"fn_args": [
								{"self": "ref"}
							],
							"returns": "bool",
							"fn_body": "atomicrefcount.can_be_shared()"
						},
						"can_be_shared_mut": {
							"fn_args": [
								{"self": "ref"}
							],
							"returns": "bool",
							"fn_body": "atomicrefcount.can_be_shared_mut()"
						},
						"increase_ref": {
							"fn_args": [
								{"self": "refmut"}
							],
							"fn_body": "atomicrefcount.increase_ref()"
						},
						"decrease_ref": {
							"fn_args": [
								{"self": "refmut"}
							],
							"fn_body": "atomicrefcount.decrease_ref()"
						},
						"increase_refmut": {
							"fn_args": [
								{"self": "refmut"}
							],
							"fn_body": "atomicrefcount.increase_refmut()"
						},
						"decrease_refmut": {
							"fn_args": [
								{"self": "refmut"}
							],
							"fn_body": "atomicrefcount.decrease_refmut()"
						}
					}
				},
				"RefAny": {
					"external": "azul_impl::callbacks::RefAny",
					"doc": "RefAny is a reference-counted, type-erased pointer, which stores a reference to a struct. `RefAny` can be up- and downcasted (this usually done via generics and can't be expressed in the Rust API)",
					"struct_fields": [
						{"_internal_ptr":  {"type": "*const c_void", "doc": "Pointer to the type-erased struct"}},
						{"_internal_len":  {"type": "usize", "doc": "Length of Vec holding type-erased struct"}},
						{"_internal_layout_size":  {"type": "usize", "doc": "Size of the type-erased struct"}},
						{"_internal_layout_align":  {"type": "usize", "doc": "Alignment of the type-erased struct (usually 0 or 8)"}},
						{"type_id":  {"type": "u64", "doc": "TypeId that can uniquely identify the type of the struct, usually generated by the compiler (i.e. in Rust it would be `std::any::TypeId`)"}},
						{"type_name":  {"type": "String", "doc": "Optional, name of the type, usually compiler-generated (in Rust, `std::any::type_name<T>()`)"}},
						{"_sharing_info_ptr":  {"type": "*const AtomicRefCount", "doc": "Pointer to the reference count of this `RefAny`. Calling `.clone()` will not clone the data, only bump the reference count by 1. When the `num_copies` reaches 0, the destructor of this `RefAny` is called"}},
						{"custom_destructor":  {"type": "RefAnyDestructorType", "doc": "Function pointer to the destructor of `T`. Is called when the `num_copies` count of the `RefAny` reaches 0"}}
					],
					"constructors": {
						"new_c": {
							"fn_args": [
								{"ptr": "*const c_void"},
								{"len": "usize"},
								{"type_id": "u64"},
								{"type_name": "String"},
								{"destructor": "RefAnyDestructorType"}
							],
							"fn_body": "RefAny::new_c(ptr, len, type_id, type_name, destructor)"
						}
					},
					"functions": {
						"is_type": {
							"fn_args": [
								{"self": "ref"},
								{"type_id": "u64"}
							],
							"returns": "bool",
							"fn_body": "refany.is_type(type_id)"
						},
						"get_type_name": {
							"fn_args": [
								{"self": "ref"}
							],
							"returns": "String",
							"fn_body": "refany.get_type_name()"
						},
						"can_be_shared": {
							"fn_args": [
								{"self": "ref"}
							],
							"returns": "bool",
							"fn_body": "refany.can_be_shared()"
						},
						"can_be_shared_mut": {
							"fn_args": [
								{"self": "ref"}
							],
							"returns": "bool",
							"fn_body": "refany.can_be_shared_mut()"
						},
						"increase_ref": {
							"fn_args": [
								{"self": "ref"}
							],
							"fn_body": "refany.increase_ref()"
						},
						"decrease_ref": {
							"fn_args": [
								{"self": "ref"}
							],
							"fn_body": "refany.decrease_ref()"
						},
						"increase_refmut": {
							"fn_args": [
								{"self": "ref"}
							],
							"fn_body": "refany.increase_refmut()"
						},
						"decrease_refmut": {
							"fn_args": [
								{"self": "ref"}
							],
							"fn_body": "refany.decrease_refmut()"
						}
					}
				},
				"LayoutInfo": {
					"external": "azul_impl::callbacks::LayoutInfo",
					"clone": false,
					"struct_fields": [
						{"window_size": {"type": "*const WindowSize"}},
						{"window_size_width_stops": {"type": "*mut c_void"}},
						{"window_size_height_stops": {"type": "*mut c_void"}},
						{"resources": {"type": "*const c_void"}}
					],
					"functions": {
						"window_width_larger_than": {
							"fn_args": [
								{"self": "refmut"},
								{"width": "f32"}
							],
							"returns": "bool",
							"fn_body": "layoutinfo.window_width_larger_than(width)"
						},
						"window_width_smaller_than": {
							"fn_args": [
								{"self": "refmut"},
								{"width": "f32"}
							],
							"returns": "bool",
							"fn_body": "layoutinfo.window_width_smaller_than(width)"
						},
						"window_height_larger_than": {
							"fn_args": [
								{"self": "refmut"},
								{"width": "f32"}
							],
							"returns": "bool",
							"fn_body": "layoutinfo.window_height_larger_than(width)"
						},
						"window_height_smaller_than": {
							"fn_args": [
								{"self": "refmut"},
								{"width": "f32"}
							],
							"returns": "bool",
							"fn_body": "layoutinfo.window_height_smaller_than(width)"
						}
					}
				},
				"IFrameCallbackInfo": {
					"external": "azul_impl::callbacks::IFrameCallbackInfo",
					"clone": false,
					"struct_fields": [
						{"resources": {"type": "*const c_void"}},
						{"bounds": {"type": "HidpiAdjustedBounds"}}
					]
				},
				"GlCallbackInfo": {
					"external": "azul_impl::callbacks::GlCallbackInfo",
					"clone": false,
					"struct_fields": [
						{"gl_context": {"type": "*const GlContextPtr"}},
						{"resources": {"type": "*const c_void"}},
						{"bounds": {"type": "HidpiAdjustedBounds"}}
					],
					"functions": {
						"get_gl_context": {
							"doc": "Returns a copy of the internal `GlContextPtr`",
							"fn_args": [
								{"self": "ref"}
							],
							"returns": "GlContextPtr",
							"fn_body": "glcallbackinfo.get_gl_context()"
						}
					}
				}
			}
		},
		"css": {
			"doc": "`Css` parsing module",
			"classes": {
				"CssRuleBlock": {
					"external": "azul_impl::css::CssRuleBlock",
					"struct_fields": [
						{"path": {"type": "CssPath"}},
						{"declarations": {"type": "CssDeclarationVec"}}
					]
				},
				"CssDeclaration": {
					"external": "azul_impl::css::CssDeclaration",
					"enum_fields": [
						{"Static": {"type": "CssProperty"}},
						{"Dynamic": {"type": "DynamicCssProperty"}}
					]
				},
				"DynamicCssProperty": {
					"external": "azul_impl::css::DynamicCssProperty",
					"struct_fields": [
						{"dynamic_id": {"type": "String"}},
						{"default_value": {"type": "CssProperty"}}
					]
				},
				"CssPath": {
					"external": "azul_impl::css::CssPath",
					"struct_fields": [
						{"selectors": {"type": "CssPathSelectorVec"}}
					]
				},
				"CssPathSelector": {
					"external": "azul_impl::css::CssPathSelector",
					"enum_fields": [
						{"Global": {}},
						{"Type": {"type": "NodeTypePath"}},
						{"Class": {"type": "String"}},
						{"Id": {"type": "String"}},
						{"PseudoSelector": {"type": "CssPathPseudoSelector"}},
						{"DirectChildren": {}},
						{"Children": {}}
					]
				},
				"NodeTypePath": {
					"external": "azul_impl::css::NodeTypePath",
					"derive": ["Copy"],
					"enum_fields": [
						{"Body": {}},
						{"Div": {}},
						{"P": {}},
						{"Img": {}},
						{"Texture": {}},
						{"IFrame": {}}
					]
				},
				"CssPathPseudoSelector": {
					"external": "azul_impl::css::CssPathPseudoSelector",
					"derive": ["Copy"],
					"enum_fields": [
						{"First": {}},
						{"Last": {}},
						{"NthChild": {"type": "CssNthChildSelector"}},
						{"Hover": {}},
						{"Active": {}},
						{"Focus": {}}
					]
				},
				"CssNthChildSelector": {
					"external": "azul_impl::css::CssNthChildSelector",
					"derive": ["Copy"],
					"enum_fields": [
						{"Number": {"type": "u32"}},
						{"Even": {}},
						{"Odd": {}},
						{"Pattern": {"type": "CssNthChildPattern"}}
					]
				},
				"CssNthChildPattern": {
					"external": "azul_impl::css::CssNthChildPattern",
					"derive": ["Copy"],
					"struct_fields": [
						{"repeat": {"type": "u32"}},
						{"offset": {"type": "u32"}}
					]
				},
				"Stylesheet": {
					"external": "azul_impl::css::Stylesheet",
					"struct_fields": [
						{"rules": {"type": "CssRuleBlockVec"}}
					]
				},
				"Css": {
					"external": "azul_impl::css::Css",
					"struct_fields": [
						{"stylesheets": {"type": "StylesheetVec"}}
					],
					"constructors": {
						"empty": {
							"doc": "Returns an empty CSS style",
							"fn_body":"AzCss::empty()"
						},
						"from_string": {
							"doc": "Returns a CSS style parsed from a `String`",
							"fn_args": [
								{"s": "String"}
							],
							"fn_body":"css::from_str(s.as_str()).unwrap()"
						}
					}
				},
				"CssDeclaration": {
					"external": "azul_impl::css::CssDeclaration",
					"enum_fields": [
						{"Static": {"type": "CssProperty"}},
						{"Dynamic": {"type": "DynamicCssProperty"}}
					]
				},
				"DynamicCssProperty": {
					"external": "azul_impl::css::DynamicCssProperty",
					"struct_fields": [
						{"dynamic_id": {"type": "String"}},
						{"default_value": {"type": "CssProperty"}}
					]
				},
				"ColorU": {
					"external": "azul_impl::css::ColorU",
					"derive": ["Copy"],
					"struct_fields": [
						{"r": {"type": "u8"}},
						{"g": {"type": "u8"}},
						{"b": {"type": "u8"}},
						{"a": {"type": "u8"}}
					]
				},
				"SizeMetric": {
					"external": "azul_impl::css::SizeMetric",
					"derive": ["Copy"],
					"enum_fields": [
						{"Px": {}},
						{"Pt": {}},
						{"Em": {}},
						{"Percent": {}}
					]
				},
				"FloatValue": {
					"external": "azul_impl::css::FloatValue",
					"derive": ["Copy"],
					"struct_fields": [
						{"number": {"type": "isize"}}
					]
				},
				"PixelValue": {
					"external": "azul_impl::css::PixelValue",
					"derive": ["Copy"],
					"struct_fields": [
						{"metric": {"type": "SizeMetric"}},
						{"number": {"type": "FloatValue"}}
					]
				},
				"PixelValueNoPercent": {
					"external": "azul_impl::css::PixelValueNoPercent",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": {"type": "PixelValue"}}
					]
				},
				"BoxShadowClipMode": {
					"external": "azul_impl::css::BoxShadowClipMode",
					"derive": ["Copy"],
					"enum_fields": [
						{"Outset": {}},
						{"Inset": {}}
					]
				},
				"BoxShadowPreDisplayItem": {
					"external": "azul_impl::css::BoxShadowPreDisplayItem",
					"derive": ["Copy"],
					"struct_fields": [
						{ "offset": {"type": "[PixelValueNoPercent;2]" }},
						{ "color": {"type": "ColorU" }},
						{ "blur_radius": {"type": "PixelValueNoPercent" }},
						{ "spread_radius": {"type": "PixelValueNoPercent" }},
						{ "clip_mode": {"type": "BoxShadowClipMode" }}
					]
				},
				"LayoutAlignContent": {
					"external": "azul_impl::css::LayoutAlignContent",
					"derive": ["Copy"],
					"enum_fields": [
						{"Stretch": {"doc": "Default value. Lines stretch to take up the remaining space"}},
						{"Center": {"doc": "Lines are packed toward the center of the flex container"}},
						{"Start": {"doc": "Lines are packed toward the start of the flex container"}},
						{"End": {"doc": "Lines are packed toward the end of the flex container"}},
						{"SpaceBetween": {"doc": "Lines are evenly distributed in the flex container"}},
						{"SpaceAround": {"doc": "Lines are evenly distributed in the flex container, with half-size spaces on either end"}}
					]
				},
				"LayoutAlignItems": {
					"external": "azul_impl::css::LayoutAlignItems",
					"derive": ["Copy"],
					"enum_fields": [
						{"Stretch": {"doc": "Items are stretched to fit the container"}},
						{"Center": {"doc": "Items are positioned at the center of the container"}},
						{"Start": {"doc": "Items are positioned at the beginning of the container"}},
						{"End": {"doc": "Items are positioned at the end of the container"}}
					]
				},
				"LayoutBottom": {
					"external": "azul_impl::css::LayoutBottom",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": {"type": "PixelValue"}}
					]
				},
				"LayoutBoxSizing": {
					"external": "azul_impl::css::LayoutBoxSizing",
					"derive": ["Copy"],
					"enum_fields": [
						{"ContentBox": {}},
						{"BorderBox": {}}
					]
				},
				"LayoutDirection": {
					"external": "azul_impl::css::LayoutDirection",
					"derive": ["Copy"],
					"enum_fields": [
						{"Row": {}},
						{"RowReverse": {}},
						{"Column": {}},
						{"ColumnReverse": {}}
					]
				},
				"LayoutDisplay": {
					"external": "azul_impl::css::LayoutDisplay",
					"derive": ["Copy"],
					"enum_fields": [
						{"Flex": {}},
						{"Block": {}},
						{"InlineBlock": {}}
					]
				},
				"LayoutFlexGrow": {
					"external": "azul_impl::css::LayoutFlexGrow",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": { "type": "FloatValue" }}
					]
				},
				"LayoutFlexShrink": {
					"external": "azul_impl::css::LayoutFlexShrink",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": { "type": "FloatValue" }}
					]
				},
				"LayoutFloat": {
					"external": "azul_impl::css::LayoutFloat",
					"derive": ["Copy"],
					"enum_fields": [
						{"Left": {}},
						{"Right": {}}
					]
				},
				"LayoutHeight": {
					"external": "azul_impl::css::LayoutHeight",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": { "type": "PixelValue" }}
					]
				},
				"LayoutJustifyContent": {
					"external": "azul_impl::css::LayoutJustifyContent",
					"derive": ["Copy"],
					"enum_fields": [
						 {"Start": {"doc": "Default value. Items are positioned at the beginning of the container"}},
						 {"End": {"doc": "Items are positioned at the end of the container"}},
						 {"Center": {"doc": "Items are positioned at the center of the container"}},
						 {"SpaceBetween": {"doc": "Items are positioned with space between the lines"}},
						 {"SpaceAround": {"doc": "Items are positioned with space before, between, and after the lines"}},
						 {"SpaceEvenly": {"doc": "Items are distributed so that the spacing between any two adjacent alignment subjects, before the first alignment subject, and after the last alignment subject is the same"}}
					]
				},
				"LayoutLeft": {
					"external": "azul_impl::css::LayoutLeft",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": { "type": "PixelValue" }}
					]
				},
				"LayoutMarginBottom": {
					"external": "azul_impl::css::LayoutMarginBottom",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": { "type": "PixelValue" }}
					]
				},
				"LayoutMarginLeft": {
					"external": "azul_impl::css::LayoutMarginLeft",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": { "type": "PixelValue" }}
					]
				},
				"LayoutMarginRight": {
					"external": "azul_impl::css::LayoutMarginRight",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": { "type": "PixelValue" }}
					]
				},
				"LayoutMarginTop": {
					"external": "azul_impl::css::LayoutMarginTop",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": { "type": "PixelValue" }}
					]
				},
				"LayoutMaxHeight": {
					"external": "azul_impl::css::LayoutMaxHeight",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": { "type": "PixelValue" }}
					]
				},
				"LayoutMaxWidth": {
					"external": "azul_impl::css::LayoutMaxWidth",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": { "type": "PixelValue" }}
					]
				},
				"LayoutMinHeight": {
					"external": "azul_impl::css::LayoutMinHeight",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": { "type": "PixelValue" }}
					]
				},
				"LayoutMinWidth": {
					"external": "azul_impl::css::LayoutMinWidth",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": { "type": "PixelValue" }}
					]
				},
				"LayoutPaddingBottom": {
					"external": "azul_impl::css::LayoutPaddingBottom",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": { "type": "PixelValue" }}
					]
				},
				"LayoutPaddingLeft": {
					"external": "azul_impl::css::LayoutPaddingLeft",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": { "type": "PixelValue" }}
					]
				},
				"LayoutPaddingRight": {
					"external": "azul_impl::css::LayoutPaddingRight",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": { "type": "PixelValue" }}
					]
				},
				"LayoutPaddingTop": {
					"external": "azul_impl::css::LayoutPaddingTop",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": { "type": "PixelValue" }}
					]
				},
				"LayoutPosition": {
					"external": "azul_impl::css::LayoutPosition",
					"derive": ["Copy"],
					"enum_fields": [
						{"Static": {}},
						{"Relative": {}},
						{"Absolute": {}},
						{"Fixed": {}}
					]
				},
				"LayoutRight": {
					"external": "azul_impl::css::LayoutRight",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": { "type": "PixelValue" }}
					]
				},
				"LayoutTop": {
					"external": "azul_impl::css::LayoutTop",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": { "type": "PixelValue" }}
					]
				},
				"LayoutWidth": {
					"external": "azul_impl::css::LayoutWidth",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": { "type": "PixelValue" }}
					]
				},
				"LayoutWrap": {
					"external": "azul_impl::css::LayoutWrap",
					"derive": ["Copy"],
					"enum_fields": [
						{"Wrap": {}},
						{"NoWrap": {}}
					]
				},
				"Overflow": {
					"external": "azul_impl::css::Overflow",
					"derive": ["Copy"],
					"enum_fields": [
						 {"Scroll": {"doc": "Always shows a scroll bar, overflows on scroll"}},
						 {"Auto": {"doc": "Does not show a scroll bar by default, only when text is overflowing"}},
						 {"Hidden": {"doc": "Never shows a scroll bar, simply clips text"}},
						 {"Visible": {"doc": "Doesn't show a scroll bar, simply overflows the text"}}
					]
				},
				"FloatValue": {
					"external": "azul_impl::css::FloatValue",
					"derive": ["Copy"],
					"struct_fields": [
						{ "number": {"type": "isize" }}
					]
				},
				"PercentageValue": {
					"external": "azul_impl::css::PercentageValue",
					"derive": ["Copy"],
					"struct_fields": [
						{ "number": {"type": "FloatValue" }}
					]
				},
				"GradientStopPre": {
					"external": "azul_impl::css::GradientStopPre",
					"derive": ["Copy"],
					"struct_fields": [
						{"offset": {"type": "OptionPercentageValue"}},
						{"color": {"type": "ColorU"}}
					]
				},
				"DirectionCorner": {
					"external": "azul_impl::css::DirectionCorner",
					"derive": ["Copy"],
					"enum_fields": [
						{"Right": {}},
						{"Left": {}},
						{"Top": {}},
						{"Bottom": {}},
						{"TopRight": {}},
						{"TopLeft": {}},
						{"BottomRight": {}},
						{"BottomLeft": {}}
					]
				},
				"DirectionCorners": {
					"external": "azul_impl::css::DirectionCorners",
					"derive": ["Copy"],
					"struct_fields": [
						{"from": {"type": "DirectionCorner"}},
						{"to": {"type": "DirectionCorner"}}
					]
				},
				"Direction": {
					"external": "azul_impl::css::Direction",
					"derive": ["Copy"],
					"enum_fields": [
						{"Angle": {"type": "FloatValue"}},
						{"FromTo": {"type": "DirectionCorners"}}
					]
				},
				"ExtendMode": {
					"external": "azul_impl::css::ExtendMode",
					"derive": ["Copy"],
					"enum_fields": [
						{"Clamp": {}},
						{"Repeat": {}}
					]
				},
				"LinearGradient": {
					"external": "azul_impl::css::LinearGradient",
					"struct_fields": [
						{"direction": {"type": "Direction"}},
						{"extend_mode": {"type": "ExtendMode"}},
						{"stops": {"type": "GradientStopPreVec"}}
					]
				},
				"Shape": {
					"external": "azul_impl::css::Shape",
					"derive": ["Copy"],
					"enum_fields": [
						{"Ellipse": {}},
						{"Circle": {}}
					]
				},
				"RadialGradient": {
					"external": "azul_impl::css::RadialGradient",
					"struct_fields": [
						{"shape": {"type": "Shape"}},
						{"extend_mode": {"type": "ExtendMode"}},
						{"stops": {"type": "GradientStopPreVec"}}
					]
				},
				"CssImageId": {
					"external": "azul_impl::css::CssImageId",
					"struct_fields": [
						{"inner": {"type": "String"}}
					]
				},
				"StyleBackgroundContent": {
					"external": "azul_impl::css::StyleBackgroundContent",
					"enum_fields": [
						{"LinearGradient": {"type": "LinearGradient"}},
						{"RadialGradient": {"type": "RadialGradient"}},
						{"Image": {"type": "CssImageId"}},
						{"Color": {"type": "ColorU"}}
					]
				},
				"BackgroundPositionHorizontal": {
					"external": "azul_impl::css::BackgroundPositionHorizontal",
					"derive": ["Copy"],
					"enum_fields": [
						{"Left": {}},
						{"Center": {}},
						{"Right": {}},
						{"Exact": {"type": "PixelValue"}}
					]
				},
				"BackgroundPositionVertical": {
					"external": "azul_impl::css::BackgroundPositionVertical",
					"derive": ["Copy"],
					"enum_fields": [
						{"Top": {}},
						{"Center": {}},
						{"Bottom": {}},
						{"Exact": {"type": "PixelValue"}}
					]
				},
				"StyleBackgroundPosition": {
					"external": "azul_impl::css::StyleBackgroundPosition",
					"derive": ["Copy"],
					"struct_fields": [
						{"horizontal": {"type": "BackgroundPositionHorizontal"}},
						{"vertical": {"type": "BackgroundPositionVertical"}}
					]
				},
				"StyleBackgroundRepeat": {
					"external": "azul_impl::css::StyleBackgroundRepeat",
					"derive": ["Copy"],
					"enum_fields": [
						{"NoRepeat": {}},
						{"Repeat": {}},
						{"RepeatX": {}},
						{"RepeatY": {}}
					]
				},
				"StyleBackgroundSize": {
					"external": "azul_impl::css::StyleBackgroundSize",
					"derive": ["Copy"],
					"enum_fields": [
						{"ExactSize": {"type": "[PixelValue;2]"}},
						{"Contain": {}},
						{"Cover": {}}
					]
				},
				"StyleBorderBottomColor": {
					"external": "azul_impl::css::StyleBorderBottomColor",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": {"type": "ColorU"}}
					]
				},
				"StyleBorderBottomLeftRadius": {
					"external": "azul_impl::css::StyleBorderBottomLeftRadius",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": {"type": "PixelValue"}}
					]
				},
				"StyleBorderBottomRightRadius": {
					"external": "azul_impl::css::StyleBorderBottomRightRadius",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": {"type": "PixelValue"}}
					]
				},
				"BorderStyle": {
					"external": "azul_impl::css::BorderStyle",
					"derive": ["Copy"],
					"enum_fields": [
						{"None": {}},
						{"Solid": {}},
						{"Double": {}},
						{"Dotted": {}},
						{"Dashed": {}},
						{"Hidden": {}},
						{"Groove": {}},
						{"Ridge": {}},
						{"Inset": {}},
						{"Outset": {}}
					]
				},
				"StyleBorderBottomStyle": {
					"external": "azul_impl::css::StyleBorderBottomStyle",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": {"type": "BorderStyle"}}
					]
				},
				"StyleBorderBottomWidth": {
					"external": "azul_impl::css::StyleBorderBottomWidth",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": {"type": "PixelValue"}}
					]
				},
				"StyleBorderLeftColor": {
					"external": "azul_impl::css::StyleBorderLeftColor",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": {"type": "ColorU"}}
					]
				},
				"StyleBorderLeftStyle": {
					"external": "azul_impl::css::StyleBorderLeftStyle",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": {"type": "BorderStyle"}}
					]
				},
				"StyleBorderLeftWidth": {
					"external": "azul_impl::css::StyleBorderLeftWidth",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": {"type": "PixelValue"}}
					]
				},
				"StyleBorderRightColor": {
					"external": "azul_impl::css::StyleBorderRightColor",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": {"type": "ColorU"}}
					]
				},
				"StyleBorderRightStyle": {
					"external": "azul_impl::css::StyleBorderRightStyle",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": {"type": "BorderStyle"}}
					]
				},
				"StyleBorderRightWidth": {
					"external": "azul_impl::css::StyleBorderRightWidth",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": {"type": "PixelValue"}}
					]
				},
				"StyleBorderTopColor": {
					"external": "azul_impl::css::StyleBorderTopColor",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": {"type": "ColorU"}}
					]
				},
				"StyleBorderTopLeftRadius": {
					"external": "azul_impl::css::StyleBorderTopLeftRadius",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": {"type": "PixelValue"}}
					]
				},
				"StyleBorderTopRightRadius": {
					"external": "azul_impl::css::StyleBorderTopRightRadius",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": {"type": "PixelValue"}}
					]
				},
				"StyleBorderTopStyle": {
					"external": "azul_impl::css::StyleBorderTopStyle",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": {"type": "BorderStyle"}}
					]
				},
				"StyleBorderTopWidth": {
					"external": "azul_impl::css::StyleBorderTopWidth",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": {"type": "PixelValue"}}
					]
				},
				"StyleCursor": {
					"external": "azul_impl::css::StyleCursor",
					"derive": ["Copy"],
					"enum_fields": [
						{"Alias": {}},
						{"AllScroll": {}},
						{"Cell": {}},
						{"ColResize": {}},
						{"ContextMenu": {}},
						{"Copy": {}},
						{"Crosshair": {}},
						{"Default": {}},
						{"EResize": {}},
						{"EwResize": {}},
						{"Grab": {}},
						{"Grabbing": {}},
						{"Help": {}},
						{"Move": {}},
						{"NResize": {}},
						{"NsResize": {}},
						{"NeswResize": {}},
						{"NwseResize": {}},
						{"Pointer": {}},
						{"Progress": {}},
						{"RowResize": {}},
						{"SResize": {}},
						{"SeResize": {}},
						{"Text": {}},
						{"Unset": {}},
						{"VerticalText": {}},
						{"WResize": {}},
						{"Wait": {}},
						{"ZoomIn": {}},
						{"ZoomOut": {}}
					]
				},
				"StyleFontFamily": {
					"external": "azul_impl::css::StyleFontFamily",
					"struct_fields": [
						{"fonts": {"type": "StringVec"}}
					]
				},
				"StyleFontSize": {
					"external": "azul_impl::css::StyleFontSize",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": {"type": "PixelValue"}}
					]
				},
				"StyleLetterSpacing": {
					"external": "azul_impl::css::StyleLetterSpacing",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": {"type": "PixelValue"}}
					]
				},
				"StyleLineHeight": {
					"external": "azul_impl::css::StyleLineHeight",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": {"type": "PercentageValue"}}
					]
				},
				"StyleTabWidth": {
					"external": "azul_impl::css::StyleTabWidth",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": {"type": "PercentageValue"}}
					]
				},
				"StyleOpacity": {
					"external": "azul_impl::css::StyleOpacity",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": {"type": "FloatValue"}}
					]
				},
				"StyleTransformOrigin": {
					"external": "azul_impl::css::StyleTransformOrigin",
					"derive": ["Copy"],
					"struct_fields": [
						{"x": {"type": "PixelValue"}},
						{"y": {"type": "PixelValue"}}
					]
				},
				"StylePerspectiveOrigin": {
					"external": "azul_impl::css::StyleTransformOrigin",
					"derive": ["Copy"],
					"struct_fields": [
						{"x": {"type": "PixelValue"}},
						{"y": {"type": "PixelValue"}}
					]
				},
				"StyleBackfaceVisibility": {
					"external": "azul_impl::css::StyleBackfaceVisibility",
					"derive": ["Copy"],
					"enum_fields": [
						{"Hidden": {}},
						{"Visible": {}}
					]
				},
				"StyleTransform": {
					"external": "azul_impl::css::StyleTransform",
					"derive": ["Copy"],
					"enum_fields": [
						{"Matrix": {"type": "StyleTransformMatrix2D"}},
						{"Matrix3D": {"type": "StyleTransformMatrix3D"}},
						{"Translate": {"type": "StyleTransformTranslate2D"}},
						{"Translate3D": {"type": "StyleTransformTranslate3D"}},
						{"TranslateX": {"type": "PixelValue"}},
						{"TranslateY": {"type": "PixelValue"}},
						{"TranslateZ": {"type": "PixelValue"}},
						{"Rotate": {"type": "PercentageValue"}},
						{"Rotate3D": {"type": "StyleTransformRotate3D"}},
						{"RotateX": {"type": "PercentageValue"}},
						{"RotateY": {"type": "PercentageValue"}},
						{"RotateZ": {"type": "PercentageValue"}},
						{"Scale": {"type": "StyleTransformScale2D"}},
						{"Scale3D": {"type": "StyleTransformScale3D"}},
						{"ScaleX": {"type": "PercentageValue"}},
						{"ScaleY": {"type": "PercentageValue"}},
						{"ScaleZ": {"type": "PercentageValue"}},
						{"Skew": {"type": "StyleTransformSkew2D"}},
						{"SkewX": {"type": "PercentageValue"}},
						{"SkewY": {"type": "PercentageValue"}},
						{"Perspective": {"type": "PixelValue"}}
					]
				},
				"StyleTransformMatrix2D": {
					"external": "azul_impl::css::StyleTransformMatrix2D",
					"derive": ["Copy"],
					"struct_fields": [
						{"a": {"type": "PixelValue" }},
						{"b": {"type": "PixelValue" }},
						{"c": {"type": "PixelValue" }},
						{"d": {"type": "PixelValue" }},
						{"tx": {"type": "PixelValue" }},
						{"ty": {"type": "PixelValue" }}
					]
				},
				"StyleTransformMatrix3D": {
					"external": "azul_impl::css::StyleTransformMatrix3D",
					"derive": ["Copy"],
					"struct_fields": [
						{"m11": {"type": "PixelValue"}},
						{"m12": {"type": "PixelValue"}},
						{"m13": {"type": "PixelValue"}},
						{"m14": {"type": "PixelValue"}},
						{"m21": {"type": "PixelValue"}},
						{"m22": {"type": "PixelValue"}},
						{"m23": {"type": "PixelValue"}},
						{"m24": {"type": "PixelValue"}},
						{"m31": {"type": "PixelValue"}},
						{"m32": {"type": "PixelValue"}},
						{"m33": {"type": "PixelValue"}},
						{"m34": {"type": "PixelValue"}},
						{"m41": {"type": "PixelValue"}},
						{"m42": {"type": "PixelValue"}},
						{"m43": {"type": "PixelValue"}},
						{"m44": {"type": "PixelValue"}}
					]
				},
				"StyleTransformTranslate2D": {
					"external": "azul_impl::css::StyleTransformTranslate2D",
					"derive": ["Copy"],
					"struct_fields": [
						{"x": {"type": "PixelValue"}},
						{"y": {"type": "PixelValue"}}
					]
				},
				"StyleTransformTranslate3D": {
					"external": "azul_impl::css::StyleTransformTranslate3D",
					"derive": ["Copy"],
					"struct_fields": [
						{"x": {"type": "PixelValue"}},
						{"y": {"type": "PixelValue"}},
						{"z": {"type": "PixelValue"}}
					]
				},
				"StyleTransformRotate3D": {
					"external": "azul_impl::css::StyleTransformRotate3D",
					"derive": ["Copy"],
					"struct_fields": [
						{"x": {"type": "PercentageValue"}},
						{"y": {"type": "PercentageValue"}},
						{"z": {"type": "PercentageValue"}},
						{"angle": {"type": "PercentageValue"}}
					]
				},
				"StyleTransformScale2D": {
					"external": "azul_impl::css::StyleTransformScale2D",
					"derive": ["Copy"],
					"struct_fields": [
						{"x": {"type": "PercentageValue"}},
						{"y": {"type": "PercentageValue"}}
					]
				},
				"StyleTransformScale3D": {
					"external": "azul_impl::css::StyleTransformScale3D",
					"derive": ["Copy"],
					"struct_fields": [
						{"x": {"type": "PercentageValue"}},
						{"y": {"type": "PercentageValue"}},
						{"z": {"type": "PercentageValue"}}
					]
				},
				"StyleTransformSkew2D": {
					"external": "azul_impl::css::StyleTransformSkew2D",
					"derive": ["Copy"],
					"struct_fields": [
						{"x": {"type": "PercentageValue"}},
						{"y": {"type": "PercentageValue"}}
					]
				},
				"StyleTextAlignmentHorz": {
					"external": "azul_impl::css::StyleTextAlignmentHorz",
					"derive": ["Copy"],
					"enum_fields": [
						{"Left": {}},
						{"Center": {}},
						{"Right": {}}
					]
				},
				"StyleTextColor": {
					"external": "azul_impl::css::StyleTextColor",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": {"type": "ColorU"}}
					]
				},
				"StyleWordSpacing": {
					"external": "azul_impl::css::StyleWordSpacing",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": {"type": "PixelValue"}}
					]
				},
				"BoxShadowPreDisplayItemValue": {
					"rust_class_name": "CssPropertyValue<BoxShadowPreDisplayItem>",
					"external": "azul_impl::css::CssPropertyValue::<BoxShadowPreDisplayItem>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "BoxShadowPreDisplayItem" }}
					]
				},
				"LayoutAlignContentValue": {
					"rust_class_name": "CssPropertyValue<LayoutAlignContent>",
					"external": "azul_impl::css::CssPropertyValue::<LayoutAlignContent>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "LayoutAlignContent" }}
					]
				},
				"LayoutAlignItemsValue": {
					"rust_class_name": "CssPropertyValue<LayoutAlignItems>",
					"external": "azul_impl::css::CssPropertyValue::<LayoutAlignItems>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "LayoutAlignItems" }}
					]
				},
				"LayoutBottomValue": {
					"rust_class_name": "CssPropertyValue<LayoutBottom>",
					"external": "azul_impl::css::CssPropertyValue::<LayoutBottom>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "LayoutBottom" }}
					]
				},
				"LayoutBoxSizingValue": {
					"rust_class_name": "CssPropertyValue<LayoutBoxSizing>",
					"external": "azul_impl::css::CssPropertyValue::<LayoutBoxSizing>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "LayoutBoxSizing" }}
					]
				},
				"LayoutDirectionValue": {
					"rust_class_name": "CssPropertyValue<LayoutDirection>",
					"external": "azul_impl::css::CssPropertyValue::<LayoutDirection>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "LayoutDirection" }}
					]
				},
				"LayoutDisplayValue": {
					"rust_class_name": "CssPropertyValue<LayoutDisplay>",
					"external": "azul_impl::css::CssPropertyValue::<LayoutDisplay>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "LayoutDisplay" }}
					]
				},
				"LayoutFlexGrowValue": {
					"rust_class_name": "CssPropertyValue<LayoutFlexGrow>",
					"external": "azul_impl::css::CssPropertyValue::<LayoutFlexGrow>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "LayoutFlexGrow" }}
					]
				},
				"LayoutFlexShrinkValue": {
					"rust_class_name": "CssPropertyValue<LayoutFlexShrink>",
					"external": "azul_impl::css::CssPropertyValue::<LayoutFlexShrink>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "LayoutFlexShrink" }}
					]
				},
				"LayoutFloatValue": {
					"rust_class_name": "CssPropertyValue<LayoutFloat>",
					"external": "azul_impl::css::CssPropertyValue::<LayoutFloat>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "LayoutFloat" }}
					]
				},
				"LayoutHeightValue": {
					"rust_class_name": "CssPropertyValue<LayoutHeight>",
					"external": "azul_impl::css::CssPropertyValue::<LayoutHeight>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "LayoutHeight" }}
					]
				},
				"LayoutJustifyContentValue": {
					"rust_class_name": "CssPropertyValue<LayoutJustifyContent>",
					"external": "azul_impl::css::CssPropertyValue::<LayoutJustifyContent>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "LayoutJustifyContent" }}
					]
				},
				"LayoutLeftValue": {
					"rust_class_name": "CssPropertyValue<LayoutLeft>",
					"external": "azul_impl::css::CssPropertyValue::<LayoutLeft>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "LayoutLeft" }}
					]
				},
				"LayoutMarginBottomValue": {
					"rust_class_name": "CssPropertyValue<LayoutMarginBottom>",
					"external": "azul_impl::css::CssPropertyValue::<LayoutMarginBottom>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "LayoutMarginBottom" }}
					]
				},
				"LayoutMarginLeftValue": {
					"rust_class_name": "CssPropertyValue<LayoutMarginLeft>",
					"external": "azul_impl::css::CssPropertyValue::<LayoutMarginLeft>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "LayoutMarginLeft" }}
					]
				},
				"LayoutMarginRightValue": {
					"rust_class_name": "CssPropertyValue<LayoutMarginRight>",
					"external": "azul_impl::css::CssPropertyValue::<LayoutMarginRight>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "LayoutMarginRight" }}
					]
				},
				"LayoutMarginTopValue": {
					"rust_class_name": "CssPropertyValue<LayoutMarginTop>",
					"external": "azul_impl::css::CssPropertyValue::<LayoutMarginTop>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "LayoutMarginTop" }}
					]
				},
				"LayoutMaxHeightValue": {
					"rust_class_name": "CssPropertyValue<LayoutMaxHeight>",
					"external": "azul_impl::css::CssPropertyValue::<LayoutMaxHeight>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "LayoutMaxHeight" }}
					]
				},
				"LayoutMaxWidthValue": {
					"rust_class_name": "CssPropertyValue<LayoutMaxWidth>",
					"external": "azul_impl::css::CssPropertyValue::<LayoutMaxWidth>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "LayoutMaxWidth" }}
					]
				},
				"LayoutMinHeightValue": {
					"rust_class_name": "CssPropertyValue<LayoutMinHeight>",
					"external": "azul_impl::css::CssPropertyValue::<LayoutMinHeight>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "LayoutMinHeight" }}
					]
				},
				"LayoutMinWidthValue": {
					"rust_class_name": "CssPropertyValue<LayoutMinWidth>",
					"external": "azul_impl::css::CssPropertyValue::<LayoutMinWidth>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "LayoutMinWidth" }}
					]
				},
				"LayoutPaddingBottomValue": {
					"rust_class_name": "CssPropertyValue<LayoutPaddingBottom>",
					"external": "azul_impl::css::CssPropertyValue::<LayoutPaddingBottom>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "LayoutPaddingBottom" }}
					]
				},
				"LayoutPaddingLeftValue": {
					"rust_class_name": "CssPropertyValue<LayoutPaddingLeft>",
					"external": "azul_impl::css::CssPropertyValue::<LayoutPaddingLeft>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "LayoutPaddingLeft" }}
					]
				},
				"LayoutPaddingRightValue": {
					"rust_class_name": "CssPropertyValue<LayoutPaddingRight>",
					"external": "azul_impl::css::CssPropertyValue::<LayoutPaddingRight>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "LayoutPaddingRight" }}
					]
				},
				"LayoutPaddingTopValue": {
					"rust_class_name": "CssPropertyValue<LayoutPaddingTop>",
					"external": "azul_impl::css::CssPropertyValue::<LayoutPaddingTop>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "LayoutPaddingTop" }}
					]
				},
				"LayoutPositionValue": {
					"rust_class_name": "CssPropertyValue<LayoutPosition>",
					"external": "azul_impl::css::CssPropertyValue::<LayoutPosition>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "LayoutPosition" }}
					]
				},
				"LayoutRightValue": {
					"rust_class_name": "CssPropertyValue<LayoutRight>",
					"external": "azul_impl::css::CssPropertyValue::<LayoutRight>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "LayoutRight" }}
					]
				},
				"LayoutTopValue": {
					"rust_class_name": "CssPropertyValue<LayoutTop>",
					"external": "azul_impl::css::CssPropertyValue::<LayoutTop>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "LayoutTop" }}
					]
				},
				"LayoutWidthValue": {
					"rust_class_name": "CssPropertyValue<LayoutWidth>",
					"external": "azul_impl::css::CssPropertyValue::<LayoutWidth>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "LayoutWidth" }}
					]
				},
				"LayoutWrapValue": {
					"rust_class_name": "CssPropertyValue<LayoutWrap>",
					"external": "azul_impl::css::CssPropertyValue::<LayoutWrap>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "LayoutWrap" }}
					]
				},
				"OverflowValue": {
					"rust_class_name": "CssPropertyValue<Overflow>",
					"external": "azul_impl::css::CssPropertyValue::<Overflow>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "Overflow" }}
					]
				},
				"StyleBackgroundContentValue": {
					"rust_class_name": "CssPropertyValue<StyleBackgroundContent>",
					"external": "azul_impl::css::CssPropertyValue::<StyleBackgroundContent>",
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "StyleBackgroundContent" }}
					]
				},
				"StyleBackgroundPositionValue": {
					"rust_class_name": "CssPropertyValue<StyleBackgroundPosition>",
					"external": "azul_impl::css::CssPropertyValue::<StyleBackgroundPosition>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "StyleBackgroundPosition" }}
					]
				},
				"StyleBackgroundRepeatValue": {
					"rust_class_name": "CssPropertyValue<StyleBackgroundRepeat>",
					"external": "azul_impl::css::CssPropertyValue::<StyleBackgroundRepeat>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "StyleBackgroundRepeat" }}
					]
				},
				"StyleBackgroundSizeValue": {
					"rust_class_name": "CssPropertyValue<StyleBackgroundSize>",
					"external": "azul_impl::css::CssPropertyValue::<StyleBackgroundSize>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "StyleBackgroundSize" }}
					]
				},
				"StyleBorderBottomColorValue": {
					"rust_class_name": "CssPropertyValue<StyleBorderBottomColor>",
					"external": "azul_impl::css::CssPropertyValue::<StyleBorderBottomColor>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "StyleBorderBottomColor" }}
					]
				},
				"StyleBorderBottomLeftRadiusValue": {
					"rust_class_name": "CssPropertyValue<StyleBorderBottomLeftRadius>",
					"external": "azul_impl::css::CssPropertyValue::<StyleBorderBottomLeftRadius>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "StyleBorderBottomLeftRadius" }}
					]
				},
				"StyleBorderBottomRightRadiusValue": {
					"rust_class_name": "CssPropertyValue<StyleBorderBottomRightRadius>",
					"external": "azul_impl::css::CssPropertyValue::<StyleBorderBottomRightRadius>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "StyleBorderBottomRightRadius" }}
					]
				},
				"StyleBorderBottomStyleValue": {
					"rust_class_name": "CssPropertyValue<StyleBorderBottomStyle>",
					"external": "azul_impl::css::CssPropertyValue::<StyleBorderBottomStyle>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "StyleBorderBottomStyle" }}
					]
				},
				"StyleBorderBottomWidthValue": {
					"rust_class_name": "CssPropertyValue<StyleBorderBottomWidth>",
					"external": "azul_impl::css::CssPropertyValue::<StyleBorderBottomWidth>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "StyleBorderBottomWidth" }}
					]
				},
				"StyleBorderLeftColorValue": {
					"rust_class_name": "CssPropertyValue<StyleBorderLeftColor>",
					"external": "azul_impl::css::CssPropertyValue::<StyleBorderLeftColor>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "StyleBorderLeftColor" }}
					]
				},
				"StyleBorderLeftStyleValue": {
					"rust_class_name": "CssPropertyValue<StyleBorderLeftStyle>",
					"external": "azul_impl::css::CssPropertyValue::<StyleBorderLeftStyle>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "StyleBorderLeftStyle" }}
					]
				},
				"StyleBorderLeftWidthValue": {
					"rust_class_name": "CssPropertyValue<StyleBorderLeftWidth>",
					"external": "azul_impl::css::CssPropertyValue::<StyleBorderLeftWidth>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "StyleBorderLeftWidth" }}
					]
				},
				"StyleBorderRightColorValue": {
					"rust_class_name": "CssPropertyValue<StyleBorderRightColor>",
					"external": "azul_impl::css::CssPropertyValue::<StyleBorderRightColor>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "StyleBorderRightColor" }}
					]
				},
				"StyleBorderRightStyleValue": {
					"rust_class_name": "CssPropertyValue<StyleBorderRightStyle>",
					"external": "azul_impl::css::CssPropertyValue::<StyleBorderRightStyle>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "StyleBorderRightStyle" }}
					]
				},
				"StyleBorderRightWidthValue": {
					"rust_class_name": "CssPropertyValue<StyleBorderRightWidth>",
					"external": "azul_impl::css::CssPropertyValue::<StyleBorderRightWidth>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "StyleBorderRightWidth" }}
					]
				},
				"StyleBorderTopColorValue": {
					"rust_class_name": "CssPropertyValue<StyleBorderTopColor>",
					"external": "azul_impl::css::CssPropertyValue::<StyleBorderTopColor>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "StyleBorderTopColor" }}
					]
				},
				"StyleBorderTopLeftRadiusValue": {
					"rust_class_name": "CssPropertyValue<StyleBorderTopLeftRadius>",
					"external": "azul_impl::css::CssPropertyValue::<StyleBorderTopLeftRadius>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "StyleBorderTopLeftRadius" }}
					]
				},
				"StyleBorderTopRightRadiusValue": {
					"rust_class_name": "CssPropertyValue<StyleBorderTopRightRadius>",
					"external": "azul_impl::css::CssPropertyValue::<StyleBorderTopRightRadius>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "StyleBorderTopRightRadius" }}
					]
				},
				"StyleBorderTopStyleValue": {
					"rust_class_name": "CssPropertyValue<StyleBorderTopStyle>",
					"external": "azul_impl::css::CssPropertyValue::<StyleBorderTopStyle>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "StyleBorderTopStyle" }}
					]
				},
				"StyleBorderTopWidthValue": {
					"rust_class_name": "CssPropertyValue<StyleBorderTopWidth>",
					"external": "azul_impl::css::CssPropertyValue::<StyleBorderTopWidth>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "StyleBorderTopWidth" }}
					]
				},
				"StyleCursorValue": {
					"rust_class_name": "CssPropertyValue<StyleCursor>",
					"external": "azul_impl::css::CssPropertyValue::<StyleCursor>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "StyleCursor" }}
					]
				},
				"StyleFontFamilyValue": {
					"rust_class_name": "CssPropertyValue<StyleFontFamily>",
					"external": "azul_impl::css::CssPropertyValue::<StyleFontFamily>",
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "StyleFontFamily" }}
					]
				},
				"StyleFontSizeValue": {
					"rust_class_name": "CssPropertyValue<StyleFontSize>",
					"external": "azul_impl::css::CssPropertyValue::<StyleFontSize>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "StyleFontSize" }}
					]
				},
				"StyleLetterSpacingValue": {
					"rust_class_name": "CssPropertyValue<StyleLetterSpacing>",
					"external": "azul_impl::css::CssPropertyValue::<StyleLetterSpacing>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "StyleLetterSpacing" }}
					]
				},
				"StyleLineHeightValue": {
					"rust_class_name": "CssPropertyValue<StyleLineHeight>",
					"external": "azul_impl::css::CssPropertyValue::<StyleLineHeight>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "StyleLineHeight" }}
					]
				},
				"StyleTabWidthValue": {
					"rust_class_name": "CssPropertyValue<StyleTabWidth>",
					"external": "azul_impl::css::CssPropertyValue::<StyleTabWidth>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "StyleTabWidth" }}
					]
				},
				"StyleTextAlignmentHorzValue": {
					"rust_class_name": "CssPropertyValue<StyleTextAlignmentHorz>",
					"external": "azul_impl::css::CssPropertyValue::<StyleTextAlignmentHorz>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "StyleTextAlignmentHorz" }}
					]
				},
				"StyleTextColorValue": {
					"rust_class_name": "CssPropertyValue<StyleTextColor>",
					"external": "azul_impl::css::CssPropertyValue::<StyleTextColor>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "StyleTextColor" }}
					]
				},
				"StyleWordSpacingValue": {
					"rust_class_name": "CssPropertyValue<StyleWordSpacing>",
					"external": "azul_impl::css::CssPropertyValue::<StyleWordSpacing>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "StyleWordSpacing" }}
					]
				},
				"StyleOpacityValue": {
					"rust_class_name": "CssPropertyValue<StyleOpacity>",
					"external": "azul_impl::css::CssPropertyValue::<StyleOpacity>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "StyleOpacity" }}
					]
				},
				"StyleTransformVecValue": {
					"rust_class_name": "CssPropertyValue<StyleTransformVec>",
					"external": "azul_impl::css::CssPropertyValue::<StyleTransformVec>",
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "StyleTransformVec" }}
					]
				},
				"StyleTransformOriginValue": {
					"rust_class_name": "CssPropertyValue<StyleTransformOrigin>",
					"external": "azul_impl::css::CssPropertyValue::<StyleTransformOrigin>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "StyleTransformOrigin" }}
					]
				},
				"StylePerspectiveOriginValue": {
					"rust_class_name": "CssPropertyValue<StylePerspectiveOrigin>",
					"external": "azul_impl::css::CssPropertyValue::<StylePerspectiveOrigin>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "StylePerspectiveOrigin" }}
					]
				},
				"StyleBackfaceVisibilityValue": {
					"rust_class_name": "CssPropertyValue<StyleBackfaceVisibility>",
					"external": "azul_impl::css::CssPropertyValue::<StyleBackfaceVisibility>",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { }} ,
						{ "None": { }} ,
						{ "Inherit": { }} ,
						{ "Initial": { }} ,
						{ "Exact": { "type": "StyleBackfaceVisibility" }}
					]
				},
				"CssProperty": {
					"doc": "Parsed CSS key-value pair",
					"external": "azul_impl::css::CssProperty",
					"enum_fields": [
						{ "TextColor": { "type": "CssPropertyValue<StyleTextColor>" }} ,
						{ "FontSize": { "type": "CssPropertyValue<StyleFontSize>" }} ,
						{ "FontFamily": { "type": "CssPropertyValue<StyleFontFamily>" }} ,
						{ "TextAlign": { "type": "CssPropertyValue<StyleTextAlignmentHorz>" }} ,
						{ "LetterSpacing": { "type": "CssPropertyValue<StyleLetterSpacing>" }} ,
						{ "LineHeight": { "type": "CssPropertyValue<StyleLineHeight>" }} ,
						{ "WordSpacing": { "type": "CssPropertyValue<StyleWordSpacing>" }} ,
						{ "TabWidth": { "type": "CssPropertyValue<StyleTabWidth>" }} ,
						{ "Cursor": { "type": "CssPropertyValue<StyleCursor>" }} ,
						{ "Display": { "type": "CssPropertyValue<LayoutDisplay>" }} ,
						{ "Float": { "type": "CssPropertyValue<LayoutFloat>" }} ,
						{ "BoxSizing": { "type": "CssPropertyValue<LayoutBoxSizing>" }} ,
						{ "Width": { "type": "CssPropertyValue<LayoutWidth>" }} ,
						{ "Height": { "type": "CssPropertyValue<LayoutHeight>" }} ,
						{ "MinWidth": { "type": "CssPropertyValue<LayoutMinWidth>" }} ,
						{ "MinHeight": { "type": "CssPropertyValue<LayoutMinHeight>" }} ,
						{ "MaxWidth": { "type": "CssPropertyValue<LayoutMaxWidth>" }} ,
						{ "MaxHeight": { "type": "CssPropertyValue<LayoutMaxHeight>" }} ,
						{ "Position": { "type": "CssPropertyValue<LayoutPosition>" }} ,
						{ "Top": { "type": "CssPropertyValue<LayoutTop>" }} ,
						{ "Right": { "type": "CssPropertyValue<LayoutRight>" }} ,
						{ "Left": { "type": "CssPropertyValue<LayoutLeft>" }} ,
						{ "Bottom": { "type": "CssPropertyValue<LayoutBottom>" }} ,
						{ "FlexWrap": { "type": "CssPropertyValue<LayoutWrap>" }} ,
						{ "FlexDirection": { "type": "CssPropertyValue<LayoutDirection>" }} ,
						{ "FlexGrow": { "type": "CssPropertyValue<LayoutFlexGrow>" }} ,
						{ "FlexShrink": { "type": "CssPropertyValue<LayoutFlexShrink>" }} ,
						{ "JustifyContent": { "type": "CssPropertyValue<LayoutJustifyContent>" }} ,
						{ "AlignItems": { "type": "CssPropertyValue<LayoutAlignItems>" }} ,
						{ "AlignContent": { "type": "CssPropertyValue<LayoutAlignContent>" }} ,
						{ "BackgroundContent": { "type": "CssPropertyValue<StyleBackgroundContent>" }} ,
						{ "BackgroundPosition": { "type": "CssPropertyValue<StyleBackgroundPosition>" }} ,
						{ "BackgroundSize": { "type": "CssPropertyValue<StyleBackgroundSize>" }} ,
						{ "BackgroundRepeat": { "type": "CssPropertyValue<StyleBackgroundRepeat>" }} ,
						{ "OverflowX": { "type": "CssPropertyValue<Overflow>" }} ,
						{ "OverflowY": { "type": "CssPropertyValue<Overflow>" }} ,
						{ "PaddingTop": { "type": "CssPropertyValue<LayoutPaddingTop>" }} ,
						{ "PaddingLeft": { "type": "CssPropertyValue<LayoutPaddingLeft>" }} ,
						{ "PaddingRight": { "type": "CssPropertyValue<LayoutPaddingRight>" }} ,
						{ "PaddingBottom": { "type": "CssPropertyValue<LayoutPaddingBottom>" }} ,
						{ "MarginTop": { "type": "CssPropertyValue<LayoutMarginTop>" }} ,
						{ "MarginLeft": { "type": "CssPropertyValue<LayoutMarginLeft>" }} ,
						{ "MarginRight": { "type": "CssPropertyValue<LayoutMarginRight>" }} ,
						{ "MarginBottom": { "type": "CssPropertyValue<LayoutMarginBottom>" }} ,
						{ "BorderTopLeftRadius": { "type": "CssPropertyValue<StyleBorderTopLeftRadius>" }} ,
						{ "BorderTopRightRadius": { "type": "CssPropertyValue<StyleBorderTopRightRadius>" }} ,
						{ "BorderBottomLeftRadius": { "type": "CssPropertyValue<StyleBorderBottomLeftRadius>" }} ,
						{ "BorderBottomRightRadius": { "type": "CssPropertyValue<StyleBorderBottomRightRadius>" }} ,
						{ "BorderTopColor": { "type": "CssPropertyValue<StyleBorderTopColor>" }} ,
						{ "BorderRightColor": { "type": "CssPropertyValue<StyleBorderRightColor>" }} ,
						{ "BorderLeftColor": { "type": "CssPropertyValue<StyleBorderLeftColor>" }} ,
						{ "BorderBottomColor": { "type": "CssPropertyValue<StyleBorderBottomColor>" }} ,
						{ "BorderTopStyle": { "type": "CssPropertyValue<StyleBorderTopStyle>" }} ,
						{ "BorderRightStyle": { "type": "CssPropertyValue<StyleBorderRightStyle>" }} ,
						{ "BorderLeftStyle": { "type": "CssPropertyValue<StyleBorderLeftStyle>" }} ,
						{ "BorderBottomStyle": { "type": "CssPropertyValue<StyleBorderBottomStyle>" }} ,
						{ "BorderTopWidth": { "type": "CssPropertyValue<StyleBorderTopWidth>" }} ,
						{ "BorderRightWidth": { "type": "CssPropertyValue<StyleBorderRightWidth>" }} ,
						{ "BorderLeftWidth": { "type": "CssPropertyValue<StyleBorderLeftWidth>" }} ,
						{ "BorderBottomWidth": { "type": "CssPropertyValue<StyleBorderBottomWidth>" }} ,
						{ "BoxShadowLeft": { "type": "CssPropertyValue<BoxShadowPreDisplayItem>" }} ,
						{ "BoxShadowRight": { "type": "CssPropertyValue<BoxShadowPreDisplayItem>" }} ,
						{ "BoxShadowTop": { "type": "CssPropertyValue<BoxShadowPreDisplayItem>" }} ,
						{ "BoxShadowBottom": { "type": "CssPropertyValue<BoxShadowPreDisplayItem>" }},
						{ "Opacity": { "type": "CssPropertyValue<StyleOpacity>" }},
						{ "Transform": { "type": "CssPropertyValue<StyleTransformVec>" }},
						{ "TransformOrigin": {"type": "CssPropertyValue<StyleTransformOrigin>" }},
						{ "PerspectiveOrigin": {"type": "CssPropertyValue<StylePerspectiveOrigin>" }},
						{ "BackfaceVisibility": {"type": "CssPropertyValue<StyleBackfaceVisibility>" }}
					]
				}
			}
		},
		"style": {
			"doc": "DOM to CSS cascading and styling module",
			"classes": {
				"Node": {
					"external": "azul_impl::styled_dom::AzNode",
					"derive": ["Copy"],
					"struct_fields": [
						{"parent": {"type": "usize"}},
						{"previous_sibling": {"type": "usize"}},
						{"next_sibling": {"type": "usize"}},
						{"first_child": {"type": "usize"}},
						{"last_child": {"type": "usize"}}
					]
				},
				"CascadeInfo": {
					"external": "azul_impl::style::CascadeInfo",
					"derive": ["Copy"],
					"struct_fields": [
						{"index_in_parent": {"type": "u32"}},
						{"is_last_child": {"type": "bool"}}
			  		]
				},
				"RectStyle": {
					"external": "azul_impl::css::RectStyle",
					"struct_fields": [
						{"background": {"type": "OptionStyleBackgroundContentValue"}},
						{"background_position": {"type": "OptionStyleBackgroundPositionValue"}},
						{"background_size": {"type": "OptionStyleBackgroundSizeValue"}},
						{"background_repeat": {"type": "OptionStyleBackgroundRepeatValue"}},
						{"font_size": {"type": "OptionStyleFontSizeValue"}},
						{"font_family": {"type": "OptionStyleFontFamilyValue"}},
						{"text_color": {"type": "OptionStyleTextColorValue"}},
						{"text_align": {"type": "OptionStyleTextAlignmentHorzValue"}},
						{"line_height": {"type": "OptionStyleLineHeightValue"}},
						{"letter_spacing": {"type": "OptionStyleLetterSpacingValue"}},
						{"word_spacing": {"type": "OptionStyleWordSpacingValue"}},
						{"tab_width": {"type": "OptionStyleTabWidthValue"}},
						{"cursor": {"type": "OptionStyleCursorValue"}},
						{"box_shadow_left": {"type": "OptionBoxShadowPreDisplayItemValue"}},
						{"box_shadow_right": {"type": "OptionBoxShadowPreDisplayItemValue"}},
						{"box_shadow_top": {"type": "OptionBoxShadowPreDisplayItemValue"}},
						{"box_shadow_bottom": {"type": "OptionBoxShadowPreDisplayItemValue"}},
						{"border_top_color": {"type": "OptionStyleBorderTopColorValue"}},
						{"border_left_color": {"type": "OptionStyleBorderLeftColorValue"}},
						{"border_right_color": {"type": "OptionStyleBorderRightColorValue"}},
						{"border_bottom_color": {"type": "OptionStyleBorderBottomColorValue"}},
						{"border_top_style": {"type": "OptionStyleBorderTopStyleValue"}},
						{"border_left_style": {"type": "OptionStyleBorderLeftStyleValue"}},
						{"border_right_style": {"type": "OptionStyleBorderRightStyleValue"}},
						{"border_bottom_style": {"type": "OptionStyleBorderBottomStyleValue"}},
						{"border_top_left_radius": {"type": "OptionStyleBorderTopLeftRadiusValue"}},
						{"border_top_right_radius": {"type": "OptionStyleBorderTopRightRadiusValue"}},
						{"border_bottom_left_radius": {"type": "OptionStyleBorderBottomLeftRadiusValue"}},
						{"border_bottom_right_radius": {"type": "OptionStyleBorderBottomRightRadiusValue"}},
						{"opacity": {"type": "OptionStyleOpacityValue"}},
						{"transform": {"type": "OptionStyleTransformVecValue"}},
						{"transform_origin": {"type": "OptionStyleTransformOriginValue"}},
						{"perspective_origin": {"type": "OptionStylePerspectiveOriginValue"}},
						{"backface_visibility": {"type": "OptionStyleBackfaceVisibilityValue"}}
					]
				},
				"RectLayout": {
					"external": "azul_impl::css::RectLayout",
					"struct_fields": [
						{"display": {"type": "OptionLayoutDisplayValue"}},
						{"float": {"type": "OptionLayoutFloatValue"}},
						{"box_sizing": {"type": "OptionLayoutBoxSizingValue"}},
						{"width": {"type": "OptionLayoutWidthValue"}},
						{"height": {"type": "OptionLayoutHeightValue"}},
						{"min_width": {"type": "OptionLayoutMinWidthValue"}},
						{"min_height": {"type": "OptionLayoutMinHeightValue"}},
						{"max_width": {"type": "OptionLayoutMaxWidthValue"}},
						{"max_height": {"type": "OptionLayoutMaxHeightValue"}},
						{"position": {"type": "OptionLayoutPositionValue"}},
						{"top": {"type": "OptionLayoutTopValue"}},
						{"bottom": {"type": "OptionLayoutBottomValue"}},
						{"right": {"type": "OptionLayoutRightValue"}},
						{"left": {"type": "OptionLayoutLeftValue"}},
						{"padding_top": {"type": "OptionLayoutPaddingTopValue"}},
						{"padding_bottom": {"type": "OptionLayoutPaddingBottomValue"}},
						{"padding_left": {"type": "OptionLayoutPaddingLeftValue"}},
						{"padding_right": {"type": "OptionLayoutPaddingRightValue"}},
						{"margin_top": {"type": "OptionLayoutMarginTopValue"}},
						{"margin_bottom": {"type": "OptionLayoutMarginBottomValue"}},
						{"margin_left": {"type": "OptionLayoutMarginLeftValue"}},
						{"margin_right": {"type": "OptionLayoutMarginRightValue"}},
						{"border_top_width": {"type": "OptionStyleBorderTopWidthValue"}},
						{"border_left_width": {"type": "OptionStyleBorderLeftWidthValue"}},
						{"border_right_width": {"type": "OptionStyleBorderRightWidthValue"}},
						{"border_bottom_width": {"type": "OptionStyleBorderBottomWidthValue"}},
						{"overflow_x": {"type": "OptionOverflowValue"}},
						{"overflow_y": {"type": "OptionOverflowValue"}},
						{"direction": {"type": "OptionLayoutDirectionValue"}},
						{"wrap": {"type": "OptionLayoutWrapValue"}},
						{"flex_grow": {"type": "OptionLayoutFlexGrowValue"}},
						{"flex_shrink": {"type": "OptionLayoutFlexShrinkValue"}},
						{"justify_content": {"type": "OptionLayoutJustifyContentValue"}},
						{"align_items": {"type": "OptionLayoutAlignItemsValue"}},
						{"align_content": {"type": "OptionLayoutAlignContentValue"}}
					]
				},
				"CascadedCssPropertyWithSource": {
					"external": "azul_impl::styled_dom::CascadedCssPropertyWithSource",
					"struct_fields": [
						{"prop": {"type": "CssProperty"}},
						{"source": {"type": "CssPropertySource"}}
					]
				},
				"CssPropertySource": {
					"external": "azul_impl::styled_dom::CssPropertySource",
					"enum_fields": [
						{"Css": {"type": "CssPath"}},
						{"Inline": {}}
					]
				},
				"StyledNodeState": {
					"external": "azul_impl::styled_dom::StyledNodeState",
					"derive": ["Copy"],
					"enum_fields": [
						{"Uninitialized": {}},
						{"Normal": {}},
						{"Hover": {}},
						{"Active": {}},
						{"Focused": {}}
					]
				},
				"StyledNode": {
					"external": "azul_impl::styled_dom::StyledNode",
					"struct_fields": [
						{"css_constraints": {"type": "CascadedCssPropertyWithSourceVec", "doc": "Full list of all applied CSS rules (with source mapping) after cascading"}},
						{"hover_css_constraints": {"type": "CascadedCssPropertyWithSourceVec", "doc": "Full list of all applied CSS rules (with source mapping) after cascading"}},
						{"active_css_constraints": {"type": "CascadedCssPropertyWithSourceVec", "doc": "Full list of all applied CSS rules (with source mapping) after cascading"}},
						{"focus_css_constraints": {"type": "CascadedCssPropertyWithSourceVec", "doc": "Full list of all applied CSS rules (with source mapping) after cascading"}},
						{"state": {"type": "StyledNodeState", "doc": ""}},
						{"tag_id": {"type": "OptionTagId", "doc": "Optional hit-testing tag ID (NOTE: The tag ID has to be adjusted after the layout is done (to account for scroll tags))"}},
						{"style": {"type": "RectStyle", "doc": "Final computed rect style, after all CSS rules are applied in order"}},
						{"layout": {"type": "RectLayout", "doc": "Final computed rect layout, after all CSS rules are applied in order"}}
					]
				},
				"TagId": {
					"external": "azul_impl::styled_dom::AzTagId",
					"derive": ["Copy"],
					"struct_fields": [
						{"inner": {"type": "u64"}}
					]
				},
				"TagIdToNodeIdMapping": {
					"external": "azul_impl::styled_dom::TagIdToNodeIdMapping",
					"derive": ["Copy"],
					"struct_fields": [
						{"tag_id": {"type": "TagId"}},
						{"node_id": {"type": "NodeId"}},
						{"tab_index": {"type": "OptionTabIndex"}}
					]
				},
				"ParentWithNodeDepth": {
					"external": "azul_impl::styled_dom::ParentWithNodeDepth",
					"derive": ["Copy"],
					"struct_fields": [
						{"depth": {"type": "usize"}},
						{"node_id": {"type": "NodeId"}}
					]
				},
				"ContentGroup": {
					"external": "azul_impl::styled_dom::ContentGroup",
					"struct_fields": [
						{"root": {"type": "NodeId" }},
						{"children": {"type": "ContentGroupVec"}}
					]
				},
				"StyledDom": {
					"external": "azul_impl::styled_dom::StyledDom",
					"struct_fields": [
						{"root": {"type": "NodeId" }},
						{"node_hierarchy": {"type": "NodeVec" }},
						{"node_data": {"type": "NodeDataVec" }},
						{"styled_nodes": {"type": "StyledNodeVec" }},
						{"cascade_info": {"type": "CascadeInfoVec" }},
						{"tag_ids_to_node_ids": {"type": "TagIdsToNodeIdsMappingVec" }},
						{"non_leaf_nodes": {"type": "ParentWithNodeDepthVec" }},
						{"rects_in_rendering_order": {"type": "ContentGroup" }}
					],
					"constructors": {
						"new": {
							"doc": "Styles a `Dom` with the given `Css`, returning the `StyledDom` - complexity `O(count(dom_nodes) * count(css_blocks))`: make sure that the `Dom` and the `Css` are as small as possible, use inline CSS if the performance isn't good enough",
							"fn_args": [
								{"dom": "Dom"},
								{"css": "Css"}
							],
							"fn_body":"AzStyledDom::new(dom, css)"
						}
					},
					"functions": {
						"append": {
							"doc": "Appends an already styled list of DOM nodes to the current `dom.root` - complexity `O(count(dom.dom_nodes))`",
							"fn_args": [
								{"self": "refmut"},
								{"dom": "StyledDom"}
							],
							"fn_body": "styleddom.append(dom);"
						}
					}
				}
			}
		},
		"dom": {
			"doc": "`Dom` construction and configuration",
			"classes": {
				"Dom": {
					"external": "azul_impl::dom::Dom",
					"struct_fields": [
						{"root": {"type": "NodeData"}},
						{"children": {"type": "DomVec"}},
						{"estimated_total_children": {"type": "usize"}}
					],
					"constructors": {
						"new": {
							"doc": "Creates a new node with the given `NodeType`",
							"fn_args": [
								{"node_type": "NodeType"}
							],
							"fn_body":"Dom::new(node_type)"
						},
						"div": {
							"doc": "Creates a new `div` node",
							"fn_body":"Dom::div()"
						},
						"body": {
							"doc": "Creates a new `body` node",
							"fn_body":"Dom::body()"
						},
						"label": {
							"doc": "Creates a new `p` node with a given `String` as the text contents",
							"fn_args": [
								{"text": "String"}
							],
							"fn_body": "Dom::label(text)"
						},
						"text": {
							"doc": "Creates a new `p` node from a (cached) text referenced by a `TextId`",
							"fn_args": [
								{"text_id": "TextId"}
							],
							"fn_body": "Dom::text(text_id)"
						},
						"image": {
							"doc": "Creates a new `img` node from a (cached) text referenced by a `ImageId`",
							"fn_args": [
								{"image_id": "ImageId"}
							],
							"fn_body": "Dom::image(image_id)"
						},
						"gl_texture": {
							"doc": "Creates a new node which will render an OpenGL texture after the layout step is finished. See the documentation for [GlCallback]() for more info about OpenGL rendering callbacks.",
							"fn_args": [
								{"data": "RefAny"},
								{"callback": "GlCallbackType"}
							],
							"fn_body": "Dom::gl_texture(callback, data)"
						},
						"iframe": {
							"doc": "Creates a new node with a callback that will return a `Dom` after being layouted. See the documentation for [IFrameCallback]() for more info about iframe callbacks.",
							"fn_args": [
								{"data": "RefAny"},
								{"callback": "IFrameCallbackType"}
							],
							"fn_body": "Dom::iframe(callback, data)"
						}
					},
					"functions": {
						"add_id": {
							"doc": "Adds a CSS ID (`#something`) to the DOM node",
							"fn_args": [
								{"self": "refmut"},
								{"id": "String"}
							],
							"fn_body": "dom.add_id(id);"
						},
						"with_id": {
							"doc": "Same as [`Dom::add_id`](#method.add_id), but as a builder method",
							"fn_args": [
								{"self": "mut value"},
								{"id": "String"}
							],
							"returns": "Dom",
							"fn_body": "az_dom_add_id(&mut dom, id); dom"
						},
						"set_ids": {
							"doc": "Same as calling [`Dom::add_id`](#method.add_id) for each CSS ID, but this function **replaces** all current CSS IDs",
							"fn_args": [
								{"self": "refmut"},
								{"ids": "StringVec"}
							],
							"fn_body": "dom.set_ids(ids);"
						},
						"with_ids": {
							"doc": "Same as [`Dom::set_ids`](#method.set_ids), but as a builder method",
							"fn_args": [
								{"self": "mut value"},
								{"ids": "StringVec"}
							],
							"returns": "Dom",
							"fn_body": "az_dom_set_ids(&mut dom, ids); dom"
						},
						"add_class": {
							"doc": "Adds a CSS class (`.something`) to the DOM node",
							"fn_args": [
								{"self": "refmut"},
								{"class": "String"}
							],
							"fn_body": "dom.add_class(class);"
						},
						"with_class": {
							"doc": "Same as [`Dom::add_class`](#method.add_class), but as a builder method",
							"fn_args": [
								{"self": "mut value"},
								{"class": "String"}
							],
							"returns": "Dom",
							"fn_body": "az_dom_add_class(&mut dom, class); dom"
						},
						"set_classes": {
							"doc": "Same as calling [`Dom::add_class`](#method.add_class) for each class, but this function **replaces** all current classes",
							"fn_args": [
								{"self": "refmut"},
								{"classes": "StringVec"}
							],
							"fn_body": "dom.set_classes(classes);"
						},
						"with_classes": {
							"doc": "Same as [`Dom::set_classes`](#method.set_classes), but as a builder method",
							"fn_args": [
								{"self": "mut value"},
								{"classes": "StringVec"}
							],
							"returns": "Dom",
							"fn_body": "az_dom_set_classes(&mut dom, classes); dom"
						},
						"add_callback": {
							"doc": "Adds a [`Callback`](callbacks/type.Callback) that acts on the `data` the `event` happens",
							"fn_args": [
								{"self": "refmut"},
								{"event": "EventFilter"},
								{"data": "RefAny"},
								{"callback": "CallbackType"}
							],
							"fn_body": "dom.add_callback(event, callback, data);"
						},
						"with_callback": {
							"doc": "Same as [`Dom::add_callback`](#method.add_callback), but as a builder method",
							"fn_args": [
								{"self": "mut value"},
								{"event": "EventFilter"},
								{"data": "RefAny"},
								{"callback": "CallbackType"}
							],
							"returns": "Dom",
							"fn_body": "az_dom_add_callback(&mut dom, event, data, callback); dom"
						},
						"set_dataset": {
							"doc": "Adds a dataset to the `Dom` root",
							"fn_args": [
								{"self": "refmut"},
								{"data": "RefAny"}
							],
							"fn_body": "dom.set_dataset(data);"
						},
						"with_dataset": {
							"doc": "Same as [`Dom::set_dataset`](#method.set_dataset), but as a builder method",
							"fn_args": [
								{"self": "mut value"},
								{"data": "RefAny"}
							],
							"returns": "Dom",
							"fn_body": "az_dom_set_dataset(&mut dom, data); dom"
						},
						"add_inline_css": {
							"doc": "Overrides the CSS property of this DOM node with a value (for example `\"width = 200px\"`)",
							"fn_args": [
								{"self": "refmut"},
								{"prop": "CssProperty"}
							],
							"fn_body": "dom.add_inline_css(prop);"
						},
						"with_inline_css": {
							"doc": "Same as [`Dom::add_inline_css`](#method.add_inline_css), but as a builder method",
							"fn_args": [
								{"self": "mut value"},
								{"prop": "CssProperty"}
							],
							"returns": "Dom",
							"fn_body": "az_dom_add_inline_css(&mut dom, prop); dom"
						},
						"add_inline_hover_css": {
							"doc": "Overrides the CSS property of this DOM node with a value (for example `\"width = 200px\"`)",
							"fn_args": [
								{"self": "refmut"},
								{"prop": "CssProperty"}
							],
							"fn_body": "dom.add_inline_hover_css(prop);"
						},
						"with_inline_hover_css": {
							"doc": "Same as [`Dom::add_inline_hover_css`](#method.add_inline_hover_css), but as a builder method",
							"fn_args": [
								{"self": "mut value"},
								{"prop": "CssProperty"}
							],
							"returns": "Dom",
							"fn_body": "az_dom_add_inline_hover_css(&mut dom, prop); dom"
						},
						"add_inline_active_css": {
							"doc": "Overrides the CSS property of this DOM node with a value (for example `\"width = 200px\"`)",
							"fn_args": [
								{"self": "refmut"},
								{"prop": "CssProperty"}
							],
							"fn_body": "dom.add_inline_active_css(prop);"
						},
						"with_inline_active_css": {
							"doc": "Same as [`Dom::add_inline_active_css`](#method.add_inline_active_css), but as a builder method",
							"fn_args": [
								{"self": "mut value"},
								{"prop": "CssProperty"}
							],
							"returns": "Dom",
							"fn_body": "az_dom_add_inline_active_css(&mut dom, prop); dom"
						},
						"add_inline_focus_css": {
							"doc": "Overrides the CSS property of this DOM node with a value (for example `\"width = 200px\"`)",
							"fn_args": [
								{"self": "refmut"},
								{"prop": "CssProperty"}
							],
							"fn_body": "dom.add_inline_focus_css(prop);"
						},
						"with_inline_focus_css": {
							"doc": "Same as [`Dom::add_inline_focus_css`](#method.add_inline_active_css), but as a builder method",
							"fn_args": [
								{"self": "mut value"},
								{"prop": "CssProperty"}
							],
							"returns": "Dom",
							"fn_body": "az_dom_add_inline_focus_css(&mut dom, prop); dom"
						},
						"set_is_draggable": {
							"doc": "Sets the `is_draggable` attribute of this DOM node (default: false)",
							"fn_args": [
								{"self": "refmut"},
								{"is_draggable": "bool"}
							],
							"fn_body": "dom.set_is_draggable(is_draggable);"
						},
						"with_clip_mask": {
							"doc": "Same as [`Dom::set_clip_mask`](#method.set_clip_mask), but as a builder method",
							"fn_args": [
								{"self": "mut value"},
								{"clip_mask": "OptionImageMask"}
							],
							"returns": "Dom",
							"fn_body": "az_dom_set_clip_mask(&mut dom, clip_mask); dom"
						},
						"set_clip_mask": {
							"doc": "Sets the `clip_mask` attribute of this DOM node (default: None)",
							"fn_args": [
								{"self": "refmut"},
								{"clip_mask": "OptionImageMask"}
							],
							"fn_body": "dom.set_clip_mask(clip_mask);"
						},
						"is_draggable": {
							"doc": "Same as [`Dom::set_is_draggable`](#method.set_is_draggable), but as a builder method",
							"fn_args": [
								{"self": "mut value"},
								{"is_draggable": "bool"}
							],
							"returns": "Dom",
							"fn_body": "az_dom_set_is_draggable(&mut dom, is_draggable); dom"
						},
						"set_tab_index": {
							"doc": "Sets the `tabindex` attribute of this DOM node (makes an element focusable - default: None)",
							"fn_args": [
								{"self": "refmut"},
								{"tab_index": "OptionTabIndex"}
							],
							"fn_body": "dom.set_tab_index(tab_index);"
						},
						"with_tab_index": {
							"doc": "Same as [`Dom::set_tab_index`](#method.set_tab_index), but as a builder method",
							"fn_args": [
								{"self": "mut value"},
								{"tab_index": "OptionTabIndex"}
							],
							"returns": "Dom",
							"fn_body": "az_dom_set_tab_index(&mut dom, tab_index); dom"
						},
						"add_child": {
							"doc": "Reparents another `Dom` to be the child node of this `Dom`",
							"fn_args": [
								{"self": "refmut"},
								{"child": "Dom"}
							],
							"fn_body": "dom.add_child(child);"
						},
						"with_child": {
							"doc": "Same as [`Dom::add_child`](#method.add_child), but as a builder method",
							"fn_args": [
								{"self": "mut value"},
								{"child": "Dom"}
							],
							"returns": "Dom",
							"fn_body": "az_dom_add_child(&mut dom, child); dom"
						},
						"get_html_string": {
							"doc": "Returns the HTML String for this DOM",
							"fn_args": [
								{"self": "ref"}
							],
							"returns": "String",
							"fn_body": "dom.get_html_string().into()"
						}
					}
				},
				"GlTextureNode": {
					"external": "azul_impl::dom::GlTextureNode",
					"struct_fields": [
						{"callback": {"type": "GlCallback"}},
						{"data": {"type": "RefAny"}}
					]
				},
				"IFrameNode": {
					"external": "azul_impl::dom::IFrameNode",
					"struct_fields": [
						{"callback": {"type": "IFrameCallback"}},
						{"data": {"type": "RefAny"}}
					]
				},
				"CallbackData": {
					"external": "azul_impl::dom::CallbackData",
					"struct_fields": [
						{"event": {"type": "EventFilter"}},
						{"callback": {"type": "Callback"}},
						{"data": {"type": "RefAny"}}
					]
				},
				"ImageMask": {
					"external": "azul_impl::dom::ImageMask",
					"struct_fields": [
						{"image": {"type": "ImageId"}},
						{"rect": {"type": "LogicalRect"}},
						{"repeat": {"type": "bool"}}
					]
				},
				"NodeData": {
					"doc": "Represents one single DOM node (node type, classes, ids and callbacks are stored here)",
					"external": "azul_impl::dom::NodeData",
					"struct_fields": [
						{"node_type": {"type": "NodeType", "doc": "Stores the type of the node, i.e. `div`, `img`, `p`, etc."}},
						{"dataset": {"type": "OptionRefAny", "doc": "`dataset` attribute of the node, useful to store any UI-related data on the node itself"}},
						{"ids": {"type": "StringVec", "doc": "Stores the ids of the node, i.e. `[#main, #something]`"}},
						{"classes": {"type": "StringVec", "doc": "Stores the classes of the node, i.e. `[.myclass, .otherclass]`"}},
						{"callbacks": {"type": "CallbackDataVec", "doc": "Stores the callbacks of the node, i.e. `On::MouseUp` -> `Callback(my_button_click_handler)`"}},
						{"inline_css_props": {"type": "CssPropertyVec", "doc": "Override certain dynamic styling properties for this DOM node"}},
						{"inline_hover_css_props": {"type": "CssPropertyVec", "doc": "Inline CSS properties that are applied on `:hover`"}},
						{"inline_active_css_props": {"type": "CssPropertyVec", "doc": "Inline CSS properties that are applied on `:active`"}},
						{"inline_focus_css_props": {"type": "CssPropertyVec", "doc": "Inline CSS properties that are applied on `:focus`"}},
						{"clip_mask": {"type": "OptionImageMask", "doc": "Optional clip mask for this DOM node"}},
						{"is_draggable": {"type": "bool", "doc": "Whether this div can be dragged or not, similar to `draggable = \"true\"` in HTML"}},
						{"tab_index": {"type": "OptionTabIndex", "doc": "Whether this div can be focused, and if yes, in what default to `None` (not focusable). Note that without this, there can be no `On::FocusReceived` / `On::FocusLost` (equivalent to onfocus). For this reason, this is automatically set to `TabIndex::Auto` if a callback with `On::Focus*` is inserted"}}
					],
					"constructors": {
						"new": {
							"doc": "Creates a new node without any classes or ids from a NodeType",
							"fn_args": [
								{"node_type": "NodeType"}
							],
							"fn_body": "NodeData::new(node_type)"
						},
						"div": {
							"doc": "Creates a new `div` node",
							"fn_body":"NodeData::div()"
						},
						"body": {
							"doc": "Creates a new `body` node",
							"fn_body":"NodeData::body()"
						},
						"label": {
							"doc": "Creates a new `p` node with a given `String` as the text contents",
							"fn_args": [
								{"text": "String"}
							],
							"fn_body": "NodeData::label(text)"
						},
						"text": {
							"doc": "Creates a new `p` node from a (cached) text referenced by a `TextId`",
							"fn_args": [
								{"text_id": "TextId"}
							],
							"fn_body": "NodeData::text(text_id)"
						},
						"image": {
							"doc": "Creates a new `img` node from a (cached) text referenced by a `ImageId`",
							"fn_args": [
								{"image_id": "ImageId"}
							],
							"fn_body": "NodeData::image(image_id)"
						},
						"gl_texture": {
							"doc": "Creates a new node which will render an OpenGL texture after the layout step is finished. See the documentation for [GlCallback]() for more info about OpenGL rendering callbacks.",
							"fn_args": [
								{"data": "RefAny"},
								{"callback": "GlCallbackType"}
							],
							"fn_body": "NodeData::gl_texture(callback, data)"
						},
						"iframe": {
							"doc": "Creates a `NodeData` with a callback that will return a `Dom` after being layouted. See the documentation for [IFrameCallback]() for more info about iframe callbacks.",
							"fn_args": [
								{"data": "RefAny"},
								{"callback": "IFrameCallbackType"}
							],
							"fn_body": "NodeData::iframe(callback, data)"
						},
						"default": {
							"doc": "Creates a default (div) node without any classes",
							"fn_body": "NodeData::default()"
						}
					},
					"functions": {
						"add_id": {
							"doc": "Adds a CSS ID (`#something`) to the `NodeData`",
							"fn_args": [
								{"self": "refmut"},
								{"id": "String"}
							],
							"fn_body": "nodedata.add_id(id);"
						},
						"with_id": {
							"doc": "Same as [`NodeData::add_id`](#method.add_id), but as a builder method",
							"fn_args": [
								{"self": "mut value"},
								{"id": "String"}
							],
							"returns": "NodeData",
							"fn_body": "az_node_data_add_id(&mut nodedata, id); nodedata"
						},
						"set_ids": {
							"doc": "Same as calling [`NodeData::add_id`](#method.add_id) for each CSS ID, but this function **replaces** all current CSS IDs",
							"fn_args": [
								{"self": "refmut"},
								{"ids": "StringVec"}
							],
							"fn_body": "nodedata.set_ids(ids);"
						},
						"with_ids": {
							"doc": "Same as [`NodeData::set_ids`](#method.set_ids), but as a builder method",
							"fn_args": [
								{"self": "mut value"},
								{"ids": "StringVec"}
							],
							"returns": "NodeData",
							"fn_body": "az_node_data_set_ids(&mut nodedata, ids); nodedata"
						},
						"add_class": {
							"doc": "Adds a CSS class (`.something`) to the `NodeData`",
							"fn_args": [
								{"self": "refmut"},
								{"class": "String"}
							],
							"fn_body": "nodedata.add_class(class);"
						},
						"with_class": {
							"doc": "Same as [`NodeData::add_class`](#method.add_class), but as a builder method",
							"fn_args": [
								{"self": "mut value"},
								{"class": "String"}
							],
							"returns": "NodeData",
							"fn_body": "az_node_data_add_class(&mut nodedata, class); nodedata"
						},
						"set_classes": {
							"doc": "Same as calling [`NodeData::add_class`](#method.add_class) for each class, but this function **replaces** all current classes",
							"fn_args": [
								{"self": "refmut"},
								{"classes": "StringVec"}
							],
							"fn_body": "nodedata.set_classes(classes);"
						},
						"with_classes": {
							"doc": "Same as [`NodeData::set_classes`](#method.set_classes), but as a builder method",
							"fn_args": [
								{"self": "mut value"},
								{"classes": "StringVec"}
							],
							"returns": "NodeData",
							"fn_body": "az_node_data_set_classes(&mut nodedata, classes); nodedata"
						},
						"add_dataset": {
							"doc": "Adds a dataset to the `NodeData`",
							"fn_args": [
								{"self": "refmut"},
								{"data": "RefAny"}
							],
							"fn_body": "nodedata.add_dataset(data);"
						},
						"with_dataset": {
							"doc": "Same as [`NodeData::add_dataset`](#method.add_dataset), but as a builder method",
							"fn_args": [
								{"self": "mut value"},
								{"data": "RefAny"}
							],
							"returns": "NodeData",
							"fn_body": "az_node_data_add_dataset(&mut nodedata, data); nodedata"
						},
						"add_callback": {
							"doc": "Adds a [`Callback`](callbacks/type.Callback) that acts on the `data` the `event` happens",
							"fn_args": [
								{"self": "refmut"},
								{"event": "EventFilter"},
								{"data": "RefAny"},
								{"callback": "CallbackType"}
							],
							"fn_body": "nodedata.add_callback(event, callback, data);"
						},
						"with_callback": {
							"doc": "Same as [`NodeData::add_callback`](#method.add_callback), but as a builder method",
							"fn_args": [
								{"self": "mut value"},
								{"event": "EventFilter"},
								{"data": "RefAny"},
								{"callback": "CallbackType"}
							],
							"returns": "NodeData",
							"fn_body": "az_node_data_add_callback(&mut nodedata, event, data, callback); nodedata"
						},
						"add_inline_css": {
							"doc": "Overrides the CSS property of this `NodeData` node with a value (for example `\"width = 200px\"`)",
							"fn_args": [
								{"self": "refmut"},
								{"prop": "CssProperty"}
							],
							"fn_body": "nodedata.add_inline_css(prop);"
						},
						"with_inline_css": {
							"doc": "Same as [`NodeData::add_inline_css`](#method.add_inline_css), but as a builder method",
							"fn_args": [
								{"self": "mut value"},
								{"prop": "CssProperty"}
							],
							"returns": "NodeData",
							"fn_body": "az_node_data_add_inline_css(&mut nodedata, prop); nodedata"
						},
						"add_inline_hover_css": {
							"doc": "Overrides the CSS property of this `NodeData` node with a value (for example `\"width = 200px\"`)",
							"fn_args": [
								{"self": "refmut"},
								{"prop": "CssProperty"}
							],
							"fn_body": "nodedata.add_inline_hover_css(prop);"
						},
						"with_inline_css": {
							"doc": "Same as [`NodeData::add_inline_hover_css`](#method.add_inline_hover_css), but as a builder method",
							"fn_args": [
								{"self": "mut value"},
								{"prop": "CssProperty"}
							],
							"returns": "NodeData",
							"fn_body": "az_node_data_add_inline_hover_css(&mut nodedata, prop); nodedata"
						},
						"add_inline_active_css": {
							"doc": "Overrides the CSS property of this `NodeData` node with a value (for example `\"width = 200px\"`)",
							"fn_args": [
								{"self": "refmut"},
								{"prop": "CssProperty"}
							],
							"fn_body": "nodedata.add_inline_active_css(prop);"
						},
						"with_inline_css": {
							"doc": "Same as [`NodeData::add_inline_active_css`](#method.add_inline_active_css), but as a builder method",
							"fn_args": [
								{"self": "mut value"},
								{"prop": "CssProperty"}
							],
							"returns": "NodeData",
							"fn_body": "az_node_data_add_inline_active_css(&mut nodedata, prop); nodedata"
						},
						"add_inline_focus_css": {
							"doc": "Overrides the CSS property of this `NodeData` node with a value (for example `\"width = 200px\"`)",
							"fn_args": [
								{"self": "refmut"},
								{"prop": "CssProperty"}
							],
							"fn_body": "nodedata.add_inline_focus_css(prop);"
						},
						"with_inline_css": {
							"doc": "Same as [`NodeData::add_inline_focus_css`](#method.add_inline_focus_css), but as a builder method",
							"fn_args": [
								{"self": "mut value"},
								{"prop": "CssProperty"}
							],
							"returns": "NodeData",
							"fn_body": "az_node_data_add_inline_focus_css(&mut nodedata, prop); nodedata"
						},
						"with_clip_mask": {
							"doc": "Same as [`NodeData::set_clip_mask`](#method.set_clip_mask), but as a builder method",
							"fn_args": [
								{"self": "mut value"},
								{"clip_mask": "OptionImageMask"}
							],
							"returns": "NodeData",
							"fn_body": "az_node_data_set_clip_mask(&mut nodedata, clip_mask); nodedata"
						},
						"set_clip_mask": {
							"doc": "Sets the `clip_mask` attribute of this `NodeData` (default: None)",
							"fn_args": [
								{"self": "refmut"},
								{"clip_mask": "OptionImageMask"}
							],
							"fn_body": "nodedata.set_clip_mask(clip_mask);"
						},
						"set_is_draggable": {
							"doc": "Sets the `is_draggable` attribute of this `NodeData` (default: false)",
							"fn_args": [
								{"self": "refmut"},
								{"is_draggable": "bool"}
							],
							"fn_body": "nodedata.set_is_draggable(is_draggable);"
						},
						"is_draggable": {
							"doc": "Same as [`NodeData::set_is_draggable`](#method.set_is_draggable), but as a builder method",
							"fn_args": [
								{"self": "mut value"},
								{"is_draggable": "bool"}
							],
							"returns": "NodeData",
							"fn_body": "az_node_data_set_is_draggable(&mut nodedata, is_draggable); nodedata"
						},
						"set_tab_index": {
							"doc": "Sets the `tabindex` attribute of this `NodeData` (makes an element focusable - default: None)",
							"fn_args": [
								{"self": "refmut"},
								{"tab_index": "OptionTabIndex"}
							],
							"fn_body": "nodedata.set_tab_index(tab_index);"
						},
						"with_tab_index": {
							"doc": "Same as [`NodeData::set_tab_index`](#method.set_tab_index), but as a builder method",
							"fn_args": [
								{"self": "mut value"},
								{"tab_index": "OptionTabIndex"}
							],
							"returns": "NodeData",
							"fn_body": "az_node_data_set_tab_index(&mut nodedata, tab_index); nodedata"
						}
					}
				},
				"NodeType": {
					"doc": "List of core DOM node types built-into by `azul`",
					"external": "azul_impl::dom::NodeType",
					"enum_fields": [
						{"Div": {"doc": "Regular div with no particular type of data attached"}},
						{"Body": {"doc": "Same as div, but only for the root node"}},
						{"Label": {"type": "String", "doc": "Equivalent to the HTML `<p>` tag, a small label that can be (optionally) be selected by the user"}},
						{"Text": {"type": "TextId", "doc": "Equivalent to the HTML `<p>` tag, but for a larger text whose layout can be cached"}},
						{"Image": {"type": "ImageId", "doc": "Equivalent to the HTML `<img>` tag, references an image via its ID, the ID is created by the `add_image()` function(s)"}},
						{"GlTexture": {"type": "GlTextureNode", "doc": "OpenGL texture, behaves same as a `<canvas>` / `img` node. Can be selected in CSS with the `\"gltexture\"` selector."}},
						{"IFrame": {"type": "IFrameNode", "doc": "Callback that renders a DOM when invoked with a width / height after the layout of the parent DOM is done. Can be selected in CSS with the `\"iframe\"` selector."}}
					]
				},
				"On": {
					"external": "azul_impl::dom::On",
					"derive": ["Copy"],
					"doc": "When to call a callback action - `On::MouseOver`, `On::MouseOut`, etc.",
					"enum_fields": [
						{ "MouseOver": {"doc": "Mouse cursor is hovering over the element"}},
						{ "MouseDown": {"doc": "Mouse cursor has is over element and is pressed (not good for \"click\" events - use `MouseUp` instead)"}},
						{ "LeftMouseDown": {"doc": "(Specialization of `MouseDown`). Fires only if the left mouse button has been pressed while cursor was over the element"}},
						{ "MiddleMouseDown": {"doc": "(Specialization of `MouseDown`). Fires only if the middle mouse button has been pressed while cursor was over the element"}},
						{ "RightMouseDown": {"doc": "(Specialization of `MouseDown`). Fires only if the right mouse button has been pressed while cursor was over the element"}},
						{ "MouseUp": {"doc": "Mouse button has been released while cursor was over the element"}},
						{ "LeftMouseUp": {"doc": "(Specialization of `MouseUp`). Fires only if the left mouse button has been released while cursor was over the element"}},
						{ "MiddleMouseUp": {"doc": "(Specialization of `MouseUp`). Fires only if the middle mouse button has been released while cursor was over the element"}},
						{ "RightMouseUp": {"doc": "(Specialization of `MouseUp`). Fires only if the right mouse button has been released while cursor was over the element"}},
						{ "MouseEnter": {"doc": "Mouse cursor has entered the element"}},
						{ "MouseLeave": {"doc": "Mouse cursor has left the element"}},
						{ "Scroll": {"doc": "Mousewheel / touchpad scrolling"}},
						{ "TextInput": {"doc": "The window received a unicode character (also respects the system locale)"}},
						{ "VirtualKeyDown": {"doc": "Check `keyboard_state.current_char` to get the current pressed character"}},
						{ "VirtualKeyUp": {"doc": "A **virtual keycode** was pressed. Note: This is only the virtual keycode, not the actual char. If you want to get the character, use `TextInput` instead. **NOTE**: A virtual key does not have to map to a printable character. You can get all currently pressed virtual keycodes in the `keyboard_state.current_virtual_keycodes` and / or just the last keycode in the `keyboard_state.latest_virtual_keycode`."}},
						{ "HoveredFile": {"doc": ""}},
						{ "DroppedFile": {"doc": ""}},
						{ "HoveredFileCancelled": {"doc": ""}},
						{ "FocusReceived": {"doc": ""}},
						{ "FocusLost": {"doc": ""}}
					],
					"functions": {
						"into_event_filter": {
							"doc": "Converts the `On` shorthand into a `EventFilter`",
							"fn_args": [
								{"self": "value"}
							],
							"returns": "EventFilter",
							"fn_body": "on.into()"
						}
					}
				},
				"EventFilter": {
					"external": "azul_impl::dom::EventFilter",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Hover": {"type": "HoverEventFilter" } },
						{ "Not": {"type": "NotEventFilter" } },
						{ "Focus": {"type": "FocusEventFilter" } },
						{ "Window": {"type": "WindowEventFilter" } },
						{ "Component": { "type": "ComponentEventFilter" } },
						{ "Application": { "type": "ApplicationEventFilter" } }
					]
				},
				"HoverEventFilter": {
					"external": "azul_impl::dom::HoverEventFilter",
					"derive": ["Copy"],
					"enum_fields": [
						{ "MouseOver": {}} ,
						{ "MouseDown": {}} ,
						{ "LeftMouseDown": {}} ,
						{ "RightMouseDown": {}} ,
						{ "MiddleMouseDown": {}} ,
						{ "MouseUp": {}} ,
						{ "LeftMouseUp": {}} ,
						{ "RightMouseUp": {}} ,
						{ "MiddleMouseUp": {}} ,
						{ "MouseEnter": {}} ,
						{ "MouseLeave": {}} ,
						{ "Scroll": {}} ,
						{ "ScrollStart": {}} ,
						{ "ScrollEnd": {}} ,
						{ "TextInput": {}} ,
						{ "VirtualKeyDown": {}} ,
						{ "VirtualKeyUp": {}} ,
						{ "HoveredFile": {}} ,
						{ "DroppedFile": {}} ,
						{ "HoveredFileCancelled": {}},
						{"TouchStart": {}},
						{"TouchMove": {}},
						{"TouchEnd": {}},
						{"TouchCancel": {}}
					]
				},
				"FocusEventFilter": {
					"external": "azul_impl::dom::FocusEventFilter",
					"derive": ["Copy"],
					"enum_fields": [
						{ "MouseOver": {}} ,
						{ "MouseDown": {}} ,
						{ "LeftMouseDown": {}} ,
						{ "RightMouseDown": {}} ,
						{ "MiddleMouseDown": {}} ,
						{ "MouseUp": {}} ,
						{ "LeftMouseUp": {}} ,
						{ "RightMouseUp": {}} ,
						{ "MiddleMouseUp": {}} ,
						{ "MouseEnter": {}} ,
						{ "MouseLeave": {}} ,
						{ "Scroll": {}} ,
						{ "ScrollStart": {}} ,
						{ "ScrollEnd": {}} ,
						{ "TextInput": {}} ,
						{ "VirtualKeyDown": {}} ,
						{ "VirtualKeyUp": {}} ,
						{ "FocusReceived": {}} ,
						{ "FocusLost": {}}
					]
				},
				"NotEventFilter": {
					"external": "azul_impl::dom::NotEventFilter",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Hover": {"type": "HoverEventFilter" } },
						{ "Focus": {"type": "FocusEventFilter" } }
					]
				},
				"WindowEventFilter": {
					"external": "azul_impl::dom::WindowEventFilter",
					"derive": ["Copy"],
					"enum_fields": [
						{ "MouseOver": {}} ,
						{ "MouseDown": {}} ,
						{ "LeftMouseDown": {}} ,
						{ "RightMouseDown": {}} ,
						{ "MiddleMouseDown": {}} ,
						{ "MouseUp": {}} ,
						{ "LeftMouseUp": {}} ,
						{ "RightMouseUp": {}} ,
						{ "MiddleMouseUp": {}} ,
						{ "MouseEnter": {}} ,
						{ "MouseLeave": {}} ,
						{ "Scroll": {}} ,
						{ "ScrollStart": {}} ,
						{ "ScrollEnd": {}} ,
						{ "TextInput": {}} ,
						{ "VirtualKeyDown": {}} ,
						{ "VirtualKeyUp": {}} ,
						{ "HoveredFile": {}} ,
						{ "DroppedFile": {}} ,
						{ "HoveredFileCancelled": {}},
						{ "Resized": {}},
						{ "Moved": {}},
						{ "TouchStart": {}},
						{ "TouchMove": {}},
						{ "TouchEnd": {}},
						{ "TouchCancel": {}},
						{ "FocusReceived": {}},
						{ "FocusLost": {}},
						{ "CloseRequested": {}},
						{ "ThemeChanged": {}}
					]
				},
				"ComponentEventFilter": {
					"external": "azul_impl::dom::ComponentEventFilter",
					"derive": ["Copy"],
					"enum_fields": [
						{"AfterMount": {}},
						{"BeforeUnmount": {}},
						{"NodeResized": {}}
					]
				},
				"ApplicationEventFilter": {
					"external": "azul_impl::dom::ApplicationEventFilter",
					"derive": ["Copy"],
					"enum_fields": [
						{"DeviceConnected": {}},
						{"DeviceDisconnected": {}}
					]
				},
				"TabIndex": {
					"external": "azul_impl::dom::TabIndex",
					"derive": ["Copy"],
					"enum_fields": [
						{ "Auto": { "doc": "Automatic tab index, similar to simply setting `focusable = \"true\"` or `tabindex = 0`, (both have the effect of making the element focusable)" }} ,
						{ "OverrideInParent": { "type": "usize", "doc": " Set the tab index in relation to its parent element (`tabindex = n`)" }} ,
						{ "NoKeyboardFocus": { "doc": "Elements can be focused in callbacks, but are not accessible via keyboard / tab navigation (`tabindex = -1` ) "}}
					]
				}
			}
		},
		"gl": {
			"doc": "OpenGl helper types (`Texture`, `GlContext`, etc.)",
			"classes": {
				"GlShaderPrecisionFormatReturn": {
					"external": "azul_impl::gl::GlShaderPrecisionFormatReturn",
					"derive": ["Copy"],
					"struct_fields": [
						{"_0": {"type": "i32"}},
						{"_1": {"type": "i32"}},
						{"_2": {"type": "i32"}}
					]
				},
				"VertexAttributeType": {
					"external": "azul_impl::gl::VertexAttributeType",
					"derive": ["Copy"],
					"enum_fields": [
						{"Float": {"doc": "Vertex attribute has type `f32`"}},
						{"Double": {"doc": "Vertex attribute has type `f64`"}},
						{"UnsignedByte": {"doc": "Vertex attribute has type `u8`"}},
						{"UnsignedShort": {"doc": "Vertex attribute has type `u16`"}},
						{"UnsignedInt": {"doc": "Vertex attribute has type `u32`"}}
					]
				},
				"VertexAttribute": {
					"external": "azul_impl::gl::VertexAttribute",
					"struct_fields": [
						{"name": {"type": "String"}},
						{"layout_location": {"type": "OptionUsize"}},
						{"attribute_type": {"type": "VertexAttributeType"}},
						{"item_count": {"type": "usize"}}
					]
				},
				"VertexLayout": {
					"external": "azul_impl::gl::VertexLayout",
					"struct_fields": [
						{"fields": {"type": "VertexAttributeVec"}}
					]
				},
				"VertexArrayObject": {
					"external": "azul_impl::gl::VertexArrayObject",
					"clone": false,
					"struct_fields": [
						{"vertex_layout": {"type": "VertexLayout"}},
						{"vao_id": {"type": "u32"}},
						{"gl_context": {"type": "GlContextPtr"}}
					]
				},
				"IndexBufferFormat": {
					"external": "azul_impl::gl::IndexBufferFormat",
					"derive": ["Copy"],
					"enum_fields": [
					    {"Points": {}},
					    {"Lines": {}},
					    {"LineStrip": {}},
					    {"Triangles": {}},
					    {"TriangleStrip": {}},
					    {"TriangleFan": {}}
					]
				},
				"VertexBuffer": {
					"external": "azul_impl::gl::VertexBuffer",
					"clone": false,
					"struct_fields": [
						{"vertex_buffer_id": {"type": "u32"}},
						{"vertex_buffer_len": {"type": "usize"}},
						{"vao": {"type": "VertexArrayObject"}},
						{"index_buffer_id": {"type": "u32"}},
						{"index_buffer_len": {"type": "usize"}},
						{"index_buffer_format": {"type": "IndexBufferFormat"}}
					]
				},
				"GlType": {
					"external": "azul_impl::gl::AzGlType",
					"derive": ["Copy"],
					"enum_fields": [
						{"Gl": {}},
						{"Gles": {}}
					]
				},
				"DebugMessage": {
					"external": "azul_impl::gl::AzDebugMessage",
					"struct_fields": [
						{"message": {"type": "String"}},
						{"source": {"type": "u32"}},
						{"ty": {"type": "u32"}},
						{"id": {"type": "u32"}},
						{"severity": {"type": "u32"}}
					]
				},
				"U8VecRef": {
					"external": "azul_impl::gl::U8VecRef",
					"doc": "C-ABI stable reexport of `&[u8]`",
					"clone": false,
					"struct_fields": [
						{"ptr": {"type": "*const u8"}},
						{"len": {"type": "usize"}}
					]
				},
				"U8VecRefMut": {
					"external": "azul_impl::gl::U8VecRefMut",
					"doc": "C-ABI stable reexport of `&mut [u8]`",
					"clone": false,
					"struct_fields": [
						{"ptr": {"type": "*mut u8"}},
						{"len": {"type": "usize"}}
					]
				},
				"F32VecRef": {
					"external": "azul_impl::gl::F32VecRef",
					"doc": "C-ABI stable reexport of `&[f32]`",
					"clone": false,
					"struct_fields": [
						{"ptr": {"type": "*const f32"}},
						{"len": {"type": "usize"}}
					]
				},
				"I32VecRef": {
					"external": "azul_impl::gl::I32VecRef",
					"doc": "C-ABI stable reexport of `&[i32]`",
					"clone": false,
					"struct_fields": [
						{"ptr": {"type": "*const i32"}},
						{"len": {"type": "usize"}}
					]
				},
				"GLuintVecRef": {
					"external": "azul_impl::gl::GLuintVecRef",
					"doc": "C-ABI stable reexport of `&[GLuint]` aka `&[u32]`",
					"clone": false,
					"struct_fields": [
						{"ptr": {"type": "*const u32"}},
						{"len": {"type": "usize"}}
					]
				},
				"GLenumVecRef": {
					"external": "azul_impl::gl::GLenumVecRef",
					"doc": "C-ABI stable reexport of `&[GLenum]` aka `&[u32]`",
					"clone": false,
					"struct_fields": [
						{"ptr": {"type": "*const u32"}},
						{"len": {"type": "usize"}}
					]
				},
				"GLintVecRefMut": {
					"external": "azul_impl::gl::GLintVecRefMut",
					"doc": "C-ABI stable reexport of `&mut [GLint]` aka `&mut [i32]`",
					"clone": false,
					"struct_fields": [
						{"ptr": {"type": "*mut i32"}},
						{"len": {"type": "usize"}}
					]
				},
				"GLint64VecRefMut": {
					"external": "azul_impl::gl::GLint64VecRefMut",
					"doc": "C-ABI stable reexport of `&mut [GLint64]` aka `&mut [i64]`",
					"clone": false,
					"struct_fields": [
						{"ptr": {"type": "*mut i64"}},
						{"len": {"type": "usize"}}
					]
				},
				"GLbooleanVecRefMut": {
					"external": "azul_impl::gl::GLbooleanVecRefMut",
					"doc": "C-ABI stable reexport of `&mut [GLboolean]` aka `&mut [u8]`",
					"clone": false,
					"struct_fields": [
						{"ptr": {"type": "*mut u8"}},
						{"len": {"type": "usize"}}
					]
				},
				"GLfloatVecRefMut": {
					"external": "azul_impl::gl::GLfloatVecRefMut",
					"doc": "C-ABI stable reexport of `&mut [GLfloat]` aka `&mut [f32]`",
					"clone": false,
					"struct_fields": [
						{"ptr": {"type": "*mut f32"}},
						{"len": {"type": "usize"}}
					]
				},
				"RefstrVecRef": {
					"external": "azul_impl::gl::RefstrVecRef",
					"doc": "C-ABI stable reexport of `&[Refstr]` aka `&mut [&str]`",
					"clone": false,
					"struct_fields": [
						{"ptr": {"type": "*const Refstr"}},
						{"len": {"type": "usize"}}
					]
				},
				"Refstr": {
					"external": "azul_impl::gl::Refstr",
					"doc": "C-ABI stable reexport of `&str`",
					"clone": false,
					"struct_fields": [
						{"ptr": {"type": "*const u8"}},
						{"len": {"type": "usize"}}
					]
				},
				"GetProgramBinaryReturn": {
					"external": "azul_impl::gl::GetProgramBinaryReturn",
					"doc": "C-ABI stable reexport of `(U8Vec, u32)`",
					"struct_fields": [
						{"_0": {"type": "U8Vec"}},
						{"_1": {"type": "u32"}}
					]
				},
				"GetActiveAttribReturn": {
					"external": "azul_impl::gl::GetActiveAttribReturn",
					"doc": "C-ABI stable reexport of `(i32, u32, AzString)`",
					"struct_fields": [
						{"_0": {"type": "i32"}},
						{"_1": {"type": "u32"}},
						{"_2": {"type": "String"}}
					]
				},
				"GLsyncPtr": {
					"external": "azul_impl::gl::GLsyncPtr",
					"doc": "C-ABI stable reexport of `*const gleam::gl::GLsync`",
					"treat_as_boxed_object": true,
					"clone": false,
					"struct_fields": [
						{"ptr": {"type": "*const c_void"}}
					]
				},
				"GetActiveUniformReturn": {
					"external": "azul_impl::gl::GetActiveUniformReturn",
					"doc": "C-ABI stable reexport of `(i32, u32, AzString)`",
					"struct_fields": [
						{"_0": {"type": "i32"}},
						{"_1": {"type": "u32"}},
						{"_2": {"type": "String"}}
					]
				},
				"GlContextPtr": {
					"external": "azul_impl::gl::GlContextPtr",
					"struct_fields": [
						{"ptr": {"type": "*const c_void"}}
					],
					"functions": {
					    "get_type": {
					        "fn_args": [
					            {"self": "ref"}
					        ],
					        "fn_body": "glcontextptr.get_type()",
					        "returns": "GlType"
					    },
					    "buffer_data_untyped": {
					        "fn_args": [
					            {"self": "ref"},
					            {"target": "u32"},
					            {"size": "isize"},
					            {"data": "*const c_void"},
					            {"usage": "u32"}
					        ],
					        "fn_body": "glcontextptr.buffer_data_untyped(target, size, data, usage)"
					    },
					    "buffer_sub_data_untyped": {
					        "fn_args": [
					            {"self": "ref"},
					            {"target": "u32"},
					            {"offset": "isize"},
					            {"size": "isize"},
					            {"data": "*const c_void"}
					        ],
					        "fn_body": "glcontextptr.buffer_sub_data_untyped(target, offset, size, data)"
					    },
					    "map_buffer": {
					        "fn_args": [
					            {"self": "ref"},
					            {"target": "u32"},
					            {"access": "u32"}
					        ],
					        "fn_body": "glcontextptr.map_buffer(target, access)",
					        "returns": "*mut c_void"
					    },
					    "map_buffer_range": {
					        "fn_args": [
					            {"self": "ref"},
					            {"target": "u32"},
					            {"offset": "isize"},
					            {"length": "isize"},
					            {"access": "u32"}
					        ],
					        "fn_body": "glcontextptr.map_buffer_range(target, offset, length, access)",
					        "returns": "*mut c_void"
					    },
					    "unmap_buffer": {
					        "fn_args": [
					            {"self": "ref"},
					            {"target": "u32"}
					        ],
					        "fn_body": "glcontextptr.unmap_buffer(target)",
					        "returns": "u8"
					    },
					    "tex_buffer": {
					        "fn_args": [
					            {"self": "ref"},
					            {"target": "u32"},
					            {"internal_format": "u32"},
					            {"buffer": "u32"}
					        ],
					        "fn_body": "glcontextptr.tex_buffer(target, internal_format, buffer)"
					    },
					    "shader_source": {
					        "fn_args": [
					            {"self": "ref"},
					            {"shader": "u32"},
					            {"strings": "StringVec"}
					        ],
					        "fn_body": "glcontextptr.shader_source(shader, strings)"
					    },
					    "read_buffer": {
					        "fn_args": [
					            {"self": "ref"},
					            {"mode": "u32"}
					        ],
					        "fn_body": "glcontextptr.read_buffer(mode)"
					    },
					    "read_pixels_into_buffer": {
					        "fn_args": [
					            {"self": "ref"},
					            {"x": "i32"},
					            {"y": "i32"},
					            {"width": "i32"},
					            {"height": "i32"},
					            {"format": "u32"},
					            {"pixel_type": "u32"},
					            {"dst_buffer": "U8VecRefMut"}
					        ],
					        "fn_body": "glcontextptr.read_pixels_into_buffer(x, y, width, height, format, pixel_type, dst_buffer)"
					    },
					    "read_pixels": {
					        "fn_args": [
					            {"self": "ref"},
					            {"x": "i32"},
					            {"y": "i32"},
					            {"width": "i32"},
					            {"height": "i32"},
					            {"format": "u32"},
					            {"pixel_type": "u32"}
					        ],
					        "fn_body": "glcontextptr.read_pixels(x, y, width, height, format, pixel_type)",
					        "returns": "U8Vec"
					    },
					    "read_pixels_into_pbo": {
					        "fn_args": [
					            {"self": "ref"},
					            {"x": "i32"},
					            {"y": "i32"},
					            {"width": "i32"},
					            {"height": "i32"},
					            {"format": "u32"},
					            {"pixel_type": "u32"}
					        ],
					        "fn_body": "glcontextptr.read_pixels_into_pbo(x, y, width, height, format, pixel_type)"
					    },
					    "sample_coverage": {
					        "fn_args": [
					            {"self": "ref"},
					            {"value": "f32"},
					            {"invert": "bool"}
					        ],
					        "fn_body": "glcontextptr.sample_coverage(value, invert)"
					    },
					    "polygon_offset": {
					        "fn_args": [
					            {"self": "ref"},
					            {"factor": "f32"},
					            {"units": "f32"}
					        ],
					        "fn_body": "glcontextptr.polygon_offset(factor, units)"
					    },
					    "pixel_store_i": {
					        "fn_args": [
					            {"self": "ref"},
					            {"name": "u32"},
					            {"param": "i32"}
					        ],
					        "fn_body": "glcontextptr.pixel_store_i(name, param)"
					    },
					    "gen_buffers": {
					        "fn_args": [
					            {"self": "ref"},
					            {"n": "i32"}
					        ],
					        "fn_body": "glcontextptr.gen_buffers(n)",
					        "returns": "GLuintVec"
					    },
					    "gen_renderbuffers": {
					        "fn_args": [
					            {"self": "ref"},
					            {"n": "i32"}
					        ],
					        "fn_body": "glcontextptr.gen_renderbuffers(n)",
					        "returns": "GLuintVec"
					    },
					    "gen_framebuffers": {
					        "fn_args": [
					            {"self": "ref"},
					            {"n": "i32"}
					        ],
					        "fn_body": "glcontextptr.gen_framebuffers(n)",
					        "returns": "GLuintVec"
					    },
					    "gen_textures": {
					        "fn_args": [
					            {"self": "ref"},
					            {"n": "i32"}
					        ],
					        "fn_body": "glcontextptr.gen_textures(n)",
					        "returns": "GLuintVec"
					    },
					    "gen_vertex_arrays": {
					        "fn_args": [
					            {"self": "ref"},
					            {"n": "i32"}
					        ],
					        "fn_body": "glcontextptr.gen_vertex_arrays(n)",
					        "returns": "GLuintVec"
					    },
					    "gen_queries": {
					        "fn_args": [
					            {"self": "ref"},
					            {"n": "i32"}
					        ],
					        "fn_body": "glcontextptr.gen_queries(n)",
					        "returns": "GLuintVec"
					    },
					    "begin_query": {
					        "fn_args": [
					            {"self": "ref"},
					            {"target": "u32"},
					            {"id": "u32"}
					        ],
					        "fn_body": "glcontextptr.begin_query(target, id)"
					    },
					    "end_query": {
					        "fn_args": [
					            {"self": "ref"},
					            {"target": "u32"}
					        ],
					        "fn_body": "glcontextptr.end_query(target)"
					    },
					    "query_counter": {
					        "fn_args": [
					            {"self": "ref"},
					            {"id": "u32"},
					            {"target": "u32"}
					        ],
					        "fn_body": "glcontextptr.query_counter(id, target)"
					    },
					    "get_query_object_iv": {
					        "fn_args": [
					            {"self": "ref"},
					            {"id": "u32"},
					            {"pname": "u32"}
					        ],
					        "fn_body": "glcontextptr.get_query_object_iv(id, pname)",
					        "returns": "i32"
					    },
					    "get_query_object_uiv": {
					        "fn_args": [
					            {"self": "ref"},
					            {"id": "u32"},
					            {"pname": "u32"}
					        ],
					        "fn_body": "glcontextptr.get_query_object_uiv(id, pname)",
					        "returns": "u32"
					    },
					    "get_query_object_i64v": {
					        "fn_args": [
					            {"self": "ref"},
					            {"id": "u32"},
					            {"pname": "u32"}
					        ],
					        "fn_body": "glcontextptr.get_query_object_i64v(id, pname)",
					        "returns": "i64"
					    },
					    "get_query_object_ui64v": {
					        "fn_args": [
					            {"self": "ref"},
					            {"id": "u32"},
					            {"pname": "u32"}
					        ],
					        "fn_body": "glcontextptr.get_query_object_ui64v(id, pname)",
					        "returns": "u64"
					    },
					    "delete_queries": {
					        "fn_args": [
					            {"self": "ref"},
					            {"queries": "GLuintVecRef"}
					        ],
					        "fn_body": "glcontextptr.delete_queries(queries)"
					    },
					    "delete_vertex_arrays": {
					        "fn_args": [
					            {"self": "ref"},
					            {"vertex_arrays": "GLuintVecRef"}
					        ],
					        "fn_body": "glcontextptr.delete_vertex_arrays(vertex_arrays)"
					    },
					    "delete_buffers": {
					        "fn_args": [
					            {"self": "ref"},
					            {"buffers": "GLuintVecRef"}
					        ],
					        "fn_body": "glcontextptr.delete_buffers(buffers)"
					    },
					    "delete_renderbuffers": {
					        "fn_args": [
					            {"self": "ref"},
					            {"renderbuffers": "GLuintVecRef"}
					        ],
					        "fn_body": "glcontextptr.delete_renderbuffers(renderbuffers)"
					    },
					    "delete_framebuffers": {
					        "fn_args": [
					            {"self": "ref"},
					            {"framebuffers": "GLuintVecRef"}
					        ],
					        "fn_body": "glcontextptr.delete_framebuffers(framebuffers)"
					    },
					    "delete_textures": {
					        "fn_args": [
					            {"self": "ref"},
					            {"textures": "GLuintVecRef"}
					        ],
					        "fn_body": "glcontextptr.delete_textures(textures)"
					    },
					    "framebuffer_renderbuffer": {
					        "fn_args": [
					            {"self": "ref"},
					            {"target": "u32"},
					            {"attachment": "u32"},
					            {"renderbuffertarget": "u32"},
					            {"renderbuffer": "u32"}
					        ],
					        "fn_body": "glcontextptr.framebuffer_renderbuffer(target, attachment, renderbuffertarget, renderbuffer)"
					    },
					    "renderbuffer_storage": {
					        "fn_args": [
					            {"self": "ref"},
					            {"target": "u32"},
					            {"internalformat": "u32"},
					            {"width": "i32"},
					            {"height": "i32"}
					        ],
					        "fn_body": "glcontextptr.renderbuffer_storage(target, internalformat, width, height)"
					    },
					    "depth_func": {
					        "fn_args": [
					            {"self": "ref"},
					            {"func": "u32"}
					        ],
					        "fn_body": "glcontextptr.depth_func(func)"
					    },
					    "active_texture": {
					        "fn_args": [
					            {"self": "ref"},
					            {"texture": "u32"}
					        ],
					        "fn_body": "glcontextptr.active_texture(texture)"
					    },
					    "attach_shader": {
					        "fn_args": [
					            {"self": "ref"},
					            {"program": "u32"},
					            {"shader": "u32"}
					        ],
					        "fn_body": "glcontextptr.attach_shader(program, shader)"
					    },
					    "bind_attrib_location": {
					        "fn_args": [
					            {"self": "ref"},
					            {"program": "u32"},
					            {"index": "u32"},
					            {"name": "Refstr"}
					        ],
					        "fn_body": "glcontextptr.bind_attrib_location(program, index, name)"
					    },
					    "get_uniform_iv": {
					        "fn_args": [
					            {"self": "ref"},
					            {"program": "u32"},
					            {"location": "i32"},
					            {"result": "GLintVecRefMut"}
					        ],
					        "fn_body": "glcontextptr.get_uniform_iv(program, location, result)"
					    },
					    "get_uniform_fv": {
					        "fn_args": [
					            {"self": "ref"},
					            {"program": "u32"},
					            {"location": "i32"},
					            {"result": "GLfloatVecRefMut"}
					        ],
					        "fn_body": "glcontextptr.get_uniform_fv(program, location, result)"
					    },
					    "get_uniform_block_index": {
					        "fn_args": [
					            {"self": "ref"},
					            {"program": "u32"},
					            {"name": "Refstr"}
					        ],
					        "fn_body": "glcontextptr.get_uniform_block_index(program, name)",
					        "returns": "u32"
					    },
					    "get_uniform_indices": {
					        "fn_args": [
					            {"self": "ref"},
					            {"program": "u32"},
					            {"names": "RefstrVecRef"}
					        ],
					        "fn_body": "glcontextptr.get_uniform_indices(program, names)",
					        "returns": "GLuintVec"
					    },
					    "bind_buffer_base": {
					        "fn_args": [
					            {"self": "ref"},
					            {"target": "u32"},
					            {"index": "u32"},
					            {"buffer": "u32"}
					        ],
					        "fn_body": "glcontextptr.bind_buffer_base(target, index, buffer)"
					    },
					    "bind_buffer_range": {
					        "fn_args": [
					            {"self": "ref"},
					            {"target": "u32"},
					            {"index": "u32"},
					            {"buffer": "u32"},
					            {"offset": "isize"},
					            {"size": "isize"}
					        ],
					        "fn_body": "glcontextptr.bind_buffer_range(target, index, buffer, offset, size)"
					    },
					    "uniform_block_binding": {
					        "fn_args": [
					            {"self": "ref"},
					            {"program": "u32"},
					            {"uniform_block_index": "u32"},
					            {"uniform_block_binding": "u32"}
					        ],
					        "fn_body": "glcontextptr.uniform_block_binding(program, uniform_block_index, uniform_block_binding)"
					    },
					    "bind_buffer": {
					        "fn_args": [
					            {"self": "ref"},
					            {"target": "u32"},
					            {"buffer": "u32"}
					        ],
					        "fn_body": "glcontextptr.bind_buffer(target, buffer)"
					    },
					    "bind_vertex_array": {
					        "fn_args": [
					            {"self": "ref"},
					            {"vao": "u32"}
					        ],
					        "fn_body": "glcontextptr.bind_vertex_array(vao)"
					    },
					    "bind_renderbuffer": {
					        "fn_args": [
					            {"self": "ref"},
					            {"target": "u32"},
					            {"renderbuffer": "u32"}
					        ],
					        "fn_body": "glcontextptr.bind_renderbuffer(target, renderbuffer)"
					    },
					    "bind_framebuffer": {
					        "fn_args": [
					            {"self": "ref"},
					            {"target": "u32"},
					            {"framebuffer": "u32"}
					        ],
					        "fn_body": "glcontextptr.bind_framebuffer(target, framebuffer)"
					    },
					    "bind_texture": {
					        "fn_args": [
					            {"self": "ref"},
					            {"target": "u32"},
					            {"texture": "u32"}
					        ],
					        "fn_body": "glcontextptr.bind_texture(target, texture)"
					    },
					    "draw_buffers": {
					        "fn_args": [
					            {"self": "ref"},
					            {"bufs": "GLenumVecRef"}
					        ],
					        "fn_body": "glcontextptr.draw_buffers(bufs)"
					    },
					    "tex_image_2d": {
					        "fn_args": [
					            {"self": "ref"},
					            {"target": "u32"},
					            {"level": "i32"},
					            {"internal_format": "i32"},
					            {"width": "i32"},
					            {"height": "i32"},
					            {"border": "i32"},
					            {"format": "u32"},
					            {"ty": "u32"},
					            {"opt_data": "OptionU8VecRef"}
					        ],
					        "fn_body": "glcontextptr.tex_image_2d(target, level, internal_format, width, height, border, format, ty, opt_data)"
					    },
					    "compressed_tex_image_2d": {
					        "fn_args": [
					            {"self": "ref"},
					            {"target": "u32"},
					            {"level": "i32"},
					            {"internal_format": "u32"},
					            {"width": "i32"},
					            {"height": "i32"},
					            {"border": "i32"},
					            {"data": "U8VecRef"}
					        ],
					        "fn_body": "glcontextptr.compressed_tex_image_2d(target, level, internal_format, width, height, border, data)"
					    },
					    "compressed_tex_sub_image_2d": {
					        "fn_args": [
					            {"self": "ref"},
					            {"target": "u32"},
					            {"level": "i32"},
					            {"xoffset": "i32"},
					            {"yoffset": "i32"},
					            {"width": "i32"},
					            {"height": "i32"},
					            {"format": "u32"},
					            {"data": "U8VecRef"}
					        ],
					        "fn_body": "glcontextptr.compressed_tex_sub_image_2d(target, level, xoffset, yoffset, width, height, format, data)"
					    },
					    "tex_image_3d": {
					        "fn_args": [
					            {"self": "ref"},
					            {"target": "u32"},
					            {"level": "i32"},
					            {"internal_format": "i32"},
					            {"width": "i32"},
					            {"height": "i32"},
					            {"depth": "i32"},
					            {"border": "i32"},
					            {"format": "u32"},
					            {"ty": "u32"},
					            {"opt_data": "OptionU8VecRef"}
					        ],
					        "fn_body": "glcontextptr.tex_image_3d(target, level, internal_format, width, height, depth, border, format, ty, opt_data)"
					    },
					    "copy_tex_image_2d": {
					        "fn_args": [
					            {"self": "ref"},
					            {"target": "u32"},
					            {"level": "i32"},
					            {"internal_format": "u32"},
					            {"x": "i32"},
					            {"y": "i32"},
					            {"width": "i32"},
					            {"height": "i32"},
					            {"border": "i32"}
					        ],
					        "fn_body": "glcontextptr.copy_tex_image_2d(target, level, internal_format, x, y, width, height, border)"
					    },
					    "copy_tex_sub_image_2d": {
					        "fn_args": [
					            {"self": "ref"},
					            {"target": "u32"},
					            {"level": "i32"},
					            {"xoffset": "i32"},
					            {"yoffset": "i32"},
					            {"x": "i32"},
					            {"y": "i32"},
					            {"width": "i32"},
					            {"height": "i32"}
					        ],
					        "fn_body": "glcontextptr.copy_tex_sub_image_2d(target, level, xoffset, yoffset, x, y, width, height)"
					    },
					    "copy_tex_sub_image_3d": {
					        "fn_args": [
					            {"self": "ref"},
					            {"target": "u32"},
					            {"level": "i32"},
					            {"xoffset": "i32"},
					            {"yoffset": "i32"},
					            {"zoffset": "i32"},
					            {"x": "i32"},
					            {"y": "i32"},
					            {"width": "i32"},
					            {"height": "i32"}
					        ],
					        "fn_body": "glcontextptr.copy_tex_sub_image_3d(target, level, xoffset, yoffset, zoffset, x, y, width, height)"
					    },
					    "tex_sub_image_2d": {
					        "fn_args": [
					            {"self": "ref"},
					            {"target": "u32"},
					            {"level": "i32"},
					            {"xoffset": "i32"},
					            {"yoffset": "i32"},
					            {"width": "i32"},
					            {"height": "i32"},
					            {"format": "u32"},
					            {"ty": "u32"},
					            {"data": "U8VecRef"}
					        ],
					        "fn_body": "glcontextptr.tex_sub_image_2d(target, level, xoffset, yoffset, width, height, format, ty, data)"
					    },
					    "tex_sub_image_2d_pbo": {
					        "fn_args": [
					            {"self": "ref"},
					            {"target": "u32"},
					            {"level": "i32"},
					            {"xoffset": "i32"},
					            {"yoffset": "i32"},
					            {"width": "i32"},
					            {"height": "i32"},
					            {"format": "u32"},
					            {"ty": "u32"},
					            {"offset": "usize"}
					        ],
					        "fn_body": "glcontextptr.tex_sub_image_2d_pbo(target, level, xoffset, yoffset, width, height, format, ty, offset)"
					    },
					    "tex_sub_image_3d": {
					        "fn_args": [
					            {"self": "ref"},
					            {"target": "u32"},
					            {"level": "i32"},
					            {"xoffset": "i32"},
					            {"yoffset": "i32"},
					            {"zoffset": "i32"},
					            {"width": "i32"},
					            {"height": "i32"},
					            {"depth": "i32"},
					            {"format": "u32"},
					            {"ty": "u32"},
					            {"data": "U8VecRef"}
					        ],
					        "fn_body": "glcontextptr.tex_sub_image_3d(target, level, xoffset, yoffset, zoffset, width, height, depth, format, ty, data)"
					    },
					    "tex_sub_image_3d_pbo": {
					        "fn_args": [
					            {"self": "ref"},
					            {"target": "u32"}, {"level": "i32"}, {"xoffset": "i32"}, {"yoffset": "i32"}, {"zoffset": "i32"}, {"width": "i32"}, {"height": "i32"}, {"depth": "i32"}, {"format": "u32"}, {"ty": "u32"}, {"offset": "usize"}
					        ],
					        "fn_body": "glcontextptr.tex_sub_image_3d_pbo(target, level, xoffset, yoffset, zoffset, width, height, depth, format, ty, offset)"
					    },
					    "tex_storage_2d": {
					        "fn_args": [
					            {"self": "ref"},
					            {"target": "u32"}, {"levels": "i32"}, {"internal_format": "u32"}, {"width": "i32"}, {"height": "i32"}
					        ],
					        "fn_body": "glcontextptr.tex_storage_2d(target, levels, internal_format, width, height)"
					    },
					    "tex_storage_3d": {
					        "fn_args": [
					            {"self": "ref"},
					            {"target": "u32"}, {"levels": "i32"}, {"internal_format": "u32"}, {"width": "i32"}, {"height": "i32"}, {"depth": "i32"}
					        ],
					        "fn_body": "glcontextptr.tex_storage_3d(target, levels, internal_format, width, height, depth)"
					    },
					    "get_tex_image_into_buffer": {
					        "fn_args": [
					            {"self": "ref"},
					            {"target": "u32"}, {"level": "i32"}, {"format": "u32"}, {"ty": "u32"}, {"output": "U8VecRefMut"}
					        ],
					        "fn_body": "glcontextptr.get_tex_image_into_buffer(target, level, format, ty, output)"
					    },
					    "copy_image_sub_data": {
					        "fn_args": [
					            {"self": "ref"},
					            {"src_name": "u32"}, {"src_target": "u32"}, {"src_level": "i32"}, {"src_x": "i32"}, {"src_y": "i32"}, {"src_z": "i32"}, {"dst_name": "u32"}, {"dst_target": "u32"}, {"dst_level": "i32"}, {"dst_x": "i32"}, {"dst_y": "i32"}, {"dst_z": "i32"}, {"src_width": "i32"}, {"src_height": "i32"}, {"src_depth": "i32"}
					        ],
					        "fn_body": "glcontextptr.copy_image_sub_data(src_name, src_target, src_level, src_x, src_y, src_z, dst_name, dst_target, dst_level, dst_x, dst_y, dst_z, src_width, src_height, src_depth)"
					    },
					    "invalidate_framebuffer": {
					        "fn_args": [
					            {"self": "ref"},
					            {"target": "u32"}, {"attachments": "GLenumVecRef"}
					        ],
					        "fn_body": "glcontextptr.invalidate_framebuffer(target, attachments)"
					    },
					    "invalidate_sub_framebuffer": {
					        "fn_args": [
					            {"self": "ref"},
					            {"target": "u32"}, {"attachments": "GLenumVecRef"}, {"xoffset": "i32"}, {"yoffset": "i32"}, {"width": "i32"}, {"height": "i32"}
					        ],
					        "fn_body": "glcontextptr.invalidate_sub_framebuffer(target, attachments, xoffset, yoffset, width, height)"
					    },
					    "get_integer_v": {
					        "fn_args": [
					            {"self": "ref"},
					            {"name": "u32"}, {"result": "GLintVecRefMut"}
					        ],
					        "fn_body": "glcontextptr.get_integer_v(name, result)"
					    },
					    "get_integer_64v": {
					        "fn_args": [
					            {"self": "ref"},
					            {"name": "u32"}, {"result": "GLint64VecRefMut"}
					        ],
					        "fn_body": "glcontextptr.get_integer_64v(name, result)"
					    },
					    "get_integer_iv": {
					        "fn_args": [
					            {"self": "ref"},
					            {"name": "u32"}, {"index": "u32"}, {"result": "GLintVecRefMut"}
					        ],
					        "fn_body": "glcontextptr.get_integer_iv(name, index, result)"
					    },
					    "get_integer_64iv": {
					        "fn_args": [
					            {"self": "ref"},
					            {"name": "u32"}, {"index": "u32"}, {"result": "GLint64VecRefMut"}
					        ],
					        "fn_body": "glcontextptr.get_integer_64iv(name, index, result)"
					    },
					    "get_boolean_v": {
					        "fn_args": [
					            {"self": "ref"},
					            {"name": "u32"}, {"result": "GLbooleanVecRefMut"}
					        ],
					        "fn_body": "glcontextptr.get_boolean_v(name, result)"
					    },
					    "get_float_v": {
					        "fn_args": [
					            {"self": "ref"},
					            {"name": "u32"}, {"result": "GLfloatVecRefMut"}
					        ],
					        "fn_body": "glcontextptr.get_float_v(name, result)"
					    },
					    "get_framebuffer_attachment_parameter_iv": {
					        "fn_args": [
					            {"self": "ref"},
					            {"target": "u32"}, {"attachment": "u32"}, {"pname": "u32"}
					        ],
					        "fn_body": "glcontextptr.get_framebuffer_attachment_parameter_iv(target, attachment, pname)",
					        "returns": "i32"
					    },
					    "get_renderbuffer_parameter_iv": {
					        "fn_args": [
					            {"self": "ref"},
					            {"target": "u32"}, {"pname": "u32"}
					        ],
					        "fn_body": "glcontextptr.get_renderbuffer_parameter_iv(target, pname)",
					        "returns": "i32"
					    },
					    "get_tex_parameter_iv": {
					        "fn_args": [
					            {"self": "ref"},
					            {"target": "u32"}, {"name": "u32"}
					        ],
					        "fn_body": "glcontextptr.get_tex_parameter_iv(target, name)",
					        "returns": "i32"
					    },
					    "get_tex_parameter_fv": {
					        "fn_args": [
					            {"self": "ref"},
					            {"target": "u32"}, {"name": "u32"}
					        ],
					        "fn_body": "glcontextptr.get_tex_parameter_fv(target, name)",
					        "returns": "f32"
					    },
					    "tex_parameter_i": {
					        "fn_args": [
					            {"self": "ref"},
					            {"target": "u32"}, {"pname": "u32"}, {"param": "i32"}
					        ],
					        "fn_body": "glcontextptr.tex_parameter_i(target, pname, param)"
					    },
					    "tex_parameter_f": {
					        "fn_args": [
					            {"self": "ref"},
					            {"target": "u32"}, {"pname": "u32"}, {"param": "f32"}
					        ],
					        "fn_body": "glcontextptr.tex_parameter_f(target, pname, param)"
					    },
					    "framebuffer_texture_2d": {
					        "fn_args": [
					            {"self": "ref"},
					            {"target": "u32"}, {"attachment": "u32"}, {"textarget": "u32"}, {"texture": "u32"}, {"level": "i32"}
					        ],
					        "fn_body": "glcontextptr.framebuffer_texture_2d(target, attachment, textarget, texture, level)"
					    },
					    "framebuffer_texture_layer": {
					        "fn_args": [
					            {"self": "ref"},
					            {"target": "u32"}, {"attachment": "u32"}, {"texture": "u32"}, {"level": "i32"}, {"layer": "i32"}
					        ],
					        "fn_body": "glcontextptr.framebuffer_texture_layer(target, attachment, texture, level, layer)"
					    },
					    "blit_framebuffer": {
					        "fn_args": [
					            {"self": "ref"},
					            {"src_x0": "i32"}, {"src_y0": "i32"}, {"src_x1": "i32"}, {"src_y1": "i32"}, {"dst_x0": "i32"}, {"dst_y0": "i32"}, {"dst_x1": "i32"}, {"dst_y1": "i32"}, {"mask": "u32"}, {"filter": "u32"}
					        ],
					        "fn_body": "glcontextptr.blit_framebuffer(src_x0, src_y0, src_x1, src_y1, dst_x0, dst_y0, dst_x1, dst_y1, mask, filter)"
					    },
					    "vertex_attrib_4f": {
					        "fn_args": [
					            {"self": "ref"},
					            {"index": "u32"}, {"x": "f32"}, {"y": "f32"}, {"z": "f32"}, {"w": "f32"}
					        ],
					        "fn_body": "glcontextptr.vertex_attrib_4f(index, x, y, z, w)"
					    },
					    "vertex_attrib_pointer_f32": {
					        "fn_args": [
					            {"self": "ref"},
					            {"index": "u32"}, {"size": "i32"}, {"normalized": "bool"}, {"stride": "i32"}, {"offset": "u32"}
					        ],
					        "fn_body": "glcontextptr.vertex_attrib_pointer_f32(index, size, normalized, stride, offset)"
					    },
					    "vertex_attrib_pointer": {
					        "fn_args": [
					            {"self": "ref"},
					            {"index": "u32"}, {"size": "i32"}, {"type_": "u32"}, {"normalized": "bool"}, {"stride": "i32"}, {"offset": "u32"}
					        ],
					        "fn_body": "glcontextptr.vertex_attrib_pointer(index, size, type_, normalized, stride, offset)"
					    },
					    "vertex_attrib_i_pointer": {
					        "fn_args": [
					            {"self": "ref"},
					            {"index": "u32"}, {"size": "i32"}, {"type_": "u32"}, {"stride": "i32"}, {"offset": "u32"}
					        ],
					        "fn_body": "glcontextptr.vertex_attrib_i_pointer(index, size, type_, stride, offset)"
					    },
					    "vertex_attrib_divisor": {
					        "fn_args": [
					            {"self": "ref"},
					            {"index": "u32"}, {"divisor": "u32"}
					        ],
					        "fn_body": "glcontextptr.vertex_attrib_divisor(index, divisor)"
					    },
					    "viewport": {
					        "fn_args": [
					            {"self": "ref"},
					            {"x": "i32"},
					            {"y": "i32"},
					            {"width": "i32"},
					            {"height": "i32"}
					        ],
					        "fn_body": "glcontextptr.viewport(x, y, width, height)"
					    },
					    "scissor": {
					        "fn_args": [
					            {"self": "ref"},
					            {"x": "i32"},
					            {"y": "i32"},
					            {"width": "i32"},
					            {"height": "i32"}
					        ],
					        "fn_body": "glcontextptr.scissor(x, y, width, height)"
					    },
					    "line_width": {
					        "fn_args": [
					            {"self": "ref"},
					            {"width": "f32"}
					        ],
					        "fn_body": "glcontextptr.line_width(width)"
					    },
					    "use_program": {
					        "fn_args": [
					            {"self": "ref"},
					            {"program": "u32"}
					        ],
					        "fn_body": "glcontextptr.use_program(program)"
					    },
					    "validate_program": {
					        "fn_args": [
					            {"self": "ref"},
					            {"program": "u32"}
					        ],
					        "fn_body": "glcontextptr.validate_program(program)"
					    },
					    "draw_arrays": {
					        "fn_args": [
					            {"self": "ref"},
					            {"mode": "u32"}, {"first": "i32"}, {"count": "i32"}
					        ],
					        "fn_body": "glcontextptr.draw_arrays(mode, first, count)"
					    },
					    "draw_arrays_instanced": {
					        "fn_args": [
					            {"self": "ref"},
					            {"mode": "u32"}, {"first": "i32"}, {"count": "i32"}, {"primcount": "i32"}
					        ],
					        "fn_body": "glcontextptr.draw_arrays_instanced(mode, first, count, primcount)"
					    },
					    "draw_elements": {
					        "fn_args": [
					            {"self": "ref"},
					            {"mode": "u32"}, {"count": "i32"}, {"element_type": "u32"}, {"indices_offset": "u32"}
					        ],
					        "fn_body": "glcontextptr.draw_elements(mode, count, element_type, indices_offset)"
					    },
					    "draw_elements_instanced": {
					        "fn_args": [
					            {"self": "ref"},
					            {"mode": "u32"}, {"count": "i32"}, {"element_type": "u32"}, {"indices_offset": "u32"}, {"primcount": "i32"}
					        ],
					        "fn_body": "glcontextptr.draw_elements_instanced(mode, count, element_type, indices_offset, primcount)"
					    },
					    "blend_color": {
					        "fn_args": [
					            {"self": "ref"},
					            {"r": "f32"}, {"g": "f32"}, {"b": "f32"}, {"a": "f32"}
					        ],
					        "fn_body": "glcontextptr.blend_color(r, g, b, a)"
					    },
					    "blend_func": {
					        "fn_args": [
					            {"self": "ref"},
					            {"sfactor": "u32"}, {"dfactor": "u32"}
					        ],
					        "fn_body": "glcontextptr.blend_func(sfactor, dfactor)"
					    },
					    "blend_func_separate": {
					        "fn_args": [
					            {"self": "ref"},
					            {"src_rgb": "u32"}, {"dest_rgb": "u32"}, {"src_alpha": "u32"}, {"dest_alpha": "u32"}
					        ],
					        "fn_body": "glcontextptr.blend_func_separate(src_rgb, dest_rgb, src_alpha, dest_alpha)"
					    },
					    "blend_equation": {
					        "fn_args": [
					            {"self": "ref"},
					            {"mode": "u32"}
					        ],
					        "fn_body": "glcontextptr.blend_equation(mode)"
					    },
					    "blend_equation_separate": {
					        "fn_args": [
					            {"self": "ref"},
					            {"mode_rgb": "u32"}, {"mode_alpha": "u32"}
					        ],
					        "fn_body": "glcontextptr.blend_equation_separate(mode_rgb, mode_alpha)"
					    },
					    "color_mask": {
					        "fn_args": [
					            {"self": "ref"},
					            {"r": "bool"}, {"g": "bool"}, {"b": "bool"}, {"a": "bool"}
					        ],
					        "fn_body": "glcontextptr.color_mask(r, g, b, a)"
					    },
					    "cull_face": {
					        "fn_args": [
					            {"self": "ref"},
					            {"mode": "u32"}
					        ],
					        "fn_body": "glcontextptr.cull_face(mode)"
					    },
					    "front_face": {
					        "fn_args": [
					            {"self": "ref"},
					            {"mode": "u32"}
					        ],
					        "fn_body": "glcontextptr.front_face(mode)"
					    },
					    "enable": {
					        "fn_args": [
					            {"self": "ref"},
					            {"cap": "u32"}
					        ],
					        "fn_body": "glcontextptr.enable(cap)"
					    },
					    "disable": {
					        "fn_args": [
					            {"self": "ref"},
					            {"cap": "u32"}
					        ],
					        "fn_body": "glcontextptr.disable(cap)"
					    },
					    "hint": {
					        "fn_args": [
					            {"self": "ref"},
					            {"param_name": "u32"}, {"param_val": "u32"}
					        ],
					        "fn_body": "glcontextptr.hint(param_name, param_val)"
					    },
					    "is_enabled": {
					        "fn_args": [
					            {"self": "ref"},
					            {"cap": "u32"}
					        ],
					        "fn_body": "glcontextptr.is_enabled(cap)",
					        "returns": "u8"
					    },
					    "is_shader": {
					        "fn_args": [
					            {"self": "ref"},
					            {"shader": "u32"}
					        ],
					        "fn_body": "glcontextptr.is_shader(shader)",
					        "returns": "u8"
					    },
					    "is_texture": {
					        "fn_args": [
					            {"self": "ref"},
					            {"texture": "u32"}
					        ],
					        "fn_body": "glcontextptr.is_texture(texture)",
					        "returns": "u8"
					    },
					    "is_framebuffer": {
					        "fn_args": [
					            {"self": "ref"},
					            {"framebuffer": "u32"}
					        ],
					        "fn_body": "glcontextptr.is_framebuffer(framebuffer)",
					        "returns": "u8"
					    },
					    "is_renderbuffer": {
					        "fn_args": [
					            {"self": "ref"},
					            {"renderbuffer": "u32"}
					        ],
					        "fn_body": "glcontextptr.is_renderbuffer(renderbuffer)",
					        "returns": "u8"
					    },
					    "check_frame_buffer_status": {
					        "fn_args": [
					            {"self": "ref"},
					            {"target": "u32"}
					        ],
					        "fn_body": "glcontextptr.check_frame_buffer_status(target)",
					        "returns": "u32"
					    },
					    "enable_vertex_attrib_array": {
					        "fn_args": [
					            {"self": "ref"},
					            {"index": "u32"}
					        ],
					        "fn_body": "glcontextptr.enable_vertex_attrib_array(index)"
					    },
					    "disable_vertex_attrib_array": {
					        "fn_args": [
					            {"self": "ref"},
					            {"index": "u32"}
					        ],
					        "fn_body": "glcontextptr.disable_vertex_attrib_array(index)"
					    },
					    "uniform_1f": {
					        "fn_args": [
					            {"self": "ref"},
					            {"location": "i32"}, {"v0": "f32"}
					        ],
					        "fn_body": "glcontextptr.uniform_1f(location, v0)"
					    },
					    "uniform_1fv": {
					        "fn_args": [
					            {"self": "ref"},
					            {"location": "i32"}, {"values": "F32VecRef"}
					        ],
					        "fn_body": "glcontextptr.uniform_1fv(location, values)"
					    },
					    "uniform_1i": {
					        "fn_args": [
					            {"self": "ref"},
					            {"location": "i32"}, {"v0": "i32"}
					        ],
					        "fn_body": "glcontextptr.uniform_1i(location, v0)"
					    },
					    "uniform_1iv": {
					        "fn_args": [
					            {"self": "ref"},
					            {"location": "i32"}, {"values": "I32VecRef"}
					        ],
					        "fn_body": "glcontextptr.uniform_1iv(location, values)"
					    },
					    "uniform_1ui": {
					        "fn_args": [
					            {"self": "ref"},
					            {"location": "i32"}, {"v0": "u32"}
					        ],
					        "fn_body": "glcontextptr.uniform_1ui(location, v0)"
					    },
					    "uniform_2f": {
					        "fn_args": [
					            {"self": "ref"},
					            {"location": "i32"}, {"v0": "f32"}, {"v1": "f32"}
					        ],
					        "fn_body": "glcontextptr.uniform_2f(location, v0, v1)"
					    },
					    "uniform_2fv": {
					        "fn_args": [
					            {"self": "ref"},
					            {"location": "i32"}, {"values": "F32VecRef"}
					        ],
					        "fn_body": "glcontextptr.uniform_2fv(location, values)"
					    },
					    "uniform_2i": {
					        "fn_args": [
					            {"self": "ref"},
					            {"location": "i32"}, {"v0": "i32"}, {"v1": "i32"}
					        ],
					        "fn_body": "glcontextptr.uniform_2i(location, v0, v1)"
					    },
					    "uniform_2iv": {
					        "fn_args": [
					            {"self": "ref"},
					            {"location": "i32"}, {"values": "I32VecRef"}
					        ],
					        "fn_body": "glcontextptr.uniform_2iv(location, values)"
					    },
					    "uniform_2ui": {
					        "fn_args": [
					            {"self": "ref"},
					            {"location": "i32"}, {"v0": "u32"}, {"v1": "u32"}
					        ],
					        "fn_body": "glcontextptr.uniform_2ui(location, v0, v1)"
					    },
					    "uniform_3f": {
					        "fn_args": [
					            {"self": "ref"},
					            {"location": "i32"}, {"v0": "f32"}, {"v1": "f32"}, {"v2": "f32"}
					        ],
					        "fn_body": "glcontextptr.uniform_3f(location, v0, v1, v2)"
					    },
					    "uniform_3fv": {
					        "fn_args": [
					            {"self": "ref"},
					            {"location": "i32"}, {"values": "F32VecRef"}
					        ],
					        "fn_body": "glcontextptr.uniform_3fv(location, values)"
					    },
					    "uniform_3i": {
					        "fn_args": [
					            {"self": "ref"},
					            {"location": "i32"}, {"v0": "i32"}, {"v1": "i32"}, {"v2": "i32"}
					        ],
					        "fn_body": "glcontextptr.uniform_3i(location, v0, v1, v2)"
					    },
					    "uniform_3iv": {
					        "fn_args": [
					            {"self": "ref"},
					            {"location": "i32"}, {"values": "I32VecRef"}
					        ],
					        "fn_body": "glcontextptr.uniform_3iv(location, values)"
					    },
					    "uniform_3ui": {
					        "fn_args": [
					            {"self": "ref"},
					            {"location": "i32"}, {"v0": "u32"}, {"v1": "u32"}, {"v2": "u32"}
					        ],
					        "fn_body": "glcontextptr.uniform_3ui(location, v0, v1, v2)"
					    },
					    "uniform_4f": {
					        "fn_args": [
					            {"self": "ref"},
					            {"location": "i32"}, {"x": "f32"}, {"y": "f32"}, {"z": "f32"}, {"w": "f32"}
					        ],
					        "fn_body": "glcontextptr.uniform_4f(location, x, y, z, w)"
					    },
					    "uniform_4i": {
					        "fn_args": [
					            {"self": "ref"},
					            {"location": "i32"}, {"x": "i32"}, {"y": "i32"}, {"z": "i32"}, {"w": "i32"}
					        ],
					        "fn_body": "glcontextptr.uniform_4i(location, x, y, z, w)"
					    },
					    "uniform_4iv": {
					        "fn_args": [
					            {"self": "ref"},
					            {"location": "i32"}, {"values": "I32VecRef"}
					        ],
					        "fn_body": "glcontextptr.uniform_4iv(location, values)"
					    },
					    "uniform_4ui": {
					        "fn_args": [
					            {"self": "ref"},
					            {"location": "i32"}, {"x": "u32"}, {"y": "u32"}, {"z": "u32"}, {"w": "u32"}
					        ],
					        "fn_body": "glcontextptr.uniform_4ui(location, x, y, z, w)"
					    },
					    "uniform_4fv": {
					        "fn_args": [
					            {"self": "ref"},
					            {"location": "i32"}, {"values": "F32VecRef"}
					        ],
					        "fn_body": "glcontextptr.uniform_4fv(location, values)"
					    },
					    "uniform_matrix_2fv": {
					        "fn_args": [
					            {"self": "ref"},
					            {"location": "i32"}, {"transpose": "bool"}, {"value": "F32VecRef"}
					        ],
					        "fn_body": "glcontextptr.uniform_matrix_2fv(location, transpose, value)"
					    },
					    "uniform_matrix_3fv": {
					        "fn_args": [
					            {"self": "ref"},
					            {"location": "i32"}, {"transpose": "bool"}, {"value": "F32VecRef"}
					        ],
					        "fn_body": "glcontextptr.uniform_matrix_3fv(location, transpose, value)"
					    },
					    "uniform_matrix_4fv": {
					        "fn_args": [
					            {"self": "ref"},
					            {"location": "i32"}, {"transpose": "bool"}, {"value": "F32VecRef"}
					        ],
					        "fn_body": "glcontextptr.uniform_matrix_4fv(location, transpose, value)"
					    },
					    "depth_mask": {
					        "fn_args": [
					            {"self": "ref"},
					            {"flag": "bool"}
					        ],
					        "fn_body": "glcontextptr.depth_mask(flag)"
					    },
					    "depth_range": {
					        "fn_args": [
					            {"self": "ref"},
					            {"near": "f64"}, {"far": "f64"}
					        ],
					        "fn_body": "glcontextptr.depth_range(near, far)"
					    },
					    "get_active_attrib": {
					        "fn_args": [
					            {"self": "ref"},
					            {"program": "u32"}, {"index": "u32"}
					        ],
					        "fn_body": "glcontextptr.get_active_attrib(program, index)",
					        "returns": "GetActiveAttribReturn"
					    },
					    "get_active_uniform": {
					        "fn_args": [
					            {"self": "ref"},
					            {"program": "u32"}, {"index": "u32"}
					        ],
					        "fn_body": "glcontextptr.get_active_uniform(program, index)",
					        "returns": "GetActiveUniformReturn"
					    },
					    "get_active_uniforms_iv": {
					        "fn_args": [
					            {"self": "ref"},
					            {"program": "u32"}, {"indices": "GLuintVec"}, {"pname": "u32"}
					        ],
					        "fn_body": "glcontextptr.get_active_uniforms_iv(program, indices, pname)",
					        "returns": "GLintVec"
					    },
					    "get_active_uniform_block_i": {
					        "fn_args": [
					            {"self": "ref"},
					            {"program": "u32"}, {"index": "u32"}, {"pname": "u32"}
					        ],
					        "fn_body": "glcontextptr.get_active_uniform_block_i(program, index, pname)",
					        "returns": "i32"
					    },
					    "get_active_uniform_block_iv": {
					        "fn_args": [
					            {"self": "ref"},
					            {"program": "u32"}, {"index": "u32"}, {"pname": "u32"}
					        ],
					        "fn_body": "glcontextptr.get_active_uniform_block_iv(program, index, pname)",
					        "returns": "GLintVec"
					    },
					    "get_active_uniform_block_name": {
					        "fn_args": [
					            {"self": "ref"},
					            {"program": "u32"}, {"index": "u32"}
					        ],
					        "fn_body": "glcontextptr.get_active_uniform_block_name(program, index)",
					        "returns": "String"
					    },
					    "get_attrib_location": {
					        "fn_args": [
					            {"self": "ref"},
					            {"program": "u32"}, {"name": "Refstr"}
					        ],
					        "fn_body": "glcontextptr.get_attrib_location(program, name)",
					        "returns": "i32"
					    },
					    "get_frag_data_location": {
					        "fn_args": [
					            {"self": "ref"},
					            {"program": "u32"}, {"name": "Refstr"}
					        ],
					        "fn_body": "glcontextptr.get_frag_data_location(program, name)",
					        "returns": "i32"
					    },
					    "get_uniform_location": {
					        "fn_args": [
					            {"self": "ref"},
					            {"program": "u32"}, {"name": "Refstr"}
					        ],
					        "fn_body": "glcontextptr.get_uniform_location(program, name)",
					        "returns": "i32"
					    },
					    "get_program_info_log": {
					        "fn_args": [
					            {"self": "ref"},
					            {"program": "u32"}
					        ],
					        "fn_body": "glcontextptr.get_program_info_log(program)",
					        "returns": "String"
					    },
					    "get_program_iv": {
					        "fn_args": [
					            {"self": "ref"},
					            {"program": "u32"}, {"pname": "u32"}, {"result": "GLintVecRefMut"}
					        ],
					        "fn_body": "glcontextptr.get_program_iv(program, pname, result)"
					    },
					    "get_program_binary": {
					        "fn_args": [
					            {"self": "ref"},
					            {"program": "u32"}
					        ],
					        "fn_body": "glcontextptr.get_program_binary(program)",
					        "returns": "GetProgramBinaryReturn"
					    },
					    "program_binary": {
					        "fn_args": [
					            {"self": "ref"},
					            {"program": "u32"}, {"format": "u32"}, {"binary": "U8VecRef"}
					        ],
					        "fn_body": "glcontextptr.program_binary(program, format, binary)"
					    },
					    "program_parameter_i": {
					        "fn_args": [
					            {"self": "ref"},
					            {"program": "u32"}, {"pname": "u32"}, {"value": "i32"}
					        ],
					        "fn_body": "glcontextptr.program_parameter_i(program, pname, value)"
					    },
					    "get_vertex_attrib_iv": {
					        "fn_args": [
					            {"self": "ref"},
					            {"index": "u32"}, {"pname": "u32"}, {"result": "GLintVecRefMut"}
					        ],
					        "fn_body": "glcontextptr.get_vertex_attrib_iv(index, pname, result)"
					    },
					    "get_vertex_attrib_fv": {
					        "fn_args": [
					            {"self": "ref"},
					            {"index": "u32"}, {"pname": "u32"}, {"result": "GLfloatVecRefMut"}
					        ],
					        "fn_body": "glcontextptr.get_vertex_attrib_fv(index, pname, result)"
					    },
					    "get_vertex_attrib_pointer_v": {
					        "fn_args": [
					            {"self": "ref"},
					            {"index": "u32"}, {"pname": "u32"}
					        ],
					        "fn_body": "glcontextptr.get_vertex_attrib_pointer_v(index, pname)",
					        "returns": "isize"
					    },
					    "get_buffer_parameter_iv": {
					        "fn_args": [
					            {"self": "ref"},
					            {"target": "u32"}, {"pname": "u32"}
					        ],
					        "fn_body": "glcontextptr.get_buffer_parameter_iv(target, pname)",
					        "returns": "i32"
					    },
					    "get_shader_info_log": {
					        "fn_args": [
					            {"self": "ref"},
					            {"shader": "u32"}
					        ],
					        "fn_body": "glcontextptr.get_shader_info_log(shader)",
					        "returns": "String"
					    },
					    "get_string": {
					        "fn_args": [
					            {"self": "ref"},
					            {"which": "u32"}
					        ],
					        "fn_body": "glcontextptr.get_string(which)",
					        "returns": "String"
					    },
					    "get_string_i": {
					        "fn_args": [
					            {"self": "ref"},
					            {"which": "u32"}, {"index": "u32"}
					        ],
					        "fn_body": "glcontextptr.get_string_i(which, index)",
					        "returns": "String"
					    },
					    "get_shader_iv": {
					        "fn_args": [
					            {"self": "ref"},
					            {"shader": "u32"}, {"pname": "u32"}, {"result": "GLintVecRefMut"}
					        ],
					        "fn_body": "glcontextptr.get_shader_iv(shader, pname, result)"
					    },
					    "get_shader_precision_format": {
					        "fn_args": [
					            {"self": "ref"},
					            {"shader_type": "u32"}, {"precision_type": "u32"}
					        ],
					        "fn_body": "glcontextptr.get_shader_precision_format(shader_type, precision_type)",
					        "returns": "GlShaderPrecisionFormatReturn"
					    },
					    "compile_shader": {
					        "fn_args": [
					            {"self": "ref"},
					            {"shader": "u32"}
					        ],
					        "fn_body": "glcontextptr.compile_shader(shader)"
					    },
					    "create_program": {
					        "fn_args": [
					            {"self": "ref"}
					        ],
					        "fn_body": "glcontextptr.create_program()",
					        "returns": "u32"
					    },
					    "delete_program": {
					        "fn_args": [
					            {"self": "ref"},
					            {"program": "u32"}
					        ],
					        "fn_body": "glcontextptr.delete_program(program)"
					    },
					    "create_shader": {
					        "fn_args": [
					            {"self": "ref"},
					            {"shader_type": "u32"}
					        ],
					        "fn_body": "glcontextptr.create_shader(shader_type)",
					        "returns": "u32"
					    },
					    "delete_shader": {
					        "fn_args": [
					            {"self": "ref"},
					            {"shader": "u32"}
					        ],
					        "fn_body": "glcontextptr.delete_shader(shader)"
					    },
					    "detach_shader": {
					        "fn_args": [
					            {"self": "ref"},
					            {"program": "u32"}, {"shader": "u32"}
					        ],
					        "fn_body": "glcontextptr.detach_shader(program, shader)"
					    },
					    "link_program": {
					        "fn_args": [
					            {"self": "ref"},
					            {"program": "u32"}
					        ],
					        "fn_body": "glcontextptr.link_program(program)"
					    },
					    "clear_color": {
					        "fn_args": [
					            {"self": "ref"},
					            {"r": "f32"}, {"g": "f32"}, {"b": "f32"}, {"a": "f32"}
					        ],
					        "fn_body": "glcontextptr.clear_color(r, g, b, a)"
					    },
					    "clear": {
					        "fn_args": [
					            {"self": "ref"},
					            {"buffer_mask": "u32"}
					        ],
					        "fn_body": "glcontextptr.clear(buffer_mask)"
					    },
					    "clear_depth": {
					        "fn_args": [
					            {"self": "ref"},
					            {"depth": "f64"}
					        ],
					        "fn_body": "glcontextptr.clear_depth(depth)"
					    },
					    "clear_stencil": {
					        "fn_args": [
					            {"self": "ref"},
					            {"s": "i32"}
					        ],
					        "fn_body": "glcontextptr.clear_stencil(s)"
					    },
					    "flush": {
					        "fn_args": [
					            {"self": "ref"}
					        ],
					        "fn_body": "glcontextptr.flush()"
					    },
					    "finish": {
					        "fn_args": [
					            {"self": "ref"}
					        ],
					        "fn_body": "glcontextptr.finish()"
					    },
					    "get_error": {
					        "fn_args": [
					            {"self": "ref"}
					        ],
					        "fn_body": "glcontextptr.get_error()",
					        "returns": "u32"
					    },
					    "stencil_mask": {
					        "fn_args": [
					            {"self": "ref"},
					            {"mask": "u32"}
					        ],
					        "fn_body": "glcontextptr.stencil_mask(mask)"
					    },
					    "stencil_mask_separate": {
					        "fn_args": [
					            {"self": "ref"},
					            {"face": "u32"}, {"mask": "u32"}
					        ],
					        "fn_body": "glcontextptr.stencil_mask_separate(face, mask)"
					    },
					    "stencil_func": {
					        "fn_args": [
					            {"self": "ref"},
					            {"func": "u32"}, {"ref_": "i32"}, {"mask": "u32"}
					        ],
					        "fn_body": "glcontextptr.stencil_func(func, ref_, mask)"
					    },
					    "stencil_func_separate": {
					        "fn_args": [
					            {"self": "ref"},
					            {"face": "u32"}, {"func": "u32"}, {"ref_": "i32"}, {"mask": "u32"}
					        ],
					        "fn_body": "glcontextptr.stencil_func_separate(face, func, ref_, mask)"
					    },
					    "stencil_op": {
					        "fn_args": [
					            {"self": "ref"},
					            {"sfail": "u32"}, {"dpfail": "u32"}, {"dppass": "u32"}
					        ],
					        "fn_body": "glcontextptr.stencil_op(sfail, dpfail, dppass)"
					    },
					    "stencil_op_separate": {
					        "fn_args": [
					            {"self": "ref"},
					            {"face": "u32"}, {"sfail": "u32"}, {"dpfail": "u32"}, {"dppass": "u32"}
					        ],
					        "fn_body": "glcontextptr.stencil_op_separate(face, sfail, dpfail, dppass)"
					    },
					    "egl_image_target_texture2d_oes": {
					        "fn_args": [
					            {"self": "ref"},
					            {"target": "u32"}, {"image": "*const c_void"}
					        ],
					        "fn_body": "glcontextptr.egl_image_target_texture2d_oes(target, image)"
					    },
					    "generate_mipmap": {
					        "fn_args": [
					            {"self": "ref"},
					            {"target": "u32"}
					        ],
					        "fn_body": "glcontextptr.generate_mipmap(target)"
					    },
					    "insert_event_marker_ext": {
					        "fn_args": [
					            {"self": "ref"},
					            {"message": "Refstr"}
					        ],
					        "fn_body": "glcontextptr.insert_event_marker_ext(message)"
					    },
					    "push_group_marker_ext": {
					        "fn_args": [
					            {"self": "ref"},
					            {"message": "Refstr"}
					        ],
					        "fn_body": "glcontextptr.push_group_marker_ext(message)"
					    },
					    "pop_group_marker_ext": {
					        "fn_args": [
					            {"self": "ref"}
					        ],
					        "fn_body": "glcontextptr.pop_group_marker_ext()"
					    },
					    "debug_message_insert_khr": {
					        "fn_args": [
					            {"self": "ref"},
					            {"source": "u32"}, {"type_": "u32"}, {"id": "u32"}, {"severity": "u32"}, {"message": "Refstr"}
					        ],
					        "fn_body": "glcontextptr.debug_message_insert_khr(source, type_, id, severity, message)"
					    },
					    "push_debug_group_khr": {
					        "fn_args": [
					            {"self": "ref"},
					            {"source": "u32"}, {"id": "u32"}, {"message": "Refstr"}
					        ],
					        "fn_body": "glcontextptr.push_debug_group_khr(source, id, message)"
					    },
					    "pop_debug_group_khr": {
					        "fn_args": [
					            {"self": "ref"}
					        ],
					        "fn_body": "glcontextptr.pop_debug_group_khr()"
					    },
					    "fence_sync": {
					        "fn_args": [
					            {"self": "ref"},
					            {"condition": "u32"}, {"flags": "u32"}
					        ],
					        "fn_body": "glcontextptr.fence_sync(condition, flags)",
					        "returns": "GLsyncPtr"
					    },
					    "client_wait_sync": {
					        "fn_args": [
					            {"self": "ref"},
					            {"sync": "GLsyncPtr"}, {"flags": "u32"}, {"timeout": "u64"}
					        ],
					        "fn_body": "glcontextptr.client_wait_sync(sync, flags, timeout)"
					    },
					    "wait_sync": {
					        "fn_args": [
					            {"self": "ref"},
					            {"sync": "GLsyncPtr"}, {"flags": "u32"}, {"timeout": "u64"}
					        ],
					        "fn_body": "glcontextptr.wait_sync(sync, flags, timeout)"
					    },
					    "delete_sync": {
					        "fn_args": [
					            {"self": "ref"},
					            {"sync": "GLsyncPtr"}
					        ],
					        "fn_body": "glcontextptr.delete_sync(sync)"
					    },
					    "texture_range_apple": {
					        "fn_args": [
					            {"self": "ref"},
					            {"target": "u32"}, {"data": "U8VecRef"}
					        ],
					        "fn_body": "glcontextptr.texture_range_apple(target, data)"
					    },
					    "gen_fences_apple": {
					        "fn_args": [
					            {"self": "ref"},
					            {"n": "i32"}
					        ],
					        "fn_body": "glcontextptr.gen_fences_apple(n)",
					        "returns": "GLuintVec"
					    },
					    "delete_fences_apple": {
					        "fn_args": [
					            {"self": "ref"},
					            {"fences": "GLuintVecRef"}
					        ],
					        "fn_body": "glcontextptr.delete_fences_apple(fences)"
					    },
					    "set_fence_apple": {
					        "fn_args": [
					            {"self": "ref"},
					            {"fence": "u32"}
					        ],
					        "fn_body": "glcontextptr.set_fence_apple(fence)"
					    },
					    "finish_fence_apple": {
					        "fn_args": [
					            {"self": "ref"},
					            {"fence": "u32"}
					        ],
					        "fn_body": "glcontextptr.finish_fence_apple(fence)"
					    },
					    "test_fence_apple": {
					        "fn_args": [
					            {"self": "ref"},
					            {"fence": "u32"}
					        ],
					        "fn_body": "glcontextptr.test_fence_apple(fence)"
					    },
					    "test_object_apple": {
					        "fn_args": [
					            {"self": "ref"},
					            {"object": "u32"}, {"name": "u32"}
					        ],
					        "fn_body": "glcontextptr.test_object_apple(object, name)",
					        "returns": "u8"
					    },
					    "finish_object_apple": {
					        "fn_args": [
					            {"self": "ref"},
					            {"object": "u32"}, {"name": "u32"}
					        ],
					        "fn_body": "glcontextptr.finish_object_apple(object, name)"
					    },
					    "get_frag_data_index": {
					        "fn_args": [
					            {"self": "ref"},
					            {"program": "u32"}, {"name": "Refstr"}
					        ],
					        "fn_body": "glcontextptr.get_frag_data_index(program, name)",
					        "returns": "i32"
					    },
					    "blend_barrier_khr": {
					        "fn_args": [
					            {"self": "ref"}
					        ],
					        "fn_body": "glcontextptr.blend_barrier_khr()"
					    },
					    "bind_frag_data_location_indexed": {
					        "fn_args": [
					            {"self": "ref"},
					            {"program": "u32"}, {"color_number": "u32"}, {"index": "u32"}, {"name": "Refstr"}
					        ],
					        "fn_body": "glcontextptr.bind_frag_data_location_indexed(program, color_number, index, name)"
					    },
					    "get_debug_messages": {
					        "fn_args": [
					            {"self": "ref"}
					        ],
					        "fn_body": "glcontextptr.get_debug_messages()",
					        "returns": "DebugMessageVec"
					    },
					    "provoking_vertex_angle": {
					        "fn_args": [
					            {"self": "ref"},
					            {"mode": "u32"}
					        ],
					        "fn_body": "glcontextptr.provoking_vertex_angle(mode)"
					    },
					    "gen_vertex_arrays_apple": {
					        "fn_args": [
					            {"self": "ref"},
					            {"n": "i32"}
					        ],
					        "fn_body": "glcontextptr.gen_vertex_arrays_apple(n)",
					        "returns": "GLuintVec"
					    },
					    "bind_vertex_array_apple": {
					        "fn_args": [
					            {"self": "ref"},
					            {"vao": "u32"}
					        ],
					        "fn_body": "glcontextptr.bind_vertex_array_apple(vao)"
					    },
					    "delete_vertex_arrays_apple": {
					        "fn_args": [
					            {"self": "ref"},
					            {"vertex_arrays": "GLuintVecRef"}
					        ],
					        "fn_body": "glcontextptr.delete_vertex_arrays_apple(vertex_arrays)"
					    },
					    "copy_texture_chromium": {
					        "fn_args": [
					            {"self": "ref"},
					            {"source_id": "u32"}, {"source_level": "i32"}, {"dest_target": "u32"}, {"dest_id": "u32"}, {"dest_level": "i32"}, {"internal_format": "i32"}, {"dest_type": "u32"}, {"unpack_flip_y": "u8"}, {"unpack_premultiply_alpha": "u8"}, {"unpack_unmultiply_alpha": "u8"}
					        ],
					        "fn_body": "glcontextptr.copy_texture_chromium(source_id, source_level, dest_target, dest_id, dest_level, internal_format, dest_type, unpack_flip_y, unpack_premultiply_alpha, unpack_unmultiply_alpha)"
					    },
					    "copy_sub_texture_chromium": {
					        "fn_args": [
					            {"self": "ref"},
					            {"source_id": "u32"}, {"source_level": "i32"}, {"dest_target": "u32"}, {"dest_id": "u32"}, {"dest_level": "i32"}, {"x_offset": "i32"}, {"y_offset": "i32"}, {"x": "i32"}, {"y": "i32"}, {"width": "i32"}, {"height": "i32"}, {"unpack_flip_y": "u8"}, {"unpack_premultiply_alpha": "u8"}, {"unpack_unmultiply_alpha": "u8"}
					        ],
					        "fn_body": "glcontextptr.copy_sub_texture_chromium(source_id, source_level, dest_target, dest_id, dest_level, x_offset, y_offset, x, y, width, height, unpack_flip_y, unpack_premultiply_alpha, unpack_unmultiply_alpha)"
					    },
					    "egl_image_target_renderbuffer_storage_oes": {
					        "fn_args": [
					            {"self": "ref"},
					            {"target": "u32"}, {"image": "*const c_void"}
					        ],
					        "fn_body": "glcontextptr.egl_image_target_renderbuffer_storage_oes(target, image)"
					    },
					    "copy_texture_3d_angle": {
					        "fn_args": [
					            {"self": "ref"},
					            {"source_id": "u32"}, {"source_level": "i32"}, {"dest_target": "u32"}, {"dest_id": "u32"}, {"dest_level": "i32"}, {"internal_format": "i32"}, {"dest_type": "u32"}, {"unpack_flip_y": "u8"}, {"unpack_premultiply_alpha": "u8"}, {"unpack_unmultiply_alpha": "u8"}
					        ],
					        "fn_body": "glcontextptr.copy_texture_3d_angle(source_id, source_level, dest_target, dest_id, dest_level, internal_format, dest_type, unpack_flip_y, unpack_premultiply_alpha, unpack_unmultiply_alpha)"
					    },
					    "copy_sub_texture_3d_angle": {
					        "fn_args": [
					            {"self": "ref"},
					            {"source_id": "u32"}, {"source_level": "i32"}, {"dest_target": "u32"}, {"dest_id": "u32"}, {"dest_level": "i32"}, {"x_offset": "i32"}, {"y_offset": "i32"}, {"z_offset": "i32"}, {"x": "i32"}, {"y": "i32"}, {"z": "i32"}, {"width": "i32"}, {"height": "i32"}, {"depth": "i32"}, {"unpack_flip_y": "u8"}, {"unpack_premultiply_alpha": "u8"}, {"unpack_unmultiply_alpha": "u8"}
					        ],
					        "fn_body": "glcontextptr.copy_sub_texture_3d_angle(source_id, source_level, dest_target, dest_id, dest_level, x_offset, y_offset, z_offset, x, y, z, width, height, depth, unpack_flip_y, unpack_premultiply_alpha, unpack_unmultiply_alpha)"
					    }
					}
				},
				"Texture": {
					"external": "azul_impl::gl::Texture",
					"clone": false,
					"struct_fields": [
						{"texture_id": {"type": "u32", "doc": "Raw OpenGL texture ID"}},
						{"flags": {"type": "TextureFlags", "doc": "Hints and flags for optimization purposes"}},
						{"size": {"type": "PhysicalSizeU32", "doc": "Size of this texture (in pixels)"}},
						{"gl_context": {"type": "GlContextPtr", "doc": "A reference-counted pointer to the OpenGL context (so that the texture can be deleted in the destructor)"}}
					]
				},
				"TextureFlags": {
					"external": "azul_impl::gl::TextureFlags",
					"derive": ["Copy"],
					"struct_fields": [
						{"is_opaque": {"type": "bool", "doc": "Whether this texture contains an alpha component"}},
						{"is_video_texture": {"type": "bool", "doc": "Optimization: use the compositor instead of OpenGL for energy efficiency"}}
					],
					"constructors": {
						"default": {
							"doc": "Default texture flags (not opaque, not a video texture)",
							"fn_body": "TextureFlags::default()"
						}
					}
				}
			}
		},
		"resources": {
			"doc": "Struct definition for image / font / text IDs",
			"classes": {
				"TextId": {
					"external": "azul_impl::resources::TextId",
					"derive": ["Copy"],
					"struct_fields": [
						{ "id": { "type": "usize" } }
					],
					"constructors": {
						"new": {
						"doc": "Creates a new, unique `TextId`",
						"fn_body":"TextId::new()"
						}
					}
				},
				"ImageId": {
					"external": "azul_impl::resources::ImageId",
					"derive": ["Copy"],
					"struct_fields": [
						{ "id": { "type": "usize" } }
					],
					"constructors": {
						"new": {
							"doc": "Creates a new, unique `ImageId`",
							"fn_body":"ImageId::new()"
						}
					}
				},
				"FontId": {
					"external": "azul_impl::resources::FontId",
					"derive": ["Copy"],
					"struct_fields": [
						{ "id": { "type": "usize" } }
					],
					"constructors": {
						"new": {
						"doc": "Creates a new, unique `FontId`",
						"fn_body":"FontId::new()"
						}
					}
				},
				"ImageSource": {
					"external": "azul_impl::resources::ImageSource",
					"enum_fields": [
						{ "Embedded": {"type": "U8Vec", "doc": "Bytes of the image, encoded in PNG / JPG / etc. format" } },
						{ "File": {"type": "String", "doc": "References an (encoded!) image as a file from the file system that is loaded when necessary" } },
						{ "Raw": {"type": "RawImage", "doc": "References a decoded (!) `RawImage` as the image source" } }
					]
				},
				"FontSource": {
					"external": "azul_impl::resources::FontSource",
					"enum_fields": [
						{ "Embedded": {"type": "U8Vec", "doc": "Bytes are the bytes of the font file" } },
						{ "File": {"type": "String", "doc": "References a font from a file path, which is loaded when necessary" } },
						{ "System": {"type": "String", "doc": "References a font from from a system font identifier, such as `\"Arial\"` or `\"Helvetica\"`" } }
					]
				},
				"RawImage": {
					"external": "azul_impl::resources::RawImage",
					"struct_fields": [
						{"pixels": {"type": "U8Vec"}},
						{"width": {"type": "usize"}},
						{"height": {"type": "usize"}},
						{"data_format": {"type": "RawImageFormat"}}
					],
					"constructors": {
						"new": {
						"doc": "Creates a new `RawImage` by loading the decoded bytes",
						"fn_args": [
							{"decoded_pixels": "U8Vec"},
							{"width": "usize"},
							{"height": "usize"},
							{"data_format": "RawImageFormat"}
						],
						"fn_body": "RawImage { pixels: decoded_pixels, width, height, data_format: data_format }"
						}
					}
				},
				"RawImageFormat": {
					"external": "azul_impl::resources::RawImageFormat",
					"enum_fields": [
						{ "R8": {"doc": "Bytes are in the R-unsinged-8bit format" } },
						{ "R16": {"doc": "Bytes are in the R-unsinged-16bit format" } },
						{ "RG16": {"doc": "Bytes are in the RG-unsinged-16bit format" } },
						{ "BGRA8": {"doc": "Bytes are in the BRGA-unsigned-8bit format" } },
						{ "RGBAF32": {"doc": "Bytes are in the RGBA-floating-point-32bit format" } },
						{ "RG8": {"doc": "Bytes are in the RG-unsigned-8bit format" } },
						{ "RGBAI32": {"doc": "Bytes are in the RGBA-signed-32bit format" } },
						{ "RGBA8": {"doc": "Bytes are in the RGBA-unsigned-8bit format" } }
					]
				}
			}
		},
		"svg": {
			"doc": "SVG parsing and rendering functions",
			"classes": {
				"SvgMultiPolygon": {
					"external": "azul_impl::svg::SvgMultiPolygon",
					"struct_fields": [
						{"rings": {"type": "SvgPathVec"}}
					]
				},
				"SvgNode": {
					"external": "azul_impl::svg::SvgNode",
					"enum_fields": [
						{"MultiPolygonCollection": {"type": "SvgMultiPolygonVec"}},
						{"MultiPolygon": {"type": "SvgMultiPolygon"}},
						{"Path": {"type": "SvgPath"}},
						{"Circle": {"type": "SvgCircle"}},
						{"Rect": {"type": "SvgRect"}}
					]
				},
				"SvgStyledNode": {
					"external": "azul_impl::svg::SvgStyledNode",
					"struct_fields": [
						{"geometry": {"type": "SvgNode"}},
						{"style": {"type": "SvgStyle"}}
					]
				},
				"SvgCircle": {
					"external": "azul_impl::svg::SvgCircle",
					"derive": ["Copy"],
					"struct_fields": [
						{"center_x": {"type": "f32"}},
						{"center_y": {"type": "f32"}},
						{"radius": {"type": "f32"}}
					]
				},
				"SvgPath": {
					"external": "azul_impl::svg::SvgPath",
					"struct_fields": [
						{"items": {"type": "SvgPathElementVec"}}
					]
				},
				"SvgPathElement": {
					"external": "azul_impl::svg::SvgPathElement",
					"derive": ["Copy"],
					"enum_fields": [
						{"Line": {"type": "SvgLine"}},
						{"QuadraticCurve": {"type": "SvgQuadraticCurve"}},
						{"CubicCurve": {"type": "SvgCubicCurve"}}
					]
				},
				"SvgLine": {
					"external": "azul_impl::svg::SvgLine",
					"derive": ["Copy"],
					"struct_fields": [
						{"start": {"type": "SvgPoint"}},
						{"end": {"type": "SvgPoint"}}
					]
				},
				"SvgPoint": {
					"external": "azul_impl::svg::SvgPoint",
					"derive": ["Copy"],
					"struct_fields": [
						{"x": {"type": "f32"}},
						{"y": {"type": "f32"}}
					]
				},
				"SvgVertex": {
					"external": "azul_impl::svg::SvgVertex",
					"derive": ["Copy"],
					"struct_fields": [
						{"x": {"type": "f32"}},
						{"y": {"type": "f32"}}
					]
				},
				"SvgQuadraticCurve": {
					"external": "azul_impl::svg::SvgQuadraticCurve",
					"derive": ["Copy"],
					"struct_fields": [
						{"start": {"type": "SvgPoint"}},
						{"ctrl": {"type": "SvgPoint"}},
						{"end": {"type": "SvgPoint"}}
					]
				},
				"SvgCubicCurve": {
					"external": "azul_impl::svg::SvgCubicCurve",
					"derive": ["Copy"],
					"struct_fields": [
						{"start": {"type": "SvgPoint"}},
						{"ctrl_1": {"type": "SvgPoint"}},
						{"ctrl_2": {"type": "SvgPoint"}},
						{"end": {"type": "SvgPoint"}}
					]
				},
				"SvgRect": {
					"external": "azul_impl::svg::SvgRect",
					"derive": ["Copy"],
					"struct_fields": [
						{"width": {"type": "f32"}},
						{"height": {"type": "f32"}},
						{"x": {"type": "f32"}},
						{"y": {"type": "f32"}},
						{"radius_top_left": {"type": "f32"}},
						{"radius_top_right": {"type": "f32"}},
						{"radius_bottom_left": {"type": "f32"}},
						{"radius_bottom_right": {"type": "f32"}}
					]
				},
				"TesselatedCPUSvgNode": {
					"external": "azul_impl::svg::TesselatedCPUSvgNode",
					"struct_fields": [
						{"vertices": {"type": "SvgVertexVec"}},
						{"indices": {"type": "U32Vec"}}
					]
				},
				"SvgLineCap": {
					"external": "azul_impl::svg::SvgLineCap",
					"derive": ["Copy"],
					"enum_fields": [
						{"Butt": {}},
						{"Square": {}},
						{"Round": {}}
					]
				},
				"SvgParseOptions": {
					"external": "azul_impl::svg::SvgParseOptions",
					"struct_fields": [
						{"relative_image_path": {"type": "OptionString", "doc": "SVG image path. Used to resolve relative image paths."}},
						{"dpi": {"type": "f32", "doc": "Target DPI. Impact units conversion. Default: 96.0"}},
						{"default_font_family": {"type": "String", "doc": "Default font family. Will be used when no font-family attribute is set in the SVG. Default: Times New Roman"}},
						{"font_size": {"type": "f32", "doc": "A default font size. Will be used when no font-size attribute is set in the SVG. Default: 12"}},
						{"languages": {"type": "StringVec", "doc": "A list of languages. Will be used to resolve a systemLanguage conditional attribute. Format: en, en-US. Default: [en]"}},
						{"shape_rendering": {"type": "ShapeRendering", "doc": "Specifies the default shape rendering method. Will be used when an SVG element's shape-rendering property is set to auto. Default: GeometricPrecision"}},
						{"text_rendering": {"type": "TextRendering", "doc": "Specifies the default text rendering method. Will be used when an SVG element's text-rendering property is set to auto. Default: OptimizeLegibility"}},
						{"image_rendering": {"type": "ImageRendering", "doc": "Specifies the default image rendering method. Will be used when an SVG element's image-rendering property is set to auto. Default: OptimizeQuality"}},
						{"keep_named_groups": {"type": "bool", "doc": "Keep named groups. If set to true, all non-empty groups with id attribute will not be removed. Default: false"}},
						{"fontdb": {"type": "FontDatabase", "doc": "When empty, text elements will be skipped. Default: `System`"}}
					],
					"constructors": {
						"default": {
							"fn_body": "AzSvgParseOptions::default()"
						}
					}
				},
				"ShapeRendering": {
					"external": "azul_impl::svg::ShapeRendering",
					"derive": ["Copy"],
					"enum_fields": [
						{"OptimizeSpeed": {}},
						{"CrispEdges": {}},
						{"GeometricPrecision": {}}
					]
				},
				"TextRendering": {
					"external": "azul_impl::svg::TextRendering",
					"derive": ["Copy"],
					"enum_fields": [
						{"OptimizeSpeed": {}},
						{"OptimizeLegibility": {}},
						{"GeometricPrecision": {}}
					]
				},
				"ImageRendering": {
					"external": "azul_impl::svg::ImageRendering",
					"derive": ["Copy"],
					"enum_fields": [
						{"OptimizeQuality": {}},
						{"OptimizeSpeed": {}}
					]
				},
				"FontDatabase": {
					"external": "azul_impl::svg::FontDatabase",
					"derive": ["Copy"],
					"enum_fields": [
						{"Empty": {}},
						{"System": {}}
					]
				},
				"SvgRenderOptions": {
					"external": "azul_impl::svg::SvgRenderOptions",
					"struct_fields": [
						{"background_color": {"type": "OptionColorU"}},
						{"fit": {"type": "SvgFitTo"}}
					],
					"constructors": {
						"default": {
							"fn_body": "AzSvgRenderOptions::default()"
						}
					}
				},
				"SvgFitTo": {
					"external": "azul_impl::svg::SvgFitTo",
					"derive": ["Copy"],
					"enum_fields": [
						{"Original": {}},
						{"Width": {"type": "u32"}},
						{"Height": {"type": "u32"}},
						{"Zoom": {"type": "f32"}}
					]
				},
				"Svg": {
					"external": "azul_impl::svg::Svg",
					"treat_as_boxed_object": true,
					"struct_fields": [
						{"ptr": {"type": "*mut c_void"}}
					],
					"constructors": {
						"parse": {
							"fn_args": [
								{"svg_bytes": "U8VecRef"},
								{"parse_options": "SvgParseOptions"}
							],
							"returns": "ResultSvgSvgParseError",
							"fn_body": "azul_impl::svg::Svg::parse(svg_bytes.as_slice(), parse_options).into()"
						}
					}
				},
				"SvgXmlNode": {
					"external": "azul_impl::svg::SvgXmlNode",
					"treat_as_boxed_object": true,
					"struct_fields": [
						{"ptr": {"type": "*mut c_void"}}
					]
				},
				"SvgLineJoin": {
					"external": "azul_impl::svg::SvgLineJoin",
					"derive": ["Copy"],
					"enum_fields": [
						{"Miter": {}},
						{"MiterClip": {}},
						{"Round": {}},
						{"Bevel": {}}
					]
				},
				"SvgDashPattern": {
					"external": "azul_impl::svg::SvgDashPattern",
					"derive": ["Copy"],
					"struct_fields": [
						{"offset": {"type": "f32"}},
						{"length_1": {"type": "f32"}},
						{"gap_1": {"type": "f32"}},
						{"length_2": {"type": "f32"}},
						{"gap_2": {"type": "f32"}},
						{"length_3": {"type": "f32"}},
						{"gap_3": {"type": "f32"}}
					]
				},
				"SvgStyle": {
					"external": "azul_impl::svg::SvgStyle",
					"derive": ["Copy"],
					"enum_fields": [
						{"Fill": {"type": "SvgFillStyle"}},
						{"Stroke": {"type": "SvgStrokeStyle"}}
					]
				},
				"SvgFillStyle": {
					"external": "azul_impl::svg::SvgFillStyle",
					"derive": ["Copy"],
					"struct_fields": [
						{"line_join": {"type": "SvgLineJoin", "doc": "How to tesselate edges in a path, default value = `Miter`"}},
						{"miter_limit": {"type": "usize", "doc": "Limit for caps on path edges if line_join is set to `Miter`, (multiplied * 1000 as usize). Must be greater than or equal to 1px (`1000`). Default value = 1px (`1000`)"}},
						{"tolerance": {"type": "usize", "doc": "Maximum allowed distance between path points when tesselating curves. Default value = 0.1px (`100`)"}}
					]
				},
				"SvgStrokeStyle": {
					"external": "azul_impl::svg::SvgStrokeStyle",
					"derive": ["Copy"],
					"struct_fields": [
						{"start_cap": {"type": "SvgLineCap", "doc": "What cap to use at the start of each sub-path, default value = `Butt`"}},
						{"end_cap": {"type": "SvgLineCap", "doc": "What cap to use at the end of each sub-path, default value = `Butt`"}},
						{"line_join": {"type": "SvgLineJoin", "doc": "How to tesselate edges in a path, default value = `Miter`"}},
						{"dash_pattern": {"type": "OptionSvgDashPattern", "doc": "Optional dash pattern for the stroke, default value = `None`"}},
						{"line_width": {"type": "usize", "doc": "Width of the line in px, (multiplied * 1000 as usize). Default value = 1px (`1000`)"}},
						{"miter_limit": {"type": "usize", "doc": "Limit for caps on path edges if line_join is set to `Miter`, (multiplied * 1000 as usize). Must be greater than or equal to 1px (`1000`). Default value = 1px (`1000`)"}},
						{"tolerance": {"type": "usize", "doc": "Maximum allowed distance between path points when tesselating curves. Default value = 0.1px (`100`)"}},
						{"apply_line_width": {"type": "bool", "doc": "When set to false, the generated vertices will all be positioned in the center. The width can be applied later on (eg in a vertex shader) by adding the vertex normal multiplied by the line with to each vertex position. Default value = `false`"}}
					]
				},
				"SvgNodeId": {
					"external": "azul_impl::resources::SvgNodeId",
					"derive": ["Copy"],
					"struct_fields": [
						{"id": {"type": "usize"}}
					]
				}
			}
		},
		"task": {
			"doc": "Asyncronous timers / task / thread handlers for easy async loading",
			"classes": {
				"TimerId": {
					"external": "azul_impl::task::TimerId",
					"derive": ["Copy"],
					"struct_fields": [
						{"id": {"type": "usize"}}
					]
				},
				"Timer": {
					"external": "azul_impl::task::Timer",
					"struct_fields": [
						{"created": {"type": "Instant", "doc": "Stores when the timer was created (usually acquired by `Instant::now()`)"}},
						{"last_run": {"type": "OptionInstantPtr", "doc": "When the timer was last called (`None` only when the timer hasn't been called yet)"}},
						{"delay": {"type": "OptionInstantPtr", "doc": "If the timer shouldn't start instantly, but rather be delayed by a certain duration"}},
						{"interval": {"type": "OptionDuration", "doc": "How frequently the timer should run, i.e. set this to `Some(Duration::from_millis(16))` to run the timer every 16ms. If this value is set to `None`, (the default), the timer will execute the timer as-fast-as-possible (i.e. at a faster framerate than the framework itself) - which might be  performance intensive."}},
						{"timeout": {"type": "OptionDuration", "doc": "When to stop the timer (for example, you can stop the execution after 5s using `Some(Duration::from_secs(5))`)."}},
						{"callback": {"type": "TimerCallback", "doc": "Callback to be called for this timer"}}
					]
				},
				"TerminateTimer": {
					"external": "azul_impl::task::TerminateTimer",
					"derive": ["Copy"],
					"doc": "Should a timer terminate or not - used to remove active timers",
					"enum_fields": [
						{"Terminate": {"doc": "Remove the timer from the list of active timers"}},
						{"Continue": {"doc": "Do nothing and let the timers continue to run"}}
					]
				},
				"ThreadSender": {
					"external": "azul_impl::task::ThreadSender",
					"clone": false,
					"struct_fields": [
						{"ptr": {"type": "*const c_void"}}
					],
					"functions": {
						"send": {
							"fn_args": [
								{"self": "refmut"},
								{"msg": "ThreadReceiveMsg"}
							],
							"returns": "bool",
							"fn_body": "threadsender.send(msg)"
						}
					}
				},
				"ThreadReceiver": {
					"external": "azul_impl::task::ThreadReceiver",
					"clone": false,
					"struct_fields": [
						{"ptr": {"type": "*const c_void"}}
					],
					"functions": {
						"receive": {
							"fn_args": [
								{"self": "refmut"}
							],
							"returns": "OptionThreadSendMsg",
							"fn_body": "threadreceiver.recv().into()"
						}
					}
				},
				"ThreadSendMsg": {
					"external": "azul_impl::task::ThreadSendMsg",
					"derive": ["Copy"],
					"enum_fields": [
						{"TerminateThread": {}},
						{"Tick": {}}
					]
				},
				"ThreadReceiveMsg": {
					"external": "azul_impl::task::ThreadReceiveMsg",
					"clone": false,
					"enum_fields": [
						{"WriteBack": {"type": "ThreadWriteBackMsg"}},
						{"Update": {"type": "UpdateScreen"}}
					]
				},
				"ThreadWriteBackMsg": {
					"external": "azul_impl::task::ThreadWriteBackMsg",
					"clone": false,
					"struct_fields": [
						{"data": {"type": "RefAny"}},
						{"callback": {"type": "WriteBackCallback"}}
					]
				},
				"ThreadId": {
					"external": "azul_impl::task::ThreadId",
					"derive": ["Copy"],
					"struct_fields": [
						{"id": {"type": "usize"}}
					]
				}
			}
		},
		"window": {
			"doc": "Window creation / startup configuration",
			"classes": {
				"LayoutPoint": {
					"external": "azul_impl::css::LayoutPoint",
					"derive": ["Copy"],
					"struct_fields": [
						{"x": {"type": "isize"}},
						{"y": {"type": "isize"}}
					]
				},
				"LayoutSize": {
					"external": "azul_impl::css::LayoutSize",
					"derive": ["Copy"],
					"struct_fields": [
						{"width": {"type": "isize"}},
						{"height": {"type": "isize"}}
					]
				},
				"LayoutRect": {
					"external": "azul_impl::css::LayoutRect",
					"derive": ["Copy"],
					"struct_fields": [
						{"origin": {"type": "LayoutPoint"}},
						{"size": {"type": "LayoutSize"}}
					]
				},
				"RawWindowHandle": {
					"external": "azul_impl::window::RawWindowHandle",
					"derive": ["Copy"],
					"enum_fields": [
						{"IOS": {"type": "IOSHandle"}},
						{"MacOS": {"type": "MacOSHandle"}},
						{"Xlib": {"type": "XlibHandle"}},
						{"Xcb": {"type": "XcbHandle"}},
						{"Wayland": {"type": "WaylandHandle"}},
						{"Windows": {"type": "WindowsHandle"}},
						{"Web": {"type": "WebHandle"}},
						{"Android": {"type": "AndroidHandle"}},
						{"Unsupported": {}}
					]
				},
				"IOSHandle": {
					"external": "azul_impl::window::IOSHandle",
					"derive": ["Copy"],
					"struct_fields": [
						{"ui_window": {"type": "*mut c_void"}},
						{"ui_view": {"type": "*mut c_void"}},
						{"ui_view_controller": {"type": "*mut c_void"}}
					]
				},
				"MacOSHandle": {
					"external": "azul_impl::window::MacOSHandle",
					"derive": ["Copy"],
					"struct_fields": [
						{"ns_window": {"type": "*mut c_void"}},
						{"ns_view": {"type": "*mut c_void"}}
					]
				},
				"XlibHandle": {
					"external": "azul_impl::window::XlibHandle",
					"derive": ["Copy"],
					"struct_fields": [
						{"window": {"type": "u64", "doc": "An Xlib Window"}},
						{"display": {"type": "*mut c_void", "doc": "A pointer to an Xlib `Display`"}}
					]
				},
				"XcbHandle": {
					"external": "azul_impl::window::XcbHandle",
					"derive": ["Copy"],
					"struct_fields": [
						{"window": {"type": "u32", "doc": "An X11 `xcb_window_t`"}},
						{"connection": {"type": "*mut c_void", "doc": "A pointer to an X server `xcb_connection_t`"}}
					]
				},
				"WaylandHandle": {
					"external": "azul_impl::window::WaylandHandle",
					"derive": ["Copy"],
					"struct_fields": [
						{"surface": {"type": "*mut c_void", "doc": "A pointer to a `wl_surface`"}},
						{"display": {"type": "*mut c_void", "doc": "A pointer to a `wl_display`"}}
					]
				},
				"WindowsHandle": {
					"external": "azul_impl::window::WindowsHandle",
					"derive": ["Copy"],
					"struct_fields": [
						{"hwnd": {"type": "*mut c_void", "doc": "A Win32 HWND handle"}},
						{"hinstance": {"type": "*mut c_void", "doc": "The HINSTANCE associated with this type's HWND"}}
					]
				},
				"WebHandle": {
					"external": "azul_impl::window::WebHandle",
					"derive": ["Copy"],
					"struct_fields": [
						{"id": {"type": "u32", "doc": "An ID value inserted into the data attributes of the canvas element as 'raw-handle'. Invalid = 0."}}
					]
				},
				"AndroidHandle": {
					"external": "azul_impl::window::AndroidHandle",
					"derive": ["Copy"],
					"struct_fields": [
						{"a_native_window": {"type": "*mut c_void", "doc": "A pointer to an ANativeWindow"}}
					]
				},
				"TaskBarIcon": {
					"external": "azul_impl::window::TaskBarIcon",
					"struct_fields": [
						{"key": {"type": "IconKey"}},
						{"rgba_bytes": {"type": "U8Vec"}}
					]
				},
				"XWindowType": {
					"external": "azul_impl::window::XWindowType",
					"derive": ["Copy"],
					"enum_fields": [
						{"Desktop": {"doc": "A desktop feature. This can include a single window containing desktop icons with the same dimensions as the screen, allowing the desktop environment to have full control of the desktop, without the need for proxying root window clicks"}},
						{"Dock": {"doc": "A dock or panel feature. Typically a Window Manager would keep such windows on top of all other windows"}},
						{"Toolbar": {"doc": "Toolbar windows. \"Torn off\" from the main application"}},
						{"Menu": {"doc": "Pinnable menu windows. \"Torn off\" from the main application"}},
						{"Utility": {"doc": "A small persistent utility window, such as a palette or toolbox"}},
						{"Splash": {"doc": "The window is a splash screen displayed as an application is starting up"}},
						{"Dialog": {"doc": "This is a dialog window"}},
						{"DropdownMenu": {"doc": "A dropdown menu that usually appears when the user clicks on an item in a menu bar. This property is typically used on override-redirect windows."}},
						{"PopupMenu": {"doc": "A popup menu that usually appears when the user right clicks on an object. This property is typically used on override-redirect windows."}},
						{"Tooltip": {"doc": "A tooltip window. Usually used to show additional information when hovering over an object with the cursor. This property is typically used on override-redirect windows."}},
						{"Notification": {"doc": "The window is a notification. This property is typically used on override-redirect windows."}},
						{"Combo": {"doc": "This should be used on the windows that are popped up by combo boxes. This property is typically used on override-redirect windows."}},
						{"Dnd": {"doc": "This indicates the the window is being dragged. This property is typically used on override-redirect windows."}},
						{"Normal": {"doc": " This is a normal, top-level window"}}
					]
				},
				"PhysicalPositionI32": {
					"external": "azul_impl::window::PhysicalPosition<i32>",
					"derive": ["Copy"],
					"struct_fields": [
						{"x": {"type": "i32"}},
						{"y": {"type": "i32"}}
					]
				},
				"PhysicalSizeU32": {
					"external": "azul_impl::window::PhysicalSize<u32>",
					"derive": ["Copy"],
					"struct_fields": [
						{"width": {"type": "u32"}},
						{"height": {"type": "u32"}}
					]
				},
				"LogicalPosition": {
					"external": "azul_impl::window::LogicalPosition",
					"derive": ["Copy"],
					"struct_fields": [
						{"x": {"type": "f32"}},
						{"y": {"type": "f32"}}
					]
				},
				"LogicalRect": {
					"external": "azul_impl::window::LogicalRect",
					"derive": ["Copy"],
					"struct_fields": [
						{"origin": {"type": "LogicalPosition"}},
						{"size": {"type": "LogicalSize"}}
					]
				},
				"IconKey": {
					"external": "azul_impl::window::IconKey",
					"derive": ["Copy"],
					"struct_fields": [
						{"id": {"type": "usize"}}
					]
				},
				"SmallWindowIconBytes": {
					"external": "azul_impl::window::SmallWindowIconBytes",
					"struct_fields": [
						{"key": {"type": "IconKey"}},
						{"rgba_bytes": {"type": "U8Vec"}}
					]
				},
				"LargeWindowIconBytes": {
					"external": "azul_impl::window::LargeWindowIconBytes",
					"struct_fields": [
						{"key": {"type": "IconKey"}},
						{"rgba_bytes": {"type": "U8Vec"}}
					]
				},
				"WindowIcon": {
					"external": "azul_impl::window::WindowIcon",
					"enum_fields": [
						{"Small": {"type": "SmallWindowIconBytes"}},
						{"Large": {"type": "LargeWindowIconBytes"}}
					]
				},
				"TaskBarIcon": {
					"external": "azul_impl::window::TaskBarIcon",
					"struct_fields": [
						{"key": {"type": "IconKey"}},
						{"rgba_bytes": {"type": "U8Vec"}}
					]
				},
				"VirtualKeyCode": {
					"external": "azul_impl::window::VirtualKeyCode",
					"derive": ["Copy"],
					"enum_fields": [
						{"Key1": {}},
						{"Key2": {}},
						{"Key3": {}},
						{"Key4": {}},
						{"Key5": {}},
						{"Key6": {}},
						{"Key7": {}},
						{"Key8": {}},
						{"Key9": {}},
						{"Key0": {}},
						{"A": {}},
						{"B": {}},
						{"C": {}},
						{"D": {}},
						{"E": {}},
						{"F": {}},
						{"G": {}},
						{"H": {}},
						{"I": {}},
						{"J": {}},
						{"K": {}},
						{"L": {}},
						{"M": {}},
						{"N": {}},
						{"O": {}},
						{"P": {}},
						{"Q": {}},
						{"R": {}},
						{"S": {}},
						{"T": {}},
						{"U": {}},
						{"V": {}},
						{"W": {}},
						{"X": {}},
						{"Y": {}},
						{"Z": {}},
						{"Escape": {}},
						{"F1": {}},
						{"F2": {}},
						{"F3": {}},
						{"F4": {}},
						{"F5": {}},
						{"F6": {}},
						{"F7": {}},
						{"F8": {}},
						{"F9": {}},
						{"F10": {}},
						{"F11": {}},
						{"F12": {}},
						{"F13": {}},
						{"F14": {}},
						{"F15": {}},
						{"F16": {}},
						{"F17": {}},
						{"F18": {}},
						{"F19": {}},
						{"F20": {}},
						{"F21": {}},
						{"F22": {}},
						{"F23": {}},
						{"F24": {}},
						{"Snapshot": {}},
						{"Scroll": {}},
						{"Pause": {}},
						{"Insert": {}},
						{"Home": {}},
						{"Delete": {}},
						{"End": {}},
						{"PageDown": {}},
						{"PageUp": {}},
						{"Left": {}},
						{"Up": {}},
						{"Right": {}},
						{"Down": {}},
						{"Back": {}},
						{"Return": {}},
						{"Space": {}},
						{"Compose": {}},
						{"Caret": {}},
						{"Numlock": {}},
						{"Numpad0": {}},
						{"Numpad1": {}},
						{"Numpad2": {}},
						{"Numpad3": {}},
						{"Numpad4": {}},
						{"Numpad5": {}},
						{"Numpad6": {}},
						{"Numpad7": {}},
						{"Numpad8": {}},
						{"Numpad9": {}},
						{"NumpadAdd": {}},
						{"NumpadDivide": {}},
						{"NumpadDecimal": {}},
						{"NumpadComma": {}},
						{"NumpadEnter": {}},
						{"NumpadEquals": {}},
						{"NumpadMultiply": {}},
						{"NumpadSubtract": {}},
						{"AbntC1": {}},
						{"AbntC2": {}},
						{"Apostrophe": {}},
						{"Apps": {}},
						{"Asterisk": {}},
						{"At": {}},
						{"Ax": {}},
						{"Backslash": {}},
						{"Calculator": {}},
						{"Capital": {}},
						{"Colon": {}},
						{"Comma": {}},
						{"Convert": {}},
						{"Equals": {}},
						{"Grave": {}},
						{"Kana": {}},
						{"Kanji": {}},
						{"LAlt": {}},
						{"LBracket": {}},
						{"LControl": {}},
						{"LShift": {}},
						{"LWin": {}},
						{"Mail": {}},
						{"MediaSelect": {}},
						{"MediaStop": {}},
						{"Minus": {}},
						{"Mute": {}},
						{"MyComputer": {}},
						{"NavigateForward": {}},
						{"NavigateBackward": {}},
						{"NextTrack": {}},
						{"NoConvert": {}},
						{"OEM102": {}},
						{"Period": {}},
						{"PlayPause": {}},
						{"Plus": {}},
						{"Power": {}},
						{"PrevTrack": {}},
						{"RAlt": {}},
						{"RBracket": {}},
						{"RControl": {}},
						{"RShift": {}},
						{"RWin": {}},
						{"Semicolon": {}},
						{"Slash": {}},
						{"Sleep": {}},
						{"Stop": {}},
						{"Sysrq": {}},
						{"Tab": {}},
						{"Underline": {}},
						{"Unlabeled": {}},
						{"VolumeDown": {}},
						{"VolumeUp": {}},
						{"Wake": {}},
						{"WebBack": {}},
						{"WebFavorites": {}},
						{"WebForward": {}},
						{"WebHome": {}},
						{"WebRefresh": {}},
						{"WebSearch": {}},
						{"WebStop": {}},
						{"Yen": {}},
						{"Copy": {}},
						{"Paste": {}},
						{"Cut": {}}
					]
				},
				"AcceleratorKey": {
					"external": "azul_impl::window::AcceleratorKey",
					"derive": ["Copy"],
					"enum_fields": [
						{"Ctrl": {}},
						{"Alt": {}},
						{"Shift": {}},
						{"Key": {"type": "VirtualKeyCode"}}
					]
				},
				"WindowSize": {
					"external": "azul_impl::window::WindowSize",
					"derive": ["Copy"],
					"struct_fields": [
						{"dimensions": {"type": "LogicalSize"}},
						{"hidpi_factor": {"type": "f32"}},
						{"system_hidpi_factor": {"type": "f32"}},
						{"min_dimensions": {"type": "OptionLogicalSize"}},
						{"max_dimensions": {"type": "OptionLogicalSize"}}
					]
				},
				"WindowFlags": {
					"external": "azul_impl::window::WindowFlags",
					"derive": ["Copy"],
					"struct_fields": [
						{"is_maximized": {"type": "bool", "doc": "Is the window currently maximized"}},
						{"is_minimized": {"type": "bool", "doc": "Is the window currently minimized"}},
						{"is_about_to_close": {"type": "bool", "doc": "Is the window about to close on the next frame? Setting this to true will close the window."}},
						{"is_fullscreen": {"type": "bool", "doc": "Is the window currently fullscreened?"}},
						{"has_decorations": {"type": "bool", "doc": "Does the window have decorations (close, minimize, maximize, title bar)?"}},
						{"is_visible": {"type": "bool", "doc": "Is the window currently visible?"}},
						{"is_always_on_top": {"type": "bool", "doc": "Is the window always on top?"}},
						{"is_resizable": {"type": "bool", "doc": "Whether the window is resizable"}},
						{"has_focus": {"type": "bool", "doc": "Whether the window is currently focused (changing this field will request user attention)"}},
						{"has_blur_behind_window": {"type": "bool", "doc": "Whether the window has a background blur"}}
					]
				},
				"DebugState": {
					"external": "azul_impl::window::DebugState",
					"struct_fields": [
						{"profiler_dbg": {"type": "bool", "doc": "Toggles `webrender::DebugFlags::PROFILER_DBG`"}},
						{"render_target_dbg": {"type": "bool", "doc": "Toggles `webrender::DebugFlags::RENDER_TARGET_DBG`"}},
						{"texture_cache_dbg": {"type": "bool", "doc": "Toggles `webrender::DebugFlags::TEXTURE_CACHE_DBG`"}},
						{"gpu_time_queries": {"type": "bool", "doc": "Toggles `webrender::DebugFlags::GPU_TIME_QUERIES`"}},
						{"gpu_sample_queries": {"type": "bool", "doc": "Toggles `webrender::DebugFlags::GPU_SAMPLE_QUERIES`"}},
						{"disable_batching": {"type": "bool", "doc": "Toggles `webrender::DebugFlags::DISABLE_BATCHING`"}},
						{"epochs": {"type": "bool", "doc": "Toggles `webrender::DebugFlags::EPOCHS`"}},
						{"compact_profiler": {"type": "bool", "doc": "Toggles `webrender::DebugFlags::COMPACT_PROFILER`"}},
						{"echo_driver_messages": {"type": "bool", "doc": "Toggles `webrender::DebugFlags::ECHO_DRIVER_MESSAGES`"}},
						{"new_frame_indicator": {"type": "bool", "doc": "Toggles `webrender::DebugFlags::NEW_FRAME_INDICATOR`"}},
						{"new_scene_indicator": {"type": "bool", "doc": "Toggles `webrender::DebugFlags::NEW_SCENE_INDICATOR`"}},
						{"show_overdraw": {"type": "bool", "doc": "Toggles `webrender::DebugFlags::SHOW_OVERDRAW`"}},
						{"gpu_cache_dbg": {"type": "bool", "doc": "Toggles `webrender::DebugFlagsFGPU_CACHE_DBG`"}}
					]
				},
				"KeyboardState": {
					"external": "azul_impl::window::KeyboardState",
					"struct_fields": [
						{"shift_down": {"type": "bool", "doc": "Tracks, if the `Shift` key is currently pressed - (READONLY)"}},
						{"ctrl_down": {"type": "bool", "doc": "Tracks, if the `Ctrl` key is currently pressed - (READONLY)"}},
						{"alt_down": {"type": "bool", "doc": "Tracks, if the `Alt` key is currently pressed - (READONLY)"}},
						{"super_down": {"type": "bool", "doc": "Tracks, if the `Super / Windows / Command` key is currently pressed - (READONLY)"}},
						{"current_char": {"type": "OptionChar", "doc": "Currently pressed `char` - (READONLY)"}},
						{"current_virtual_keycode": {"type": "OptionVirtualKeyCode", "doc": "Currently pressed `VirtualKeyCode` - (READONLY). **DO NOT USE THIS FOR TEXT INPUT, USE `current_char` and `On::TextInput` instead.**"}},
						{"pressed_virtual_keycodes": {"type": "VirtualKeyCodeVec", "doc": "List of currently held-down `VirtualKeyCodes` - useful to implement combinated shortcuts (ex. `Ctrl + Shift + Right`)"}},
						{"pressed_scancodes": {"type": "ScanCodeVec", "doc": "List of currently held-down `ScanCode`s (typedef for `u32`). Same as `current_virtual_keycodes`, but the scancode identifies the physical key pressed, independent of the keyboard layout. The scancode does not change if the user adjusts the host's keyboard map. Use when the physical location of the key is more important than the key's host GUI semantics, such as for movement controls in a first-person game (German keyboard: Z key, UK keyboard: Y key, etc.)"}}
					]
				},
				"MouseCursorType": {
					"external": "azul_impl::window::MouseCursorType",
					"derive": ["Copy"],
					"enum_fields": [
					    {"Default": {}},
					    {"Crosshair": {}},
					    {"Hand": {}},
					    {"Arrow": {}},
					    {"Move": {}},
					    {"Text": {}},
					    {"Wait": {}},
					    {"Help": {}},
					    {"Progress": {}},
					    {"NotAllowed": {}},
					    {"ContextMenu": {}},
					    {"Cell": {}},
					    {"VerticalText": {}},
					    {"Alias": {}},
					    {"Copy": {}},
					    {"NoDrop": {}},
					    {"Grab": {}},
					    {"Grabbing": {}},
					    {"AllScroll": {}},
					    {"ZoomIn": {}},
					    {"ZoomOut": {}},
					    {"EResize": {}},
					    {"NResize": {}},
					    {"NeResize": {}},
					    {"NwResize": {}},
					    {"SResize": {}},
					    {"SeResize": {}},
					    {"SwResize": {}},
					    {"WResize": {}},
					    {"EwResize": {}},
					    {"NsResize": {}},
					    {"NeswResize": {}},
					    {"NwseResize": {}},
					    {"ColResize": {}},
					    {"RowResize": {}}
					]
				},
				"CursorPosition": {
					"external": "azul_impl::window::CursorPosition",
					"derive": ["Copy"],
					"enum_fields": [
						{"OutOfWindow": {}},
						{"Uninitialized": {}},
						{"InWindow": {"type": "LogicalPosition"}}
					]
				},
				"MouseState": {
					"external": "azul_impl::window::MouseState",
					"struct_fields": [
						{"mouse_cursor_type": {"type": "OptionMouseCursorType", "doc": "Current mouse cursor type, set to `None` if the cursor is hidden. (READWRITE)"}},
						{"cursor_position": {"type": "CursorPosition", "doc": "Current mouse cursor type, set to `None` if the cursor is hidden. (READWRITE)"}},
						{"is_cursor_locked": {"type": "bool", "doc": "Is the mouse cursor locked to the current window (important for applications like games)? (READWRITE)"}},
						{"left_down": {"type": "bool", "doc": "Is the left mouse button down? (READONLY)"}},
						{"right_down": {"type": "bool", "doc": "Is the right mouse button down? (READONLY)"}},
						{"middle_down": {"type": "bool", "doc": "Is the middle mouse button down? (READONLY)"}},
						{"scroll_x": {"type": "OptionF32", "doc": "Scroll amount in pixels in the horizontal direction. Gets reset to 0 after every frame (READONLY)"}},
						{"scroll_y": {"type": "OptionF32", "doc": "Scroll amount in pixels in the vertical direction. Gets reset to 0 after every frame (READONLY)"}}
					]
				},
				"PlatformSpecificOptions": {
					"external": "azul_impl::window::PlatformSpecificOptions",
					"struct_fields": [
						{"windows_options": {"type": "WindowsWindowOptions"}},
						{"linux_options": {"type": "LinuxWindowOptions"}},
						{"mac_options": {"type": "MacWindowOptions"}},
						{"wasm_options": {"type": "WasmWindowOptions"}}
					]
				},
				"WindowsWindowOptions": {
					"external": "azul_impl::window::WindowsWindowOptions",
					"struct_fields": [
						{"allow_drag_drop": {"type": "bool", "doc": "STARTUP ONLY: Whether the window should allow drag + drop operations (default: true)"}},
						{"no_redirection_bitmap": {"type": "bool", "doc": "STARTUP ONLY: Sets `WS_EX_NOREDIRECTIONBITMAP`"}},
						{"window_icon": {"type": "OptionWindowIcon", "doc": "STARTUP ONLY: Window icon (decoded bytes), usually 32x32x4 bytes large (`ICON_SMALL`), appears at the top right corner of the window"}},
						{"taskbar_icon": {"type": "OptionTaskBarIcon", "doc": "READWRITE: Taskbar icon (decoded bytes), usually 256x256x4 bytes large (`ICON_BIG`). Can be changed in callbacks / at runtime."}},
						{"parent_window": {"type": "OptionHwndHandle", "doc": "READWRITE: Taskbar icon (decoded bytes), usually 256x256x4 bytes large (`ICON_BIG`). Can be changed in callbacks / at runtime."}}
					]
				},
				"WaylandTheme": {
					"external": "azul_impl::window::WaylandTheme",
					"struct_fields": [
						{"primary_color_active": {"type": "[u8;4]", "doc": "Primary color when the window is focused"}},
						{"primary_color_inactive": {"type": "[u8;4]", "doc": "Primary color when the window is unfocused"}},
						{"secondary_color_active": {"type": "[u8;4]", "doc": "Secondary color when the window is focused"}},
						{"secondary_color_inactive": {"type": "[u8;4]", "doc": "Secondary color when the window is unfocused"}},
						{"close_button_color_idle": {"type": "[u8;4]", "doc": "Close button color (idle state)"}},
						{"close_button_color_hovered": {"type": "[u8;4]", "doc": "Close button color (hovered state)"}},
						{"close_button_color_disabled": {"type": "[u8;4]", "doc": "Close button color (disabled state)"}},
						{"maximize_button_color_idle": {"type": "[u8;4]", "doc": "Maximize button color (idle state)"}},
						{"maximize_button_color_hovered": {"type": "[u8;4]", "doc": "Maximize button color (hovered state)"}},
						{"maximize_button_color_disabled": {"type": "[u8;4]", "doc": "Maximize button color (disabled state)"}},
						{"minimize_button_color_idle": {"type": "[u8;4]", "doc": "Minimize button color (idle state)"}},
						{"minimize_button_color_hovered": {"type": "[u8;4]", "doc": "Minimize button color (hovered state)"}},
						{"minimize_button_color_disabled": {"type": "[u8;4]", "doc": "Minimize button color (disabled state)"}}
					]
				},
				"RendererType": {
					"external": "azul_impl::window::RendererType",
					"enum_fields": [
						{"Default": {"doc": "Use the hardware renderer first, then fall back to OSMesa"}},
						{"ForceHardware": {"doc": "Force hardware rendering (OpenGL 3.3 / OpenGL ES 3.0)"}},
						{"ForceSoftware": {"doc": "Force software rendering (not yet implemented)"}},
						{"Custom": {"type": "GlContextPtr", "doc": "Render using a custom OpenGL implementation"}}
					]
				},
				"StringPair": {
					"external": "azul_impl::window::AzStringPair",
					"struct_fields": [
						{"key": {"type": "String"}},
						{"value": {"type": "String"}}
					]
				},
				"LinuxWindowOptions": {
					"external": "azul_impl::window::LinuxWindowOptions",
					"struct_fields": [
						{"x11_visual": {"type": "OptionX11Visual", "doc": "Which X11 visual to use for the window (unimplemented). Can only be set at window creation, can't be changed in callbacks"}},
						{"x11_screen": {"type": "OptionI32", "doc": "Which screen to use when showing the window (unimplemented). Can only be set at window creation, can't be changed in callbacks"}},
						{"x11_wm_classes": {"type": "StringPairVec", "doc": "Build window with `WM_CLASS` hint; defaults to the name of the binary. Only relevant on X11. Can only be set at window creation, can't be changed in callbacks."}},
						{"x11_override_redirect": {"type": "bool", "doc": "Build window with override-redirect flag; defaults to false. Only relevant on X11. Can only be set at window creation, can't be changed in callbacks."}},
						{"x11_window_types": {"type": "XWindowTypeVec", "doc": "Build window with `_NET_WM_WINDOW_TYPE` hint; defaults to `Normal`. Only relevant on X11. Can only be set at window creation, can't be changed in callbacks."}},
						{"x11_gtk_theme_variant": {"type": "OptionString", "doc": "Build window with `_GTK_THEME_VARIANT` hint set to the specified value. Currently only relevant on X11. Can only be set at window creation, can't be changed in callbacks."}},
						{"x11_resize_increments": {"type": "OptionLogicalSize", "doc": "Build window with resize increment hint. Only implemented on X11. Can only be set at window creation, can't be changed in callbacks."}},
						{"x11_base_size": {"type": "OptionLogicalSize", "doc": "Build window with base size hint. Only implemented on X11. Can only be set at window creation, can't be changed in callbacks."}},
						{"wayland_app_id": {"type": "OptionString", "doc": "Build window with a given application ID. It should match the `.desktop` file distributed with the program. Only relevant on Wayland. Can only be set at window creation, can't be changed in callbacks."}},
						{"wayland_theme": {"type": "OptionWaylandTheme", "doc": "Window decoration of the window minimize / maximize / close buttons"}},
						{"request_user_attention": {"type": "bool", "doc": "Whether the window icon should blink to request the users attention."}},
						{"window_icon": {"type": "OptionWindowIcon", "doc": "Sets the window icon of the program"}}
					]
				},
				"MacWindowOptions": {
					"external": "azul_impl::window::MacWindowOptions",
					"derive": ["Copy"],
					"struct_fields": [
						{"_reserved": {"type": "u8", "doc": "Reserved empty field"}}
					]
				},
				"WasmWindowOptions": {
					"external": "azul_impl::window::WasmWindowOptions",
					"derive": ["Copy"],
					"struct_fields": [
						{"_reserved": {"type": "u8", "doc": "Reserved empty field"}}
					]
				},
				"FullScreenMode": {
					"external": "azul_impl::window::FullScreenMode",
					"derive": ["Copy"],
					"enum_fields": [
						{"SlowFullScreen": {"doc": "- macOS: If the window is in windowed mode, transitions it slowly to fullscreen mode}\r\n- other: Does the same as `FastFullScreen`."}},
						{"FastFullScreen": {"doc": "Window should immediately go into fullscreen mode (on macOS this is not the default behaviour)."}},
						{"SlowWindowed": {"doc": "- macOS: If the window is in fullscreen mode, transitions slowly back to windowed state.\r\n- other: Does the same as `FastWindowed`."}},
						{"FastWindowed": {"doc": "If the window is in fullscreen mode, will immediately go back to windowed mode (on macOS this is not the default behaviour)."}}
					]
				},
				"WindowTheme": {
					"external": "azul_impl::window::WindowTheme",
					"derive": ["Copy"],
					"enum_fields": [
						{"DarkMode": {}},
						{"LightMode": {}}
					]
				},
				"WindowPosition": {
					"external": "azul_impl::window::WindowPosition",
					"derive": ["Copy"],
					"enum_fields": [
						{"Uninitialized": {}},
						{"Initialized": {"type": "PhysicalPositionI32"}}
					]
				},
				"ImePosition": {
					"external": "azul_impl::window::ImePosition",
					"derive": ["Copy"],
					"enum_fields": [
						{"Uninitialized": {}},
						{"Initialized": {"type": "LogicalPosition"}}
					]
				},
				"TouchState": {
					"external": "azul_impl::window::TouchState",
					"derive": ["Copy"],
					"struct_fields": [
						{"unused": {"type": "u8"}}
					]
				},
				"WindowState": {
					"external": "azul_impl::window::WindowState",
					"struct_fields": [
						{"theme": {"type": "WindowTheme", "doc": "Current theme of the window (dark or light mode)"}},
						{"title": {"type": "String", "doc": "Current title of the window"}},
						{"size": {"type": "WindowSize", "doc": "Size of the window + max width / max height: 800 x 600 by default"}},
						{"position": {"type": "WindowPosition", "doc": "The x and y position, or None to let the WM decide where to put the window (default)"}},
						{"flags": {"type": "WindowFlags", "doc": "Flags such as whether the window is minimized / maximized, fullscreen, etc."}},
						{"debug_state": {"type": "DebugState", "doc": "Mostly used for debugging, shows WebRender-builtin graphs on the screen. Used for performance monitoring and displaying frame times (rendering-only)."}},
						{"keyboard_state": {"type": "KeyboardState", "doc": "Current keyboard state - NOTE: mutating this field (currently) does nothing (doesn't get synchronized with OS-level window)!"}},
						{"mouse_state": {"type": "MouseState", "doc": "Current mouse state"}},
						{"touch_state": {"type": "TouchState", "doc": "Current touch state, stores all states of currently connected touch input devices, pencils, tablets, etc. - NOTE: readonly field - mutating this field will not get synchronized with the OS"}},
						{"ime_position": {"type": "ImePosition", "doc": "Sets location of IME candidate box in client area coordinates (relative to the top left of the window)"}},
						{"platform_specific_options": {"type": "PlatformSpecificOptions", "doc": "Window options that can only be set on a certain platform (`WindowsWindowOptions` / `LinuxWindowOptions` / `MacWindowOptions`)."}},
						{"background_color": {"type": "ColorU", "doc": "Color of the window background (can be transparent if necessary)"}},
						{"layout_callback": {"type": "LayoutCallback"}}
					],
					"constructors": {
						"new": {
							"fn_args":[
								{"layout_callback": "LayoutCallbackType"}
							],
							"fn_body": "WindowState::new(layout_callback)"
						}
					}
				},
				"LogicalSize": {
					"external": "azul_impl::window::LogicalSize",
					"derive": ["Copy"],
					"struct_fields": [
						{"width": {"type": "f32"}},
						{"height": {"type": "f32"}}
					]
				},
				"WindowCreateOptions": {
					"external": "azul_impl::window::WindowCreateOptions",
					"struct_fields": [
						{"state": {"type": "WindowState"}},
						{"renderer_type": {"type": "RendererType"}},
						{"theme": {"type": "OptionWindowTheme"}}
					],
					"constructors": {
						"new": {
							"fn_args":[
								{"layout_callback": "LayoutCallbackType"}
							],
							"fn_body":"WindowCreateOptions::new(layout_callback)"
						}
					}
				}
			}
		}
	}
}